{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SOFA Documentation","text":"<p>This documentation contains all information about SOFA, from historical presentation to developer instructions. It is automatically rendered in SOFA website: https://www.sofa-framework.org/doc</p>"},{"location":"#content","title":"Content","text":"<ul> <li>Getting Started: instructions about building and installing SOFA.</li> <li>Main Principles: everything you need to know about what is SOFA and how it works.</li> <li>Video Tutorials: list videos helping new users starting with SOFA.</li> <li>Using SOFA: how to use SOFA to build and run simulation scenes (user documentation).</li> <li>Programming with SOFA: how to write your own code and then contribute it to SOFA (developer documentation).</li> </ul>"},{"location":"#contribution","title":"Contribution","text":"<p>Everyone is very welcome to contribute to this documentation. Here are some information you have to read. Files are written in Markdown. If you don't understand the syntax, you can refer to this useful cheatsheet.</p>"},{"location":"#hierarchy","title":"Hierarchy","text":"<p>Files are parsed in alphabetical order to generate the online documentation. To change some file/folder order in the hierarchy, you can simply edit its number. - 10_Folder_A   - 10_File_AA.md   - 20_File_AB.md   - 30_File_AC.md - 20_Folder_B   - 21_File_BA.md</p> <p>Will become - Folder A   - File AA   - File AB   - File AC - Folder B   - File BA</p>"},{"location":"#naming","title":"Naming","text":"<p>Page title and URL depend on file name. File name become page title following this principles: 10_Folder_A -&gt; Folder A  and  10_File_AA.md -&gt; File AA File name become page url following this principles: 10_Folder_A -&gt; folder-a  and  10_File_AA.md -&gt; file-aa  </p> <p>WARNING: Changing file or folder names (except numbers and case) will change page URL. Use with caution.</p>"},{"location":"10_Getting_Started/15_Binaries/10_Binaries_instructions/","title":"Binaries instructions","text":"<p>\ufeffSOFA provides pre-compiled binaries, eliminating the need to compile the software from its source code. This simplifies the process for users to get started with SOFA. Below are detailed instructions on how to download, install, and execute SOFA:</p>"},{"location":"10_Getting_Started/15_Binaries/10_Binaries_instructions/#download","title":"Download","text":"<p>To download SOFA, visit the official SOFA website at https://www.sofa-framework.org/download/. On this page, you will find the latest version of SOFA. There are two types of files available, download one or the other:</p> <ul> <li>Installer Files: these files are designed for easy installation of SOFA, including all the necessary binaries, on your operating system.</li> <li>Zip Files: these files contain a folder with the SOFA application and its associated binaries.  </li> </ul> <p>If you choose the zip file option, extract its contents to access the SOFA application and binaries.</p> <p>If you require a specific version of SOFA, you can also find previous releases on the official SOFA GitHub repository at https://github.com/sofa-framework/sofa/releases.</p>"},{"location":"10_Getting_Started/15_Binaries/10_Binaries_instructions/#install","title":"Install","text":"<p>If you downloaded an installer file, simply run the file, and follow the installation process as you would for any other software application. This will ensure that SOFA is properly installed on your system.</p>"},{"location":"10_Getting_Started/15_Binaries/10_Binaries_instructions/#execute","title":"Execute","text":"<p>To run SOFA, locate and execute the application called <code>runSofa</code>. For more detailed information on how to use the application, you can refer to the official documentation on the SOFA website at https://www.sofa-framework.org/community/doc/using-sofa/runsofa/. This documentation will provide you with further guidance on using SOFA effectively.</p>"},{"location":"10_Getting_Started/15_Binaries/10_Binaries_instructions/#notes-for-macos-users","title":"Notes for MacOS Users","text":"<p>Unfortunately, MacOS binaries of SOFA are not code-signed. It means that MacOS adds a quarantine flag to the binaries when a user downloads them. The result is a warning window with the message \"runSofa cannot be opened because the developer cannot be verified.\", preventing to open the application.</p> <p>There are several solutions to run SOFA anyway:</p> <ul> <li>Build SOFA by yourself. MacOS does not add the quarantine flags on the local builds. See the instructions here.</li> <li>Run the following command:</li> </ul> <pre><code>xattr -dr com.apple.quarantine path/to/sofa/folder\n</code></pre> <p>with path/to/sofa/folder is the folder where the binaries of SOFA are located. This command removes the quarantine flags on the binary files.</p>"},{"location":"10_Getting_Started/20_Build/10_Linux/","title":"Linux","text":"<p>It is STRONGLY advised to read through this entire doc page before getting started.</p>"},{"location":"10_Getting_Started/20_Build/10_Linux/#preconfigured-docker-image","title":"Preconfigured Docker image","text":"<p>We provide preconfigured Docker images based on Ubuntu or Fedora. These images contain all the tools and dependencies needed to build SOFA. Feel free to use them and to propose your own versions on Docker Hub!</p> <p>Ubuntu image: https://hub.docker.com/r/sofaframework/sofabuilder_ubuntu</p> <p>Fedora image: https://hub.docker.com/r/sofaframework/sofabuilder_fedora</p>"},{"location":"10_Getting_Started/20_Build/10_Linux/#supported-linux-version","title":"Supported Linux version","text":"<p>SOFA policy is to support only the latest Ubuntu LTS.</p>"},{"location":"10_Getting_Started/20_Build/10_Linux/#build-tools","title":"Build tools","text":""},{"location":"10_Getting_Started/20_Build/10_Linux/#compiler","title":"Compiler","text":"<p>SOFA requires a C++17 compatible compiler. On Linux, we officially support GCC &gt;= 7 and Clang &gt;= 5.  </p> <p>First, install the standard compilation toolkit with this command:</p> <pre><code>sudo apt install build-essential software-properties-common\n</code></pre>"},{"location":"10_Getting_Started/20_Build/10_Linux/#gcc","title":"GCC","text":"<p>To know which GCC versions are available for your distribution, run this command: <pre><code>apt-cache search '^gcc-[0-9.]+$'\n</code></pre></p> <p>Then, install the latest one with the usual command (example with gcc-11): <pre><code>sudo apt install gcc-11\n</code></pre></p>"},{"location":"10_Getting_Started/20_Build/10_Linux/#clang","title":"Clang","text":"<p>Clang is an alternative to GCC. It compiles approximately two times faster! We recommend to install Clang 5 or newer.</p> <p>To know which Clang versions are available for your distribution, run this command: <pre><code>apt-cache search '^clang-[0-9.]+$'\n</code></pre></p> <p>Then, install the latest one with the usual command (example with clang-12): <pre><code>sudo apt install clang-12\n</code></pre></p>"},{"location":"10_Getting_Started/20_Build/10_Linux/#cmake-makefile-generator","title":"CMake: Makefile generator","text":"<p>CMake will be required to configure the SOFA project before compiling it. Note that SOFA requires at least CMake 3.22. <pre><code>sudo apt install cmake cmake-gui\n</code></pre></p>"},{"location":"10_Getting_Started/20_Build/10_Linux/#optional-ninja-build-system","title":"[optional] Ninja: build system","text":"<p>Ninja is an alternative to Make. It has a better handling of incremental builds.</p> <pre><code>sudo apt install ninja-build\n</code></pre>"},{"location":"10_Getting_Started/20_Build/10_Linux/#optional-ccache-caching-system","title":"[optional] CCache: caching system","text":"<p>We advise you to use ccache. It is by no means mandatory, but it will dramatically improve the compilation time if you make changes to SOFA.</p> <pre><code>sudo apt install ccache\n</code></pre>"},{"location":"10_Getting_Started/20_Build/10_Linux/#dependencies","title":"Dependencies","text":""},{"location":"10_Getting_Started/20_Build/10_Linux/#core-required","title":"Core (required)","text":"<p>SOFA requires some libraries:</p> <ul> <li> <p>tinyXML2 <pre><code>sudo apt install libtinyxml2-dev\n</code></pre></p> </li> <li> <p>Qt (&gt;= 5.12.0) with Charts and WebEngine     We recommend to install Qt in your user directory with the unified installer.     Make sure to enable Charts and WebEngine components. </p> </li> <li> <p>OpenGL <pre><code>sudo apt install libopengl0\n</code></pre></p> </li> <li> <p>Boost (&gt;= 1.65.1) <pre><code>sudo apt install libboost-all-dev\n</code></pre></p> </li> <li> <p>Python 3.10 + pip + numpy + scipy     <pre><code>sudo apt install python3.10-dev pybind11-dev\n</code></pre></p> <pre><code>sudo apt-get install python3.10-distutils \\\n&amp;&amp; curl -L https://bootstrap.pypa.io/pip/get-pip.py --output /tmp/get-pip3.py \\\n&amp;&amp; python3.10 /tmp/get-pip3.py \\\n&amp;&amp; python3.10 -m pip install --upgrade pip \\\n&amp;&amp; python3.10 -m pip install numpy scipy pybind11==2.9.1\n</code></pre> </li> <li> <p>Additional libraries: libPNG, libJPEG, libTIFF, Glew, Zlib  <pre><code>sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev\n</code></pre></p> </li> <li> <p>SOFA v20.06 and newer also need Eigen (&gt;= 3.2.10) <pre><code>sudo apt install libeigen3-dev\n</code></pre></p> </li> </ul>"},{"location":"10_Getting_Started/20_Build/10_Linux/#plugins-optional","title":"Plugins (optional)","text":"<p>SOFA plugins depend on libraries that are available in the official repositories. You probably don't need them all, but you might find it convenient to install them all and not worry about it later. This list does not cover all available SOFA plugins, only the ones that are built by our continuous integration platform.</p> <ul> <li>CGALPlugin <pre><code>sudo apt install libcgal-dev libcgal-qt5-dev\n</code></pre></li> <li>MeshSTEPLoader <pre><code>sudo apt install liboce-ocaf-dev\n</code></pre></li> <li>SofaAssimp <pre><code>sudo apt install libassimp-dev\n</code></pre></li> <li>SofaCUDA    The currently supported cuda version is 12.2    <pre><code>sudo apt install nvidia-cuda-toolkit\n</code></pre></li> <li>SofaHeadlessRecorder <pre><code>sudo apt install libavcodec-dev libavformat-dev libavutil-dev libswscale-dev\n</code></pre></li> <li>SofaPardisoSolver <pre><code>sudo apt install libblas-dev liblapack-dev\n</code></pre></li> </ul>"},{"location":"10_Getting_Started/20_Build/10_Linux/#building-sofa","title":"Building SOFA","text":""},{"location":"10_Getting_Started/20_Build/10_Linux/#setup-your-source-and-build-directories","title":"Setup your source and build directories","text":"<p>To set up clean repositories, we recommend to arrange the SOFA directories as follows:</p> <pre><code>sofa/\n\u251c\u2500\u2500 build/\n\u2502   \u251c\u2500\u2500 master/\n\u2502   \u2514\u2500\u2500 v23.12/\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 &lt; SOFA sources here &gt;\n</code></pre> <p>First, checkout the sources from Git repository:</p> <p>Get the current stable version on the v23.06 branch: <pre><code>git clone -b v23.12 https://github.com/sofa-framework/sofa.git sofa/src\n</code></pre></p> <p>OR get the development unstable version on the master branch: <pre><code>git clone -b master https://github.com/sofa-framework/sofa.git sofa/src\n</code></pre></p>"},{"location":"10_Getting_Started/20_Build/10_Linux/#generate-a-makefile-with-cmake","title":"Generate a Makefile with CMake","text":"<ol> <li> <p>Create build directories respecting the arrangement above.</p> </li> <li> <p>Run CMake-GUI and set source folder and build folder.</p> </li> <li> <p>Run Configure. A popup will ask you to specify the generator for the project.</p> </li> <li> <p>If you installed Ninja, select \"Ninja\".</p> </li> <li> <p>Otherwise, select \"Unix Makefile\".</p> </li> <li> <p>Choose \"Specify native compilers\" and press \"Next\"</p> </li> <li> <p>Set the C compiler to <code>/usr/bin/gcc</code> or <code>/usr/bin/clang</code>    Set the C++ compiler to <code>/usr/bin/g++</code> or <code>/usr/bin/clang++</code></p> </li> <li> <p>Run Configure.</p> </li> <li> <p>Fix eventual dependency errors by following CMake messages (see Troubleshooting section below). Do not worry about warnings.</p> </li> <li> <p>(optional) Customize SOFA via CMake variables</p> </li> <li> <p>choose the build type by setting CMAKE_BUILD_TYPE to \"Release\" or \"RelWithDebInfo\" (recommended) or \"Debug\"   </p> </li> <li>activate or deactivate plugins: see PLUGIN_XXX variables</li> <li>activate or deactivate functionalities: see SOFA_XXX variables</li> </ol> <p>Do not forget to Configure again to check if your changes are valid.</p> <ol> <li>When you are ready, run Generate.</li> </ol>"},{"location":"10_Getting_Started/20_Build/10_Linux/#compile","title":"Compile","text":"<p>To compile, open a terminal in your build directory and run <code>make</code> or <code>ninja</code> depending on the generator you chose during CMake configuration. If you chose \"Unix Makefile\" as generator, you can enable parallel compilation by specifying the number of parallel build you want by adding the <code>-j n</code> option with <code>n</code> being the number of desired parallel jobs.  This is set automatically to the highest possible by <code>ninja</code>, but this can be modified in the same way as for <code>make</code>. </p> <p>Time for a coffee!</p>"},{"location":"10_Getting_Started/20_Build/10_Linux/#troubleshooting-cmake-errors","title":"Troubleshooting CMake errors","text":""},{"location":"10_Getting_Started/20_Build/10_Linux/#qt-detection-error","title":"Qt detection error","text":"<p>To solve Qt detection errors, click on Add Entry and add <code>CMAKE_PREFIX_PATH</code> with path <code>/home/YOUR_USERNAME/Qt/QT_VERSION/COMPILER</code> matching your Qt installation. Example: <code>CMAKE_PREFIX_PATH=/home/bob/Qt/5.15/gcc_64</code> </p> <p>Then, Configure again.</p> <p>A further dev warning may appear:</p> <pre><code>CMake Warning (dev) at YOUR_QT_PATH/lib/cmake/Qt5Core/Qt5CoreMacros.cmake:224 (configure_file):\nconfigure_file called with unknown argument(s):\n\nCOPY_ONLY\n\nCall Stack (most recent call first):\napplications/projects/Modeler/exec/CMakeLists.txt:14 (qt5_add_resources)\n</code></pre> <p>This is just a typo with Qt5CoreMacros.cmake file. It uses COPY_ONLY instead of COPYONLY. Simply edit your Qt5CoreMacros.cmake, replace COPY_ONLY with COPYONLY and Configure again.</p>"},{"location":"10_Getting_Started/20_Build/10_Linux/#compilation-tutorial","title":"Compilation tutorial","text":"<p>See our page presenting video tutorial for compilation on Linux.</p>"},{"location":"10_Getting_Started/20_Build/20_MacOS/","title":"MacOS","text":"<p>It is STRONGLY advised to read through this entire doc page before getting started.</p>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#preconfigured-docker-image","title":"Preconfigured Docker image","text":"<p>Unfortunately, no Docker image has been created yet for MacOS. This may come in a near future, to be continued...</p>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#build-tools","title":"Build tools","text":""},{"location":"10_Getting_Started/20_Build/20_MacOS/#compiler","title":"Compiler","text":"<p>SOFA requires a C++17 compatible compiler. On MacOS, we officially support MacOS &gt;= 10.13.2 (High Sierra) and AppleClang &gt;= 9.1.0.  </p> <p>Check your MacOS version with <code>system_profiler SPSoftwareDataType</code> Check your AppleClang version with <code>clang --version</code></p> <p>If your MacOS version is too low, update your Mac from the App Store.</p> <p>If your AppleClang version is too low:</p> <ol> <li> <p>Download and install the highest possible Xcode compatible with your MacOS.    Compatibility list (taken from Wikipedia): <pre><code>MacOS &gt;= 11.3    : Xcode 13.2.1 (with AppleClang 13.0.0)\nMacOS &gt;= 11.0    : Xcode 12.5.1 (with AppleClang 12.0.5)\nMacOS &gt;= 10.15.4 : Xcode 12.4   (with AppleClang 12.0.0)   \nMacOS &gt;= 10.15.2 : Xcode 11.7   (with AppleClang 11.0.3)\nMacOS &gt;= 10.14.4 : Xcode 11.3.1 (with AppleClang 11.0.0)\nMacOS &gt;= 10.14.3 : Xcode 10.3   (with AppleClang 10.0.1)\nMacOS &gt;= 10.13.6 : Xcode 10.1   (with AppleClang 10.0.0)\nMacOS &gt;= 10.13.2 : Xcode 9.4.1  (with AppleClang  9.1.0)\n</code></pre>    To download any version, go to https://developer.apple.com/download/more/ and search for \"Xcode\".</p> </li> <li> <p>Open Xcode to automatically finalize installation</p> </li> <li> <p>In Xcode, navigate to \"Xcode &gt; Preferences &gt; Locations\" and set Command Line Tools to your Xcode version</p> </li> <li> <p>Verify Command Line Tools path: <code>xcode-select -p</code>    If it is not pointing to your Xcode, change it: <code>xcode-select --switch /Applications/Xcode.app</code></p> </li> <li> <p>Reboot</p> </li> </ol>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#cmake-makefile-generator","title":"CMake: Makefile generator","text":"<p>SOFA requires at least CMake 3.22.</p> <pre><code>brew install --cask cmake\n</code></pre>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#optional-ninja-build-system","title":"[optional] Ninja: build system","text":"<p>Ninja is an alternative to Make. It has a better handling of incremental builds.</p> <pre><code>brew install ninja\n</code></pre>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#optional-ccache-caching-system","title":"[optional] CCache: caching system","text":"<p>We advise you to use ccache. It is by no means mandatory, but it will dramatically improve the compilation time if you make changes to SOFA.</p> <pre><code>brew install ccache\n</code></pre>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#dependencies","title":"Dependencies","text":""},{"location":"10_Getting_Started/20_Build/20_MacOS/#core-required","title":"Core (required)","text":"<p>SOFA requires some libraries: -  tinyXML2 <pre><code>brew install tinyxml2\n</code></pre></p> <ul> <li> <p>Qt (&gt;= 5.12.0) with Charts and WebEngine      We recommend to install Qt in your user directory with the unified installer.     Make sure to enable Charts and WebEngine components. </p> </li> <li> <p>Boost (&gt;= 1.65.1) <pre><code>brew install boost\n</code></pre></p> </li> <li> <p>Python 3.10 + pip + numpy + scipy     <pre><code>brew install python@3.10\nbrew link --force python@3.10\npython3 -m pip install --upgrade pip\npython3 -m pip install numpy scipy\nbrew install pybind11\n</code></pre></p> </li> <li> <p>Additional libraries: libPNG, libJPEG, libTIFF, Glew  <pre><code>brew install libpng libjpeg libtiff glew\n</code></pre></p> </li> <li> <p>SOFA v20.06 and newer also need Eigen (&gt;= 3.2.10) <pre><code>brew install eigen\n</code></pre></p> </li> </ul>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#plugins-optional","title":"Plugins (optional)","text":"<p>SOFA plugins depend on libraries that are available in the official repositories. You probably don't need them all, but you might find it convenient to install them all and not worry about it later. This list does not cover all available SOFA plugins, only the ones that are built by our continuous integration platform.</p> <ul> <li>CGALPlugin <pre><code>brew install cgal\n</code></pre></li> <li>MeshSTEPLoader <pre><code>brew install opencascade\n</code></pre></li> <li>SofaAssimp <pre><code>brew install assimp\n</code></pre></li> <li>SofaCUDA <pre><code>brew install homebrew/cask-drivers/nvidia-cuda\n</code></pre></li> <li>SofaPardisoSolver <pre><code>brew install lapack\n</code></pre></li> </ul>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#building-sofa","title":"Building SOFA","text":""},{"location":"10_Getting_Started/20_Build/20_MacOS/#setup-your-source-and-build-directories","title":"Setup your source and build directories","text":"<p>To set up clean repositories, we recommend to arrange the SOFA directories as follows:</p> <pre><code>sofa/\n\u251c\u2500\u2500 build/\n\u2502   \u251c\u2500\u2500 master/\n\u2502   \u2514\u2500\u2500 v23.06/\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 &lt; SOFA sources here &gt;\n</code></pre> <p>First, checkout the sources from Git repository:</p> <p>Get the current stable version on the v23.06 branch: <pre><code>git clone -b v23.12 https://github.com/sofa-framework/sofa.git sofa/src\n</code></pre></p> <p>OR get the development unstable version on the master branch: <pre><code>git clone -b master https://github.com/sofa-framework/sofa.git sofa/src\n</code></pre></p>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#generate-a-makefile-with-cmake","title":"Generate a Makefile with CMake","text":"<ol> <li> <p>Create build directories respecting the arrangement above.</p> </li> <li> <p>Run CMake.app and set source folder and build folder.</p> </li> <li> <p>Run Configure. A popup will ask you to specify the generator for the project.</p> </li> <li> <p>If you installed Ninja (recommended), select \"CodeBlocks - Ninja\".</p> </li> <li> <p>Otherwise, select \"CodeBlocks - Unix Makefile\".</p> </li> <li> <p>Keep \"Use default native compilers\" and press \"Done\".</p> </li> <li> <p>Fix eventual dependency errors by following CMake messages (see Troubleshooting section below). Do not worry about warnings.</p> </li> <li> <p>Customize SOFA via CMake variables</p> </li> <li> <p>choose the build type by setting CMAKE_BUILD_TYPE to \"Release\" or \"RelWithDebInfo\" (recommended) or \"Debug\"</p> </li> <li>if your Mac has a M1 processor: set CMAKE_OSX_ARCHITECTURES to \"arm64\"</li> <li>activate or deactivate plugins: see PLUGIN_XXX variables</li> <li>activate or deactivate functionalities: see SOFA_XXX variables</li> </ol> <p>Do not forget to Configure again to check if your changes are valid.</p> <ol> <li>When you are ready, run Generate.</li> </ol>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#compile","title":"Compile","text":"<p>To compile, open a terminal in your build directory and run <code>make</code> or <code>ninja</code> depending on the generator you chose during CMake configuration. Do not forget the <code>-j</code> option to use all your CPU cores.</p> <p>Time for a coffee!</p>"},{"location":"10_Getting_Started/20_Build/20_MacOS/#troubleshooting-cmake-errors","title":"Troubleshooting CMake errors","text":""},{"location":"10_Getting_Started/20_Build/20_MacOS/#qt-detection-error","title":"Qt detection error","text":"<p>To solve Qt detection errors, click on Add Entry and add <code>CMAKE_PREFIX_PATH</code> with path <code>/home/YOUR_USERNAME/Qt/QT_VERSION/COMPILER</code> matching your Qt architecture. Example: <code>CMAKE_PREFIX_PATH=/home/bob/Qt/5.7/gcc_64</code> Configure again.</p> <p>A further dev warning may appear:</p> <pre><code>CMake Warning (dev) at YOUR_QT_PATH/lib/cmake/Qt5Core/Qt5CoreMacros.cmake:224 (configure_file):\nconfigure_file called with unknown argument(s):\n\nCOPY_ONLY\n\nCall Stack (most recent call first):\napplications/projects/Modeler/exec/CMakeLists.txt:14 (qt5_add_resources)\n</code></pre> <p>This is just a typo with Qt5CoreMacros.cmake file. It uses COPY_ONLY instead of COPYONLY. Simply edit your Qt5CoreMacros.cmake, replace COPY_ONLY with COPYONLY and Configure again.</p>"},{"location":"10_Getting_Started/20_Build/30_Windows/","title":"Windows","text":"<p>It is STRONGLY advised to read through this entire doc page before getting started.</p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#setup-script","title":"Setup script","text":"<p>To simplify the configuration of our continuous integration machines, we created a complete set of setup scripts.</p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#warning-use-at-your-own-risks","title":"WARNING: USE AT YOUR OWN RISKS","text":"<p>These scripts install a lot of software directly in <code>C:\\</code> without any prealable check. It is meant to be used on a fresh Windows. We use it on disposable virtual machines only.  </p> <p>Setup script: I am aware of the disclaimer above</p> <p>The two scripts <code>setup-windows_1.bat</code> and <code>setup-windows_2.bat</code> install the minimum set of requirements.</p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#preconfigured-docker-image","title":"Preconfigured Docker image","text":"<p>Unfortunately, no Docker image has been created yet for Windows. This may come in a near future, to be continued...</p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#build-tools","title":"Build tools","text":""},{"location":"10_Getting_Started/20_Build/30_Windows/#compiler","title":"Compiler","text":"<p>SOFA requires a C++17 compatible compiler. On Windows, we officially support Microsoft Visual Studio &gt;= 2017 (version 15.7). If you want to use Visual Studio IDE, install the complete Visual Studio solution. If you want to use another IDE (like QtCreator), install the Build Tools only.</p> Visual Studio 2017 Visual Studio 2019 Visual Studio 2022 Build Tools only download download download IDE + Build Tools download download download <p>In the installer, you must enable:</p> <ol> <li>In the main panel: the C++ development toolkit, called \"C++ Build Tools\" or \"Desktop C++\".</li> <li>In the side panel: the C++ ATL and C++ MFC components.</li> </ol> <p></p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#cmake-makefile-generator","title":"CMake: Makefile generator","text":"<p>SOFA requires at least CMake 3.22.1. Install CMake with the latest official installer.</p> <p>IMPORTANT: check the option \"Add CMake to the system PATH for all users\" during the install process.</p> <p></p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#optional-ninja-build-system","title":"[optional] Ninja: build system","text":"<p>We strongly advise you to use Ninja if you chose to install the Build Tools only (no IDE).</p> <p>Ninja is an alternative to NMake. It has a better handling of incremental builds. You can download the latest release from their GitHub repository.</p> <p>IMPORTANT: do not forget to add ninja to your system PATH.</p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#dependencies","title":"Dependencies","text":""},{"location":"10_Getting_Started/20_Build/30_Windows/#core-required","title":"Core (required)","text":"<p>SOFA requires some libraries:</p> <ul> <li> <p>Qt (&gt;= 5.12.0) with Charts and WebEngine.     We recommend to install Qt in your user directory with the unified installer. </p> </li> <li> <p>Boost (&gt;= 1.65.1)     Download and install the latest version compatible with your Visual Studio from https://sourceforge.net/projects/boost/files/boost-binaries/.</p> <ul> <li>For Visual Studio 2022: choose boost_X_X_X-msvc-14.3-64.exe</li> <li>For Visual Studio 2019: choose boost_X_X_X-msvc-14.2-64.exe</li> <li>For Visual Studio 2017: choose boost_X_X_X-msvc-14.1-64.exe</li> </ul> </li> <li> <p>Python (= 3.10.x)     Download and install the latest Python 3.10 (amd64).     Then install the python dependencies. Run the following commands in cmd by replacing <code>path\\to\\Python310\\</code> by the path where python was installed on your OS.     <pre><code>path\\to\\Python310\\python.exe -m pip install --upgrade pip\npath\\to\\Python310\\python.exe -m pip install numpy scipy pybind11==2.9.1\n</code></pre></p> </li> <li> <p>Additional libraries: libPNG, libJPEG, libTIFF, Glew, Zlib, TinyXML2     Download the Windows dependency pack.     You will need to unzip it directly in SOFA sources (later in this tutorial).</p> </li> <li> <p>SOFA v20.06 and newer also need Eigen (&gt;= 3.2.10)     Download and extract the latest Eigen sources.</p> </li> </ul>"},{"location":"10_Getting_Started/20_Build/30_Windows/#optional-path-modification","title":"[optional] PATH modification","text":"<p>You can add Boost and Qt to your PATH to ease their detection by CMake. Boost: add <code>your/Boost/path</code> and <code>your/Boost/path/libXX-msvc-XX</code> Qt: add <code>your/Qt/path/msvcXXXX_XX/bin</code> and <code>your/Qt/path/msvcXXXX_XX/lib</code></p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#building-sofa","title":"Building SOFA","text":""},{"location":"10_Getting_Started/20_Build/30_Windows/#setup-your-source-and-build-directories","title":"Setup your source and build directories","text":"<p>To set up clean repositories, we recommend to arrange the SOFA directories as follows:</p> <pre><code>sofa/\n\u251c\u2500\u2500 build/\n\u2502   \u251c\u2500\u2500 master/\n\u2502   \u2514\u2500\u2500 v23.21/\n\u2514\u2500\u2500 src/\n    \u2514\u2500\u2500 &lt; SOFA sources here &gt;\n</code></pre> <p>First, checkout the sources from Git repository:</p> <p>Get the current stable version on the v23.06 branch: <pre><code>git clone -b v23.12 https://github.com/sofa-framework/sofa.git sofa/src\n</code></pre></p> <p>OR get the development unstable version on the master branch: <pre><code>git clone -b master https://github.com/sofa-framework/sofa.git sofa/src\n</code></pre></p> <p>Next, unzip the SOFA dependencies for Windows (downloaded before) directly in the sources <code>sofa/src/</code>.</p> <p>Finally, you should have something like this:</p> <p></p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#generate-a-vs-project-sln-or-a-makefile-with-cmake","title":"Generate a VS project (.sln) or a Makefile with CMake","text":"<ol> <li> <p>Create build directories respecting the arrangement above.</p> </li> <li> <p>In Windows Start menu, search for <code>Native Tools Command Prompt</code> and run the one corresponding to your Windows architecture (x64 for 64-bit, x86 for 32-bit). </p> </li> <li> <p>In the command prompt, type <code>cmake-gui</code> and press Enter.    If you get the error <code>'cmake-gui' is not recognized as an internal or external command</code>, it means that your system PATH does not correctly include the path to cmake-gui. In this case, you need to provide the full path to your cmake-gui.</p> </li> <li> <p>In CMake-GUI, set source folder and build folder.</p> </li> <li> <p>Run Configure.</p> </li> <li> <p>A popup will ask you to specify the generator for the project.</p> </li> <li> <p>If you want use Visual Studio IDE, select \"Visual Studio 15 2017 Win64\" or \"Visual Studio 16 2019 Win64\" (or without the \"Win64\" if you are on Windows 32-bit).</p> </li> <li>If you want to use another IDE like QtCreator, select \"CodeBlocks - Ninja\" (recommended, needs Ninja) or \"CodeBlocks - NMake\".</li> </ol> <p>Keep \"Use default native compilers\" and press \"Finish\".</p> <ol> <li> <p>Fix eventual dependency errors by following CMake messages (see Troubleshooting section below). Do not worry about warnings.</p> </li> <li> <p>e.g. define the <code>Eigen3_DIR</code> with the path where you installed Eigen</p> </li> <li> <p>(optional) Customize SOFA via CMake variables</p> </li> <li> <p>choose the build type by setting CMAKE_BUILD_TYPE to \"Release\" or \"RelWithDebInfo\" (recommended) or \"Debug\"</p> </li> <li>activate or deactivate plugins: see PLUGIN_XXX variables</li> <li>activate or deactivate features: see SOFA_XXX variables</li> </ol> <p>Do not forget to Configure again to check if your changes are valid.</p> <ol> <li>When you are ready, run Generate. In the build directory, this will create a Visual Studio project (.sln) or a Makefile depending on the generator you chose at step 4.</li> </ol>"},{"location":"10_Getting_Started/20_Build/30_Windows/#compile","title":"Compile","text":"<p>To build SOFA in Visual Studio, simply open the generated Sofa.sln. Finally, build the solution using the Visual Studio interface as shown in the image below:</p> <p></p> <p>If you chose another generator you will have to run the generator from the build directory.</p> <p>Example with Ninja:</p> <ul> <li>In Windows Start menu, search for <code>Native Tools Command Prompt</code> and run the one corresponding to your Windows architecture (x64 for 64-bit, x86 for 32-bit).</li> <li>Go to the build directory with <code>cd</code></li> <li>Run <code>ninja</code></li> </ul> <p>Time for a coffee!</p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#troubleshooting-cmake-errors","title":"Troubleshooting CMake errors","text":""},{"location":"10_Getting_Started/20_Build/30_Windows/#qt-detection-error","title":"Qt detection error","text":"<p>To solve Qt detection errors, click on Add Entry and add <code>CMAKE_PREFIX_PATH</code> with path to your Qt directory (navigate until msvcXXXX_XX directory). Example: <code>CMAKE_PREFIX_PATH=C:/dev/Qt/5.11.3/msvc2017_64</code> Configure again.</p> <p>A further dev warning may appear:</p> <pre><code>CMake Warning (dev) at YOUR_QT_PATH/lib/cmake/Qt5Core/Qt5CoreMacros.cmake:224 (configure_file):\nconfigure_file called with unknown argument(s):\n\nCOPY_ONLY\n\nCall Stack (most recent call first):\napplications/projects/Modeler/exec/CMakeLists.txt:14 (qt5_add_resources)\n</code></pre> <p>This is just a typo with Qt5CoreMacros.cmake file. It uses COPY_ONLY instead of COPYONLY. Simply edit your Qt5CoreMacros.cmake, replace COPY_ONLY with COPYONLY and Configure again.</p>"},{"location":"10_Getting_Started/20_Build/30_Windows/#compilation-tutorial","title":"Compilation tutorial","text":"<p>See our page presenting video tutorial for compilation on Windows.</p>"},{"location":"10_Getting_Started/20_Build/40_Build_Options/","title":"Build Options","text":"<p>This section explains how to modify the build configuration of SOFA and attempts to document the available options.</p>"},{"location":"10_Getting_Started/20_Build/40_Build_Options/#using-cmake","title":"Using CMake","text":"<p>CMake is a meta build system, that generates files for the build system used in your tool chain (e.g. Unix Makefiles, or a Visual Studio solution). Once you have created your build directory for SOFA, modifying build options goes like this:</p> <ul> <li>you modify options using cmake tools (either cmake-gui or ccmake,     see below)</li> <li>CMake runs the project's configuration scripts with the current     options (a.k.a. \"Configure\" in CMake tools)</li> <li>then CMake effectively generates the build system files (a.k.a.     \"Generate\" in CMake tools)</li> </ul>"},{"location":"10_Getting_Started/20_Build/40_Build_Options/#interactive-configuration","title":"Interactive configuration","text":"<p>CMake comes with both a GUI tool (cmake-gui) and a cursed based tool (ccmake) to modify the build options interactively. You can invoke them from the command line like so:</p> <pre><code> cmake-gui &lt;build-directory&gt;\n</code></pre> <p>or</p> <pre><code> ccmake &lt;build-directory&gt;\n</code></pre> <p>And on Windows, simply launch CMake GUI, and set the build directory field to the correct path if necessary. Using one of those tool, you can edit the options you want to change, and run \"Configure\" to run the configuration scripts. Note that the scripts are written to automatically enable any required dependencies when you change an option. If this happens, you will be warned at the end of the configuration step that you must run \"Configure\" again. Likewise, if any errors occurs during the configuration step, you have to run \"Configure\" again after you fix them. The general rule with the CMake configure part is that you have to hit \"Configure\" until no red-highlighted part is existing. Once you are satisfied with the options, and the configuration step succeeded without errors, run \"Generate\" to generate and write the build files to the build directory. You can then proceed to compile SOFA with your regular build tool. Tips:</p> <ul> <li>If some options were modified or added during the configuration step     (by the scripts), they are highlighted in cmake-gui;</li> <li>The list of options is pretty long; it may be easier to find what     you are looking for if you check the \"Grouped\" checkbox;</li> <li>Cmake stores the options in a cache (CMakeCache.txt) for the     next time you run any cmake tool. If you want to start over from the     default configuration, or choose a new generator, select File &gt;     Delete Cache.</li> </ul> <p>[caption id=\"attachment_1054\" align=\"aligncenter\" width=\"543\"]{.size-full .wp-image-1054 width=\"543\" height=\"500\"} cmake-gui typical view (on Mac OS X Yosemite)[/caption]</p>"},{"location":"10_Getting_Started/20_Build/40_Build_Options/#command-line-configuration","title":"Command-line configuration","text":"<p>When called directly, cmake does both the configuration and the generation steps. If you wish to modify the configuration from the command line (e.g. in a script), you can pass options to cmake with the -D flag. For example, if you know that the PLUGIN_SOFAPYTHON option enables the compilation of the SofaPython plugin, you can enable it like so:</p> <pre><code>cmake -DPLUGIN_SOFAPYTHON=ON &lt;build-directory&gt;\n</code></pre>"},{"location":"10_Getting_Started/20_Build/40_Build_Options/#configuration-options","title":"Configuration options","text":""},{"location":"10_Getting_Started/20_Build/40_Build_Options/#good-to-know","title":"Good to know","text":"<p>CMake option fields can be either a boolean, a file path, a directory path or a basic string. For instance, you can find in SOFA:</p> <ul> <li>The PLUGIN_* options correspond to the directories in     applications/plugins/</li> <li>The APPLICATION_* options correspond to the directories     in applications/projects/</li> <li>The TUTORIAL_* options correspond to the directories in     applications/tutorials/</li> </ul> <p>For example, the SofaPython plugin (applications/plugins/SofaPython) is enabled by the option PLUGIN_SOFAPYTHON, and the runSofa (applications/projects/runSofa) is enabled by the option APPLICATION_RUNSOFA.</p>"},{"location":"10_Getting_Started/20_Build/40_Build_Options/#sofa-cmake-options","title":"SOFA CMake options","text":"<ul> <li> <p>CMAKE_BUILD_TYPE : the typical values for that field are Release, RelWithDebInfo and Debug. Like the value is indicating, Release value indicates to compile in Release mode, with optimizations for speed, size of binaries. Debug value makes it compile with the debugging symbol activated and no code optimization. RelWithDebInfo is similar to Release, but keeps the symbol files for debugging.</p> </li> <li> <p>SOFA_EXTERNAL_DIRECTORIES: path to external directories, this can be especially useful to build external plugins with SOFA. For more information, please read the documentation about Building a plugin.</p> </li> <li> <p>SOFA_BUILD_TUTORIALS : this options activates the build of all tutorials located in applications/tutorials.</p> </li> <li> <p>SOFA_BUILD_TESTS : this option activates unit tests for SOFA. For more information, please go to the Tests page.</p> </li> <li> <p>SOFA_FLOATING_POINT_TYPE : this option determines the type(s) (float, double or both) used almost everywhere in SOFA when a floating point type is explicitly needed: the SReal type. This option also defines which \"versions\" of each templated component will be compiled (float, double or both instantiations). Note that using double will significantly reduce compilation time, but then you will only be able to simulate scenes that contain exclusively components using template parameters based on double (Vec3d, Rigid3d, ...). More technically, this will respectively activate or deactivate the macro SOFA_WITH_DOUBLE and SOFA_WITH_FLOAT in the code.</p> </li> <li> <p>SOFA_DUMP_VISITOR_INFO : enabling this option allows to get more debugging information at each step of the simulations. For a more complete description and how to use these information, please go to the Profiling part.</p> </li> <li> <p>SOFA_WITH_DEVTOOLS : enabling this option activates more features for developers such as more verbose log messages. It is enabled by default.</p> </li> <li> <p>SOFA_NO_EXTERN_TEMPLATE : this option (false by default) enables the use \"extern template\" in the code of SOFA. It will be always be activated for DLLs on windows. On some platforms, it can fix RTTI issues (typeid / dynamic_cast), and it significantly speeds up compilation and linking on every platform. More information here: Shared Libraries Mechanism.</p> </li> <li> <p>SOFA_NO_OPENGL : this option will remove any OpenGL-related code from SOFA. This is especially useful for people who wants to use SOFA as a library with a different rendering system (typically DirectX with Windows)</p> </li> <li> <p>SOFA_NO_UPDATE_BBOX : this optimization flag defines the default value of the boolean data <code>computeBoundingBox</code> in the AnimationLoop, defining whether the global bounding box of the scene is computed at each time step.</p> </li> <li> <p>SOFA_OPENMP (advanced) : this flag will allow to use OpenMP for specific computations in existing code. A few components are multithreaded with openmp pragmas. Sometimes hyperthreading gives strange results (slowing down the simulation). To get rid of hyperthreaded cores you have to tell openmp to run the application only on physical cores. When compiled with gcc, the environment variable GOMP_CPU_AFFINITY allows the core selection, where you can select physical cores only. (eg in bash: export GOMP_CPU_AFFINITY=\"0-15\"). The core indices can be obtained with the \"lstopo\" command (sudo apt-get install hwloc) Do not forget to limit the max number of cores with the OMP_NUM_THREADS environment variable (export OMP_NUM_THREADS=\"16\")</p> </li> <li> <p>SOFA_USE_MASK : this activates an optimization done to run simulation involving masks (a subpart of an object). However, this features is known as sensitive when used with constraint algorithms. Set false by default.</p> </li> <li> <p>SOFA_WITH_EXPERIMENTAL_FEATURES : activates some experimental work in progress. No guarantee on code quality or compilation is given. However, this gives early-access to new functionalities in SOFA.</p> </li> </ul>"},{"location":"10_Getting_Started/25_Video_Tutorials/10_How_to_compile_SOFA/","title":"How to compile SOFA","text":"<p>In order to assist you in the compilation of SOFA, we recorded a video detailing the steps to follow to download, but most importantly install SOFA sources.</p>"},{"location":"10_Getting_Started/25_Video_Tutorials/10_How_to_compile_SOFA/#linux","title":"Linux","text":"<p>In this video, the sources correspond to the master branch of SOFA. The operating system is a fresh XUbuntu (18.04).</p>"},{"location":"10_Getting_Started/25_Video_Tutorials/10_How_to_compile_SOFA/#windows","title":"Windows","text":"<p>Developers of the community also created a video to assist you to compile SOFA on Windows 10:</p>"},{"location":"10_Getting_Started/25_Video_Tutorials/20_How_to_compile_a_plugin/","title":"How to compile a plugin","text":"<p>In order to develop your own codes, SOFA allows to develop plugins separately from the SOFA open-source core. This tutorial shows how to organize and compile one or several plugins outside from SOFA.</p>"},{"location":"10_Getting_Started/25_Video_Tutorials/20_How_to_compile_a_plugin/#linux-with-sofa-sources","title":"Linux (with SOFA sources)","text":"<p>This video shows how to download and compile a plugin ( MyAwesomeComponents ) when you have a compiled version of SOFA. The operating system is a fresh XUbuntu (18.04). The plugin sources are located out from the SOFA sources, but compiled with SOFA.</p>"},{"location":"10_Getting_Started/25_Video_Tutorials/20_How_to_compile_a_plugin/#linux-with-sofa-binaries","title":"Linux (with SOFA binaries)","text":"<p>Coming soon.</p>"},{"location":"10_Getting_Started/25_Video_Tutorials/30_Introduction_course/","title":"Introduction course","text":"<p>In order to help you starting with SOFA, we recorded a video of the SOFA days. This first video presents an generic introduction to the main principles of SOFA. Find the associated presentation here (PDF version).</p> <p>2023 Tutorial (using SOFA v23.06):</p> <p>All SOFA tutorials are available here on our YouTube channel: Tutorial playlist.</p>"},{"location":"10_Getting_Started/25_Video_Tutorials/40_Step_by_Step/","title":"Step by Step","text":"<p>This video presents how to create a simulation in SOFA. Find the associated presentation here (PDF version)</p> <p>We hope these videos helped you understand the basis of SOFA. If you want to provide us any feedback, do not hesitate.</p>"},{"location":"15_Using_SOFA/05_Lexicography/","title":"Lexicography","text":""},{"location":"15_Using_SOFA/05_Lexicography/#library","title":"Library","text":"<p>Libraries are the central elements of SOFA. They define all SOFA framework mechanisms in Sofa/framework.</p> <p>Libraries do not contain Components. Libraries are not externalizable. They are all within SOFA sources. Some Libraries can be disabled via a CMake option.</p> <p>A Library can \"contain\" other Libraries. Technically, it will have link dependencies on those Libraries.</p> <p>From the system point of view, a Library is a dynamic library (.so or .dylib or .dll).</p> <p>Examples: Sofa.Core, Sofa.Type</p>"},{"location":"15_Using_SOFA/05_Lexicography/#module","title":"Module","text":"<p>Modules are the elements defining all usual SOFA features with Components in Sofa/Component. Modules can be loaded in a Simulation by the Plugin Manager via the Component <code>RequiredPlugin</code> in a scene, or the runSofa parameter <code>-l ModuleName</code>, or within the <code>plugin_list.conf</code> file.</p> <p>Modules contain Components. Modules are not externalizable. They are all within SOFA sources. Modules can be disabled via a CMake option. Most Modules are ON by default.</p> <p>A Module can \"contain\" other Modules and Libraries. Technically, it will have link dependencies on those Modules.</p> <p>From the system point of view, a Module is a dynamic library (.so or .dylib or .dll).</p> <p>Examples: Sofa.Component.Collision, Sofa.Component.Engine.Analyze, Sofa.Component.SolidMechanics</p>"},{"location":"15_Using_SOFA/05_Lexicography/#plugin","title":"Plugin","text":"<p>Plugins are optional Modules adding more SOFA features.</p> <p>Plugins contain Components. Plugins are externalizable. Some external plugins can be auto-fetched into SOFA sources. Plugins can be disabled via a CMake option. Most Plugins are OFF by default.</p> <p>A Plugin can \"contain\" other Modules and Libraries. Technically, it will have link dependencies on those Modules.</p> <p>From the system point of view, a Plugin is a dynamic library (.so or .dylib or .dll).</p> <p>Examples: SofaPython3, SofaCUDA, CImgPlugin</p>"},{"location":"15_Using_SOFA/05_Lexicography/#collection","title":"Collection","text":"<p>Collections are interfaces for sets of Modules and/or Libraries.</p> <p>Collections do not contain any code. Collections can be disabled via a CMake option.</p> <p>From the system point of view, a Collection is a dynamic library (.so or .dylib or .dll).</p> <p>Examples: SofaComponentAll, SofaBaseTopology, SofaGeneralMeshCollision</p>"},{"location":"15_Using_SOFA/05_Lexicography/#project","title":"Project","text":"<p>Projects are programs using parts of SOFA as dependency. The goal of Projects is to create tools based on SOFA.</p> <p>From the system point of view, a Project is an executable.</p> <p>Examples: runSofa, SofaPhysicsAPI</p>"},{"location":"15_Using_SOFA/05_Lexicography/#tutorial","title":"Tutorial","text":"<p>Tutorials are programs using parts of SOFA as dependency. The goal of Tutorials is to show how to build a Simulation with SOFA API.</p> <p>From the system point of view, a Tutorial is an executable.</p> <p>Examples: chainHybrid, oneTetrahedron</p>"},{"location":"15_Using_SOFA/05_Lexicography/#simulation","title":"Simulation","text":"<p>Simulation corresponds to the process computing the change of state of the physical systems, given their rest and initial state.</p>"},{"location":"15_Using_SOFA/05_Lexicography/#scene","title":"Scene","text":"<p>Scene denotes the graph structure (direct acyclic graph) describing the physical systems, their physical behavior, their properties and the numerical tools used for the computation. The Scene description starts with a root Node which then contains child Nodes (sub-Nodes). Each child Node of the root Node usually corresponds to one object (one physical system). Read more about the Scene graph </p>"},{"location":"15_Using_SOFA/05_Lexicography/#example","title":"Example","text":"<p>Example refers to set of Scene files provided with SOFA. These Scene files illustrate most of the SOFA components in a dedicated Simulation. They can be found within the examples/ folder in the SOFA sources or within the share/sofa/examples/ folder in the SOFA binaries.</p>"},{"location":"15_Using_SOFA/05_Lexicography/#unit-test","title":"Unit test","text":"<p>Scene tests correspond to C++ codes testing SOFA classes or parts of codes to assess their proper functioning. Unit tests can be triggered on each pull-request.</p>"},{"location":"15_Using_SOFA/05_Lexicography/#scene-test","title":"Scene test","text":"<p>Scene tests correspond to Scene files which are launched to check if the associated Simulations run without error. Scene tests can be triggered on each pull-request.</p>"},{"location":"15_Using_SOFA/05_Lexicography/#regression-test","title":"Regression test","text":"<p>Regression tests correspond to Scene files which Simulation result configuration was previously saved. These tests are launched to check if the Simulation remains consistent with the save Simulation result. Regression tests can be triggered on each pull-request.</p>"},{"location":"15_Using_SOFA/05_Lexicography/#node","title":"Node","text":"<p>Node defines a hierarchical level of the Scene graph. The root Node is the entry point of the simulation (first Node without any parent) and it may contain several child Nodes (sub-Nodes). Each child Node of the root Node usually corresponds to one object (one physical system). Generally, a Node can have many children and it may have several parent (except the root Node). An operation performed on a Node automatically propagates its effect to all of its child Nodes. The collection of all Nodes builds the Scene graph.</p>"},{"location":"15_Using_SOFA/05_Lexicography/#component","title":"Component","text":"<p>Component corresponds to C++ classes implementing specific physical models or algorithms. A Component must belong to a Node.</p>"},{"location":"15_Using_SOFA/05_Lexicography/#data","title":"Data","text":"<p>Data is a public attribute of a Component (C++ class) visible to the user in the SOFA user interface. For a physical model or an algorithm, a Data is a parameter available for the user (e.g. the total mass <code>totalMass</code> in a mass component). Data may be defined by the user (some are compulsory - a.k.a. required - else a warning will be sent), accessed and modified. Read more about Data.</p>"},{"location":"15_Using_SOFA/05_Lexicography/#datafield","title":"Datafield","text":"<p>DataField refers to a Data</p>"},{"location":"15_Using_SOFA/05_Lexicography/#link","title":"Link","text":"<p>Link corresponds to connection created between Data instances of two different Components. One Data may be link to one or several other Data (respectively called a SingleLink and a MultiLink). The network of interconnected Data objects defines a Data dependency graph, superimposed on the Scene graph.</p>"},{"location":"15_Using_SOFA/10_runSofa/","title":"runSofa","text":""},{"location":"15_Using_SOFA/10_runSofa/#runsofa","title":"runSOFA","text":"<p>The default compilation of SOFA produces a binary file called runSofa, which can be found in the folder %{SOFA_BUILD_DIR}/bin. The execution of the binary - either via the terminal or by double clicking the executable - launches a default XML scene with the name caduceus.scn, using the Qt library. </p>"},{"location":"15_Using_SOFA/10_runSofa/#launch-runsofa","title":"Launch runSOFA","text":"<p>The binary runSofa can be launched with different options, that can be enabled through the command line. You can display the different options available by using the argument \u2018-h\u2019 in the command line: <code>runSofa -h</code> We obtain the following output: <pre><code>This is a SOFA application. Here are the command line arguments (short name, long name, description, default value)\n    -h, --help: this help \n    -a, --start: start the animation loop  (default: false ) \n    -c, --computationTimeSampling: Frequency of display of the computation time statistics, in number of animation steps. 0 means never.  (default: 0 ) \n    -g, --gui: choose the UI (batch|glut|glut-mt|qglviewer|qt)  (default:  ) \n    -l, --load: load given plugins  (default: ) \n    -n, --nb_iterations: (only batch) Number of iterations of the simulation  (default: 1000 ) \n    -p, --factory: print factory logs  (default: false ) \n    -r, --recent: load most recently opened file  (default: false ) \n    -s, --simu: select the type of simulation (bgl, dag, tree, smp)  (default: tree ) \n    -t, --temporary: the loaded scene won't appear in history of opened files  (default: false ) \n    -v, --verification: load verification data for the scene  (default:  ) others: file names`\n</code></pre> When getting started with runSofa, the following options might be valuable for you:</p> <p>-a: runSofa starts the animation directly (no need to press on the animate button)</p> <p>-c: Displays interesting statistics about the computation time of the simulation. It is very useful to analyse the performance of your simulation, or to benchmark a plugin developed for SOFA. The value that follows the argument determines the number of simulation steps to wait for before dumping the statistics (-c 10 will display the logs every 10 simulation steps)</p> <p>-g allows you to choose between the existing user interfaces developed in SOFA: - qglviewer: default interface using Qt and with a 3D view using QGLViewer - qt: same but with an alternative viewer based on Qt only - batch: command line interface (only displays statistics)</p> <p>-l allows you to load a SOFA plugin by specifying its name</p> <p>-n specifies the number of simulation steps to run before closing runSofa. Can only be used with \u2013g batch.</p> <p>If using the shipped binaries of SOFA (or the default CMake options when compiling), the default GUI will be based on Qt/QGLViewer (same as using \u2013g qglviewer).</p>"},{"location":"15_Using_SOFA/10_runSofa/#load-and-run-a-specific-scene","title":"Load and run a specific scene","text":"<p>The default scene loaded by runSofa is named \u201ccaduceus.scn\u201d. This scene file can be found in %{SOFA_SOURCE_DIR}/examples/Demos, along with other demo scenes. Let us see now how to load one of these scenes:</p> <ul> <li>From the runSofa interface, you can select a scene file through     the \u201cFile-&gt;Open\u201d Menu (Ctrl+O), and run it by simply pressing the     \"animate\" button.</li> <li>If you are launching runSofa from the command line, you can also     specify the scene file to load as an argument.</li> </ul>"},{"location":"15_Using_SOFA/11_runSofa_with_Qt/","title":"runSofa with Qt","text":""},{"location":"15_Using_SOFA/11_runSofa_with_Qt/#how-to-use-the-sofa-gui-qt","title":"How to use the SOFA GUI (Qt)","text":"<p>To start the simulation, press Animate - the simulation speed in frames per second (fps) and the advancement of the simulation time in seconds (s) will show up in the left bottom corner. If there is a need for a simulation with a lower or higher detail of the time, then adapt the parameter dt. A stepwise advancing of the simulation with the stepsize dt can be achieved by clicking on \"Step\". In order to restart the scene use \"Reset Scene\". The camera of the visualization on the right hand side of the executable is controlled by the mouse movement and the:</p> <ul> <li>left mouse button to change the rotation of the camera</li> <li>right mouse button to translate the camera</li> <li>middle mouse button to zoom in and out.</li> </ul> <p>The camera position and orientation can be saved and recovered using the Save View and Reset View buttons respectively. A running simulation can be manipulated with the mouse movement, when clicking on the left mouse button and pressing the shift key. Further uses of the keyboard can be found in the tab \"Viewer\":</p> <ul> <li>B: TO CHANGE THE BACKGROUND</li> <li>C: TO SWITCH INTERACTION MODE: press the KEY C. Allow or not the     navigation with the mouse.</li> <li>O: TO EXPORT TO .OBJ The generated files scene-time.obj and     scene-time.mtl are saved in the running project directory</li> <li>P: TO SAVE A SEQUENCE OF OBJ Each time the frame is updated an     obj is exported</li> <li>R: TO DRAW THE SCENE AXIS</li> <li>S: TO SAVE A SCREENSHOT The captured images are saved in the     running project directory under the name format capturexxxx.bmp</li> <li>T: TO CHANGE BETWEEN A PERSPECTIVE OR AN ORTHOGRAPHIC CAMERA</li> <li> <p>(Shift+) V: TO SAVE A VIDEO. See the part on Video Recording</p> </li> <li> <p>Esc: TO QUIT ::sofa::</p> </li> </ul>"},{"location":"15_Using_SOFA/11_runSofa_with_Qt/#video-recording","title":"Video recording","text":""},{"location":"15_Using_SOFA/11_runSofa_with_Qt/#frames","title":"Frames","text":"<p>By default, Video recording consists in dumping each frame of rendering (so even if the simulation is paused, it it will record if you are moving the camera) in PNG (lossless). All frames are recorded in %{SOFA_DIR}/share/screenshots. If the folder does not exist, it needs to be created. If you wish to make a video with those images, you can use your favorite encoder (ffmpeg, libavi...). After pressing the \"V\" key in your interface, you should see something like that: <pre><code>[INFO]    [QtViewer] Saved 782x598 screen image to C:/Work/sofa/build/sandbox/screenshots/caduceus_00000001.png\n[INFO]    [QtViewer] Saved 782x598 screen image to C:/Work/sofa/build/sandbox/screenshots/caduceus_00000002.png\n....\n</code></pre> And the dumped PNG files will be located in the designated folder. Dumping will be stopped either if you quit the process, or press \"V\" again.</p>"},{"location":"15_Using_SOFA/11_runSofa_with_Qt/#video","title":"Video","text":"<p>You can choose instead to directly record a video using an external ffmpeg executable. This is not really recommended as you will not have a total control on the input, contrary to the previous way, i.e dump frames + using your own tool with your options.</p> <p>If it is still okay for you, you will need first to download ffmpeg on your system and tell SOFA its location by different means: 1. you set your system PATH with ffmpeg inside (it will the best choice for the Linux users) 2. you put ffmpeg(.exe) directly alongside runSofa (easiest solution) 3. you set the directory where ffmpeg is. Edit %{SOFA_DIR}/plugins/SofaGuiQt/etc/SofaGuiQt.ini and set the value of FFMPEG_EXEC_PATH</p> <p>Then in the interlace, you need to select the choice of writing directly a video file (Menu-&gt;Edit-&gt;Video Recorder Manager)  If everything is OK, you should see that in your console, when pressing the \"V\" key: <pre><code>Start recording to C:/Work/sofa/build/sandbox/screenshots/caduceus__r60_0001.mp4 ( yuv420p, 60 FPS, 5120000 b/s) using ffmpeg.exe\nffmpeg version 4.4-full_build-www.gyan.dev Copyright (c) 2000-2021 the FFmpeg developers\n  built with gcc 10.2.0 (Rev6, Built by MSYS2 project)\n  ...\n  frame=  132 fps= 25 q=-1.0 Lsize=     727kB time=00:00:02.15 bitrate=2771.1kbits/s speed=0.412x\n</code></pre> When you wish the finish, press \"V\" again and ffmpeg should close the file. <pre><code>...\n[libx264 @ 000001fc48715700] ref B L1: 97.7%  2.3%\n[libx264 @ 000001fc48715700] kb/s:2697.25\nC:/Work/sofa/build/sandbox/screenshots/caduceus__r60_0001.mp4 written\n</code></pre> and can obtain your video in the %{SOFA_DIR}/share/screenshots.</p>"},{"location":"15_Using_SOFA/20_Create_your_scene_in_XML/","title":"Write an XML scene","text":"<p>Now let's take a look at the scene file. Scene files are XML files that describes the scene graph for the simulation. By convention, scene files have extension \".scn\". You can find example scenes in the %{SOFA_DIR}/examples/Demo/ folder. This is where you will find the \"caduceus.scn\".</p> <p>As you can see, the content of a scene file is written in XML.</p> <p>To create the simulation tree, you need to create a scene graph using the XML format. XML is a very simple language that allows the hierarchical description of a graph. Each element contained between chevrons are called \"Tags\". There are 2 types of tags: Nodes, and Leaves.</p> <p>In terms of simulation, the Node tag is used to create a hierarchical level of modeling (e.g. behavior model, collision model, visual model etc.). A scene file always contains a root node, that encapsulates your whole graph, and defines some overall specificities for your simulation (e.g. gravity, dt, ...):</p> <pre><code>&lt;Node name=\"root\" gravity=\"0 -1000 0\" dt=\"0.04\"&gt;\n    &lt;Node name=\"Snake\"&gt;\n        &lt;!-- some XML code --&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Collis\"&gt;\n        &lt;!-- some collision-specific code --&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"VisuBody\" tags=\"Visual\" &gt;\n        &lt;!-- some rendering-specific code --&gt;\n    &lt;/Node&gt;\n    &lt;!-- some more code... --&gt;\n    &lt;Node name=\"Base\"&gt;\n        &lt;!-- some more code... --&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>Nodes can be nested, as it is the case with every nodes inside the root node, allowing you to separate the different parts of your scenes. Nodes by themselves though, are useless, unless you combine them with some of the large collection of components available in SOFA. Those components are \"leaves\", meaning that they cannot be nested. Leaves, must be contained inside the root node, or any other nodes in the scene graph.</p>"},{"location":"15_Using_SOFA/20_Create_your_scene_in_XML/#xml-properties-sofas-data-and-links","title":"XML properties: SOFA's data and links","text":"<p>As you can see in the scene file, nodes and components can have properties. In SOFA, xml properties are called Data, and allows you to access, and change some properties of the component it belongs to. This way for instance, a node can be activated or deactivated by setting its boolean data field activated to \"true\" or \"false\". Those data are the same parameters that you can find and modify in the \"property\" sheet of runSofa's interface.</p> <pre><code>&lt;Node name=\"Snake\" activated=\"true\" &gt;\n    &lt;!-- some code --&gt;\n&lt;/Node&gt;\n</code></pre> <p>{.wp-image-1035 width=\"277\" height=\"366\"}</p> <p>Moreover, dependency between Data containers of same nature can be speci\ufb01ed in the XML scene \ufb01les, indicating that the content of one container should be copied from the other, making the scene description fairly simple and above all ef\ufb01cient. To create this dependency, the flag \"@\" follow by the name of the source component should be used, as in following example:</p> <pre><code>&lt;Node name=\"myNode\"&gt;\n    &lt;MeshOBJLoader name=\"myLoader\" filename=\"mesh.obj\"/&gt;\n    &lt;MeshTopology name=\"myMesh\" src=\"@myLoader\"/&gt;\n&lt;/Node&gt;\n</code></pre> <p>The example above links the whole component \"myLoader\" to the property \"src\" of the component \"myMesh\". But it is also possible to link more specifically the data of a component to the data of another one, again, as long as those data are of the same type:</p> <pre><code>&lt;Node name=\"root\" gravity=\"0 -1000 0\" dt=\"0.04\"&gt;\n    &lt;Node name=\"Loader\"&gt;\n        &lt;MeshVTKLoader name=\"vtkLoader\" filename=\"liver\"/&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"MechanicalModel\"&gt;\n        &lt;MechanicalObject name=\"liverMO\" scale=\"1\" position=\"@../Loader/vtkLoader.position\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>The example above also shows the possibility to link to a component located in another node. Here, the component vtkLoader is not located in the same node as the mechanical object component. by using \"../Loader/\" before component's name we want to link with, we are going up from one node, search for the \"Loader\" node, look for the component \"vtkLoader\" in it, and finally link with its data labeled \"position\"</p> <p>Important note: It is not possible to link to a component that has not been yet declared in the scenegraph. In other words, a component in the XML file only knows about the components declared earlier in the file.</p>"},{"location":"15_Using_SOFA/20_Create_your_scene_in_XML/#split-your-scene-graph-into-multiple-files","title":"Split your scene graph into multiple files","text":"<p>It is possible to include other xml files inside your scn file. This allows you to fragment your code to get a clearer and cleaner view of your scene. This can be achieved using the tag. For instance, the \"caduceus.scn\" could look like this:</p> <pre><code>&lt;Node name=\"root\" gravity=\"0 -1000 0\" dt=\"0.04\"&gt;\n    &lt;VisualStyle displayFlags=\"showVisual  \"/&gt; &lt;!--showBehaviorModels showCollisionModels--&gt;\n    &lt;LCPConstraintSolver tolerance=\"1e-3\" initial_guess=\"false\" build_lcp=\"false\"  printLog=\"0\" mu=\"0.2\"/&gt;\n    &lt;FreeMotionAnimationLoop/&gt;\n    &lt;CollisionPipeline depth=\"15\" verbose=\"0\" draw=\"0\"/&gt;\n    &lt;BruteForceBroadPhase name=\"N2\"/&gt;\n    &lt;BVHNarrowPhase /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"1.5\" contactDistance=\"1\"/&gt;\n    &lt;LightManager/&gt;\n    &lt;SpotLight name=\"light1\" color=\"1 1 1\" position=\"0 80 25\" direction=\"0 -1 -0.8\" cutoff=\"30\" exponent=\"1\"/&gt;\n    &lt;SpotLight name=\"light2\" color=\"1 1 1\" position=\"0 40 100\" direction=\"0 0 -1\" cutoff=\"30\" exponent=\"1\"/&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"FrictionContactConstraint\"/&gt;\n\n    &lt;Node name=\"Snake\"&gt;\n        &lt;include href=\"snake.scn\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"Base\" &gt;\n        &lt;include href=\"base.scn\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>You would have the rest of the scene graph declared in two other files:</p> <ul> <li>snake.scn, containing the snake's graph</li> <li>base.scn, containing the pod's graph</li> </ul>"},{"location":"15_Using_SOFA/25_Create_your_scene_in_Cpp_/","title":"Create your scene in Cpp","text":"<p>See Programming with SOFA &gt; Create your scene in C++.</p>"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/","title":"SOFA-NG transition","text":""},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#project-timeline","title":"Project timeline","text":"<ul> <li>Github project for SOFA NG</li> <li>A GitHub issue was referencing all different PRs, the description of the task and the drafts for SOFA-NG</li> </ul>"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#components","title":"Components","text":"<p>SOFA-NG introduced new libraries, or more exactly replaces the previous \"modules\" (e.g. SofaBaseTopology, etc.), as it was deemed difficult for the new users to find a specific component in the code. Moreover, the dependencies between the module were difficult to manage and the sorting was seemingly weird because of unholy hard-dependency in the code.</p> <p>Since v22.06, a new architecture has been proposed and the SOFA team worked on a compatibility layer aiming at making the transition as smooth as possible for the community. Nevertheless, the compatibility layer might not cover some specifal cases. Do not hesitate to report your technical issues.</p> <p>We need to handle either the developers of new plugins designing components and simulations; and the \"normal\" users which only executes simulations. There are 3 layers to manage the compatibility: CMake configure process, at compile-time and at run-time:</p> <ul> <li>at run-time, highlighting that a component should be loaded from the new library and not the deprecated one (user and dev)</li> <li>in the CMake process, informing that the deprecated package should be replaced by which new library (dev only)</li> <li>at the compilation time, to warn the user that the path for a chosen header changed in the new architecture (dev only)</li> </ul>"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#cmake","title":"CMake","text":"<p>CMake packages for the deprecated modules throw warnings message at the configuration time and redirect to the new ones. Effectively, it does :</p> <pre><code>find_package(new_package1)\nfind_package(new_package2)\n...\ntarget_link_library(oldmodule new_package1 new_package2)\n</code></pre> <p>and it creates an empty shell of a project, dedicated to route the new includes and the new library (.lib, .so) to the new packages.</p>"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#compilation","title":"Compilation","text":"<p>One big package called Sofa.Component.Compat contains all the previous headers (with the previous paths), which merely redirects to the new paths and, if the case occurs, creates an alias of the component into the previous namespace.</p> <p>This is the most problematic case and where the compatibility is most likely to fail:</p> <ul> <li>C++ does not allow specialization of templated classes with aliases</li> <li>forward declaration in dev files will fail as well, as it is not possible to declare twice a class (first created by the alias and then by the forward declaration, or vice-versa)</li> <li>if one did not use explicitly the include of a header but was relying on the other file (e.g using <code>PointSetTopologyContainer</code> but was including <code>TriangleSetTopologyContainer</code>, which is using <code>PointSetTopologyContainer</code>), the compilation will fail.</li> </ul> <p>Obviously, if the move did not imply a change of namespace, the transition is much smoother (for example, with Controller from Sofa.Component.Controller)</p>"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#run-time","title":"Run-time","text":"<p>When a user loads a deprecated module in its scene (either by using <code>RequiredPlugin</code> or by manually loading it), the loading process will display a warning, advising to load the new modules, and then will load automatically the new one. This will allow the scene to still load, even if only the deprecated module was set.</p>"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#mapping-deprecated-modules-new-libraries","title":"Mapping deprecated modules \u2194 new libraries","text":""},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#sofabase","title":"SofaBase","text":"SofaBaseTopology Sofa.Component.Topology SofaBaseLinearSolver Sofa.Component.LinearSolver.Iterative SofaBaseUtils Sofa.Component.SceneUtility SofaBaseCollision Sofa.Component.Collision.Model Sofa.Component.Collision.Detection.Algorithm Sofa.Component.Collision.Detection.Intersection Sofa.Component.Collision.Response.Mapper Sofa.Component.Collision.Response.Contact SofaBaseMechanics Sofa.Component.Mass Sofa.Component.Mapping.Linear Sofa.Component.StateContainer SofaBaseTopology Sofa.Component.Topology.Container.Grid Sofa.Component.Topology.Container.Constant Sofa.Component.Topology.Container.Dynamic SofaBaseVisual Sofa.Component.Visual Sofa.Component.Setting"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#sofacommon","title":"SofaCommon","text":"SofaDeformable Sofa.Component.SolidMechanics.Spring SofaEngine Sofa.Component.Engine.Select SofaExplicitOdeSolver Sofa.Component.ODESolver.Forward SofaImplicitOdeSolver Sofa.Component.ODESolver.Backward SofaLoader Sofa.Component.IO.Mesh SofaObjectInteraction Sofa.Component.Collision.Response.Contact SofaMeshCollision Sofa.Component.Collision.Geometry Sofa.Component.Collision.Detection.Intersection Sofa.Component.Collision.Response.Mapper Sofa.Component.Collision.Response.Contact SofaRigid Sofa.Component.Mapping Sofa.Component.SolidMechanics.Spring SofaSimpleFem Sofa.Component.Diffusion Sofa.Component.SolidMechanics.FEM.Elastic"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#sofageneral","title":"SofaGeneral","text":"SofaGeneralExplicitOdeSolver Sofa.Component.ODESolver.Forward SofaGeneralImplicitOdeSolver Sofa.Component.ODESolver.Backward SofaGeneralRigid Sofa.Component.Mapping SofaGeneralSimpleFem Sofa.Component.SolidMechanics.FEM.Elastic SofaGeneralVisual Sofa.Component.Visual SofaBoundaryCondition Sofa.Component.Constraint.Projective Sofa.Component.MechanicalLoad SofaConstraint Sofa.Component.Mapping.MappedMatrix Sofa.Component.Constraint.Lagrangian.Model Sofa.Component.Constraint.Lagrangian.Correction Sofa.Component.Constraint.Lagrangian.Solver Sofa.Component.AnimationLoop Sofa.Component.Collision.Detection.Intersection Sofa.Component.Collision.Response.Contact Sofa.GUI.Component SofaGeneralAnimationLoop Sofa.Component.Mapping.MappedMatrix Sofa.Component.AnimationLoop SofaGeneralDeformable Sofa.Component.SolidMechanics.Spring Sofa.Component.SolidMechanics.TensorMass SofaGeneralEngine Sofa.Component.Engine.Analyze Sofa.Component.Engine.Generate Sofa.Component.Engine.Select Sofa.Component.Engine.Transform SofaGeneralLinearSolver Sofa.Component.LinearSolver.Iterative Sofa.Component.LinearSolver.Direct SofaGeneralLoader Sofa.Component.IO.Mesh Sofa.Component.Playback SofaGeneralMeshCollision Sofa.Component.Collision.Geometry Sofa.Component.Collision.Detection.Algorithm Sofa.Component.Collision.Detection.Intersection SofaGeneralObjectInteraction Sofa.Component.SolidMechanics.Spring Sofa.Component.Constraint.Projective Sofa.Component.MechanicalLoad SofaGeneralTopology Sofa.Component.Topology.Container.Grid Sofa.Component.Topology.Container.Constant SofaGraphComponent Sofa.Component.SceneUtility Sofa.Component.Setting Sofa.GUI.Component the plugin SceneChecking SofaUserInteraction Sofa.Component.Collision.Geometry Sofa.Component.Collision.Detection.Algorithm Sofa.Component.Collision.Detection.Intersection Sofa.Component.Collision.Response.Contact Sofa.Component.Controller Sofa.GUI.Component (from Sofa.GUI) SofaTopologyMapping Sofa.Component.Topology.Mapping Sofa.Component.Mapping"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#sofamisc","title":"SofaMisc","text":"SofaMiscExtra Sofa.Component.Engine.Generate SofaMiscTopology Sofa.Component.Topology.Utility SofaMiscCollision Sofa.Component.Collision.Geometry Sofa.Component.Collision.Detection.Intersection Sofa.Component.Collision.Response.Contact the plugin CollisionOBBCapsule SofaMiscEngine Sofa.Component.Engine.Analyze Sofa.Component.Engine.Transform SofaMiscFem Sofa.Component.SolidMechanics.FEM.Elastic Sofa.Component.SolidMechanics.FEM.HyperElastic Sofa.Component.SolidMechanics.TensorMass SofaMiscForceField Sofa.Component.Mass Sofa.Component.SolidMechanics.Spring SofaMiscSolver Sofa.Component.ODESolver.Backward Sofa.Component.ODESolver.Forward"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#plugins","title":"Plugins","text":"SofaDenseSolver Sofa.Component.LinearSolver.Direct SofaExporter Sofa.Component.IO.Mesh and Sofa.Component.Playback SofaHaptics Sofa.Component.Haptics SofaValidation Sofa.Component.Playback SofaNonUniformFem Sofa.Component.Topology.Container.Grid Sofa.Component.Topology.Container.Dynamic Sofa.Component.SolidMechanics.FEM.NonUniform SofaOpenglVisual Sofa.GL.Component.Rendering2D Sofa.GL.Component.Rendering3D Sofa.GL.Component.Shader (from Sofa.GL) SofaPreconditioner Sofa.Component.LinearSolver.Iterative Sofa.Component.LinearSolver.Preconditioner SofaSparseSolver Sofa.Component.LinearSolver.Iterative Sofa.Component.LinearSolver.Direct"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#collection","title":"Collection","text":"SofaComponentAll Sofa.Component"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#framework","title":"Framework","text":"<p>SOFA-NG induced also a cleaning in the framework of SOFA. All parts of the framework have been renamed to reflect the same pattern started with Sofa.Component. For example, SofaSimulationGraph becomes Sofa.Simulation.Graph.</p> <p>The list of the differents packages which are considered as part of the framework is:</p> SofaHelper Sofa.Helper SofaDefaulttype Sofa.Defaulttype SofaCore Sofa.Core SofaSimulationCore Sofa.Simulation.Core SofaSimulationCommon Sofa.Simulation.Common SofaSimulationGraph Sofa.Simulation.Graph Sofa.Config (new), which gathers all CMake files used in SOFA projects (macros, config, flags, etc) Sofa.Type (new) Sofa.LinearAlgebra (new) Sofa.Geometry (new) Sofa.Topology (new)"},{"location":"15_Using_SOFA/26_SOFA-NG_migration/#report-technical-issues","title":"Report technical issues","text":"<p>In case you face any technical difficulty in the transition, please report it using our GitHub Discussion forum.</p>"},{"location":"15_Using_SOFA/40_Inspect_components/","title":"Inspect components","text":""},{"location":"15_Using_SOFA/40_Inspect_components/#the-monitor-component","title":"The Monitor Component","text":"<p>A Sofa Component named Monitor (sofa::component::misc::Monitor) can help you to visualize, to monitor or to export some properties.</p>"},{"location":"15_Using_SOFA/40_Inspect_components/#quick-overview-of-monitor-possibilities","title":"Quick overview of Monitor possibilities","text":"<p>With this component, you can see the positions, trajectories, velocities, forces of chosen particles directly in the GUI or save it into files (readable with Gnuplot for example). You can get an idea of what this component can make launching the examples/Component/SceneUtility/Monitor.scn scene.</p>"},{"location":"15_Using_SOFA/40_Inspect_components/#using-the-monitor-component","title":"Using the Monitor Component","text":"<p>To monitor properties you have to add a Monitor Component in your scene. Here is a selection of a piece of code of one of the Monitor of the example scene:</p> <pre><code>&lt;Monitor template=\"Vec3d\" name=\"velocities_8-16-24\" listening=\"1\" indices=\"8 16 24\" showPositions=\"0\" PositionsColor=\"1 1 0 1\" showVelocities=\"1\" VelocitiesColor=\"1 1 0 1\" ForcesColor=\"1 1 0 1\" showMinThreshold=\"0.01\" TrajectoriesPrecision=\"0.1\" TrajectoriesColor=\"1 1 0 1\" sizeFactor=\"1\" /&gt;\n</code></pre> <p>You can of course also add the component to your scene with the Modeler, look for Monitor in the search form. Required : for the Monitor to work you have to specify listening=\"1\" or to set listening to true in the GUI. You have to select the properties you want to monitor or display.</p> <ul> <li>If you want to visualize positions, you have to select showPositions     (either clicking the corresponding field in the Visualization tab in     the component GUI or adding <code>showPositions=\"1\"</code> in your scene     description file).</li> <li>Then you can choose the color to be applied to your position     visualization with <code>PositionsColor</code> and if needed the size of the     visualization with <code>sizeFactor</code>.</li> <li>You have to select the dofs that you want to monitor using the     classic indices field : <code>indices=\"8 16 24\"</code>.</li> <li>You can choose to export the positions of your dofs     with ExportPositions. The positions will be exported to a file named     following this rule : your_monitor_component_name+_x.txt in     your Sofa directory.</li> </ul> <pre><code>             Field                     XML                      example                         Default Comments\n             `indices`                 `\"\"`                     `indices=\"0 2 4\"`               *select the dofs to be monitored*\n</code></pre> <p>Positions      <code>showPositions</code> <code>false</code> <code>showPositions=\"true\"</code> to monitor positions   Positions      <code>PositionsColor</code> <code>(1.0, 1.0, 0.0, 1.0)</code> <code>PositionsColor=\"1 1 0 1\"</code> to visualize the positions as some yellow points   Positions      <code>ExportPositions</code> <code>false</code> <code>ExportPositions=\"true\"</code> positions will be exported to \\${component_name}_x.txt   Velocities     <code>showVelocities</code> <code>false</code> <code>showVelocities=\"true\"</code> to monitor velocities   Velocities     <code>VelocitiesColor</code> <code>(1.0, 1.0, 0.0, 1.0)</code> <code>VelocitiesColor=\"1 0 1 1\"</code> to visualize the velocities as some purple arrows   Velocities     <code>ExportVelocities</code> <code>false</code> <code>ExportVelocities=\"true\"</code> velocities will be exported to **\\${component_name}_v.txt   Forces         <code>showForces</code> <code>false</code> <code>showForces=\"true\"</code> to monitor forces   Forces         <code>ForcesColor</code> <code>(1.0, 1.0, 0.0, 1.0)</code> <code>ForcesColor=\"1 0 0 1\"</code> to visualize the forces as some red arrows   Forces         <code>ExportForces</code> <code>false</code> <code>ExportForces=\"true\"</code> forces will be exported to \\${component_name}_f.txt   Trajectories   <code>showTrajectories</code> <code>false</code> <code>showTrajectories=\"true\"</code> to visualize the trajectories   Trajectories   <code>TrajectoriesColor</code> <code>(1.0, 1.0, 0.0, 1.0)</code> <code>TrajectoriesColor=\"1 0 1 1\"</code> to get nice purple trajectories represented as lines   Trajectories   <code>TrajectoriesPrecision</code> <code>1.0</code> <code>TrajectoriesPrecision=\"0.1\"</code> to specify the time step between two positions saving to reconstruct the trajectory <code>sizeFactor</code> <code>1.0</code> <code>sizeFactor=\"true\"</code> to change the size of the drawing (points, arrows or lines) <code>showMinThreshold</code> <code>0.01</code> <code>showMinThreshold=\"0.01\"</code> under this value, vectors are not represented</p>"},{"location":"15_Using_SOFA/40_Inspect_components/#visualize-the-result","title":"Visualize the result","text":"<p>To read the resulting file, you can use Gnuplot. In Gnuplot, you can for instance run the following command to render curves of your export file: <pre><code>splot \"monitor-displacement-faceNode_x.txt\"\n</code></pre></p> <p>See more Gnuplot examples here.</p>"},{"location":"15_Using_SOFA/40_Inspect_components/#the-extramonitor-component-a-monitor-extension","title":"The ExtraMonitor Component, a Monitor extension","text":"<p>The ExtraMonitor component gives you the ability to use everything that it is in Monitor with some Extra stuff. It has been written to allow to compute, for example, the resultant of the forces of all the dofs of a MechanicalObject, or the minimum displacement of a region...</p>"},{"location":"15_Using_SOFA/40_Inspect_components/#using-extramonitor","title":"Using ExtraMonitor","text":"<p>Include the ExtraMonitor in your scene. Here is an example of use :</p> <pre><code>&lt;ExtraMonitor template=\"Vec3d\" name=\"velocities_8-16-24\" listening=\"1\" indices=\"8 16 24\" showPositions=\"0\" PositionsColor=\"1 1 0 1\" showVelocities=\"1\" VelocitiesColor=\"1 1 0 1\" ForcesColor=\"1 1 0 1\" showMinThreshold=\"0.01\" TrajectoriesPrecision=\"0.1\" TrajectoriesColor=\"1 1 0 1\" sizeFactor=\"1\" ExportWcin=\"false\" ExportWext=\"false\" resultantF=\"true\" /&gt;\n</code></pre> <ul> <li>With this xml code, we say we want to use an ExtraMonitor named     'Socle' with every indices read in the indices field of the Engine     named 'engineToto'. (We suppose 'engineToto' has been     defined before).</li> <li>Then we say we would like to export forces in a file but we set     resultantF to true to precise we want to export the resultant of the     dofs forces and not the forces of each of the dofs given in the     indices set.</li> <li>We also export positions but again we don't want every positions to     be written down in the selected flag. We choose to export the     minimum displacement and the maximum displacement of our set     of particles. minCoord contains the number of the coordinate (0     stands for x, 1 stands for y, 2 stands for z in a 3D) for which we     want to get the displacement. The same for maxCoord. Defaults values     are -1 which means we don't want to export the     corresponding displacement.</li> </ul>"},{"location":"15_Using_SOFA/40_Inspect_components/#additions","title":"Additions","text":"<p>ExtraMonitor does not add visualization possibilities but it adds export possibilities.</p> <pre><code>          Field          XML                      example               Default Comments\n          `indices`      `\"\"`                     `indices=\"0 2 4\"`     *select the dofs to be monitored*\n</code></pre> <p>Energy      <code>ExportWcin</code> <code>false</code> <code>ExportWcin=\"true\"</code> export kinetic energy computed by Mass in the context of the Monitor (need not indices to be set), exported to \\${component_name}_wcin.txt   Energy      <code>ExportWext</code> <code>(1.0, 1.0, 0.0, 1.0)</code> <code>ExportWext=\"true\"</code> export potential energy computed by the Mass in the context of the Monitor (need not indices to be set), exported to **\\${component_name}_wext.txt   Forces      <code>resultantF</code> <code>false</code> <code>resultantF=\"true\"</code> to export force resultant of the monitored dofs in a gnuplot file, ExportForces must be set to true   Positions   <code>minCoord</code> <code>-1</code> <code>minCoord=\"2\"</code> gives the coordinate on which we want to monitor the minimum displacement of a set of dofs, ExportPositions must be set to **true   Positions   <code>maxCoord</code> <code>-1</code> <code>maxCoord=\"1\"</code> gives the coordinate on which we want to monitor the minimum displacement of a set of dofs, ExportPositions must be set to true   Positions   <code>dispCoord</code> <code>-1</code> <code>dispCoord=\"0\"</code> gives the coordinate on which we want to export the displacement of the given dofs, ExportPositions must be set to **true</p>"},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/","title":"Interact with the mouse","text":""},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/#sofa-mouse-manager","title":"Sofa Mouse Manager","text":"<p>A Mouse Manager has been created in Sofa, allowing to easily create and change the interactions with the different buttons of the Mouse. Note that the Shift key needs to be hold during the operation.</p> <p>This panel is available through: Edit -&gt; Mouse Manager</p> <p>{.aligncenter .size-full .wp-image-1510 width=\"460\" height=\"544\"}</p> <p>The basic interactions are from now (see below parts for further information):</p> <ul> <li>Attach an object to the Mouse: when clicked, the mouse casts a ray,     and create a spring between a point in the ray, and a DOF     encountered (if one has been found in the proximity of the ray)</li> <li>Fix picked particle: when clicked, the particle of the collision     model near the mouse is fixed using a stiff spring.</li> <li>Incise along a path: pressing the mouse, you can proceed to an     incision following the path of the mouse. (Only available for     triangular mesh)</li> <li>Perform topological operations: useful to make some     topological changes. Only primitive removal available for     the moment.</li> <li>Add a spring to suture two points: allow to create a spring, with a     null rest length, between two points, in order to join them.</li> <li>Add a Frame to Skinned model: TODO</li> <li>Save camera's view points for navigation: TODO</li> <li>Start navigation if camera's view point have been saved: TODO</li> </ul>"},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/#operations-available","title":"Operations available","text":"<p>Further information for specific mouse interactions.</p>"},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/#attach-an-object-to-the-mouse","title":"Attach an object to the Mouse","text":"<p>when clicked, the mouse casts a ray, and create a spring between a point in the ray, and a DOF encountered (if one has been found in the proximity of the ray) When clicking on shift, collision model will appear (first figure), Then clicking with button mouse without releasing shift will allow to move selected dof (second figure). Then, releasing mouse button will let the object come back to it rest position (if the mechanical behavior allows it). Whereas releasing shift first will freeze the object in the current position.</p> Area selected Area attached with a spring and pulled {.wp-image-1511 .size-full width=\"200\" height=\"144\"} {.wp-image-1513 .size-full width=\"200\" height=\"131\"}"},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/#fix-picked-particle","title":"Fix picked particle","text":"<p>when clicked, the particle of the collision model near the mouse is fixed using a stiff spring. When shift is pushed, collision model will appear (first figure), Then clicking with button mouse will fix the particle of the collision model near the mouse using a stiff spring.</p> Area selected Area fixed by a stiff spring {.wp-image-1511 .size-full width=\"200\" height=\"144\"} {.wp-image-1513 .size-full width=\"200\" height=\"131\"}"},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/#incise-along-a-path","title":"Incise along a path","text":"<p>This operation allow to simulate incision on a triangular mesh. There are two methods available for performing incision:</p> <ul> <li>Through segmentIn this method, first click set starting position of     the incision and second click set ending position. Then incision     will be performed between these points. If you don't release \"shift\"     button then you can continue clicking. Incision will be performed     between previous point and this new one. Thus you can obtain     successive incisions. (see fig1 to fig3) [caption     id=\"attachment_1515\" align=\"alignright\"     width=\"417\"]{.size-full     .wp-image-1515 width=\"417\"     height=\"238\"}     MouseManager GUI for Incision[/caption] Advanced settings are     available for this method:<ol> <li>Distance to snap from border: This allow to perform incision     until or from mesh borders (see figures behind). To do this, you     need to click near a border. Thus, this parameter define the     area in which the position of the click will be \"assimilate\" as     on the border. To go further into details, for a triangle on the     border of the mesh. This area is defined by the border and at     maximum it's barycentric point. Thus taking a value of 100%     means that a click between the border and the barycentric point     will be considered as a click on the border. In this case, two     options appear. Either the click is near a vertex (on the     border), and then incision will be expand to this last on. Or     incision is perform until the orthogonal projection of point     clicked, on the border.</li> <li>Distance to snap along path: This allow to perform an incision     without creating small triangles along the incision path. For     example, if the incision path pass near a point of a triangle,     instead of cutting the edges and thus create a new small     triangle, this last point will be moved on the incision path.     Here again the percentage is link to the area. Thus for a value     of 100%, this mean that it the incision pass between a point and     the barycentric point. This last point will be moved.</li> </ol> </li> </ul> Triangular Mesh (under gravity) First incision Section of tisue is being removed Second incision Bottom part of the sheet is falling down {.size-full .wp-image-1516 width=\"150\" height=\"150\"} {.size-full .wp-image-1517 width=\"150\" height=\"150\"} {.size-full .wp-image-1518 width=\"150\" height=\"150\"} {.size-full .wp-image-1519 width=\"150\" height=\"150\"} {.size-full .wp-image-1520 width=\"150\" height=\"150\"} <ul> <li>ContinuallyIn this second method, first click will initialize the     incision and then the incision will follow mouse movement (like if     the mouse was a scalpel). Here again, \"shift\" release will end     the incision. For the moment, this method doesn't handle     snapping options.</li> </ul> Triangular Mesh (under gravity) Start incision Continuous incision {.size-full .wp-image-1516 width=\"150\" height=\"150\"} {.size-full .wp-image-1524 width=\"150\" height=\"157\"} {.size-full .wp-image-1525 width=\"150\" height=\"157\"}"},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/#perform-topological-operations","title":"Perform topological operations","text":"<p>Different kind of topological operations are available:</p>"},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/#remove-an-element","title":"Remove an element:","text":"<p>This operation allow to remove a topological element (surface or volume depending on the type of collision model). Notes that it is possible to remove a volume element using a surface collision model if the scene contains a Topological Mapping.</p>"},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/#remove-a-zone-of-elements","title":"Remove a zone of elements:","text":"<p>This operation allow to remove a zone of element (circle for surface, sphere for volume). Different situation can be encountered depending on which kind of collision model is used.  [caption id=\"attachment_1541\" align=\"alignright\"     width=\"414\"]{.size-full     .wp-image-1541 width=\"414\"     height=\"174\"}     Topological Operations menu GUI[/caption]</p> <p>For surface collision model: On a surface mesh it will remove a part of the mesh</p> Selected Triangles Removed Triangles {.size-full .wp-image-1533 width=\"150\" height=\"182\"} {.size-full .wp-image-1534 width=\"150\" height=\"182\"} <p>On a volume mesh using the option surface will remove surface element as well as volume element link to them (this can let sharp element at the surface see fig). Using the option Volume will remove a sphere volume of elements (see fig on right)</p> Selected Tetrahedra Removed Tetrahedra Visual model of the modified volume Visual model of the modified volume (Volume Option) {.size-full .wp-image-1543 width=\"150\" height=\"182\"} {.size-full .wp-image-1536 width=\"150\" height=\"182\"} {.size-full .wp-image-1537 width=\"150\" height=\"182\"} {.size-full .wp-image-1539 width=\"150\" height=\"182\"} <p>For volume collision model:     1.  Using the Volume option will have the same results as above (remove a sphere volume of elements)     2.  Using the Surface option will remove a layer of element at the surface of the mesh (see fig)</p> Selected Tetrahedra Removed Tetrahedra (Volume Option) Second selection Removed Tetrahedra (with Surface Option) {.size-full .wp-image-1544 width=\"150\" height=\"182\"} {.size-full .wp-image-1536 width=\"150\" height=\"182\"} {.size-full .wp-image-1545 width=\"150\" height=\"182\"} {.size-full .wp-image-1546 width=\"150\" height=\"182\"}"},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/#add-a-spring-to-suture-two-points","title":"Add a spring to suture two points","text":"<p>TODO</p>"},{"location":"15_Using_SOFA/50_Interact_with_the_mouse/#add-a-frame-to-skinned-model","title":"Add a Frame to Skinned model","text":"<p>TODO</p>"},{"location":"15_Using_SOFA/90_Use_SOFA_in_Matlab/","title":"Use SOFA in Matlab","text":"<p>This was done for Ubuntu.</p>"},{"location":"15_Using_SOFA/90_Use_SOFA_in_Matlab/#launch-matlab-preloading-libraries-that-sofa-uses","title":"Launch Matlab preloading libraries that Sofa uses","text":"<p>In command line, write:</p> <pre><code>LD_PRELOAD=\u201d/usr/lib/x86_64-linux-gnu/libstdc++.so.6:/usr/lib/x86_64-linux-gnu/libQt5OpenGLusr/lib/x86_64-linux-gnu/libQt5Widgets.so.5:/usr/lib/x86_64-linux-gnu/libQt5Gui.so.5:/usr/lib/x86_64-linux-gnu/libQt5Core.so.5\u2033 matlab\n</code></pre>"},{"location":"15_Using_SOFA/90_Use_SOFA_in_Matlab/#from-a-matlab-script-launch-sofa","title":"From a Matlab script launch sofa","text":"<p>In Matlab, define:</p> <pre><code>pathToSofaScene = fullfile(PATH_TO_SOFA_SCENES, \u2018sofaScene.scn\u2019)\n[status, result] = system([\u2018PATH_TO_SOFA_BIN/runSofa -g batch -n 10\u2019 pathToSofaScene]);\n</code></pre> <p>It reads in result the sofa terminal output.</p> <p>Note: Matlab plots, and other Qt related functions (write png images) will be a bit broken</p>"},{"location":"15_Using_SOFA/32_Performances/10_Inspect_performances/","title":"Inspect performances","text":"<p>Sofa provides two ways of monitoring the computation time, one with a text output, the other one with a graphical output.</p>"},{"location":"15_Using_SOFA/32_Performances/10_Inspect_performances/#command-line-method-advanced-timer","title":"Command-line method: Advanced Timer","text":"<p>This is the most precise and flexible way of monitoring the computation time in SOFA. It prints results on the standard text output.  This can be controlled in runSofa using the following command line options (use --help for the full list) :</p> <p><pre><code>--computationTimeSampling arg \n-b [ --computationTimeAtBegin ] [=arg(=1)] (=0)\n-o [ --computationTimeOutputType ] arg\n</code></pre> The first option updates the variable computationTimeSampling which specifies the intervals (counted in animation steps) between successive statistics displays. 0 means deactivated.  The other 2 can be used to activate the time statistics during init and change the output format, respectively.</p> <p>To monitor the time spent in a specific part of the code, bracket it as shown below:</p> <pre><code>sofa::helper::AdvancedTimer::stepBegin(\"Build linear equation\");\n // your code here\nsofa::helper::AdvancedTimer::stepEnd(\"Build linear equation\");\n</code></pre> <p>That is all. Then the corresponding computation time can be displayed at regular intervals. Be careful to use the same string in the two instructions. The begin/end calls can be nested, to monitor hierarchically. An example of statistics is shown below. The number of dots before the name of the piece of code denotes the nesting level.</p> <pre><code>==== Animate ====\n\nTrace of last iteration :\n  *    0.06 ms &gt; begin Mechanical on Cube grid\n  *    0.10 ms   &gt; begin Build linear equation\n  *                &gt; begin forces in the right-hand term\n  *    1.27 ms     &lt; end   forces in the right-hand term\n  *    1.37 ms     &gt; begin shift and project independent states\n  *    1.49 ms     &lt; end   shift and project independent states\n  *                &gt; begin local M\n  *    2.11 ms     &lt; end   local M\n  *    2.38 ms     &gt; begin J products\n  *   12.89 ms     &lt; end   J products\n  *   12.91 ms     &gt; begin J products\n  *   28.06 ms     &lt; end   J products\n  *                &gt; begin local K\n  *   28.51 ms     &lt; end   local K\n  *   28.53 ms     &gt; begin JMJt, JKJt, JCJt\n  *   86.86 ms     &lt; end   JMJt, JKJt, JCJt\n  *                &gt; begin implicit equation: scaling and sum of matrices, update right-hand term\n  *   87.75 ms     &lt; end   implicit equation: scaling and sum of matrices, update right-hand term\n  *              &lt; end   Build linear equation\n  *              &gt; begin Solve linear equation\n  *   90.78 ms   &lt; end   Solve linear equation\n  *   94.81 ms &lt; end   Mechanical on Cube grid\n  *   94.83 ms &gt; begin UpdateMapping\n  *              - step  UpdateMappingEndEvent\n  *   94.84 ms &lt; end   UpdateMapping\n  *            &gt; begin UpdateBBox\n  *   94.93 ms &lt; end   UpdateBBox\n  *   94.94 ms END\n\nSteps Duration Statistics (in ms) :\n LEVEL   START    NUM      MIN     MAX   MEAN     DEV    TOTAL  PERCENT ID\n   0       0     100      86.57  127.50  109.99    7.77 10999.1  100    TOTAL\n   1       0.06    1      86.32  127.25  109.75    7.75  109.75   99.78 .Mechanical\n   2       0.09    1      79.42  112.21   99.97    7.02   99.97   90.89 ..Build linear equation\n   3       0.09    1       0.84    1.36    1.14    0.14    1.14    1.04 ...forces in the right-hand term\n   3       1.34    1       0.07    0.14    0.10    0.02    0.10    0.09 ...shift and project independent states\n   3       1.44    1       0.39    0.68    0.55    0.08    0.55    0.50 ...local M\n   3       2.23    2       7.52   17.67   12.72    2.34   25.44   23.13 ...J products\n   3      27.70    1       0.28    0.54    0.41    0.06    0.41    0.37 ...local K\n   3      28.13    1      54.07   79.54   70.61    5.53   70.61   64.20 ...JMJt, JKJt, JCJt\n   3      98.75    1       0.88    2.29    1.31    0.24    1.32    1.20 ...implicit equation: scaling and sum of matrices, update right-hand term\n   2     100.06    1       2.71    4.79    3.75    0.51    3.75    3.41 ..Solve linear equation\n   1     109.84    1       0.01    0.02    0.02    0       0.02    0.01 .UpdateMapping\n   2     109.84    1       0       0       0       0       0       0    ..UpdateMappingEndEvent\n   1     109.85    1       0.09    0.28    0.14    0.03    0.14    0.12 .UpdateBBox\n\n==== END ====\n</code></pre> <p>In the first line of this table, mean values over 100 iterations of simulation are given. Only the TOTAL value on the first line is the total amount of time elapsed in milliseconds over these 100 iterations. The rest of the table is mean values for each computation step within one simulation step. NUM is the number of times the operation is done per simulation step. It can be noted that \"Mechanical\" and \"UpdateBBox\" are the 2 main operations of a simulation step, and the sum of percentages is 100%.</p>"},{"location":"15_Using_SOFA/32_Performances/10_Inspect_performances/#graphical-interface-profiler","title":"Graphical Interface: Profiler","text":"<p>A graphic tool has been added in order to benefit from a profiling window based on the AdvanceTimer records. This profiler is activated by ticking the box \"Display AdvancedTimer Profiler\" in the \"Stats\" widget in runSofa.</p> <p>This tool is based on Qt5Charts. If this option is grayed in the runSofa GUI, make sure you have the Qt5Charts library and that you properly filled the associated CMake variable Qt5Charts</p> <p>This option allows to see the animation step duration (ms) in a graphView, then allows to navigate on the graph or on the sliders and analyze the different substeps executed during this animation step. Substeps are displayed in a Tree, in the right order and with their respective time and percentage (with regards to the full step duration). In its design, this tool is inspired from Unity3D profiler.</p> <p></p> <p>Description of the columns:</p> <ol> <li>Total (%): Percentage of duration of this step compared to the duration of the root step.</li> <li>Self (%):</li> <li>If the step has child steps: percentage of the duration of this step minus the sum of durations of its children, compared to the duration of the root step.</li> <li>If the step has no child step: percentage of the average duration of this step in case of multiple calls of this step during this time step, compared to the duration of the root step.</li> <li>Time (ms): Duration in milliseconds of this step.</li> <li>Self (ms):</li> <li>If the step has child steps: duration in milliseconds of this step minus the sum of durations of its children.</li> <li>If the step has no child step: average duration in milliseconds of this step in case of multiple calls of this step during this time step.</li> </ol>"},{"location":"15_Using_SOFA/32_Performances/10_Inspect_performances/#graphical-interface-trace-visitor","title":"Graphical Interface: Trace Visitor","text":"<p>A graphic tool using Qt exists, and is integrated inside the SOFA main application to trace and profile the execution of the visitors in SOFA. It is work in progress and less accurate than the previous method. It can be used for illustration. How to use the graphic trace of visitors</p>"},{"location":"15_Using_SOFA/32_Performances/10_Inspect_performances/#how-to-enable-the-trace-of-the-visitors","title":"How to enable the trace of the visitors","text":"<p>You need to activate the option SOFA_DUMP_VISITOR_INFO in your SOFA configuration. It should be enabled by default. If not, you can use SofaVerification to modify the configuration of SOFA. {.aligncenter .size-full .wp-image-1293 width=\"600\" height=\"342\"} </p>"},{"location":"15_Using_SOFA/32_Performances/10_Inspect_performances/#quickly-find-information","title":"Quickly find information","text":"<p>To find a specific visitor, or a call to a component, you can use the search bar: {.aligncenter .size-full .wp-image-1294 width=\"600\" height=\"343\"}</p>"},{"location":"15_Using_SOFA/32_Performances/10_Inspect_performances/#view-state-vectors","title":"View State vectors","text":"<p>An other interesting feature is the possibility to trace the evolution of the state vectors: Just enable the option, and specify the number of particles; -1 meaning all the particles. {.aligncenter .size-full .wp-image-1295 width=\"600\" height=\"343\"} Here, we trace the particles number 2 and 3. A FixedConstraint acts in this scene on the particle 3: it filters its velocity and acceleration, and set it to zero, to act as a fixed particle. We can visualize the effect of the ApplyConstraint visitor on the state vector.</p>"},{"location":"15_Using_SOFA/32_Performances/10_Inspect_performances/#add-new-debug-information","title":"Add new debug information","text":"<ul> <li>Trace specific part of the code</li> </ul> <p>To trace and profile the execution of a part of your program, put, at the beginning of the code to profile:</p> <pre><code>simulation::Visitor::printNode(\"NameMethod\");\n</code></pre> <p>and at end the process</p> <pre><code>simulation::Visitor::printCloseNode(\"NameMethod\");\n</code></pre> <p>The method printNode can take other arguments to get a more detailed log;</p> <pre><code>sofa::simulation::Visitor::TRACE_ARGUMENT arg;\narg.push_back(std::make_pair(\"ArgumentName\", \"Value\"));\nsofa::simulation::Visitor::printNode(\"MyDebug\", arg);\n//....\nsofa::simulation::Visitor::printCloseNode(\"MyDebug\");\n</code></pre> <ul> <li>Trace an additional state vector</li> </ul> <p>At any time in your code, you can monitor a state vector of a given mechanical state writing:</p> <pre><code>if (sofa::simulation::Visitor::IsExportStateVectorEnabled())\n{\n   sofa::simulation::Visitor::printNode(\"MyDebug\");\n   sofa::simulation::Visitor::printVector(mstate, id); //mstate is a ptr to a mechanical state, id is a VecId, indicating the state vector\n   sofa::simulation::Visitor::printCloseNode(\"MyDebug\");\n}\n</code></pre>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/","title":"Improve performances","text":"<p>\ufeff# Improve the Performances</p> <p>There are many ways to improve the performances of a simulation. This page provides a few tips to help achieving this goal.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#compilation-options","title":"Compilation Options","text":"<p>On Windows, the two following CMake variables may speed up the simulations:</p> <ul> <li><code>SOFA_ENABLE_FAST_MATH</code>: Enable floating-point model to fast (theoretically faster but can bring unexpected results/bugs)</li> <li><code>SOFA_ENABLE_SIMD</code>: Enable the use of SIMD instructions by the compiler (AVX/AVX2 for msvc).</li> <li><code>SOFA_ENABLE_LINK_TIME_OPTIMIZATION</code>: Enable LTCG IN release mode [Warning, use a lot of disk space!]</li> </ul>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#runsofa","title":"RunSofa","text":"<p>When running <code>runSofa</code> with the GUI, an option allows to update the visual representation of the scene graph if any change is detected (activated by default). It can affect badly the performances in high speed simulations. Disabling the option can help improving the performances: to do so, click on the lock icon as illustrated below.</p> <p></p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#profile-the-simulation","title":"Profile the Simulation","text":"<p>The first step toward better performances is to identify the bottleneck of the simulation. SOFA provides some tools to profile the simulation. See this page to learn how to use those tools. The principle is to measure the time taken by all major steps of the simulation. The timers are organized as a tree: a monitored step can call monitored substeps, making it a parent of the substeps.</p> <p>Let us take the example of the caduceus demo, located in examples/Demos/caduceus.scn. The following image results from the profiling of one time step, measured in the GUI of runSofa.</p> <p></p> <p>Two major steps can be identified:</p> <p>1) FreeMotion+CollisionDetection 2) ConstraintSolver</p> <p>Together, both steps account for 84% of the total computational time spent in the simulation step. In most simulation, those two steps will be the most time-consuming.</p> <p>As the name suggests, the step FreeMotion+CollisionDetection gathers two substeps:</p> <p>1) The collision detection 2) The free motion</p> <p>These steps and their associated timers are specific to the FreeMotionAnimationLoop. Its particularity is that those two steps can be computed in parallel. It is the case in the example: collision detection takes 26% of the time. During that time, the free motion is computed in parallel. That is why the timer WaitFreeMotion is almost null. This parallelization is a possible solution to optimize the performances of this simulation. This parallelization is available because the computation of the free motion is also a time-consuming step of a simulation.</p> <p>To summarize, the 3 major steps of a simulation, candidates for being a bottleneck, are:</p> <p>1) Collision detection 2) Free motion 3) Constraint solving</p> <p>In each of them, some substeps can be responsible of the bottleneck. The profiler helps identifying the one(s) . In the above example, the most time-consuming step is constraint solving, taking 54% of the time.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#collision-detection","title":"Collision Detection","text":"<p>If collision detection has been identified as a bottleneck, here are a few tips to improve the performances:</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#asynchronous-free-motion","title":"Asynchronous Free Motion","text":"<p>This tip requires to use a FreeMotionAnimationLoop.</p> <p>The steps of collision detection and free motion are independent: they can be computed in parallel. The component FreeMotionAnimationLoop has boolean Data parallelCollisionDetectionAndFreeMotion to specify if both steps are computed in parallel or not. This optimization is the most effective when both steps takes about the same time. The total time of both steps computed in parallel will be the time taken by the most time-consuming one (plus the overhead due to parallelization).</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#parallel-algorithms","title":"Parallel Algorithms","text":"<p>There are high chances that a simulation uses BruteForceBroadPhase and BVHNarrowPhase. Multi-threaded versions of those two components are available in the MultiThreading plugin. Depending on the cases, the parallelization can help speeding up the collision detection phase. See details in the MultiThreading plugin dedicated page.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#free-motion","title":"Free Motion","text":"<p>This step is computed in the FreeMotionAnimationLoop. However, there are also common steps with the DefaultAnimationLoop, such as the computation of the force, the matrix assembly and the solve of the linear system. Therefore, most of the tips of this section are also available for DefaultAnimationLoop.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#the-choice-of-the-linear-solver","title":"The Choice of the Linear Solver","text":"<p>See this page for a description of the different types of linear solvers.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#iterative-solvers","title":"Iterative Solvers","text":"<p>The error reduces at each iteration of an iterative solver. Some of the parameters (e.g. iterations, tolerance and threshold in CGLinearSolver) controls when the solver stops its iterations. Less iterations means less computation, therefore faster simulations. Stopping too early can come at the price of too large error, and can even bring instabilities. With iterative solvers, finding an appropriate trade-off between accuracy and efficiency is key.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#matrix-assembly","title":"Matrix Assembly","text":"<p>Assembling by blocks: When the linear solver assembles the system matrix in a compressed sparse row data structure, it is possible to use a matrix where the entries are blocs of 3x3. This is much faster to assemble. It is the most efficient when the simulation only involves 3 degrees of freedom per node (known as \"Vec3d\" in the SOFA template). The template parameter to use is <code>CompressedRowSparseMatrixMat3x3d</code>. Note that all solvers do not support this template parameter.</p> <p>Parallel assembly of independent matrices: Mapped components contributes to a matrix data structure different from the main matrix. Once they are assembled, the mapped matrices are projected into the main DoFs space via mappings jacobian matrices. Since the main matrix and the mapped matrices are independent, they can be assembled in parallel. To activate this option, enable the Data <code>parallelAssemblyIndependentMatrices</code> in <code>MatrixLinearSystem</code>.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#matrix-assembly-vs-matrix-free","title":"Matrix Assembly vs. Matrix Free","text":"<p>CGLinearSolver supports both strategies:</p> <ul> <li><code>GraphScattered</code> is the template parameter for a matrix-free solver</li> <li><code>CompressedRowSparseMatrixd</code> and <code>CompressedRowSparseMatrixMat3x3d</code> are template parameters for an assembled matrix</li> </ul> <p>It is not always obvious which one is faster given the same number of iterations. However, it is easy to try both strategies: just change <code>&lt;CGLinearSolver template=\"GraphScattered\"/&gt;</code> to <code>&lt;CGLinearSolver template=\"CompressedRowSparseMatrixMat3x3d\"/&gt;</code>, and vice-versa, and compare the performances.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#asynchronous-linear-solver","title":"Asynchronous Linear Solver","text":"<p>SparseLDLSolver has an asynchronous equivalent (AsyncSparseLDLSolver), which the goal is to reduce the duration of the linear system solving. Computing asynchronously the LDL factorization of the matrix, this solver will however change the behavior of your simulation. Read more about it on the AsyncSparseLDLSolver page. In your scene, just replace <code>&lt;SparseLDLSolver/&gt;</code> by <code>&lt;AsyncSparseLDLSolver/&gt;</code>.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#constant-sparsity-pattern","title":"Constant Sparsity Pattern","text":"<p>Usually, the linear system resulting from a simulation is sparse, meaning that a significant portion of the elements of the system are zero. Thus, an efficient representation where only non-zero elements can be considered to speed up computations. Moreover, in specific scenarios, this sparsity maintains a constant pattern. In other words, the arrangement of zero and non-zero elements within the system does not change as the simulation progresses from one time step to the next. The simulation computation can take advantage of this time-consistent sparsity, as it allows for the use of precomputed data related to the structure of the system, thereby optimizing the overall efficiency of the simulation.</p> <p>Situations in which the sparsity pattern is not constant include the following:</p> <ul> <li>Topological Changes: changes in the structural or system topology can lead to alterations in the sparsity pattern of a matrix. This occurs when new elements or connections are introduced or existing ones are removed.</li> <li>Changes in the application of forces to degrees of freedom (DoFs) can directly impact the sparsity pattern of a matrix. When a force is newly introduced to a DoF that was previously uninvolved, it may lead to the addition of new non-zero entries in the matrix, thus altering the sparsity pattern. Conversely, if a force is removed from a DoF that was previously under its influence, it may result in the elimination of non-zero entries associated with that DoF, consequently causing changes in the sparsity pattern of the matrix.</li> <li>Boundary Condition Changes: Altering boundary conditions, such as fixing or releasing certain degrees of freedom, can modify the sparsity pattern.</li> </ul> <p>In these scenarios, where the sparsity pattern is not constant, traditional compression techniques may be required to handle the dynamic nature of the system.</p> <p>Block Tridiagonal Matrix: Dealing with linear structures like wires or beams leads to a specific type of mathematical representation known as a block tridiagonal matrix (BTD). This matrix structure exhibits distinct characteristics, with a pattern of non-zero elements only on the main diagonal, the superdiagonal (one diagonal above the main diagonal), and the subdiagonal (one diagonal below the main diagonal). To address this particular matrix format effectively, a specialized linear solver has been developed: <code>BTDLinearSolver</code>, and its associated matrix format <code>BTDMatrix</code>. This dedicated solver significantly outperforms the use of a generic linear solver that lacks the specialized algorithms and optimizations enabled by block tridiagonal matrices.</p> <p>Constant Insertion Order In generic scenarios where the sparsity pattern of a matrix is not predetermined, it is common practice to accumulate contributions within a matrix data structure. This matrix data structure is often designed with a compressed format, which is intended to reduce memory usage and computational overhead. However, this compression process can be time-consuming, particularly for large-scale problems. There are specific situations where it is possible to optimize the matrix assembly process by avoiding the compression step. This optimization is applicable when the following conditions hold:</p> <ul> <li>Constant Sparsity Pattern: the sparsity pattern of the matrix remains fixed throughout the problem-solving process. In other words, the locations of non-zero elements in the matrix do not change.</li> <li>Constant Insertion Order: the order in which contributions are inserted into the matrix remains consistent over time. Contributions are added to the matrix in a predetermined order.</li> <li>Mapping between Insertion Location and Compressed Format: a mapping exists that relates the location of insertion (where contributions are added) to the location of the contribution in the compressed format of the matrix. This mapping ensures that contributions are placed directly in their appropriate positions in the compressed matrix without the need for a compression step. This mapping is computed automatically in the first matrix assembly.</li> </ul> <p>In such scenarios, the 'ConstantSparsityPatternSystem' component is a valuable tool. By using this component, it becomes possible to expedite the matrix assembly step. This can lead to significant performance gains.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#parallel-ode-solving","title":"Parallel ODE Solving","text":"<p>This optimization requires to use a FreeMotionAnimationLoop. When multiple objects evolve in a simulation, SOFA supports the following configurations:</p> <ul> <li>There is a single ODE solver for all the objects.</li> <li>There are multiple ODE solvers, and each one can simulate one or multiple objects.</li> </ul> <p>In the latter case, there are as many free motion computations as the number of ODE solvers in the scene. In this first step of the FreeMotionAnimationLoop, the free motion assumes that objects can have a \"free\" motion, thus ignoring possible interaction between objects. Therefore, the computation of the free motion of an object is independent from the others, and each ODE solve step can be trivially parallelized. The component FreeMotionAnimationLoop has boolean Data parallelODESolving to specify if both ODE solve steps are to be computed in parallel or not.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#finite-element-method","title":"Finite Element Method","text":"<p>Several algorithms are available to simulate the same FEM model, so the simulation designer can choose depending on the constraints on the accuracy and speed of the simulation. For example, a component can have an alternative where the implementation uses approximations in order to speed up the computations. This is the case for the component <code>TriangularFEMForceFieldOptim</code> which is an alternative to <code>TriangularFEMForceField</code>. It has been measured that TriangularFEMForceFieldOptim is faster than TriangularFEMForceField. Similarly, the component <code>FastTetrahedralCorotationalForceField</code> is a faster alternative to <code>TetrahedronFEMForceField</code>, but without any compromise on the accuracy.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#parallel-constraint-solving","title":"Parallel Constraint Solving","text":"<p>The following options allow to leverage multi-threaded implementations of some algorithms:</p> <ul> <li><code>parallelInverseProduct</code> in <code>SparseLDLSolver</code> allows to parallelize the computation of the product , which is used to compute the compliance matrix projected in the constraint space (see <code>LinearSolverConstraintCorrection</code>).</li> <li><code>multithreading</code> in <code>GenericConstraintSolver</code> allows to build the compliances concurrently.</li> </ul>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#rendering","title":"Rendering","text":"<ul> <li> <p>A data <code>computeBoundingBox</code> is available in all AnimationLoops. This data defines whether the global bounding box of the scene is computed at each time step. Setting this data to <code>false</code> will avoid the recomputation of the bounding box used for rendering, thus possibly saving computation time.</p> </li> <li> <p>Debug visualization can be very costly. For example, drawing thousands of tetrahedra is very time consuming. Draw only what you need.</p> </li> </ul>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#model-order-reduction","title":"Model Order Reduction","text":"<p>In SOFA, Model Order Reduction is a technique to reduce the computational complexity of a FEM simulation. It works with a premilinary step which precomputes deformation modes of an object. The modes are then used online, during a simulation, allowing to build and solve the same FEM problem in a reduced space, in order to dramatically increase the performances.</p> <p>This technique is available in a plugin: https://github.com/SofaDefrost/ModelOrderReduction. Binaries are also available.</p>"},{"location":"15_Using_SOFA/32_Performances/20_Improve_performances/#gpgpu","title":"GPGPU","text":"<p>SOFA has a plugin allowing to compute some steps of the simulation on the GPU, based on CUDA. See this page. In most cases, the simulation is much faster when computed on the GPU, compared to the CPU version. </p>"},{"location":"20_Simulation_Principles/10_Scene_Graph/","title":"Scene graph","text":"<p>A simulation in SOFA is described as a scene with an intrinsic generalized hierarchy. This scene is composed of nodes organized as a tree or as a Directed Acyclic Graph (DAG). The different simulated objects are described in separate nodes, and different representations of a same object can be done in different sub-nodes.</p> <p>Let's take some examples!</p>  Fig. 1 - A graph with one single child node"},{"location":"20_Simulation_Principles/10_Scene_Graph/#structure-of-a-scene","title":"Structure of a scene","text":"<p>The scene starts from a parent node, called the \"Root\" node. All other nodes (called child nodes) inherit from this main node. In the figure 1, a first child node \"Liver\" is defined and represents a first object. Usually, one node gathers the components associated with the same object (same degrees of freedom).</p> <p>This design is highly modular, since components in the scene are independent of each other. One physical model (springs with SpringForceField) could be simply replaced by another one (triangular FEM with TriangleFEMForceField) by changing one component in the graph. In the same way, an explicit integration scheme (EulerSolver) could be replaced by an implicit one (EulerImplicitSolver) by modifying one XML line in the scene file. This high modularity of the framework is induced by the scenegraph-visitor approach described below.</p>  Fig. 2 - A graph with one object and its two representations (mechanics and visual)   <p>As illustrated in figure 2, nodes can be structured serially in the graph. Such a hierarchical graph allows for having several representation of a same object. In the example, the first child node \"Liver\" implements the mechanical behavior of the liver (hexahedral mesh), whereas the sub-node \"Visual\" describes a surface model (triangular mesh) of the liver.</p>  Fig. 3 - A graph including two different objects computed in the same simulation   <p>The figure 3 shows a simulation involving two different objects. One node can compute the mechanical behavior of a liver whereas the second simulates the electrical behavior of a heart. These two systems rely on two different degrees of freedom, i.e. different physical phenomenon. They must therefore be described in two distinct nodes. This feature shows the ability of SOFA to easily develop advanced and coupled models.</p> <p>To build a simulation in SOFA, the scene graph can be written both using:</p> <ul> <li>XML files. Read the associated page about how to write a scene in XML.</li> <li>Python scripts. Read the associated page about how to write in Python.</li> </ul>"},{"location":"20_Simulation_Principles/10_Scene_Graph/#data","title":"Data","text":"<p>This \"Liver\" node of Fig. 1 includes components (solvers, forcefield, mass) used to build the mechanical simulation of the liver. Each of these components contains attributes. For instance, a component of mass features an attribute for mass density; an iterative linear solver needs an attribute defining a maximum of iterations. These attributes are also called Data. These Data are containers providing a reflective API used for serialization in XML files and automatic creation of input/output widgets in the user interface.</p> <p>Two Data instances can be connected one with another to keep their value synchronized. This is only possible if they both have the same type (<code>float</code>, <code>vector&lt;double&gt;</code>). A mechanism of lazy evaluation is used to recursively flag Data that are not up-to-date. Then, the Data is recomputed (only if necessary). The network of interconnected Data objects defines a data dependency graph. In an XML file, one Data is connected to another when \"@\" is used: <pre><code>&lt;Component dataname=\"@path_to/component.data\" /&gt;\n</code></pre></p> <p>Read more about data on the Components and Data documentation page.</p>"},{"location":"20_Simulation_Principles/10_Scene_Graph/#tags","title":"Tags","text":"<p>Any component can be set with one or several \"Tags\". The \"tags\" data field is available for any SOFA component.  A tag is useful to find a specific component in the scene, to distinguish several instances of a same class in the scene graph or to process these instances differently one from another (see next article about the MultiTagAnimationLoop).</p>"},{"location":"20_Simulation_Principles/11_Animation_Loop/","title":"Animation loop","text":"<p>All the scenes in SOFA must include an AnimationLoop. This components orders all steps of the simulation and the system resolution. At each time step, the animation loop triggers each event (solving the matrix system, managing the constraints, detecting the collision, etc.) through a Visitor mechanism (see below). In a scene, if no animation loop is defined, a \"DefaultAnimationLoop\" is automatically created.</p> <p>Several AnimationLoops are already available in SOFA:</p> <ul> <li> <p>DefaultAnimationLoop:   this is the default animation loop as the name indicates! This animation loop is included by default at the root node of the graph, if no animation loop is specified in the scene. With a DefaultAnimationLoop, the loop of one simulation step follows:</p> <ol> <li>collision detection is triggered through the collision pipeline (if any)</li> <li>solve the physics in the scene by triggering the integration scheme, taking the constraint, collision into account</li> <li>update the system (new values of the dofs), the context (dt++), the mappings and the bounding box (volume covering all objects of the scene)</li> </ol> </li> <li> <p>MultiTagAnimationLoop:   this animation loop works by labelling components using different tags. With a MultiTagAnimationLoop, the loop of one simulation step is the same as the DefaultAnimationLoop, except that one tag is solved after another, given a list of tags:</p> <ol> <li>For each tag defined:</li> <li>collision detection is triggered through the collision pipeline (if any)</li> <li>solve the physics in the scene by triggering the integration scheme, taking the constraint, collision into account</li> <li>update the system (new values of the dofs), the context (dt++), the mappings and the bounding box (volume covering all objects of the scene)</li> </ol> </li> <li> <p>MultiStepAnimationLoop:   given one time step, this animation loop allows for running several collision (C being the number of collision steps) and several integration time in one step (I being the number of integration time steps), where C and I can be different. If the global time step is noted dt, the time integration time is actually: dt' = dt / (C.I). The loop in one animation step is:</p> <ol> <li>compute C times the collision pipeline within one time step dt</li> <li>For each collision step, solve I times the linear system for time integration using the time step dt'</li> <li>update the context, the mappings, the bounding box (the visualization is done once at each time step dt)</li> </ol> </li> <li> <p>FreeMotionAnimationLoop:   this animation loop is used for simulation involving constraints and collisions. With a FreeAnimationLoop, the loop of one simulation step follows:</p> <ol> <li>build and solve all linear systems in the scene without constraints and save the \"free\" values of the dofs</li> <li>collision detection is computed thus generating constraints</li> <li>constraints are solved as one system to compute a correction term taking into account the collisions &amp; constraints</li> <li>update the mappings, the bounding box</li> </ol> </li> </ul>"},{"location":"20_Simulation_Principles/12_Visitors/","title":"Visitors","text":"<p>During the different steps of the simulation (initialization, system assembly, solving, visualization), information needs to be recovered from all graph nodes. SOFA relies on an implicit mechanism: the Visitors. You can find the abstract Visitor class in the SofaSimulation package.</p> <p>Visitors traverse the scene top-down and bottom-up and call the corresponding virtual functions at each graph node traversal. Visitors are therefore used to trigger actions by calling the associated virtual functions (e.g. animating the simulation, accumulating forces). Algorithmic operations on the simulated objects are implemented by deriving the Visitor class and overloading its virtual functions processNodeTopDown( ) and processNodeBottomUp( ).</p> <p>This approach hides the scene structure (parent, children) from the components, for more implementation flexibility and a better control of the execution model. Moreover, various parallelism strategies can be applied independently of the mechanical computations performed at each node. The data structure is actually extended from strict hierarchies to directed acyclic graphs to handle more general kinematic dependencies. The top-down node traversals are pruned unless all the parents of the current node have been traversed already, so that nodes with multiple parents are traversed only once all their parents have been traversed. The bottom-up traversals are made in the reverse order.</p> <p>Examples:</p> <ul> <li> <p>at the level of an AnimationLoop, visitors are used for instance to trigger the simulation step (AnimateVisitor), update the context (UpdateSimulationContextVisitor) and update the mappings (UpdateMappingVisitor).</p> </li> <li> <p>at the level of the ODESolver, visitors allow to build the linear matrix system by abstract functions. For instance, the computation of the right hand side vector b is triggered by the MechanicalComputeForceVisitor, accumulating forces is used to compute all the forces (internal or external) applied on our object. The solver then triggers the associate Visitor and the action is propagated through the graph and calls the appropriate (bottom-up) methods at each force and mapping node. All components able to compute forces will accumulate their contributions. This information is finally gathered in the MechanicalObject and the solver will use this \"force\" vector to solve the mathematical system.</p> </li> </ul>"},{"location":"20_Simulation_Principles/12_Visitors/#sequence-diagram","title":"Sequence diagram","text":"<p>Here is the usual sequence diagram of a SOFA simulation.</p>"},{"location":"20_Simulation_Principles/20_MechanicalObject/","title":"MechanicalObject","text":"<p>The main component of a simulation in SOFA is the MechanicalObject. It inherits from MechanicalState, itself inheriting from State.</p>"},{"location":"20_Simulation_Principles/20_MechanicalObject/#state-vectors","title":"State vectors","text":"<p>The MechanicalObject (MechanicalState) saves all the state vectors. These state vectors correspond to the degrees of freedom (DOFs) and their first time derivative. The vector size is the number of nodes, and the size of each vector entry depends on the template (see below).</p> <p>Note: the SOFA framework being historically focused on soft tissue mechanics, the semantic is strongly related to mechanics. The state vectors (DOFs) are stored in the field named position, their first derivatives in the velocity field and their second derivatives in the acceleration field.</p>"},{"location":"20_Simulation_Principles/20_MechanicalObject/#templates","title":"Templates","text":"<p>The state vectors can contain different type of data depending on the degrees of freedom (DOFs). In order to provide generic implementation, components (C++ classes) in SOFA will be templated on DataTypes.</p> <p>SOFA supports several DataTypes corresponding to the DOFs:</p> <ul> <li>Vec1f or Vec1d: 1 DOF per node is used. For instance, this can be used for thermodynamics (temperature field). Vec1f denotes vectors of float and Vec1d denotes the use of doubles.</li> <li>Vec2f or Vec2d: 2 DOFs per node are used. For instance, this can be used for cardiac electrophysiology.</li> <li>Vec3f or Vec3d: 3 DOFs per node are used. For instance, this can be used for mechanics.</li> <li>Vec6f or Vec6d: 6 DOFs per node are used. For instance, this can be used for beam simulations (3 translations and 3 rotations).</li> <li>Rigid3d: this DataType corresponds to 7 DOFs per node, this can be used to simulate rigid bodies (3 positions and 1 quaternion).</li> </ul> <p>In the MechanicalObject, each of these state vectors can be accessed using (scattered) state vectors, called multi-vectors or MultiVec. </p>"},{"location":"20_Simulation_Principles/20_MechanicalObject/#list-of-state-vectors-multivec","title":"List of state vectors (MultiVec)","text":"Vector name Vector type Description State position VecCoord current coordinates of the degrees of freedom velocity VecDeriv current first derivative in time of the coordinates of the degrees of freedom derivX VecDeriv x vector of the linear system Ax=b (therefore depends on the integration scheme) reset_position VecCoord coordinates of the degrees of freedom used for reset reset_velocity VecDeriv first derivative in time of the coordinates of the degrees of freedom used for reset Force force VecDeriv b vector of the linear system Ax=b (therefore depends on the integration scheme) externalForce VecDeriv vector containing only forces resulting from InteractionForceFields and some constraint forces dforce VecDeriv vector corresponding to the derivative of the forces (no much use in the code base) Rest State rest_position VecCoord coordinates of the degrees of freedom when the object is at rest (no force acting) FreeMotion free_position VecCoord in the FreeMotionAnimationLoop, coordinates of the degrees of freedom as if no collision would be taken into account (free motion) free_velocity VecDeriv in the FreeMotionAnimationLoop, first derivative in time of the coordinates of the degrees of freedom as if no collision would be taken into account (free motion) Jacobian constraint MatrixDeriv matrix containing the constraint directions, i.e. derivative of the constraint laws mappingJacobian MatrixDeriv matrix accumulating the Jacobian matrices of mappings, used only in the MechanicalMatrixMapper"},{"location":"20_Simulation_Principles/20_MechanicalObject/#symbolic-ids","title":"Symbolic ids","text":"<p>The MultiVec entries are not directly accessible by the solvers. The MultiVec are represented by identificators. The operations on the vectors are implemented using visitors which contain the identificators of the relevant vectors. The MultiVec identificators (MultiVecId) have different types, depending on the data they contain (positions or their derivatives) and the access mode.</p> <p>The use of symbolic identificators (MultiVecId) prevent other components (like solvers) from handling state vectors directly and allow to easily work with abstract MultiVec by using their ids. These symbolic ids are widely used by specialized visitors, like the ones used in ODESolver.</p> <pre><code>typedef TMultiVecId&lt;V_COORD, V_READ&gt;  ConstMultiVecCoordId;\ntypedef TMultiVecId&lt;V_COORD, V_WRITE&gt;      MultiVecCoordId;\ntypedef TMultiVecId&lt;V_DERIV, V_READ&gt;  ConstMultiVecDerivId;\ntypedef TMultiVecId&lt;V_DERIV, V_WRITE&gt;      MultiVecDerivId;\n</code></pre> <p>For simplicity, standard state vectors are represented using constant identificators:</p> <pre><code>template\nclass TStandardVec\n{\npublic:\n    typedef TVecId MyVecId;\n    static MyVecId position()      { return MyVecId(1);}\n    static MyVecId restPosition()  { return MyVecId(2);}\n    static MyVecId freePosition()  { return MyVecId(3);}\n    static MyVecId resetPosition() { return MyVecId(4);}\n    enum { V_FIRST_DYNAMIC_INDEX = 5 }; ///&lt; This is the first index used for dynamically allocated vectors\n\u2026\n};\ntemplate\nclass TStandardVec\n{\npublic:\n    typedef TVecId MyVecId;\n    static MyVecId velocity()       { return MyVecId(1); }\n    static MyVecId resetVelocity()  { return MyVecId(2); }\n    static MyVecId freeVelocity()   { return MyVecId(3); }\n    static MyVecId normal()         { return MyVecId(4); }\n    static MyVecId force()          { return MyVecId(5); }\n    static MyVecId externalForce()  { return MyVecId(6); }\n    static MyVecId dx()             { return MyVecId(7); }\n    static MyVecId dforce()         { return MyVecId(8); }\n    static MyVecId accFromFrame()   { return MyVecId(9); }\n    enum { V_FIRST_DYNAMIC_INDEX = 11 }; ///&lt; This is the first index used for dynamically allocated vectors\n...\n};\n</code></pre>"},{"location":"20_Simulation_Principles/20_MechanicalObject/#example","title":"Example","text":"<p>In an XML format, this would be written as follows: <pre><code>&lt;Node name=\"root\" dt=\"0.01\" &gt;\n    &lt;DefaultAnimationLoop /&gt;\n    &lt;MechanicalObject template=\"Vec3d\" name=\"myDOFs\" position=\"0 0 0\"/&gt;\n&lt;/Node&gt;\n</code></pre></p> <p>The C++ templates avoid code redundancy between scalar types and DOFs types. All nodes in a vector have the same type, known at compilation time to allow aggressive compiler optimizations. Nodes with different DOFs must be stored in two different MechanicalObjects.</p>"},{"location":"20_Simulation_Principles/30_Topology/","title":"Topology","text":"<p>In computer science, most of the computations require a discretization in space of the considered simulation domain. This discretization therefore implies to define the domain as a collection of subsets. Regarding the Finite Element Method (FEM), the domain is divided into small elements. These elements and their connectedness establish the topology. The topology can be used for the computation, the visualization, the collision, etc. It is therefore a transversal aspect of the simulation. </p> <p>We consider meshes that are cellular complexes made of k-simplices (triangulations, tetrahedralisation) or k-cubes (quad or hexahedron meshes). These meshes are the most commonly used in real-time surgery simulation and can be hierarchically decomposed into k-cells, edges being 1-cells, triangles and quads being 2-cells, tetrahedron and hexahedron being 3-cells. To take advantage of this feature, the different mesh topologies are structured as a family tree where children topologies are made of their parent topology.</p>"},{"location":"20_Simulation_Principles/30_Topology/#loading-a-topology","title":"Loading a topology","text":""},{"location":"20_Simulation_Principles/30_Topology/#meshloaders","title":"MeshLoaders","text":"<p>When simulating the physics of an object, its topology must therefore be loaded. To do so, many loaders are available in SOFA depending on the format of the loaded file. Among others:</p> <ul> <li>obj = MeshOBJLoader</li> <li>vtk = MeshVTKLoader</li> <li>stl = MeshSTLLoader</li> <li>off = MeshOffLoader</li> <li>gmsh = MeshGmshLoader</li> </ul> <p>All MeshLoaders share a common API, especially several available data:</p> <ul> <li>filename: corresponding to the path and filename of the file you are aiming at loading. This data is required.</li> <li>flipNormals: to flip the mesh normals</li> <li>triangulate: to divide all polygons into triangles</li> <li>createSubelements: to divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)</li> <li>onlyAttachedPoints: to keep only points attached to elements of the mesh</li> </ul> <p>Additional data (translation, rotation and scale3d) are available but it rather advised to use a TransformEngine to apply a transformation to your geometry.</p> <p>All MeshLoaders propose several data as output (for the most used): * position: vector of vertices of the mesh loaded * edges: vector of edges of the mesh loaded * triangles: vector of triangles of the mesh loaded * quads: vector of quads of the mesh loaded * polygons: vector of polygons of the mesh loaded * tetrahedra: vector of tetrahedra of the mesh loaded * hexahedra: vector of  hexahedra of the mesh loaded * normals: vector of the normals per vertex</p>  Fig. 1 - Elements of topology available in SOFA"},{"location":"20_Simulation_Principles/30_Topology/#topologycontainers","title":"TopologyContainers","text":"<p>As shown in Fig. 1, these loaders will load the different elements of the topology (if any), namely: the points, edges, triangles, quads, hexas and tetras. These elements need to be saved into a TopologyContainer. This container stores all the topological information in vectors. It indicates how vertices are connected to each other by edges, triangles or any type of mesh element and implements all the related functions (e.g. getTetrahedraAroundVertex(), getTriangleIndex()). There is one container per topological element:</p> <ul> <li>PointSetTopologyContainer</li> <li>EdgeSetTopologyContainer</li> <li>TriangleSetTopologyContainer</li> <li>QuadSetTopologyContainer</li> <li>TetrahedronSetTopologyContainer</li> <li>HexahedronSetTopologyContainer</li> </ul> <p>If the topology is uploaded from an .obj file with a topology involving tetrahedra, it would be written as: <pre><code>&lt;MeshObjLoader name=\"ObjLoader\" filename=\"path_to_my_mesh.obj\" /&gt;\n&lt;MechanicalObject name=\"StateVectors\" src=\"@ObjLoader\" /&gt;\n&lt;TetrahedronSetTopologyContainer name=\"TetraTopologyContainer\" src=\"@meshLoader\" /&gt;\n</code></pre></p> <p>Thus, the loader give the tetrahedral information to the TopologyContainer. From this information, the rest of the topology can be recovered, namely the triangles (faces), edges and points.</p> <p>Example: examples/Demos/liver.scn</p> <p>Algorithms on the geometry</p> <p>Once loaded, one may want to perform computations based on the geometry. SetGeometryAlgorithms classes are already available in SOFA to access geometrical algorithms (e.g. computeTriangleArea(), isPointInTetrahedron()). The SetGeometryAlgorithms include all geometrical functions specific to the topological elements and also implement the visualization options for this topology (e.g. showing point indices, drawing triangles). One class is implemented per topological element. Thus, it exists:</p> <ul> <li>PointSetGeometryAlgorithms</li> <li>EdgeSetGeometryAlgorithms</li> <li>TriangleSetGeometryAlgorithms</li> <li>QuadSetGeometryAlgorithms</li> <li>TetrahedronSetGeometryAlgorithms</li> <li>HexahedronSetGeometryAlgorithms</li> </ul> <p>In the XML scene, we have:</p> <pre><code>&lt;MeshObjLoader name=\"ObjLoader\" filename=\"path_to_my_mesh.obj\" /&gt;\n&lt;MechanicalObject name=\"StateVectors\" src=\"@ObjLoader\" /&gt;\n&lt;TetrahedronSetTopologyContainer name=\"TetraTopologyContainer\" src=\"@meshLoader\" /&gt;\n&lt;TetrahedronSetGeometryAlgorithms name=\"TetraAlgorithms\" template=\"Vec3d\" drawTetrahedra=\"1\"/&gt;\n</code></pre> <p>Inheritance</p> <p>When a topology is loaded in a node of the graph, the child nodes will automatically inherit from the parent's topology.</p>"},{"location":"20_Simulation_Principles/30_Topology/#topological-changes","title":"Topological changes","text":"<p>In some simulations, the topology may evolve. Elements could be removed, added or separated: this is dynamic topological changes. Some components in SOFA do support such topological changes. In a scene with a dynamic topology, two components are compulsory:</p> <ul> <li>SetTopologyModifier: defines all the basic operations (add or remove tetrahedra) and their process</li> <li>SetTopologyAlgorithms: defines more specific algorithms (e.g. subDivideTetrahedronsWithPlane(), InciseAlongEdge(), etc.)</li> </ul> <p>The XLM scene looks like:</p> <pre><code>&lt;MeshObjLoader name=\"ObjLoader\" filename=\"path_to_my_mesh.obj\" /&gt;\n&lt;MechanicalObject name=\"StateVectors\" src=\"@ObjLoader\" /&gt;\n&lt;TetrahedronSetTopologyContainer name=\"TetraTopologyContainer\" src=\"@meshLoader\" /&gt;\n&lt;TetrahedronSetTopologyModifier   name=\"Modifier\" /&gt;\n&lt;TetrahedronSetTopologyAlgorithms name=\"TopoAlgo\"   template=\"Vec3d\" /&gt;\n&lt;TetrahedronSetGeometryAlgorithms name=\"TetraAlgorithms\" template=\"Vec3d\" /&gt;\n</code></pre> <p>Then, the nature of the topological changes can either:</p> <ul> <li>be scheduled using a specific component: the TopologicalChangeProcessor (many examples are available in the folder examples/Component/Topology/Container/Dynamic/)</li> <li>or be developed for a specific need, e.g. simulating of cutting when a contact is detected. A class managing the topological change can be implemented using all functions implemented in the class SetTopologyModifier. Functions implementing standard removal or adding of elements are available in these modifiers. The class TopologicalChangeManager is a good example.</li> </ul>"},{"location":"20_Simulation_Principles/30_Topology/#topological-mappings","title":"Topological mappings","text":"<p>Multi-model representation</p> <p>One of the significant strength of SOFA is to allow several representation of a same object. For instance, an object can have a coarse triangular representation for the collision, a tetrahedral representation of the mechanics and a very detailed quad surface for the visualization. However, this means that these different representations must be linked one to another. This is the role of the mappings. When you run a simulation with such several representations, it assumes to load the different topologies in the scene.</p> <p>From a topology to another</p> <p>It is possible to define a mesh topology from another mesh topology using the same degrees of freedom. Again, the mappings make it possible. Mappings can be used either to go from one topology to a lower one in the topological hierarchy (from tetrahedra to triangles), or to split elements (quads into triangles). As usual mappings, forces applied on the slave topology are propagated onto the master one. Both topologies will therefore be assigned to the same MechanicalObject. The existing TopologicalMappings are:</p> <ul> <li>Hexa2TetraTopologicalMapping</li> <li>Hexa2QuadTopologicalMapping</li> <li>Quad2TriangleTopologicalMapping</li> <li>Tetra2TriangleTopologicalMapping</li> <li>Triangle2EdgeTopologicalMapping</li> </ul> <p>Topological subset</p> <p>Finally, SOFA allows to select a subset of the topology using a SubsetTopologicalMapping. A part of the topology in the parent node can thus be selected to be used in a child node.</p> <p>All examples are available in the folder examples/Component/Topology/Mapping/.</p>"},{"location":"20_Simulation_Principles/70_Engine/","title":"Engine","text":"<p>As explained the documentation page on Data, SOFA allows to connect Data instances (Data link) to keep their value synchronized. An Engine (or DataEngine) is a component which relies on this concept to compute one or several output Data based on one or several input Data.</p> <p>The specifity of the Engines resides in their update mechanism: output Data are updated based on the input Data through a mechanism of lazy evaluation. Data values which are not up-to-date are recursively flagged as \"dirty\", but they are recomputed only when necessary. The update (recomputation) only occurs when the Data itself or a Data depending on this Data is accessed.</p> <p>For instance:</p> <ul> <li>the TransformEngine computes a geometric transformation (rotation, translation,scaling) on input positions (e.g. coming from a MeshLoader) and outputs the transformed position</li> <li>based on a bounding box and a vector of coordinates, a BoxROI engine computes the list of indices of the coordinates inside the box. These indices can then be used as input of a FixedConstraint to define a fixed boundary condition. With this design, the simulation can transparently be setup either from data stored in static files, or generated automatically with engines.</li> </ul> <p>Engines are meant to perform relatively simple computations, but can easily be created in a series. The network of interconnected Data objects defines a Data dependency graph, superimposed on the scene graph. This Data dependency graph is not visible within the runSofa GUI.</p>"},{"location":"20_Simulation_Principles/70_Engine/#api-of-engines","title":"API of Engines","text":"<p>The API of engines is pretty simple since only one function is to be implemented (on top of the <code>init()</code> function common to all SOFA components):</p> <pre><code>// Update function in Engines computing the new values of outputs from inputs\nvoid doUpdate()\n</code></pre> <p>This function is in charge of the computation of the ouput Data based on the input Data. It is the delegate function from the <code>update()</code> function implemented in DataEngine which updates all inputs before calling the <code>doUpdate()</code> function.</p>"},{"location":"20_Simulation_Principles/70_Engine/#list-of-engines","title":"List of Engines","text":"<ul> <li>BoxROI</li> <li>PlaneROI</li> <li>SphereROI</li> <li>ExtrudeSurface</li> <li>MergePoints</li> <li>PointsFromIndices</li> <li>TextureInterpolation</li> <li>TransformEngine</li> <li>TransformPosition</li> <li>Spiral</li> <li>Vertex2Frame</li> <li>SubsetTopology</li> </ul>"},{"location":"20_Simulation_Principles/70_Engine/#example-of-use","title":"Example of use","text":"<p>Here is an example with the TransformEngine with an input data (\"input_position\") and an output data (\"output_position\") resulting from a transformation defined by the user (here translation):</p> <pre><code>&lt;TransformEngine name=\"translationEngine\" template=\"Vec3d\" translation=\"10 0 0\" input_position=\"@meshLoader.position\" /&gt;\n&lt;MechanicalObject name=\"transform\" template=\"Vec3d\" position=\"@translationEngine.output_position\" /&gt;\n</code></pre> <p>or in python:</p> <pre><code>node.addObject(\"TransformEngine\", name=\"translationEngine\", template=\"Vec3d\", translation=\"10 0 0\", input_position=\"@meshLoader.position\")\nnode.addObject(\"MechanicalObject\", name=\"transform\", template=\"Vec3d\", position=\"@translationEngine.output_position\")\n</code></pre>"},{"location":"20_Simulation_Principles/90_Example-Simple_Body/","title":"Example-Simple Body","text":"<p>This page presents the basic components required to simulate a single object.</p>"},{"location":"20_Simulation_Principles/90_Example-Simple_Body/#the-animation-loop","title":"The animation loop","text":"<p>Any simulation in SOFA is ruled by an animation loop. This component manages the different steps of the simulation, i.e. the animation loop makes the simulation run from one time step to the next, and at each time step, it triggers the solving of the system and the associated constraints. If no animation loop is defined in the scene, a \"DefaultAnimationLoop\" is automatically created.</p> <p>In an XML format, this would be written as follows: <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9.81 0\"&gt;\n    &lt;DefaultAnimationLoop /&gt;\n&lt;/Node&gt;\n</code></pre></p>"},{"location":"20_Simulation_Principles/90_Example-Simple_Body/#state-vectors-dofs","title":"State vectors (DOFs)","text":"<p>As described in the introduction to state vectors, the degrees of freedom (DOFs) of your simulation are stored in state vectors. These vectors are managed by the main component of a simulation: the MechanicalObject. The SOFA framework was historically focused on soft tissue mechanics. Therefore, the semantic is strongly related to mechanics.</p> <p>Depending on the physics (DOFs) you want to compute, you will have to choose the template of the MechanicalObject among: 1, 2, 3 or 6 reals per node, 1 rigid per node.</p> <p>In an XML format, this would be written as follows: <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9.81 0\"&gt;\n    &lt;DefaultAnimationLoop /&gt;\n    &lt;MechanicalObject template=\"Vec3f\" name=\"myDOFs\" /&gt;\n&lt;/Node&gt;\n</code></pre></p>"},{"location":"20_Simulation_Principles/90_Example-Simple_Body/#solvers","title":"Solvers","text":"<p>To solve the mathematical system at each time step, solvers have to be defined. For dynamic simulations, you need to choose:</p> <ul> <li>an integration scheme, or ODE solver: Euler explicit, implicit, Runge Kutta, etc. This schemes describes how to compute the next state based on the current one.</li> <li>a linear solver: iterative (conjugate gradient) or direct (LU, LDL, etc.) to solve the linear system assembled by the previous integration scheme.</li> </ul> <p>Discover more about how the mathematical system is solved in SOFA in the associated page.</p> <p>In an XML format, this would be written as follows: <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9.81 0\"&gt;\n    &lt;DefaultAnimationLoop /&gt;\n    &lt;EulerImplicitSolver rayleighStiffness=\"0.01\"/&gt;\n    &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-06\" threshold=\"1e-06\"/&gt;\n    &lt;MechanicalObject name=\"myRigidDOF\" template=\"Rigid\" position=\"0 0 0 0 0 0 0\" /&gt;\n&lt;/Node&gt;\n</code></pre></p>"},{"location":"20_Simulation_Principles/90_Example-Simple_Body/#physics","title":"Physics","text":"<p>There is many different kind of physics available in SOFA, namely soft body mechanics but also thermodynamics and fluid dynamics. To run a physics simulation, all you need is to add the associated component in your scene.</p> <p>If we consider an object with a mass under gravity, you will have to:</p> <ul> <li>load your object (ex: a torus),</li> <li>add the mass component (ex: DiagonalMass if you want to consider your mass matrix as diagonal)</li> </ul> <p>In an XML format, this would be written as follows: <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9.81 0\"&gt;\n    &lt;DefaultAnimationLoop /&gt;\n    &lt;EulerImplicitSolver rayleighStiffness=\"0.01\"/&gt;\n    &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-06\" threshold=\"1e-06\"/&gt;\n    &lt;MeshGmshLoader name=\"meshLoader\" filename=\"torus.msh\"/&gt;\n\n    &lt;MechanicalObject name=\"myRigidDOF\" template=\"Vec3d\" src=\"@meshLoader\" /&gt;\n    &lt;DiagonalMass densitymass=\"1.0\"/&gt;\n&lt;/Node&gt;\n</code></pre></p> <p>The gravity is defined in the root node, whereas the mass properties (density) are defined directly in the component.</p> <p>Adding a deformable model (ex: linear elasticity for tetrahedral topology), this would be written: <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9.81 0\"&gt;\n    &lt;DefaultAnimationLoop /&gt;\n    &lt;EulerImplicitSolver rayleighStiffness=\"0.01\"/&gt;\n    &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-06\" threshold=\"1e-06\"/&gt;\n    &lt;MeshGmshLoader name=\"meshLoader\" filename=\"torus.msh\"/&gt;\n\n    &lt;MechanicalObject name=\"myRigidDOF\" template=\"Vec3d\" src=\"@meshLoader\" /&gt;\n    &lt;DiagonalMass densitymass=\"1.0\"/&gt;\n    &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"5000\" poissonRatio=\"0.45\"/&gt;\n&lt;/Node&gt;\n</code></pre></p> <p>Now, you have your first physics simulation! To discover more about the simulation and the mechanisms of SOFA, you can visit:</p> <ul> <li>the topology,</li> <li>the system resolution,</li> <li>the physics models (forcefields),</li> <li>the mappings,</li> <li>the constraints,</li> <li>and the detection collision and response.</li> </ul>"},{"location":"20_Simulation_Principles/40_System_Resolution/10_Integration_Scheme/","title":"Integration Schemes","text":"<p>All dynamic simulations assume to discretize the temporal evolution of the system through small time steps. This time step is usually noted dt. An integration scheme is the numerical method describing how to find the approximate solution for ordinary differential equations (ODE).</p> <p>They are usually called ODESolver in SOFA. </p> <p>Let's write our ordinary differential equation of a function y as follows: .</p> <p>ODESolver defines how to go from the current time step (t) to the next (t + dt), which will structure the linear system . The integration scheme therefore defines which forces impact the left hand side matrix  and which forces contribute to the right hand side vector b:</p> <ul> <li>explicit contributions depending on the degrees of freedom (DOFs) at the current time step  will contribute to the b vector</li> <li>while implicit contributions depending on the degrees of freedom (DOFs) at the next step  (unknown) will contribute to . </li> </ul>"},{"location":"20_Simulation_Principles/40_System_Resolution/10_Integration_Scheme/#two-categories","title":"Two categories","text":"<p>Two main categories of integration schemes exist: explicit and implicit schemes. A combination of explicit and implicit methods are also possible, it is called semi-implicit or semi-explicit schemes.</p>"},{"location":"20_Simulation_Principles/40_System_Resolution/10_Integration_Scheme/#explicit-scheme","title":"Explicit scheme","text":"<p>An explicit scheme means that the new time step (t + dt) is computed based on information of the previous time step (t):</p> <p></p> <p>For instance, in mechanics, internal or external forces would be computed on current known positions . The ordinary differential equation looks like:</p> <p></p> <p>Explicit schemes are usually known as being fast to solve (since the created linear system is lighter) but they require very small time steps, unless they may undergo stability issues. They are known to efficiently solve non-stiff problems.</p> <p>Explicit ODESolvers in SOFA:</p> <ul> <li>EulerExplicitSolver</li> <li>CentralDifferenceSolver</li> <li>RungeKutta2Solver</li> </ul>"},{"location":"20_Simulation_Principles/40_System_Resolution/10_Integration_Scheme/#implicit-scheme","title":"Implicit scheme","text":"<p>An implicit scheme means that the new time step (t + dt) is computed based on information of this next time step (t + dt):</p> <p></p> <p>For instance, in mechanics, internal or external forces would be computed on unknown positions at the next time step . The ordinary differential equation looks like:</p> <p></p> <p>Implicit schemes are known as being slower to solve (the outcoming linear system is more complex) but they are way more stable than explicit schemes. Stiff differential equations require the use of implicit schemes.</p> <p>Implicit ODESolvers in SOFA:</p> <ul> <li>EulerImplicitSolver</li> <li>NewmarkImplicitSolver</li> <li>VariationalSymplecticSolver</li> </ul>"},{"location":"20_Simulation_Principles/40_System_Resolution/10_Integration_Scheme/#in-the-sofa-code","title":"In the SOFA code","text":"<p>The integration scheme is described in the <code>solve()</code> function of the ODESolver. This solve() function is called by the AnimationLoop (through a dedicated visitor) and builds the complete linear system .</p>"},{"location":"20_Simulation_Principles/40_System_Resolution/10_Integration_Scheme/#specification-of-the-scheme","title":"Specification of the scheme","text":"<p>The construction of the linear system changes whether the integration scheme is explicit or implicit, which is specified by:</p> <ul> <li> <p>for explicit cases <pre><code>mop-&gt;setImplicit(false);\n</code></pre></p> </li> <li> <p>for implicit cases <pre><code>mop-&gt;setImplicit(true);\n</code></pre></p> </li> </ul>"},{"location":"20_Simulation_Principles/40_System_Resolution/10_Integration_Scheme/#build-the-linear-matrix-system","title":"Build the linear matrix system","text":"<p>The left hand side matrix  is built using the function: <pre><code>matrix = MechanicalMatrix(r_M, r_B, r_K);\n</code></pre> where r_M (mass coefficient), r_B (damping coefficient). and r_K (stiffness coefficient) are Rayleigh coefficients (see section below). Depending on the scheme (explicit or implicit, see previous paragraph) and on the type of LinearSolver used (if any), the abstract function <code>MechanicalMatrix</code> will trigger different visitors, thus different functions to compute the system matrix . Discover the API used for the computation of  in the ForceField and Mass doc pages.</p> <p>The right hand side vector b is built through the function: <pre><code>computeForce(b)\n</code></pre></p> <p>Again, Depending on the scheme (explicit or implicit, see previous paragraph), the abstract function <code>computeForce</code> will trigger different visitors, thus different functions to accumulate the forces into the vector b. Discover the API used for the computation of b in the ForceField doc page.</p>"},{"location":"20_Simulation_Principles/40_System_Resolution/10_Integration_Scheme/#state-vectors-in-odesolver","title":"State vectors in ODESolver","text":"<p>In order to build the linear matrix system, the ODESolver uses information contained in state vectors (like DOFs and their derivatives) within the scope of the ODESolver. The ODESolver does not access the state vectors directly. It accesses the state vectors remotely using visitors, which traverse the graph starting from the node which contains the solver. This keeps the implementation of the solver independent from the simulated objects and their types.</p> <p>Each type of solver may use different auxiliary state vectors to implement their simulation method. State vectors (MultiVec) are allocated and processed in the scope of the solver in a thread-safe way using an instance of simulation::common::VectorOperations. For instance, a Runge-Kutta algorithms needs to save the result of previous time steps.</p> <p>To create an auxiliary vector, this can be done as follows:</p> <pre><code>MultiVecCoord pos(&amp;vop, core::VecCoordId::position() ); // standard position vector\nMultiVecDeriv acc(&amp;vop);                                // auxiliary vector\nMultiVecCoord previousPos(&amp;vop, previousPosID);         // additional vector\n</code></pre>"},{"location":"20_Simulation_Principles/40_System_Resolution/10_Integration_Scheme/#compute-the-solution","title":"Compute the solution","text":"<p>In most cases, the matrix system  can then be sent to a LinearSolver in charge of finally solving the system defined according to the chosen scheme. Within the function ODESolver::solve(), the call to the LinearSolver will appear through the function call:</p> <pre><code>matrix.solve(x, b);\n</code></pre> <p>Some simple matrix cases provides a diagonal matrix . In this specific configuration, a solution can directly be found by dividing the right hand side vector b by the diagonal matrix . This is done using the function: <pre><code>mop.accFromF(acc, f);\n</code></pre></p>"},{"location":"20_Simulation_Principles/40_System_Resolution/10_Integration_Scheme/#rayleigh-damping","title":"Rayleigh damping","text":"<p>The Rayleigh damping is a numerical damping. This damping has therefore no physical meaning and must not be mixed up with physical damping (like DiagonalVelocityDampingForceField in SOFA). The Rayleigh damping corresponds to a damping matrix that is proportional to the mass or/and stiffness matrices using coefficients, respectively Rayleigh stiffness factor  or Rayleigh mass factor . This numerical damping is usually used to stabilize or ease convergence of the simulation. However, it has to be used carefully.</p> <p>When Rayleigh damping is used, the matrix  equals  where  is the mass matrix,  is the damping matrix and  is the stiffness matrix. You can see the use of Rayleigh mass and stiffness in the solve() function of the EulerImplicit class (see EulerImplicitSolver.cpp).</p> <p>NB: The negative sign in front of M, a positive matrix, represents the fact that viscosity opposes motion. Elasticity also opposes it, however K is a negative matrix. This formula therefore provides two positive coefficients.</p>"},{"location":"20_Simulation_Principles/40_System_Resolution/20_Linear_Solver/","title":"Linear solvers","text":"<p>Once the integration scheme described how the linear matrix system is built, this system  must be solved in order to find the solution  at the next time step.</p> <p>To solve this system, two main categories of algorithms exist: the direct solvers and the iterative solvers.</p>"},{"location":"20_Simulation_Principles/40_System_Resolution/20_Linear_Solver/#direct-solvers","title":"Direct solvers","text":"<p>These solvers aim at finding the exact solution  of the system by computing in one single step . To do so, various methods exist to compute the inverse matrix of .</p> <p>For small-size linear systems, the direct methods will be efficient. Large and sparse systems may imply time-consuming inverse of the matrix . The advantage of direct methods is that they succeed to solve well-conditioned and even some quite ill-conditioned problems. The computation of the inverse of  often relies on decomposition of this matrix: Cholesky, LU or LDL and their sparse versions are available.</p>"},{"location":"20_Simulation_Principles/40_System_Resolution/20_Linear_Solver/#direct-solver-implementation","title":"Direct solver implementation","text":"<p>Direct solvers in SOFA are:</p> <ul> <li>SparseLDLSolver and AsyncSparseLDLSolver</li> <li>LULinearSolver (in SofaNewmat plugin) / SparseLUSolver</li> <li>CholeskySolver / SparseCholeskySolver</li> <li>SVDLinearSolver (Jacobi SVD)</li> <li>BTDLinearSolver</li> </ul>"},{"location":"20_Simulation_Principles/40_System_Resolution/20_Linear_Solver/#in-the-sofa-code","title":"In the SOFA code","text":"<p>The resolution of the linear system is computed in the <code>solve()</code> function of the LinearSolver. With direct solvers, the integration scheme successively calls the two following functions:</p> <p><pre><code>invert(Matrix&amp; M)\n</code></pre> implementing the targeted decomposition method: <pre><code>solve(Matrix&amp; A, Vector&amp; x, Vector&amp; b)\n</code></pre></p>"},{"location":"20_Simulation_Principles/40_System_Resolution/20_Linear_Solver/#iterative-solvers","title":"Iterative solvers","text":"<p>Contrary to direct solvers, iterative methods converge towards the solution gradually. The solution is approximated at each iteration a little bit more accurately, rather than computed in one single large iteration. With iterative methods, the error estimated in the solution decreases with the number of iterations.</p> <p>For well-conditioned problems (even large systems), the convergence remains monotonic. However, for ill-conditioned systems, the convergence might be much slower. Since these methods compute the residual  at each iteration, the matrix  does not have to be built to improve performances (only matrix vector computations). Numerical settings of the solver (maximum number of iterations, tolerance for instance) must be appropriately defined. Two available methods are the conjugate gradient method (using the CGLinearSolver) or the minimal residual method (using the MinResLinearSolver).</p>"},{"location":"20_Simulation_Principles/40_System_Resolution/20_Linear_Solver/#iterative-solver-implementation","title":"Iterative solver implementation","text":"<p>Iterative solvers in SOFA are:</p> <ul> <li>CGLinearSolver</li> <li>ShewchukPCGLinearSolver</li> <li>MinResLinearSolver</li> </ul>"},{"location":"20_Simulation_Principles/40_System_Resolution/20_Linear_Solver/#in-the-sofa-code_1","title":"In the SOFA code","text":"<p>The resolution of the linear system is computed in the <code>solve()</code> function of the LinearSolver. With iterative solvers, the integration scheme only calls the function:</p> <p><pre><code>solve(Matrix&amp; A, Vector&amp; x, Vector&amp; b)\n</code></pre> and will handle these vectors as TempVectorContainer and create any new vector using the function vtmp.createTempVector() as follows: <pre><code>typename Inherit::TempVectorContainer vtmp(this, params, A, x, b);\nVector* r1 =  vtmp.createTempVector();\n</code></pre></p>"},{"location":"20_Simulation_Principles/40_System_Resolution/20_Linear_Solver/#matrix-assembly-vs-matrix-free","title":"Matrix Assembly vs. Matrix Free","text":"<p>Linear solvers can also be divided into the two following categories:</p> <ul> <li>Matrix Assembly: the matrix of the system is explicitly assembled before being used to solve the system.</li> <li>Matrix Free: there is no data structure or allocated memory used to store a matrix. Instead, the solver only calls matrix-vector operations (e.g. product), which do not require the explicit assembly of the matrix.</li> </ul> <p>In SOFA, the choice of the type of solver is made through the template parameter of the linear solver component. For example, <code>&lt;SparseLDLSolver/&gt;</code> is a shortcut for <code>&lt;SparseLDLSolver template=\"CompressedRowSparseMatrixd\"/&gt;</code> (<code>CompressedRowSparseMatrixd</code> is the default template parameter of SparseLDLSolver). <code>CompressedRowSparseMatrixd</code> means the matrix is assembled in a compressed sparse row data structure. SparseLDLSolver also supports the template parameter <code>CompressedRowSparseMatrixMat3x3d</code>, where the entries of the matrix are 3x3 blocks.</p> <p>Another example is CGLinearSolver. Its default template parameter is <code>GraphScattered</code>. This template parameter means the implementation is matrix-free. However, CGLinearSolver is a solver supporting also assembled matrices. For example, it is possible to declare <code>&lt;CGLinearSolver template=\"CompressedRowSparseMatrixMat3x3d\"/&gt;</code>.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/10_Physics_integration/","title":"Physics integration","text":"<p>Since SOFA is working a lot on solid mechanics, this introduction to physics integration using the FEM is applied on continuum mechanics.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/10_Physics_integration/#conservation-of-linear-momentum","title":"Conservation of linear momentum","text":"<p>The Newton's second law gives:</p> <p></p> <p></p> <p>the force  corresponds to the integration of traction forces and the force  corresponds to the body forces. With the Cauchy's law and Gauss's theorem, the conservation of linear momentum in the strong (or generalized) form is written:</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>where  is the Cauchy's stress tensor (as a reminder ),  is the density of external forces (force per mass unit),  is the mass density and  is the acceleration of the body. The conservation of linear momentum equation relates the change of momentum (LHS inertia term) and the equilibrium equation (RHS with the internal and external forces), which must be solved at each time step.</p> <p>In order to find a solution over the domain of simulation, we need to integrate this momentum equation. However, in much cases, no exact solution can directly be found. To ensure the existence of a solution, this strong form must be converted into a discrete problem, known as the weak or variational formulation. This is done by taking the product of a test function with the momentum equation and integrating over the current configuration. It is equivalent to formulating the problem to require a solution in the sense of a distribution. The test function is also known as weight function or basis functions, noted . Let  denote the volume of our domain and $\\Gamma$ denote the surface of the domain, the weak form of the momentum equation becomes:</p> <p></p> <p>The divergence term can be split as follows:</p> <p></p> <p></p> <p>where appear both a traction boundary condition and an interior traction condition, so that the equation is:</p> <p></p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/10_Physics_integration/#fem-at-a-glance","title":"FEM at a glance","text":"<p>Since no exact integration can be performed on a random domain $\\Omega$, the Finite Element Method (FEM) relies on the subdivision of the domain into sub-domains: the finite elements. Many different elements can be considered: quads, triangles, tetrahedra, hexahedra etc. The integration of any function f over the domain  will therefore result in the sum of the integrals over each finite element (E being the total number of finite elements) so that:</p> <p></p> <p>The FEM will take advantage of the simple shape of these finite elements to compute these integrals. Within an element, any field like the displacement field u can be evaluated in any point P(x) as a linear combination of interpolation functions  (called shape functions) and the values of this field  at each vertex i of the element (N being the total number of vertices in one element):</p> <p></p> <p>The shape functions  ensures the continuity of any field over the element. Each element type therefore has specific shape functions. In SOFA, linear interpolation functions are used in the open-source core. Note that higher order (non-linear) elements are available in a SOFA plugin: SofaHighOrder.</p> <p>Note: the Galerkin-Ritz method, the test function  corresponds to the shape function, noted . In SOFA, we rely here on this method.</p> <p>The shape functions  can be expressed with regards to local coordinates , corresponding to a reference configuration of the element. Even if the elements get distorted during the simulation, each element can always be mapped back to one common reference configuration with local coordinates , as shown in the figure below. In other words, for any point in space  inside the element  a corresponding point  can be found in the reference space of the element .</p> <p></p> <p>Therefore, it always exists a transformation  which can be defined as:</p> <p></p> <p></p> <p>This transformation  is bijective if the determinant of the Jacobian of the transformation is non-null . Moreover, the transformation  will allow for the integration of the weak form by change of variables: instead of integrating over , the integration will be reported on the reference element . </p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/10_Physics_integration/#example","title":"Example","text":"<p>Let's consider an example. A density of force  that depends linearly on the coordinates : . The integration of this term can be done as follows:</p> <p></p> <p></p> <p></p> <p>For each finite element, the shape function  is defined regarding the local coordinates . The expression of   results from it. Finally, using a Gauss quadrature (or Gauss point integration), it is possible to find a numerical solution to this integral over the reference element.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/10_Physics_integration/#integration-of-physics","title":"Integration of physics","text":"<p>In SOFA, the physics will be mainly implemented in Mass components and ForceField. You can have a look at the integration of:</p> <ul> <li>the mass in MeshMatrixMass</li> <li>the integration of linear elasticity in TetrahedronFEMForceField</li> </ul>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/11_Mass/","title":"Mass","text":"<p>In simulation, the mass usually results from the volume integration of a density (see the Physics Integration section). It can be a mass density, but it can be a electrical or electrical conductivity among others. In all these equations, the density appears in the left hand side part of the equation. The mass matrix therefore contributes to , in the linear System .</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/11_Mass/#mass-api","title":"Mass API","text":"<p>The choice of the temporal scheme will influence the way the linear system  is built. As a consequence, it also impacts the API:</p> <ul> <li> <p>for iterative solvers, the result of the multiplication between the mass matrix  and an approximated solution is computed by the function: <code>addMDx()</code> </p> </li> <li> <p>for direct solvers, the mass matrix  is built by the function: <code>addMToMatrix()</code> and will be used later when the system matrix will be inversed</p> </li> </ul>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/11_Mass/#mass-implementations","title":"Mass implementations","text":"<p>See examples of Mass implementation:</p> <ul> <li>UniformMass</li> <li>MeshMatrixMass</li> <li>DiagonalMass</li> </ul>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/11_Mass/#template-of-a-mass","title":"Template of a Mass","text":"<p>TemplateMass.h : declares the variable, the Data and the functions of the class</p> <pre><code>/******************************************************************************\n*       SOFA, Simulation Open-Framework Architecture, development version     *\n*                (c) 2006-2019 INRIA, USTL, UJF, CNRS, MGH                    *\n*                                                                             *\n* This program is free software; you can redistribute it and/or modify it     *\n* under the terms of the GNU Lesser General Public License as published by    *\n* the Free Software Foundation; either version 2.1 of the License, or (at     *\n* your option) any later version.                                             *\n*                                                                             *\n* This program is distributed in the hope that it will be useful, but WITHOUT *\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *\n* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *\n* for more details.                                                           *\n*                                                                             *\n* You should have received a copy of the GNU Lesser General Public License    *\n* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.        *\n*******************************************************************************\n* Authors: The SOFA Team and external contributors (see Authors.txt)          *\n*                                                                             *\n* Contact information: contact@sofa-framework.org                             *\n******************************************************************************/\n#ifndef SOFA_COMPONENT_MASS_TEMPLATEMASS_H\n#define SOFA_COMPONENT_MASS_TEMPLATEMASS_H\n\n#include \"config.h\"\n\nnamespace sofa\n{\n\nnamespace component\n{\n\nnamespace mass\n{\n\ntemplate &lt;class DataTypes, class TMassType&gt;\nclass TemplateMass : public core::behavior::Mass&lt;DataTypes&gt;\n{\npublic:\n    SOFA_CLASS(SOFA_TEMPLATE2(TemplateMass,DataTypes,TMassType),\n               SOFA_TEMPLATE(core::behavior::Mass,DataTypes));\n\n\n    /// Declare here the data and their type, you want the user to have access to\n    Data&lt;SReal&gt; d_massDensity;\n\n    /// Function responsible for the initialization of the component\n    void init() override;\n\n    // IF iterative solver, compute the mass contribution and multiplies it with dx\n    void addMDx(const core::MechanicalParams* mparams, DataVecDeriv&amp; f, const DataVecDeriv&amp; dx, SReal factor) override;\n\n    // IF direct solver, compute the mass contribution to global Matrix assembling\n    void addMToMatrix(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor* matrix) override;\n\n    // Compute the acceleration resulting from the acc = F/M\n    // in explicit cases, the solution can directly be found when the matrix is diagonal\n    void accFromF(const core::MechanicalParams* mparams, DataVecDeriv&amp; a, const DataVecDeriv&amp; f) override;\n\n    // Boolean function informing about the structure of the resulting mass matrix\n    bool isDiagonal() override {return false;}\n\n    // Compute the kinetic energy : vMv/2\n    SReal getKineticEnergy(const core::MechanicalParams* mparams, const DataVecDeriv&amp; d_v) const override;\n\n    // Compute the potential energt Mgx in a uniform gravity field, null at origin\n    SReal getPotentialEnergy(const core::MechanicalParams* mparams, const DataVecCoord&amp; x) const override;\n\n    // Compute the momentum induced by the mass inertia (Mv,cross(x,Mv)+Iw)\n    defaulttype::Vector6 getMomentum(const core::MechanicalParams* mparams, const DataVecCoord&amp; x, const DataVecDeriv&amp; v) const override;\n\nprotected:\n\n    TemplateMass();\n    ~TemplateMass();\n\n};\n\n\n\n#if  !defined(SOFA_COMPONENT_MASS_TEMPLATEMASS_CPP)\nextern template class TemplateMass&lt;defaulttype::Vec3Types, double&gt;;\nextern template class TemplateMass&lt;defaulttype::Vec2Types, double&gt;;\nextern template class TemplateMass&lt;defaulttype::Vec1Types, double&gt;;\nextern template class TemplateMass&lt;defaulttype::Vec6Types, double&gt;;\n\n#endif\n\n} // namespace mass\n\n} // namespace component\n\n} // namespace sofa\n\n#endif\n</code></pre> <p>TemplateMass.inl : implements the functions of the class</p> <pre><code>/******************************************************************************\n*       SOFA, Simulation Open-Framework Architecture, development version     *\n*                (c) 2006-2019 INRIA, USTL, UJF, CNRS, MGH                    *\n*                                                                             *\n* This program is free software; you can redistribute it and/or modify it     *\n* under the terms of the GNU Lesser General Public License as published by    *\n* the Free Software Foundation; either version 2.1 of the License, or (at     *\n* your option) any later version.                                             *\n*                                                                             *\n* This program is distributed in the hope that it will be useful, but WITHOUT *\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *\n* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *\n* for more details.                                                           *\n*                                                                             *\n* You should have received a copy of the GNU Lesser General Public License    *\n* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.        *\n*******************************************************************************\n* Authors: The SOFA Team and external contributors (see Authors.txt)          *\n*                                                                             *\n* Contact information: contact@sofa-framework.org                             *\n******************************************************************************/\n#ifndef SOFA_COMPONENT_MASS_TEMPLATEMASS_INL\n#define SOFA_COMPONENT_MASS_TEMPLATEMASS_INL\n\n#include \"TemplateMass.h\"\n\nnamespace sofa\n{\n\nnamespace component\n{\n\nnamespace mass\n{\n\ntemplate &lt;class DataTypes, class MassType&gt;\nTemplateMass&lt;DataTypes, MassType&gt;::TemplateMass()\n    : d_massDensity ( initData ( &amp;d_massDensity, SReal ( 1.0 ), \"massDensity\", \"Description of the data\" ) )\n{\n}\n\ntemplate &lt;class DataTypes, class MassType&gt;\nTemplateMass&lt;DataTypes, MassType&gt;::~TemplateMass()\n{\n}\n\ntemplate &lt;class DataTypes, class MassType&gt;\nvoid TemplateMass&lt;DataTypes, MassType&gt;::init()\n{\n    // Initialization of your TemplateMass class and variables\n}\n\n\ntemplate &lt;class DataTypes, class MassType&gt;\nvoid TemplateMass&lt;DataTypes, MassType&gt;::addMDx(const core::MechanicalParams* mparams, DataVecDeriv&amp; f, const DataVecDeriv&amp; dx, SReal factor)\n{\n    // Compute the multiplication of the mass matrix with the vector dx, save the result in the f vector\n}\n\ntemplate &lt;class DataTypes, class MassType&gt;\nvoid TemplateMass&lt;DataTypes, MassType&gt;::addMToMatrix(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor* matrix)\n{\n    // Build the mass matrix and store it in the system matrix\n}\n\ntemplate &lt;class DataTypes, class MassType&gt;\nvoid TemplateMass&lt;DataTypes, MassType&gt;::accFromF(const core::MechanicalParams* mparams, DataVecDeriv&amp; a, const DataVecDeriv&amp; f)\n{\n    // Compute the resulting a vector due to the division of the f vector by a (diagonal) mass matrix (vector)\n}\n\ntemplate &lt;class DataTypes, class MassType&gt;\nSReal TemplateMass&lt;DataTypes, MassType&gt;::getKineticEnergy(const core::MechanicalParams* mparams, const DataVecDeriv&amp; d_v) const\n{\n    // Compute the kinetic energy\n}\n\ntemplate &lt;class DataTypes, class MassType&gt;\nSReal TemplateMass&lt;DataTypes, MassType&gt;::getPotentialEnergy(const core::MechanicalParams* mparams, const DataVecCoord&amp; x) const\n{\n    // Compute the potential energy\n}\n\ntemplate &lt;class DataTypes, class MassType&gt;\ndefaulttype::Vector6 TemplateMass&lt;DataTypes, MassType&gt;::getMomentum(const core::MechanicalParams* mparams, const DataVecCoord&amp; x, const DataVecDeriv&amp; v) const\n{\n    // Compute the momentum\n}\n\n\n} // namespace mass\n\n} // namespace component\n\n} // namespace sofa\n\n#endif // SOFA_COMPONENT_MASS_TEMPLATEMASS_INL\n</code></pre> <p>TemplateMass.cpp : declares the different templates used for this ForceField (DataType)</p> <pre><code>/******************************************************************************\n*       SOFA, Simulation Open-Framework Architecture, development version     *\n*                (c) 2006-2019 INRIA, USTL, UJF, CNRS, MGH                    *\n*                                                                             *\n* This program is free software; you can redistribute it and/or modify it     *\n* under the terms of the GNU Lesser General Public License as published by    *\n* the Free Software Foundation; either version 2.1 of the License, or (at     *\n* your option) any later version.                                             *\n*                                                                             *\n* This program is distributed in the hope that it will be useful, but WITHOUT *\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *\n* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *\n* for more details.                                                           *\n*                                                                             *\n* You should have received a copy of the GNU Lesser General Public License    *\n* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.        *\n*******************************************************************************\n* Authors: The SOFA Team and external contributors (see Authors.txt)          *\n*                                                                             *\n* Contact information: contact@sofa-framework.org                             *\n******************************************************************************/\n#define SOFA_COMPONENT_MASS_TEMPLATEMASS_CPP\n\n#include \"TemplateMass.inl\"\n#include &lt;sofa/defaulttype/VecTypes.h&gt;\n#include &lt;sofa/defaulttype/RigidTypes.h&gt;\n#include &lt;sofa/core/ObjectFactory.h&gt;\n\n\nusing namespace sofa::defaulttype;\n\nnamespace sofa\n{\n\nnamespace component\n{\n\nnamespace mass\n{\n\n\n/// Registration to the factory\nint TemplateMassClass = core::RegisterObject(\"Description of your TemplateMass class\")\n\n        .add&lt; TemplateMass&lt;Vec3Types,double&gt; &gt;()\n        .add&lt; TemplateMass&lt;Vec2Types,double&gt; &gt;()\n        .add&lt; TemplateMass&lt;Vec1Types,double&gt; &gt;()\n        .add&lt; TemplateMass&lt;Vec6Types,double&gt; &gt;()\n\n        ;\n\n\n\n/// Template Initialization\n/// Force template specialization for the most common sofa type.\n/// This goes with the extern template declaration in the .h. Declaring extern template\n/// avoid the code generation of the template for each compilation unit\n\ntemplate class TemplateMass&lt;Vec3Types,double&gt;;\ntemplate class TemplateMass&lt;Vec2Types,double&gt;;\ntemplate class TemplateMass&lt;Vec1Types,double&gt;;\ntemplate class TemplateMass&lt;Vec6Types,double&gt;;\n\n\n} // namespace mass\n\n} // namespace component\n\n} // namespace sofa\n</code></pre>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/12_ForceField/","title":"ForceField","text":"<p>ForceFields are components that are adding \"forces\". These forces will influence the equilibrium of a system by contributing to its change of state.</p> <p>In continuum mechanics, these forces can be either internal or external forces. Internal forces corresponds to the effect of the soft body mechanics (elasticity, plasticity etc) and the external forces arise from external phenomenon (gravity, pressure etc). As detailed in the page Physics Integration, the conservation of linear momentum in its generalized form can be written:</p> <p></p> <p>The analogy can be done on other physics. In thermodynamics, all thermal effects (like diffusion, blood heat, metabolic heat, etc.) of the bioheat equation can be considered as ForceFields as well since these terms appear in the equilibrium:</p> <p></p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/12_ForceField/#forcefield-api","title":"ForceField API","text":"<p>To explain the API associated to the ForceField, we will consider the system resulting from the conservation of linear momentum (mechanics):</p> <p></p> <p>where  is the position (degrees of freedom),  is the velocity (derivative in time of the degrees of freedom) and  is the mass matrix.</p> <p>As it is explained in the section Integration Scheme, the choice of the temporal scheme will influence the way the linear system  is built.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/12_ForceField/#explicit-force","title":"Explicit force","text":"<p>Using an explicit scheme means that forces  are computed using the degrees of freedom of the current time step  (which are known): . Regardless the form of the function , the value of  can directly be obtained and set in the right hand side vector   of our linear system .</p> <p>The computation of the term , the value of  is done through the function <code>addForce()</code> of the ForceField class, called by the integration scheme (ODESolver).</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/12_ForceField/#implicit-force","title":"Implicit force","text":"<p>Using an implicit scheme means that forces  are computed using the degrees of freedom of the next time step  (unknown yet): . The value of  can not be directly be computed. By using a Taylor expansion, we get:</p> <p></p> <p>since we have: , then:</p> <p></p> <p>Finally, gathering the unknown (depending on ) in the left hand side, we have:</p> <p></p> <p>We can notice the appearance of the stiffness matrix : . The stiffness matrix  is a symmetric matrix, can either be linear or non-linear regarding .</p> <p>For the right hand side:</p> <ul> <li> <p>the term  is computed by the function: <code>addForce()</code> (as in explicit case)</p> </li> <li> <p>the term  is computed by the function: <code>addDForce()</code></p> </li> </ul> <p>For the left hand side, the API used to compute it depends on the type of Integration Scheme used: direct (the system matrix  is built and inversed) or iterative (unbuilt approach). We have:</p> <p></p> <ul> <li> <p>for iterative solvers, the term  is computed by the function: <code>addDForce()</code> </p> </li> <li> <p>for direct solvers, the term  is computed by the function: <code>addKToMatrix()</code></p> </li> </ul>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/12_ForceField/#summary","title":"Summary","text":"<p>For explicit case, we have:</p> Linear solver Iterative <code>addForce()</code> Direct <code>addForce()</code> <p>For implicit case, we have:</p> Linear solver Iterative <code>addDForce()</code> <code>addForce()</code> <code>addDForce()</code> Direct <code>addKToMatrix()</code> <code>addForce()</code> <code>addDForce()</code>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/12_ForceField/#forcefield-implementations","title":"ForceField implementations","text":"<p>See examples of ForceField implementation:</p> <ul> <li>ConstantForceField</li> <li>TetrahedronFEMForceField</li> </ul>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/12_ForceField/#template-of-a-forcefield","title":"Template of a ForceField","text":"<p>TemplateForceField.h : declares the variable, the Data and the functions of the class</p> <pre><code>/******************************************************************************\n*       SOFA, Simulation Open-Framework Architecture, development version     *\n*                (c) 2006-2019 INRIA, USTL, UJF, CNRS, MGH                    *\n*                                                                             *\n* This program is free software; you can redistribute it and/or modify it     *\n* under the terms of the GNU Lesser General Public License as published by    *\n* the Free Software Foundation; either version 2.1 of the License, or (at     *\n* your option) any later version.                                             *\n*                                                                             *\n* This program is distributed in the hope that it will be useful, but WITHOUT *\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *\n* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *\n* for more details.                                                           *\n*                                                                             *\n* You should have received a copy of the GNU Lesser General Public License    *\n* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.        *\n*******************************************************************************\n* Authors: The SOFA Team and external contributors (see Authors.txt)          *\n*                                                                             *\n* Contact information: contact@sofa-framework.org                             *\n******************************************************************************/\n#ifndef SOFA_COMPONENT_FORCEFIELD_TEMPLATEFORCEFIELD_H\n#define SOFA_COMPONENT_FORCEFIELD_TEMPLATEFORCEFIELD_H\n\n#include \"config.h\"\n#include &lt;sofa/core/behavior/ForceField.h&gt;\n\nnamespace sofa\n{\n\nnamespace component\n{\n\nnamespace forcefield\n{\n\n/// Apply constant forces to given degrees of freedom.\ntemplate&lt;class DataTypes&gt;\nclass TemplateForceField : public core::behavior::ForceField&lt;DataTypes&gt;\n{\n\npublic:\n\n    SOFA_CLASS(SOFA_TEMPLATE(TemplateForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes));\n\n    /// Declare here the data and their type, you want the user to have access to\n    Data&lt; int &gt; d_inputForTheUser;\n\n    /// Function responsible for the initialization of the component\n    void init() override;\n\n    /// Add the explicit forces (right hand side)\n    void addForce (const core::MechanicalParams* params, DataVecDeriv&amp; f, const DataVecCoord&amp; x, const DataVecDeriv&amp; v) override;\n\n    /// Add the explicit derivatives of the forces (contributing to the right hand side vector b)\n    /// IF iterative solver: add the implicit derivatives of the forces (contributing to the left hand side matrix A)\n    void addDForce(const core::MechanicalParams* mparams, DataVecDeriv&amp; d_df , const DataVecDeriv&amp; d_dx) override;\n\n\n    /// IF direct solver: add the implicit derivatives of the forces (contributing to the left hand side matrix A)\n    void addKToMatrix(sofa::defaulttype::BaseMatrix *m, SReal kFactor, unsigned int &amp;offset) override;\n\n    /// Same as previous, but using accessor\n    void addKToMatrix(const sofa::core::behavior::MultiMatrixAccessor* /*matrix*/, SReal /*kFact*/) ;\n\n    SReal getPotentialEnergy(const core::MechanicalParams* params, const DataVecCoord&amp; x) const override;\n\nprotected:\n\n    TemplateForceField();\n    ~TemplateForceField();\n\n};\n\n\n#if  !defined(SOFA_COMPONENT_FORCEFIELD_TEMPLATEFORCEFIELD_CPP)\nextern template class SOFA_BOUNDARY_CONDITION_API TemplateForceField&lt;sofa::defaulttype::Vec3Types&gt;;\nextern template class SOFA_BOUNDARY_CONDITION_API TemplateForceField&lt;sofa::defaulttype::Vec2Types&gt;;\nextern template class SOFA_BOUNDARY_CONDITION_API TemplateForceField&lt;sofa::defaulttype::Vec1Types&gt;;\nextern template class SOFA_BOUNDARY_CONDITION_API TemplateForceField&lt;sofa::defaulttype::Vec6Types&gt;;\n#endif\n\n\n} // namespace forcefield\n\n} // namespace component\n\n} // namespace sofa\n\n#endif // SOFA_COMPONENT_FORCEFIELD_TEMPLATEFORCEFIELD_H\n</code></pre> <p>TemplateForceField.inl : implements the functions of the class</p> <pre><code>/******************************************************************************\n*       SOFA, Simulation Open-Framework Architecture, development version     *\n*                (c) 2006-2019 INRIA, USTL, UJF, CNRS, MGH                    *\n*                                                                             *\n* This program is free software; you can redistribute it and/or modify it     *\n* under the terms of the GNU Lesser General Public License as published by    *\n* the Free Software Foundation; either version 2.1 of the License, or (at     *\n* your option) any later version.                                             *\n*                                                                             *\n* This program is distributed in the hope that it will be useful, but WITHOUT *\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *\n* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *\n* for more details.                                                           *\n*                                                                             *\n* You should have received a copy of the GNU Lesser General Public License    *\n* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.        *\n*******************************************************************************\n* Authors: The SOFA Team and external contributors (see Authors.txt)          *\n*                                                                             *\n* Contact information: contact@sofa-framework.org                             *\n******************************************************************************/\n#ifndef SOFA_COMPONENT_FORCEFIELD_TEMPLATEFORCEFIELD_INL\n#define SOFA_COMPONENT_FORCEFIELD_TEMPLATEFORCEFIELD_INL\n\n#include &lt;SofaBoundaryCondition/TemplateForceField.h&gt;\n#include &lt;sofa/helper/system/config.h&gt;\n\nnamespace sofa\n{\n\nnamespace component\n{\n\nnamespace forcefield\n{\n\n\n// Constructor of the class TemplateForceField\n// initializing data with their default value (here d_inputForTheUser=20)\ntemplate&lt;class DataTypes&gt;\nTemplateForceField&lt;DataTypes&gt;::TemplateForceField()\n    : d_inputForTheUser(initData(&amp;d_inputForTheUser, (int) 20, \"inputForTheUser\", \"Description of the data inputForTheUser\"))\n{\n}\n\n\ntemplate&lt;class DataTypes&gt;\nTemplateForceField&lt;DataTypes&gt;::~TemplateForceField()\n{\n}\n\n\ntemplate&lt;class DataTypes&gt;\nvoid TemplateForceField&lt;DataTypes&gt;::init()\n{\n    // Initialization of your ForceField class and variables\n}\n\n\ntemplate&lt;class DataTypes&gt;\nvoid TemplateForceField&lt;DataTypes&gt;::addForce(const core::MechanicalParams* /*params*/,\n                                             DataVecDeriv&amp; f, const DataVecCoord&amp; p, const DataVecDeriv&amp;)\n{\n    // Compute the forces f from the current DOFs p\n}\n\n\ntemplate&lt;class DataTypes&gt;\nvoid TemplateForceField&lt;DataTypes&gt;::addDForce(const core::MechanicalParams* mparams,\n                                              DataVecDeriv&amp; d_df , const DataVecDeriv&amp; d_dx)\n{\n    // Compute the force derivative d_df from the current, which will be multiplied with the field d_dx\n}\n\n\ntemplate&lt;class DataTypes&gt;\nvoid TemplateForceField&lt;DataTypes&gt;::addKToMatrix(sofa::defaulttype::BaseMatrix * /* mat */,\n                                                 SReal /* k */, unsigned int &amp; /* offset */)\n{\n    // Compute the force derivative d_df from the current and store the resulting matrix\n}\n\n\ntemplate&lt;class DataTypes&gt;\nvoid TemplateForceField&lt;DataTypes&gt;::addKToMatrix(const sofa::core::behavior::MultiMatrixAccessor* /*matrix*/,\n                                                 SReal /*kFact*/)\n{\n    // Same as previously\n    // but using accessor\n}\n\n\ntemplate &lt;class DataTypes&gt;\nSReal TemplateForceField&lt;DataTypes&gt;::getPotentialEnergy(const core::MechanicalParams* /*params*/,\n                                                        const DataVecCoord&amp; x) const\n{\n    // Compute the potential energy associated to the force f\n}\n\n\n\n\n} // namespace forcefield\n\n} // namespace component\n\n} // namespace sofa\n\n#endif // SOFA_COMPONENT_FORCEFIELD_TEMPLATEFORCEFIELD_INL\n</code></pre> <p>TemplateForceField.cpp : declares the different templates used for this ForceField (DataType)</p> <pre><code>/******************************************************************************\n*       SOFA, Simulation Open-Framework Architecture, development version     *\n*                (c) 2006-2019 INRIA, USTL, UJF, CNRS, MGH                    *\n*                                                                             *\n* This program is free software; you can redistribute it and/or modify it     *\n* under the terms of the GNU Lesser General Public License as published by    *\n* the Free Software Foundation; either version 2.1 of the License, or (at     *\n* your option) any later version.                                             *\n*                                                                             *\n* This program is distributed in the hope that it will be useful, but WITHOUT *\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *\n* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *\n* for more details.                                                           *\n*                                                                             *\n* You should have received a copy of the GNU Lesser General Public License    *\n* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.        *\n*******************************************************************************\n* Authors: The SOFA Team and external contributors (see Authors.txt)          *\n*                                                                             *\n* Contact information: contact@sofa-framework.org                             *\n******************************************************************************/\n#define SOFA_COMPONENT_FORCEFIELD_TEMPLATEFORCEFIELD_CPP\n\nnamespace sofa\n{\n\nnamespace component\n{\n\nnamespace forcefield\n{\n\nusing namespace sofa::defaulttype;\n\n\n// Give a description of your class\n// and declare the DataTypes on which the ForceField is instantiated\n\nint TemplateForceFieldClass = core::RegisterObject(\"Description here of the physics of your ForceField\")\n        .add&lt; TemplateForceFieldClass&lt;Vec3Types&gt; &gt;()\n        .add&lt; TemplateForceFieldClass&lt;Vec2Types&gt; &gt;()\n        .add&lt; TemplateForceFieldClass&lt;Vec1Types&gt; &gt;()\n        .add&lt; TemplateForceFieldClass&lt;Vec6Types&gt; &gt;()\n\n        ;\n\ntemplate class TemplateForceField&lt;Vec3Types&gt;;\ntemplate class TemplateForceField&lt;Vec2Types&gt;;\ntemplate class TemplateForceField&lt;Vec1Types&gt;;\ntemplate class TemplateForceField&lt;Vec6Types&gt;;\n\n\n\n} // namespace forcefield\n\n} // namespace component\n\n} // namespace sofa\n</code></pre>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/","title":"Collisions","text":"<p>In all SOFA simulations, i.e. using any animation loop, the collision phase is done separately from the physics simulation, and usually before the call to the solvers.</p> <p>Collision detection is split in several phases, each implemented in a different component. Each phase is scheduled by the collision pipeline.</p> <p></p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#collision-pipeline","title":"Collision pipeline","text":"<p>The collision pipeline follows three steps:</p> <ol> <li>reset of the collision</li> <li>a collision detection</li> <li>a collision response</li> </ol> <p>See a more detailed description of the collision pipeline here.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#sequence-diagram","title":"Sequence Diagram","text":"<p>Let's now focus on the steps performed by the collision pipeline, namely the collision detection and the collision response.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#collision-detection","title":"Collision detection","text":"<p>Collision detection aims at determining if two (or several) objects collide. In SOFA, the collision detection takes as input the collision models (geometric data) and returns pairs of geometric primitives as output, along with the associated contact points. This contact information is passed to the contact manager, which creates contact interactions of various types based on customizable rules.</p> <p>Given  moving objects in a virtual environment, testing all objects pairs tend to perform  pairwise checks. When  complexity, the collision detection is usually divided into two successive steps:</p> <ul> <li>a broad phase</li> <li>a narrow phase</li> </ul> <p>Several broad phase and narrow phase methods are available in SOFA. All of these methods will compute the contact points between collision models. The evaluation of these contacts will be done using Intersection Methods. Here again, various intersection methods are available in SOFA. The choice of the collision detection method and the intersection method depends on your specific simulation use case. Available collision detection methods are:</p> <ul> <li>Brute Force broad phase</li> <li>Bounding Volumes Hierarchy narrow phase</li> <li>Direct Sweep and Prune narrow phase</li> <li>Incremental Sweep and Prune</li> <li>Ray Tracing</li> </ul>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#broad-phase","title":"Broad phase","text":"<p>The first step of the pipeline is the so-called broad-phase. It aims at quickly and efficiently removing objects pairs that are not in collision.</p> <p>The broad phase uses a set of root collision models in order to compute potentially colliding pairs. It can for instance rely on the bounding boxes of each object with a collision model, thus efficiently checking whether boxes collide or not. This step does not state if pairs of objects collide, but it detects if they potentially collide. As output, the broad phase returns pairs of potentially colliding collision models.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#narrow-phase-detect-intersection","title":"Narrow phase: detect intersection","text":"<p>The narrow phase of detection can rely on collision models to detect a contact. Note that different collision models are available to detect a contact:</p> <ul> <li>using primitives (mostly used): point, line, triangle, sphere, cube, cylinder or oriented bounding boxes (OBB)</li> <li>using distance grid, associated to each object in the scene</li> <li>using ray casting: that send rays in the volume of simulation to compute a volume of intersection</li> </ul> <p>All collision detection methods will rely on intersection methods during the broad and/or narrow phase in order to assess if the models do collide. Given 2 collision elements, these intersection methods test if an intersection is possible.</p> <p>In SOFA, a proximity method can be used to detect contact when two objects are getting closer from another. Evaluating this proximity allows for a better anticipation of the contact, i.e. more stable contact. The two main implementations in SOFA are:</p> <ul> <li>MinProximityIntersection</li> <li>LocalMinDistance</li> </ul> <p>Discrete intersection methods also exist to compute intersection only if models are already intersecting. These are using distance grid or ray: FFDDistanceGridDiscreteIntersection, RigidDistanceGridDiscreteIntersection, RayNewProximityIntersection, RayDiscreteIntersection.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#output-of-the-detection","title":"Output of the detection","text":"<p>As output, the collision detection (further to the narrow phase) returns pairs of geometric primitives with the corresponding collision points. The collision information is saved in a vector of DetectionOutput. This data structure is a generic description of a contact point, used for most collision models except special cases such as GPU-based collisions.</p> <p>Each contact point is described by a DetectionOutput made up of:</p> <ul> <li>elem: a pair of colliding elements.</li> <li>id: unique id of the contact for the given pair of collision models. This id is used to filter redundant contacts (only the contact with the smallest distance is kept), and to store persistant data over time for the response.</li> <li>point: contact points on the surface of each model.</li> <li>normal: normal of the contact, pointing outward from the first model.</li> <li>value: signed distance (negative if objects are interpenetrating).</li> <li>deltaT: estimated of time of contact.</li> </ul>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#collision-response","title":"Collision response","text":"<p>The step of collision response is triggered in the CollisionPipeline. The colliding models returned by the narrow phase are finally given to the ContactManager, which creates contact interactions of various types based on customizable rules. You can specify which one you want to use in the DefaultContactManager. Response has been implemented based on:</p> <ul> <li>the penalty method, efficient but subject to instability if not properly tuned</li> <li>the persistent method</li> <li>or on constraints using Lagrange multipliers, and is processed by the solvers together with the other forces and constraints.</li> </ul> <p>When stiff contact penalties or contact constraints are created by the contact manager, an optional GroupManager component is used to create interaction groups handled by a common solver. When contacts disappear, interaction groups can be split to keep them as small as possible. The scenegraph structure thus changes along with the interaction groups.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#sequence-diagram_1","title":"Sequence Diagram","text":""},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#additional-information","title":"Additional information","text":""},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#collision-model-data","title":"Collision model data","text":"<p>Each collision model (e.g. TriangleCollisionModel) will inherit three boolean options:</p> <ul> <li>active: true if this CollisionModel should be used for collisions (true by default)</li> <li>moving: true if the CollisionModel is changing position between time steps (true by default)</li> <li>simulated: true if the CollisionModel is attached to a simulation. It is false for immobile or procedurally animated objects that don't use contact forces</li> </ul>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#collision-group","title":"Collision group","text":"<p>Just as a notice, it is possible to create group of contact, create integration groups. Given a set of contacts, the CollisionGroupManager allows this. Contacts between models define a graph: by creating contact groups, the collision resolution will process each graph (i.e. collision group) separately.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/20_Collision/#read-more","title":"Read more","text":"<p>Do not hesitate browse and report interesting articles. We suggest this paper from Avril et al.: Collision Detection: Broad Phase Adaptation from Multi-Core to Multi-GPU Architecture and the reference SOFA paper.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/30_Visual_Model/","title":"Visualization","text":"<p>To visualize an object in SOFA, the main component to use is the OglModel. Using OpenGL, this class will display the topology of its context. To display a mesh loaded with any MeshLoader, all you need to do is to connect the OglModel with the MeshLoader by writing (in case if an XML scene):</p> <pre><code>&lt;MeshObjLoader name=\"myLoader\" filename=\"\" /&gt;\n&lt;OglModel name=\"MyOGLVisualization\" src=\"@myLoader\" /&gt;\n</code></pre> <p>You can also specify some Data like color or scale.</p> <p>Note that since the approach of SOFA separate the different representations, the visual model can use a different topology (a different mesh) than the physical or the collision model.</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/40_Mapping/","title":"Mappings","text":"<p>In SOFA, all the different representations of an object can be modeled and considered separately:</p> <ul> <li>the physical model (e.g. a mechanical behavior relying on a linear elasticity, computed on a tetrahedral topology)</li> <li>the visual model (e.g. a triangular mesh using a very high resolution)</li> <li>the collision model (e.g. a grid bounding with quad faces around our physical object)</li> </ul> <p>Relying on different geometrical models, this modular approach allows to tune the computational effort set on each of these representations in order to find the best trade-off between accuracy and efficiency. However, the simulation must ensure the coherency of these different representations: for instance, we want our visual model to move according to the physics. To do so, SOFA relies on Mappings to ensure this corresponding between the different representations of one-or-more object (physics, visual, collision etc.)</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/40_Mapping/#matrix-approach","title":"Matrix approach","text":"<p>Typical mappings compute the correspondence between different geometrical models by computing local coordinates (for rigid bodies) or barycentric coordinates (for deformable bodies). Once this correspondence is computed, it allows to project vectors (like forces) from one representation to another.</p> <p>One can define two representations of an object, both using a different topology:</p> <ul> <li>one mechanical model with its degrees of freedom </li> <li>one collision model with its degrees of freedom </li> </ul> <p></p> <p>The mapping defines a function (that can be non-linear)  mapping kinematically the position of the parent mechanical model to the child collision model: . The derivative of the degrees of freedom (velocities in case of positions) can be mapped in a similar way using the relationship , with  is the associated Jacobian matrix. The mechanical model thus drives the collision model. In the case of a BarycentricMapping, the matrix  includes the barycentric coordinates.</p> <p>By applying the principle of virtual work, the mapping can also translate forces applied to the child collision model  into forces applied to the parent mechanical model , using the relationship . Mappings can therefore build a bijective correspondence between two representations of an object. Note that several mappings can also be applied recursively when necessary.</p> <p>When a force field is associated to a mapped state, it contributes to the stiffness matrix indirectly, through the mapping. Two terms appear.</p> <ul> <li>The first term is the projection of the mapped stiffness matrix from the mapped space into the main state .</li> <li>The second term is called geometric stiffness: . Geometric stiffness relies on the derivative of the Jacobian matrix. This derivative is null if the mapping is linear.</li> </ul> <p>\u26a0\ufe0f WARNING: Depending on the nature of a non-linear mapping, geometric stiffness may lead to non-symmetric terms in the mechanical matrix. Such mappings have an option to make the contributions symmetric. An alternative is to use an appropriate linear solver (LU solver for example).</p>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/40_Mapping/#api-of-mappings","title":"API of mappings","text":"<p>As explained above, the mappings propagate positions, velocities, displacements and accelerations top-down, and they propagate forces bottom-up. The top-down propagation methods are:</p> <pre><code>//for positions\napply (const MechanicalParams*, MultiVecCoordId outPos, ConstMultiVecCoordId inPos );\n\n//for velocities and small displacements\napplyJ(const MechanicalParams*, MultiVecDerivId outVel, ConstMultiVecDerivId inVel );\n\n//for accelerations, taking into account velocity-dependent accelerations in nonlinear mappings\ncomputeAccFromMapping(const MechanicalParams*, MultiVecDerivId outAcc, ConstMultiVecDeri inVel, ConstMultiVecDerivId inAcc );\n</code></pre> <p>The bottom-up propagation methods are:</p> <pre><code>//for child forces or changes of child forces\napplyJT(const MechanicalParams*, MultiVecDerivId inForce, ConstMultiVecDerivId outForce );\n\n//for changes of parent force due to a change of mapping with constant child force\napplyDJT(const MechanicalParams*, MultiVecDerivId parentForce, ConstMultiVecDerivId childForce );\n\n//for constraint Jacobians\napplyJT(const ConstraintParams*, MultiMatrixDerivId inConst, ConstMultiMatrixDerivId outConst );\n</code></pre>"},{"location":"20_Simulation_Principles/50_Multi-Model_Representation/40_Mapping/#topological-mapping","title":"Topological mapping","text":"<p>Topological mappings are an additional type of mappings making the correspondence between hierarchical topologies. You can thus find :</p> <ul> <li>a Hexa2TetraTopologicalMapping: computing the correspondence between a hexahedral and a tetrahedral topology, by dividing each hexahedron into 6 tetrahedra</li> <li>a Hexa2QuadTopologicalMapping: computing the correspondence between a hexahedral topology and its surface quadrangular topology</li> <li>a Tetra2TriangleTopologicalMapping: computing the correspondence between a tetrahedral topology and its surface triangular topology</li> <li>a Quad2TriangleTopologicalMapping: computing the correspondence between a quadrangular and a triangular topology, by dividing each quad into 2 triangles</li> <li>a Triangle2EdgeTopologicalMapping: computing the correspondence between a triangular and an edge topology</li> </ul>"},{"location":"20_Simulation_Principles/60_Constraint/10_Projective_Constraint/","title":"Projective constraint","text":"<p>Different types of constraint exist in SOFA. The projective constraint are method allowing to project the velocity of the constraint points of an object to a desired value.</p>"},{"location":"20_Simulation_Principles/60_Constraint/10_Projective_Constraint/#matrix-approach","title":"Matrix approach","text":"<p>A projection matrix noted  multiplies the matrix  of the linear system  (where our unknown  is actually ) to enforce the so-called project constraint. The system thus becomes: . Implicit integration has the advantage of being more stable for stiff forces or large time steps. The solution of these equation systems requires linear solvers. Due to the superlinear time complexity of equation solvers, it is generally more efficient to process independent interaction groups using separated solvers rather than a unique solver.</p> <p>Another type of constraints is available in SOFA focusing on constraint-based interactions which requires the computation of Lagrange multipliers based on interaction Jacobians. This will be discussed in the next article about Lagrange constraint.</p>"},{"location":"20_Simulation_Principles/60_Constraint/10_Projective_Constraint/#api-of-projective-constraint","title":"API of projective constraint","text":"<p>In SOFA, you can find several of these projective constraints in the SofaBoundaryConditions module, among them:</p> <ul> <li> <p>the FixedConstraint: projecting a constant velocity, if the vertex is initially fixed, then it is attached to its initial position</p> </li> <li> <p>the PartialFixedConstraint: inheriting from FixedConstraint, this constraint is projected only along certain degrees of freedom (e.g. only in x direction)</p> </li> </ul> <p>Classes considering on single object inherit from the class ProjectiveConstraintSet. The usual API functions associated to projective constraints are:</p> <pre><code>/// Project dx to constrained space (dx models an acceleration):\nvoid projectResponse(const core::MechanicalParams* mparams, DataVecDeriv&amp; resData);\n\n/// Project v to constrained space (v models a velocity):\nvoid projectVelocity(const core::MechanicalParams* mparams, DataVecDeriv&amp; vData);\n\n/// Project x to constrained space (x models a position):\nvoid projectPosition(const core::MechanicalParams* mparams, DataVecCoord&amp; xData);\n\n/// Project c to constrained space (c models a constraint):\n/// this method must be implemented by the component to handle Lagrange Multiplier based constraint\nvoid projectJacobianMatrix(const core::MechanicalParams* mparams, DataMatrixDeriv&amp; cData);\n\n/// Project the global Mechanical Matrix to constrained space using offset parameter\nvoid applyConstraint(const MechanicalParams*, const sofa::core::behavior::MultiMatrixAccessor*);\n\n/// Project the global Mechanical Vector to constrained space using offset parameter\nvoid applyConstraint(const MechanicalParams* , defaulttype::BaseVector*, const sofa::core::behavior::MultiMatrixAccessor*);\n</code></pre>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/","title":"Constraint based on Lagrange Multipliers","text":"<p>SOFA allows the use of Lagrange multipliers to handle complex constraints, such as contacts and joints between moving objets that can not be straightforwarly implemented using projection matrices.</p>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/#general-presentation-of-the-constraint-problem","title":"General presentation of the constraint problem","text":"<p>To solve the dynamic of two constrained objects, we use a Lagrange Multipliers approach and a single linearization by time step. From the physical system to solve, the constraint problem can be expressed with the linear system as:</p> <p></p> <p>that can be written in a simpler way as:</p> <p></p> <p>where  is the vector of constraint forces contribution with  matrix containing the constraint directions and  are the so-called Lagrange multipliers. Both holonomic and nonholonomic constraints can be used to model the various mechanical interactions involved in the simulation. For each constraint, a constraint law is assigned, which depends on the relative position of the interacting objects:</p> <p></p> <p></p> <p>where  represents the bilateral interaction laws (attachments, sliding joints, etc.) whereas  represents unilateral interaction laws (contact, needle puncture, friction, etc.). These functions can be nonlinear. In the constrained system presented above, the constraint matrix  appeared. The definition of the constraint laws  and  allows to define:</p> <p></p> <p>Note that  the matrix containing the constraint directions can be considered as the Jacobian of the mapping between the physics space and the constraint space. The constraint will always be linearized in SOFA. For two interacting objects (object 1 and object 2), the complete constrained system therefore corresponds to:</p> <p>However, this system will not be solved directly. It will be decomposed into two steps:</p> <p>Step 1: Each interacting object is solved independently, i.e. as no constraint law is defined, while setting . This so-called free motion aims at finding the change in velocity  and  for each object from the resolution of:</p> <p>Step 2: now, the constraints are taken into account while considering . We are looking for a corrective change in velocity   and  for each object from the resolution of:</p> <p>Defining  the Lagrange multipliers, as the forces to be applied in the constraint space to satisfy all constraint laws, the constrained system can therefore be presented as:</p> <p></p> <p>where  is the matrix of our linearized constraint system, this matrix  is homogeneous to a compliance.  is the constraint violation (here in velocity), that can be directly obtained from the expression of our constraint laws  and .</p> <p>Finally, the resolution of the constraint problem is done using the Gauss-Seidel algorithm. After resolution of this new linear system, the motion can be corrected as follows:</p> <ul> <li>    with  and </li> </ul>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/#freemotionanimationloop","title":"FreeMotionAnimationLoop","text":"<p>To solve such complex constraint-based interactions, the simulation requires a specific animation loop: the FreeMotionAnimationLoop. This animation loop divides each simulation step into two successive resolution steps: the free motion and a corrective motion.</p>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/#free-motion","title":"Free motion","text":"<p>The first step triggered by the FreeMotionAnimationLoop is the free motion step. It consists in the resolution of the unconstrained (free) system  as described in the System Resolution section. Note that this free resolution may also include projective constraints that will be projected on the linear system. In the same way, collision might also be detected and a response would be created.   </p> <p>In the solve() function of the FreeMotionAnimationLoop, you will find the following functions responsible for the free motion: <pre><code>///Solve visitor is triggered to solve the free motion\nsimulation::SolveVisitor freeMotion(params, dt, true);\n\n///Apply the projective constraint if any\nmop.projectResponse(freeVel);\nmop.propagateDx(freeVel, true);\n\n///Detect and respond to collision\ncomputeCollision(params);\n</code></pre></p> <p>The result of the resolution of the linear system  is noted : .</p>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/#constraint-based-correction","title":"Constraint-based correction","text":"<p>Once the free motion  has been computed, the animation loop will look for an existing ConstraintSolver in the scene graph. If one is found, it will handle the entire constraint process: computation of the constraint system, resolution and application of the corrective motion ensuring valid constraints.</p> <p>In the solve() function of the FreeMotionAnimationLoop, the constraint resolution simply appears as: <pre><code>///if a ConstraintSolver is in the simulation, trigger the constraint pipeline\nif (constraintSolver)\n{\n    constraintSolver-&gt;solveConstraint(&amp;cparams, pos, vel);\n}\n</code></pre></p>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/#constraintsolver","title":"ConstraintSolver","text":"<p>A ConstraintSolver is called by the AnimationLoop within the step() function. The solveConstraint() function of the ConstraintSolver organizes and rules all the steps of the resolution of the constraint problem. It builds the constraint system, solves it and applies a correction to find a corrected solution based on the free motion . In the code of any ConstraintSolver, you find the following functions:</p> <pre><code>bool prepareStates(const core::ConstraintParams * , MultiVecId res1, MultiVecId res2=MultiVecId::null());\nbool buildSystem(const core::ConstraintParams * , MultiVecId res1, MultiVecId res2=MultiVecId::null());\nbool solveSystem(const core::ConstraintParams * , MultiVecId res1, MultiVecId res2=MultiVecId::null());\nbool applyCorrection(const core::ConstraintParams * , MultiVecId res1, MultiVecId res2=MultiVecId::null());\n</code></pre> <p>Each of these functions corresponds to a step described below:</p> <ul> <li> <p>Prepare states: allocates in memory vectors corresponding to the corrective motion  and the Lagrange multipliers </p> </li> <li> <p>Build system: ensures itself the construction of the constraint matrix system</p> </li> <li> <p>Solve system: the constraint resolution finds a solution for the constraint problem</p> </li> <li> <p>Apply the correction: recovers the result  and applies this corrective motion to the free motion </p> </li> </ul> <p>The step of building the system (see the Build system, Constraint laws and ConstraintCorrection sections) and solving it will now be detailed.</p>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/#build-system","title":"Build system","text":"<p>This is the denser part of the constraint resolution. Most steps done to build the constraint problem are triggered using visitors browsing the simulation graph. All the following functions are actually not implemented by ConstraintSolver but by the constraint laws available in the scene  and  (see the Constraint law section).</p> <p>The following steps are processed one after another:</p> <ul> <li> <p>reset the constraint matrix . The associated visitor is MechanicalResetConstraintVisitor</p> </li> <li> <p>build a new constraint matrix (or Jacobian matrix)  depending on the constraint laws available in the scene   and . The associated visitor is MechanicalBuildConstraintMatrix</p> </li> <li> <p>accumulate additional contributions to the constraint matrix (or Jacobian matrix)  coming from underlying mappings. The associated visitor is MechanicalAccumulateMatrixDeriv</p> </li> <li> <p>take into account the projective constraint . This step removes the constraints that are affecting the degrees of freedom currently concerned by a project constraint. The associated visitor is MechanicalProjectJacobianMatrixVisitor</p> </li> <li> <p>clear previous values of the Lagrange multipliers</p> </li> <li> <p>project the free motion  (computed at Step 1) into the constraint space  where  is the violation in velocity. See the visitor MechanicalGetConstraintViolationVisitor</p> </li> <li> <p>select which method will be used to solve the constraint problem. The associated visitor is MechanicalGetConstraintResolutionVisitor</p> </li> <li> <p>finally build the \"compliance\" matrix  based on the previously computed matrices. This task is performed by the ConstraintCorrection. The detail of the assembly of  is given below in the ConstraintCorrection section. The associated function of the ConstraintCorrection is addComplianceInConstraintSpace()</p> </li> <li> <p>store  which corresponds to the projection of the Lagrange multipliers  into the physics space, and is homogeneous to forces. This vector is made available with the function storeLambda(). This will be finally used to compute the corrective motion, resulting from the constraint resolution</p> </li> </ul> <p>In the code, the buildSystem() function performs each of the steps just described and looks as follows:</p> <pre><code>simulation::MechanicalResetConstraintVisitor(cParams).execute(context);\nsimulation::MechanicalBuildConstraintMatrix(cParams, cParams-&gt;j(), numConstraints).execute(context);\nsimulation::MechanicalAccumulateMatrixDeriv(cParams, cParams-&gt;j(), reverseAccumulateOrder.getValue()).execute(context);\nsimulation::MechanicalProjectJacobianMatrixVisitor(&amp;mparams).execute(context);\n\ncurrent_cp-&gt;clear(numConstraints);\n\nMechanicalGetConstraintViolationVisitor(cParams, &amp;current_cp-&gt;dFree).execute(context);\nMechanicalGetConstraintResolutionVisitor(cParams, current_cp-&gt;constraintsResolutions).execute(context);\n\ncc-&gt;addComplianceInConstraintSpace(cParams, &amp;current_cp-&gt;W);\n</code></pre>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/#solve-system","title":"Solve system","text":"<p>The resolution of the system will be processed when the solveSystem() function of the ConstraintSolver is called. In SOFA, two different ConstraintSolver implementations exist in SOFA:</p> <ul> <li> <p>LCPConstraintSolver: this solvers targets on collision constraints, contacts with frictions which corresponds to unilateral constraints. This solver proposes one implementation of a Gauss-Seidel algorithm available in in sofa::helper::GaussSeidel</p> </li> <li> <p>GenericConstraintSolver: this solver handles all kind of constraints, i.e. works with any constraint resolution algorithm. This solver proposes three different resolution methods:</p> <ul> <li>a Projective Gauss-Seidel algorithm (PGS) algorithm implemented in GenericConstraintSolver::GaussSeidel. To use this PGS algorithm, you must select the data resolutionMethod as ProjectedGaussSeidel</li> <li>an Unbuilt (matrix-free) approach of the Gauss-Seidel algorithm (UGS) algorithm is also available, thus avoiding the assembly of the constraint system. To use this UGS algorithm, you must select the data resolutionMethod as UnbuiltGaussSeidel</li> <li>a Non-smooth Non-linear Conjugate Gradient (NNCG) algorithm implemented in GenericConstraintSolver::NNCG(). To use this NNCG algorithm, you must select the data  resolutionMethod as NonsmoothNonlinearConjugateGradient. Using the data newtonIterations, you can define the maximum number of iterations for the classical Newton method, solving the generic roots search problem.</li> </ul> </li> </ul> <p>NB: you may find the class ConstraintSolver. This class does not implement a real solver but actually just browses the graph in order to find and use one of the two implementations mentioned above.</p> <p>The output of the constraint resolution is the corrected motion  for each object involved.</p>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/#constraintcorrection","title":"ConstraintCorrection","text":"<p>As explained above, a ConstraintCorrection is required in the simulation to define the way the compliance matrix  is computed. Different classes of ConstraintCorrection exist in SOFA corresponding to different approaches:</p> <ul> <li> <p>UncoupledConstraintCorrection: makes the approximation that the compliance matrix  is diagonal. This is as strong assumption since a diagonal matrix means that all constraints are independent from each other. Note that you can directly specify the compliance matrix values within the Data field \"compliance\"</p> </li> <li> <p>LinearSolverConstraintCorrection: computes the compliance matrix  where  comes from a direct solver associated to the object. Since the direct solvers in SOFA factorize the matrix  (for instance using a LDL factorization if you use the LDLSolver), the factorization is reused to compute the compliance matrix. The matrix-matrix multiplication  is not possible in case of a matrix-free solver, since the assembled inverse matrix  is not available. From the factorization of , the computation of  done in the function addJMInvJt() requires to call the solve() function from the direct solver, computing a matrix-vector multiplication, for each line of the constraint matrix , i.e. for each constraint. This approach can therefore be very computationally-demanding if you have many constraints. Note that this ConstraintCorrection proposes an optimization for wire-like structures (boolean option)</p> </li> <li> <p>PrecomputedConstraintCorrection: instead of computing  at each time step, this constraint correction precomputes once the inverse of  at the initialization of the simulation and stores this matrix into a file. This speeds up the simulation but it can lead to a lack of accuracy in case the system matrix  changes during the simulation</p> </li> <li> <p>GenericConstraintCorrection: similar to the LinearSolverConstraintCorrection, it allows to declare only once all the direct solvers (one for each constraint object) used to compute the global , whereas the previously described constraint correction needs to be added for each object</p> </li> </ul>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/#constraint-laws","title":"Constraint laws","text":"<p>In SOFA, you can find several of interaction constraint laws available to include in your simulation. A lot of them is available in the SofaConstraint module, among them:</p> <ul> <li> <p>UnilateralInteractionConstraint: constraint of inequality (like the  function described above in the Constraint problem section), that fits for instance contact and collision cases</p> </li> <li> <p>BilateralInteractionConstraint: constraint of equality (like the  function described above in the Constraint problem section), that fits for instance interactions, attachments between two paired objects</p> </li> <li> <p>SlidingConstraint: constraint in equality, like the BilateralInteractionConstraint, but only active for some vectors of the physics space (for instance only the x-direction)</p> </li> </ul> <p>Classes defining constraints between a pair of objects inherit from the class PairInteractionConstraint. The associated API functions are:</p> <pre><code>/// Retrieve the associated MechanicalState of both paired objects\nMechanicalState&lt;DataTypes&gt;* getMState1();\nBaseMechanicalState* getMechModel1();\nMechanicalState&lt;DataTypes&gt;* getMState2();\nBaseMechanicalState* getMechModel2();\n\n/// Construct the Constraint violations vector of each constraint\nvirtual void getConstraintViolation(const ConstraintParams* cParams, defaulttype::BaseVector *v);\n\n/// Construct the Jacobian Matrix or constraint matrix H\nvirtual void buildConstraintMatrix(const ConstraintParams* cParams, MultiMatrixDerivId cId, unsigned int &amp;cIndex);\n</code></pre>"},{"location":"20_Simulation_Principles/60_Constraint/20_Lagrange_Constraint/#more-about-lagrange-multipliers-and-constraints","title":"More about Lagrange multipliers and constraints","text":"<p>To read more and go further regarding constraints relying on Lagrange multipliers, please read:</p> <ul> <li>Pr. Duriez's habilitation thesis</li> <li>Pr. Baraff's courses</li> </ul> <p>You can also look at examples in the scenes of SOFA like:</p> <ul> <li>examples/Component/AnimationLoop/FreeMotionAnimationLoop.scn</li> <li>examples/Component/Constraint/Lagrangian/SlidingConstraint.scn</li> </ul>"},{"location":"30_Components/10_AnimationLoop/10_DefaultAnimationLoop/","title":"DefaultAnimationLoop","text":"<p>This component belongs to the category of AnimationLoop.</p> <p>The DefaultAnimationLoop is the component that rules the steps of the simulation in the default order. It consists in computing the collision (if any), the projective constraints, the physics, solving the resulting linear system and finally updating all data before another step begins.</p> <p></p>"},{"location":"30_Components/10_AnimationLoop/10_DefaultAnimationLoop/#data","title":"Data","text":"<p>The DefaultAnimationLoop has one data:</p> <ul> <li>computeBoundingBox: a boolean defining whether the global bounding box of the scene is computed at each time step. Used mostly for rendering.</li> </ul>"},{"location":"30_Components/10_AnimationLoop/10_DefaultAnimationLoop/#usage","title":"Usage","text":"<p>The DefaultAnimationLoop has no pre-requisite. If no AnimationLoop is specified in the scene, this animation loop is included by default at the root node of the graph.</p> <p>Note that this AnimationLoop does not support constraints solved using Lagrange multipliers.</p>"},{"location":"30_Components/10_AnimationLoop/10_DefaultAnimationLoop/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;DefaultAnimationLoop /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('DefaultAnimationLoop')\n</code></pre> <p>An example scene involving a DefaultAnimationLoop is available in examples/Component/AnimationLoop/DefaultAnimationLoop.scn</p>"},{"location":"30_Components/10_AnimationLoop/20_MultiStepAnimationLoop/","title":"MultiStepAnimationLoop","text":"<p>This component belongs to the category of AnimationLoop.</p> <p>The MultiStepAnimationLoop derives from the DefaultAnimationLoop. This animation loop is different due to the fact that it allows - at each iteration - for running several collision (collisionSteps), and within each of these collision steps, several integration sub-steps can be computes (integrationSteps).</p> <p></p>"},{"location":"30_Components/10_AnimationLoop/20_MultiStepAnimationLoop/#data","title":"Data","text":"<p>The MultiStepAnimationLoop has the following data:</p> <ul> <li>collisionSteps: the number of collision steps computed within one time step</li> <li>integrationSteps: the number of time integration (time sub-steps involving the physics resolution) computed within one time step</li> <li>computeBoundingBox: a boolean defining whether the global bounding box of the scene is computed at each time step. Used mostly for rendering.</li> </ul>"},{"location":"30_Components/10_AnimationLoop/20_MultiStepAnimationLoop/#usage","title":"Usage","text":"<p>The MultiStepAnimationLoop has no pre-requisite.</p> <p>Note that this MultiStepAnimationLoop does not handle constraints solved using Lagrange multipliers.</p>"},{"location":"30_Components/10_AnimationLoop/20_MultiStepAnimationLoop/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;MultiStepAnimationLoop collisionSteps=\"10\" integrationSteps=\"2\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('MultiStepAnimationLoop', collisionSteps='10', integrationSteps='2')\n</code></pre> <p>An example scene involving a MultiStepAnimationLoop is available in examples/Component/AnimationLoop/MultiStepAnimationLoop.scn</p> <p>Target: <code>Sofa.Component.AnimationLoop</code></p> <p>namespace: <code>sofa::component::animationloop</code></p> <p>parents: </p> <ul> <li><code>BaseAnimationLoop</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 computeBoundingBox  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering.  1 collisionSteps  number of collision steps between each frame rendering  1 integrationSteps  number of integration steps between each collision detection  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects targetNode Link to the scene's node that will be processed by the loop"},{"location":"30_Components/10_AnimationLoop/20_MultiStepAnimationLoop/#examples","title":"Examples","text":"<p>Component/AnimationLoop/MultiStepAnimationLoop.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"1.0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.AnimationLoop\"/&gt; &lt;!-- Needed to use components [MultiStepAnimationLoop] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;NewProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;MultiStepAnimationLoop collisionSteps=\"10\" integrationSteps=\"2\" /&gt;\n    &lt;Node name=\"ChainRigid\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_4\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_4\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid-1\"&gt;\n            &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"2.5\" /&gt;\n            &lt;UniformMass /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid-2\"&gt;\n            &lt;EulerImplicitSolver /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"5\" /&gt;\n            &lt;UniformMass /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid-3\"&gt;\n            &lt;EulerImplicitSolver /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"7.5\" /&gt;\n            &lt;UniformMass /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid-4\"&gt;\n            &lt;EulerImplicitSolver /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"10\" /&gt;\n            &lt;UniformMass /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"1.0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.AnimationLoop\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('NewProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n    root.addObject('MultiStepAnimationLoop', collisionSteps=\"10\", integrationSteps=\"2\")\n\n    ChainRigid = root.addChild('ChainRigid')\n\n    TorusFixed = ChainRigid.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_4\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_4\", color=\"gray\")\n\n    TorusRigid-1 = ChainRigid.addChild('TorusRigid-1')\n    TorusRigid-1.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TorusRigid-1.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid-1.addObject('MechanicalObject', template=\"Rigid3\", dx=\"2.5\")\n    TorusRigid-1.addObject('UniformMass')\n\n    Visu = TorusRigid-1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid-1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid-2 = ChainRigid.addChild('TorusRigid-2')\n    TorusRigid-2.addObject('EulerImplicitSolver')\n    TorusRigid-2.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid-2.addObject('MechanicalObject', template=\"Rigid3\", dx=\"5\")\n    TorusRigid-2.addObject('UniformMass')\n\n    Visu = TorusRigid-2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid-2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid-3 = ChainRigid.addChild('TorusRigid-3')\n    TorusRigid-3.addObject('EulerImplicitSolver')\n    TorusRigid-3.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid-3.addObject('MechanicalObject', template=\"Rigid3\", dx=\"7.5\")\n    TorusRigid-3.addObject('UniformMass')\n\n    Visu = TorusRigid-3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid-3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid-4 = ChainRigid.addChild('TorusRigid-4')\n    TorusRigid-4.addObject('EulerImplicitSolver')\n    TorusRigid-4.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid-4.addObject('MechanicalObject', template=\"Rigid3\", dx=\"10\")\n    TorusRigid-4.addObject('UniformMass')\n\n    Visu = TorusRigid-4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid-4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n</code></pre>"},{"location":"30_Components/10_AnimationLoop/30_FreeMotionAnimationLoop/","title":"FreeMotionAnimationLoop","text":"<p>This component belongs to the category of AnimationLoop.</p> <p>The FreeMotionAnimationLoop is the component that rules the simulation in two main steps: a free motion, then a correction step. First, the free motion computes the projective constraints, the physics, solving the resulting free linear system. Second, the correction step solves the constraints based on the Lagrange multipliers. More information on the constraint resolution can be found here.</p> <p></p>"},{"location":"30_Components/10_AnimationLoop/30_FreeMotionAnimationLoop/#data","title":"Data","text":"<p>The DefaultAnimationLoop has one data:</p> <ul> <li>computeBoundingBox: a boolean defining whether the global bounding box of the scene is computed at each time step. Used mostly for rendering.</li> </ul>"},{"location":"30_Components/10_AnimationLoop/30_FreeMotionAnimationLoop/#usage","title":"Usage","text":"<p>The FreeMotionAnimationLoop must be used specifically for constraint resolution based on the Lagrange multiplier. It therefore requires:</p> <ul> <li>a ConstraintSolver. If no constraint solver can be found, a LCPConstraintSolver is automatically created by default.</li> </ul> <p>Note that one or multiple ConstraintCorrection may be required by the ConstraintSolver.</p>"},{"location":"30_Components/10_AnimationLoop/30_FreeMotionAnimationLoop/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;FreeMotionAnimationLoop /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('FreeMotionAnimationLoop')\n</code></pre> <p>An example scene involving a FreeAnimationLoop is available in examples/Component/AnimationLoop/FreeMotionAnimationLoop.scn</p> <p>Target: <code>Sofa.Component.AnimationLoop</code></p> <p>namespace: <code>sofa::component::animationloop</code></p> <p>parents: </p> <ul> <li><code>BaseAnimationLoop</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 computeBoundingBox  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering.  1 solveVelocityConstraintFirst  solve separately velocity constraint violations before position constraint violations  0 threadSafeVisitor  If true, do not use realloc and free visitors in fwdInteractionForceField.  0 Multithreading parallelCollisionDetectionAndFreeMotion  If true, executes free motion step and collision detection step in parallel.  0 parallelODESolving  If true, solves all the ODEs in parallel during the free motion step.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects targetNode Link to the scene's node that will be processed by the loop constraintSolver The ConstraintSolver used in this animation loop (required)"},{"location":"30_Components/10_AnimationLoop/30_FreeMotionAnimationLoop/#examples","title":"Examples","text":"<p>Component/AnimationLoop/FreeMotionAnimationLoop.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!--\nWARNING: this scene uses a PrecomputedConstraintCorrection which has a heavy initialization step. It may take some time\nto load the scene. To cache the result, set the recompute Data of PrecomputedConstraintCorrection to false.\nTo speed up the collision detection, replace BVHNarrowPhase by ParallelBVHNarrowPhase located in the MultiThreading plugin.\n--&gt;\n\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 981 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.AnimationLoop\"/&gt; &lt;!-- Needed to use components [FreeMotionAnimationLoop] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [LocalMinDistance] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Correction\"/&gt; &lt;!-- Needed to use components [PrecomputedConstraintCorrection UncoupledConstraintCorrection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Solver\"/&gt; &lt;!-- Needed to use components [LCPConstraintSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels\"/&gt;\n    &lt;FreeMotionAnimationLoop parallelCollisionDetectionAndFreeMotion=\"true\"/&gt;\n    &lt;LCPConstraintSolver tolerance=\"1e-3\" maxIt=\"1000\"/&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\"/&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;LocalMinDistance name=\"Proximity\" alarmDistance=\"2.5\" contactDistance=\"1.0\" angleCone=\"0.0\"/&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"FrictionContactConstraint\"/&gt;\n    &lt;Node name=\"Torus1\"&gt;\n        &lt;MeshOBJLoader filename=\"mesh/torus2_for_collision.obj\" name=\"loader\"/&gt;\n        &lt;MeshTopology src=\"@loader\"/&gt;\n        &lt;MechanicalObject src=\"@loader\" scale=\"5.0\"/&gt;\n        &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\"/&gt;\n        &lt;LineCollisionModel simulated=\"0\" moving=\"0\"/&gt;\n        &lt;PointCollisionModel simulated=\"0\" moving=\"0\"/&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus2.obj\" scale=\"5.0\" handleSeams=\"1\" /&gt;\n        &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"0.5 0.5 0.5 1.0\"/&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"TorusFEM\"&gt;\n        &lt;EulerImplicitSolver rayleighMass=\"0.01\" rayleighStiffness=\"0.001\"/&gt;\n        &lt;CGLinearSolver iterations=\"15\" threshold=\"1.0e-15\" tolerance=\"1.0e-9\"/&gt;\n        &lt;!--&lt;SparseLDLSolver /&gt;--&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\"/&gt;\n        &lt;MeshTopology src=\"@loader\"/&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"-12\" dy=\"0\" dz=\"0\" rx=\"0\" ry=\"0\" rz=\"0\" scale=\"5.0\"/&gt;\n        &lt;UniformMass totalMass=\"0.2\"/&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"60000\" poissonRatio=\"0.48\" computeGlobalMatrix=\"false\" method=\"polar\"/&gt;\n        &lt;!--&lt;LinearSolverConstraintCorrection /&gt;--&gt;\n        &lt;PrecomputedConstraintCorrection rotations=\"true\" recompute=\"true\"/&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus.obj\" scale=\"5.0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"red\" dx=\"-12\" dy=\"0\" dz=\"0\" rx=\"0\" ry=\"0\" rz=\"0\"/&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\"/&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\"/&gt;\n            &lt;MeshTopology src=\"@loader\"/&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"-12\" dy=\"0\" dz=\"0\" rx=\"0\" ry=\"0\" rz=\"0\" scale=\"5.0\"/&gt;\n            &lt;TriangleCollisionModel contactStiffness=\"0.1\"/&gt;\n            &lt;LineCollisionModel/&gt;\n            &lt;PointCollisionModel/&gt;\n            &lt;BarycentricMapping/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Torus3\"&gt;\n        &lt;EulerImplicitSolver/&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" scale=\"5.0\" dx=\"-25\" dy=\"0\"/&gt;\n        &lt;UniformMass filename=\"BehaviorModels/torus2.rigid\" totalMass=\"0.02\"/&gt;\n        &lt;UncoupledConstraintCorrection/&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus2.obj\" scale=\"5.0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"1.0 0.5 0.25 1.0\"/&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@Visual\"/&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader filename=\"mesh/torus2_for_collision.obj\" name=\"loader\"/&gt;\n            &lt;MeshTopology src=\"@loader\"/&gt;\n            &lt;MechanicalObject src=\"@loader\" scale=\"5.0\"/&gt;\n            &lt;TriangleCollisionModel/&gt;\n            &lt;LineCollisionModel/&gt;\n            &lt;PointCollisionModel/&gt;\n            &lt;RigidMapping/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 981 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.AnimationLoop\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Correction\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Solver\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels\")\n    root.addObject('FreeMotionAnimationLoop', parallelCollisionDetectionAndFreeMotion=\"true\")\n    root.addObject('LCPConstraintSolver', tolerance=\"1e-3\", maxIt=\"1000\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('LocalMinDistance', name=\"Proximity\", alarmDistance=\"2.5\", contactDistance=\"1.0\", angleCone=\"0.0\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"FrictionContactConstraint\")\n\n    Torus1 = root.addChild('Torus1')\n    Torus1.addObject('MeshOBJLoader', filename=\"mesh/torus2_for_collision.obj\", name=\"loader\")\n    Torus1.addObject('MeshTopology', src=\"@loader\")\n    Torus1.addObject('MechanicalObject', src=\"@loader\", scale=\"5.0\")\n    Torus1.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    Torus1.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    Torus1.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    Torus1.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus2.obj\", scale=\"5.0\", handleSeams=\"1\")\n    Torus1.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"0.5 0.5 0.5 1.0\")\n\n    TorusFEM = root.addChild('TorusFEM')\n    TorusFEM.addObject('EulerImplicitSolver', rayleighMass=\"0.01\", rayleighStiffness=\"0.001\")\n    TorusFEM.addObject('CGLinearSolver', iterations=\"15\", threshold=\"1.0e-15\", tolerance=\"1.0e-9\")\n    TorusFEM.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusFEM.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM.addObject('MechanicalObject', src=\"@loader\", dx=\"-12\", dy=\"0\", dz=\"0\", rx=\"0\", ry=\"0\", rz=\"0\", scale=\"5.0\")\n    TorusFEM.addObject('UniformMass', totalMass=\"0.2\")\n    TorusFEM.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"60000\", poissonRatio=\"0.48\", computeGlobalMatrix=\"false\", method=\"polar\")\n    TorusFEM.addObject('PrecomputedConstraintCorrection', rotations=\"true\", recompute=\"true\")\n\n    Visu = TorusFEM.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus.obj\", scale=\"5.0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"red\", dx=\"-12\", dy=\"0\", dz=\"0\", rx=\"0\", ry=\"0\", rz=\"0\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"-12\", dy=\"0\", dz=\"0\", rx=\"0\", ry=\"0\", rz=\"0\", scale=\"5.0\")\n    Surf2.addObject('TriangleCollisionModel', contactStiffness=\"0.1\")\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    Torus3 = root.addChild('Torus3')\n    Torus3.addObject('EulerImplicitSolver')\n    Torus3.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Torus3.addObject('MechanicalObject', template=\"Rigid3\", scale=\"5.0\", dx=\"-25\", dy=\"0\")\n    Torus3.addObject('UniformMass', filename=\"BehaviorModels/torus2.rigid\", totalMass=\"0.02\")\n    Torus3.addObject('UncoupledConstraintCorrection')\n\n    Visu = Torus3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus2.obj\", scale=\"5.0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"1.0 0.5 0.25 1.0\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = Torus3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', filename=\"mesh/torus2_for_collision.obj\", name=\"loader\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", scale=\"5.0\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n</code></pre>"},{"location":"30_Components/10_AnimationLoop/ConstraintAnimationLoop/","title":"ConstraintAnimationLoop","text":"<p>Constraint animation loop manager</p> <p>Target: <code>Sofa.Component.AnimationLoop</code></p> <p>namespace: <code>sofa::component::animationloop</code></p> <p>parents: </p> <ul> <li><code>BaseAnimationLoop</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 computeBoundingBox  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering.  1 displayTime  Display time for each important step of ConstraintAnimationLoop.  0 tolerance  Tolerance of the Gauss-Seidel  1e-05 maxIterations  Maximum number of iterations of the Gauss-Seidel  1000 doCollisionsFirst  Compute the collisions first (to support penality-based contacts)  0 doubleBuffer  Buffer the constraint problem in a doublebuffer to be accessible with an other thread  0 scaleTolerance  Scale the error tolerance with the number of constraints  1 allVerified  All contraints must be verified (each constraint's error &lt; tolerance)  0 sor  Successive Over Relaxation parameter (0-2)  1 schemeCorrection  Apply new scheme where compliance is progressively corrected  0 realTimeCompensation  If the total computational time T &lt; dt, sleep(dt-T)  0 Graph graphErrors  Sum of the constraints' errors at each iteration  graphConstraints  Graph of each constraint's error at the end of the resolution  Graph2 graphForces  Graph of each constraint's force at each step of the resolution  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects targetNode Link to the scene's node that will be processed by the loop"},{"location":"30_Components/10_AnimationLoop/MultiTagAnimationLoop/","title":"MultiTagAnimationLoop","text":"<p>Simple animation loop that given a list of tags, animate the graph one tag after another.</p> <p>Target: <code>Sofa.Component.AnimationLoop</code></p> <p>namespace: <code>sofa::component::animationloop</code></p> <p>parents: </p> <ul> <li><code>BaseAnimationLoop</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 computeBoundingBox  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering.  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects targetNode Link to the scene's node that will be processed by the loop"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/10_CollisionPipeline/","title":"Collision Pipelines","text":"<p>Collision between objects is split in several phases, each implemented in a different component. Each phase is scheduled by a collision pipeline. The collision pipelines are executed in an animation loop.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/10_CollisionPipeline/#the-steps","title":"The Steps","text":"<p>The collision pipeline follows three steps:</p> <ol> <li>reset of the collision</li> <li>a collision detection</li> <li>a collision response</li> </ol>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/10_CollisionPipeline/#implementation","title":"Implementation","text":"<p>A collision pipeline is called from an animation loop through a CollisionVisitor executing the 3 steps of the pipeline in <code>CollisionVisitor::processCollisionPipeline</code>.</p> <p>The visitor executes the following functions, each corresponding to a step of the pipeline: <pre><code>/// Remove collision response from last step\nvoid Pipeline::computeCollisionReset()\n</code></pre></p> <pre><code>/// Detect new collisions. Note that this step must not modify the simulation graph\nvoid Pipeline::computeCollisionDetection()\n</code></pre> <pre><code>/// Add collision response in the simulation graph\nvoid Pipeline::computeCollisionResponse()\n</code></pre> <p>Each of these functions will call a delegate, available in the Pipeline: <pre><code>/// Remove collision response from last step\nvoid doCollisionReset() override;\n</code></pre></p> <pre><code>/// Detect new collisions. Note that this step must not modify the simulation graph\nvoid doCollisionDetection(const sofa::helper::vector&lt;core::CollisionModel*&gt;&amp; collisionModels) override;\n</code></pre> <pre><code>/// Add collision response in the simulation graph\nvoid doCollisionResponse() override;\n</code></pre> <p>The 3 delegate functions describe the 3 different steps, and are usually overriden in derived classes. See an example in DefaultPipeline.</p> <p>Notes: In some cases, the 3 steps are called manually by the animation loop through 3 dedicated visitors (CollisionResetVisitor, CollisionDetectionVisitor and CollisionResponseVisitor). Each of these visitors executes only one step (instead of the 3). This is to avoid race conditions in a multi-threaded environment.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/10_CollisionPipeline/#examples-of-components","title":"Examples of Components","text":"<p>The following components are all collision pipelines, and can be placed in a simulation scene:</p> <ul> <li>DefaultPipeline</li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/10_CollisionPipeline/#inheritance-diagram","title":"Inheritance Diagram","text":"<p>Read more on SOFA API documentation</p> <p>Target: <code>Sofa.Component.Collision.Detection.Algorithm</code></p> <p>namespace: <code>sofa::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>Pipeline</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 verbose  Display extra informations at each computation step. (default=false)  0 depth  Max depth of bounding trees. (default=6, min=?, max=?)  6 Visualization draw  Draw the detected collisions. (default=false)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_DefaultPipeline/","title":"Collision Pipelines: DefaultPipeline","text":"<p>The DefaultPipeline is a Collision Pipeline. It performs steps related to the collision, mainly collision detection and collision response.</p> <p>The animation loop executes the 3 steps of the pipeline (see documentation on Collision Pipeline).</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_DefaultPipeline/#interaction-with-other-components","title":"Interaction with Other Components","text":"<p>DefaultPipeline requires other components defined in the same context:</p> <ul> <li>An intersection method (e.g. MinProximityIntersection, LocalMinDistance)</li> <li>A broad phase detection (e.g. BruteForceBroadPhase)</li> <li>A narrow phase detection (e.g. BVHNarrowPhase)</li> <li>A contact manager (e.g. DefaultContactManager)</li> <li>[optional] A group manager (e.g. DefaultCollisionGroupManager)</li> </ul> <p>If no intersection method is provided, a default DiscreteIntersection component is created and added to the scene graph, with a warning to the user, and used as the intersection method.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_DefaultPipeline/#pipeline","title":"Pipeline","text":"<p>Here is a description of the 3 steps of the pipeline:</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_DefaultPipeline/#collision-reset","title":"Collision Reset","text":"<p>This step mainly clears data computed from the previous time step. It is implemented in the function <pre><code>void DefaultPipeline::doCollisionReset()\n</code></pre></p> <ol> <li>All the contacts provided by the contact manager are cleared.</li> <li>The group manager clears its groups</li> </ol>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_DefaultPipeline/#collision-detection","title":"Collision Detection","text":"<ol> <li>For all collision models, computes its bounding tree. The depth of the tree is defined by a Data in DefaultPipeline. If the broad phase or the narrow phase does not require a deep tree (<code>needsDeepBoundingTree()</code>), the tree is minimal. In any case, a CubeCollisionModel is created and linked to each collision model, to be used as a Axis-Aligned Bounding Box in the broad phase. Building the tree takes into account whether the collision detection is continuous or not. This is defined in the intersection method.</li> <li>Executes the broad phase collision detection</li> <li>Executes the narrow phase collision detection</li> </ol> <p>Collision detection is implemented in the following function <pre><code>void DefaultPipeline::doCollisionDetection()\n</code></pre></p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_DefaultPipeline/#collision-response","title":"Collision Response","text":"<ol> <li>Create contacts in the contact manager, based on the result of the collision detection</li> <li>Create response for all pairs of intersecting collision models, which one is not simulated</li> <li>Create response for the rest of the pairs of intersecting collision models (the ones which are simulated). This step can be performed by the group manager if any.</li> </ol> <p>Creation of the response depends on the type of contact defined in the contact manager.</p> <p>Collision response is implemented in the following function <pre><code>void DefaultPipeline::doCollisionResponse(const helper::vector&lt;core::CollisionModel*&gt;&amp; collisionModels)\n</code></pre></p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_DefaultPipeline/#example-of-usage","title":"Example of Usage","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;FreeMotionAnimationLoop /&gt;\n&lt;DefaultPipeline depth=\"15\" verbose=\"0\" draw=\"0\" /&gt;\n&lt;BruteForceBroadPhase name=\"N2\" /&gt;\n&lt;BVHNarrowPhase/&gt;\n&lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"1.5\" contactDistance=\"1\" /&gt;\n&lt;DefaultContactManager name=\"Response\" response=\"FrictionContact\" /&gt;\n</code></pre> <p>Note DefaultPipeline is defined alongside other required components.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_DefaultPipeline/#inheritance-diagram","title":"Inheritance Diagram","text":"<p>Read more on SOFA API documentation</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_Detection_Sweep_and_Prune/","title":"Collisions Detection: DirectSAP","text":"<p>The DirectSAP component belongs to the category of Collision Detection. In this section, we describe the two collision detection methods based on the \"Sweep and Prune\" algorithm, noted SAP. The SAP method belongs to the topological methods for broad phase, based on the positions of objects in relation to others.</p> <p></p> <p>DirectSAP corresponds to the implementation of SAP in its \"direct\" version, i.e. at each step it sorts all the primitives along an axis (not checking the moving ones) and computes overlapping pairs without saving it. But the memory used to save these primitives is created just once, the first time we add CollisionModels.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_Detection_Sweep_and_Prune/#preliminary-phase","title":"Preliminary phase","text":"<p>Before starting the broad phase, two steps are therefore required before the brute force detection starts:</p> <ul> <li>all present collision models in the scene must be listed. This is done in the function <code>void PipelineImpl::computeCollisionDetection()</code>  with: <pre><code>root-&gt;getTreeObjects&lt;CollisionModel&gt; (&amp;collisionModels);\n</code></pre></li> <li>from the collision, Axis-Aligned-Bounding-Box (AABB, i.e. CubeModel) will be computed without needing a deep bounding tree (depth level = 1). This is done by each CollisionModel in the scene in the function:  <pre><code>computeBoundingTree(used_depth);\n</code></pre></li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_Detection_Sweep_and_Prune/#broad-phase","title":"Broad phase","text":"<p>It is one of the most used methods in the broad-phase algorithms because it provides an efficient and quick pairs removal (two objects too far one to the other is deleted) and it does not depend on the objects complexity. The sequential algorithm of SAP takes in input the overall objects of the environment and feeds in output a collided objects pairs list. The algorithm is divided in two principal parts:</p> <ul> <li>the first one is in charge of the bounding volume update of each active virtual objects. In SOFA, these bounding volume are defined in DSAPBoxes which are simple bounding boxes. Each DSAPBox contains a Cube which contains only one final CollisionElement and pointers to min and max EndPoints.</li> <li>the second part is in charge of the detection of overlapping between objects. To do that a projection of higher and upper bounds on the three axis of coordinates (x, y and z) of each AABBs is made. </li> </ul> <p>Only the pairs of objects whose projected bounding volumes overlap on all axes will be saved in the set of active boxes to be considered for the narrow phase. We can notice two related but different concepts on the way the SAP operates internally: the DirectSAP starts from scratch each time even though internal structures could be updated as performed in the IncrSAP.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_Detection_Sweep_and_Prune/#narrow-phase","title":"Narrow phase","text":"<p>The narrow phase browses all boxes considered as active by the broad phase. From this information, it is possible to recover the finest CollisionModel (which is not a CubeModel) corresponding to each box. An intersection check will then be done between these pairs. This check also depends on the intersection method used. This last phase returns the DetectionOutput vector containing elements of CollisionModels in collision and the contact points on the surface of each model.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_Detection_Sweep_and_Prune/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/25_Detection_SAP_Incremental/","title":"Collisions Detection: IncrSAP","text":"<p>The IncrSAP component belongs to the category of Collision Detection. In this section, we describe the two collision detection methods based on the \"Sweep and Prune\" algorithm, noted SAP. The SAP method belongs to the topological methods for broad phase, based on the positions of objects in relation to others.</p> <p></p> <p>IncrSAP corresponds to the implementation of SAP in an incremental manner, i.e. collision primitives are stored and updated which should speed up the collision detection compared to the DirectSAP.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/25_Detection_SAP_Incremental/#preliminary-phase","title":"Preliminary phase","text":"<p>Before starting the broad phase, two steps are therefore required before the brute force detection starts:</p> <ul> <li>all present collision models in the scene must be listed. This is done in the function <code>void PipelineImpl::computeCollisionDetection()</code>  with: <pre><code>root-&gt;getTreeObjects&lt;CollisionModel&gt; (&amp;collisionModels);\n</code></pre></li> <li>from the collision, Axis-Aligned-Bounding-Box (AABB, i.e. CubeModel) will be computed without needing a deep bounding tree (depth level = 1). This is done by each CollisionModel in the scene in the function: <pre><code>computeBoundingTree(used_depth);\n</code></pre></li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/25_Detection_SAP_Incremental/#broad-phase","title":"Broad phase","text":"<p>It is one of the most used methods in the broad-phase algorithms because it provides an efficient and quick pairs removal (two objects too far one to the other is deleted) and it does not depend on the objects complexity. The sequential algorithm of SAP takes in input the overall objects of the environment and feeds in output a collided objects pairs list. The algorithm is divided in two principal parts:</p> <ul> <li>the first one is in charge of the bounding volume update of each active virtual objects. In SOFA, these bounding volume are defined in ISAPBoxes which are simple bounding boxes. It contains a Cube which contains only one final CollisionElement and pointers to min and max EndPoints along the three dimensions. min and max end points are respectively min and max coordinates of the cube on a coordinate axis. The between end points (_min, _max) and the field cube is that cube is always updated whereas _min and _max are stored values of the cube end points at previous time step.</li> <li>the second part is in charge of the detection of overlapping between objects. To do that a projection of higher and upper bounds on the three axis of coordinates (x, y and z) of each AABBs is made. </li> </ul> <p>Only the pairs of objects whose projected bounding volumes overlap on all axes will be saved in the set of active boxes to be considered for the narrow phase. Unlike like the DirectSAP which starts from scratch at each time step, the IncrSAP updates internal structures: this is the IncrSAP and should therefore be fore efficient.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/25_Detection_SAP_Incremental/#narrow-phase","title":"Narrow phase","text":"<p>The narrow phase browses all boxes considered as active by the broad phase. From this information, it is possible to recover the finest CollisionModel (which is not a CubeModel) corresponding to each box. An intersection check will then be done between these pairs. This check also depends on the intersection method used. This last phase returns the DetectionOutput vector containing elements of CollisionModels in collision and the contact points on the surface of each model.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/25_Detection_SAP_Incremental/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/BVHNarrowPhase/","title":"BVHNarrowPhase","text":"<p>Narrow phase collision detection based on boundary volume hierarchy</p> <p>Target: <code>Sofa.Component.Collision.Detection.Algorithm</code></p> <p>namespace: <code>sofa::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>NarrowPhaseDetection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/BruteForceBroadPhase/","title":"BruteForceBroadPhase","text":"<p>Broad phase collision detection using extensive pair-wise tests</p> <p>Target: <code>Sofa.Component.Collision.Detection.Algorithm</code></p> <p>namespace: <code>sofa::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>BroadPhaseDetection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 box  if not empty, objects that do not intersect this bounding-box will be ignored  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/BruteForceDetection/","title":"BruteForceDetection","text":"<p>Combination of brute force broad phase and BVH narrow phase collision detection</p> <p>Target: <code>Sofa.Component.Collision.Detection.Algorithm</code></p> <p>namespace: <code>sofa::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/DirectSAP/","title":"DirectSAP","text":"<p>Collision detection using sweep and prune</p> <p>Target: <code>Sofa.Component.Collision.Detection.Algorithm</code></p> <p>namespace: <code>sofa::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/DirectSAPNarrowPhase/","title":"DirectSAPNarrowPhase","text":"<p>Collision detection using sweep and prune</p> <p>Target: <code>Sofa.Component.Collision.Detection.Algorithm</code></p> <p>namespace: <code>sofa::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>NarrowPhaseDetection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 nbPairs  number of pairs of elements sent to narrow phase  0 Visualization showOnlyInvestigatedBoxes  Show only boxes which will be sent to narrow phase  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/IncrSAP/","title":"IncrSAP","text":"<p>Collision detection using incremental sweep and prune</p> <p>Target: <code>Sofa.Component.Collision.Detection.Algorithm</code></p> <p>namespace: <code>sofa::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>BroadPhaseDetection</code></li> <li><code>NarrowPhaseDetection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 box  if not empty, objects that do not intersect this bounding-box will be ignored  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/RayTraceDetection/","title":"RayTraceDetection","text":"<p>Collision detection using TriangleOctreeModel</p> <p>Target: <code>Sofa.Component.Collision.Detection.Algorithm</code></p> <p>namespace: <code>sofa::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/RayTraceNarrowPhase/","title":"RayTraceNarrowPhase","text":"<p>Collision detection using TriangleOctreeModel</p> <p>Target: <code>Sofa.Component.Collision.Detection.Algorithm</code></p> <p>namespace: <code>sofa::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>NarrowPhaseDetection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_BroadPhases/10_BroadPhase/","title":"Broad Phase Components","text":"<p>The broad phase collision detection components are executed in a collision pipeline.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_BroadPhases/10_BroadPhase/#introduction","title":"Introduction","text":"<p>In SOFA, collision detection usually involves complex meshes (e.g. a set of triangles). For an accurate collision response, the collision detection detects which pairs of collision elements are in intersection.</p> <p>The naive approach would be to test every pair of collision elements. The number of tests depends on the number of objects, and the number of collision elements in each object. For performances reasons, this approach is never selected because of its quadratic complexity.</p> <p>Instead, the collision detection will be divided in two parts:</p> <ol> <li>The broad phase collision detection</li> <li>The narrow phase collision detection</li> </ol>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_BroadPhases/10_BroadPhase/#the-broad-phase","title":"The Broad Phase","text":"<p>In SOFA, the role of the broad phase is usually to prune a maximum number of pairs of collision models which are not in intersection. Considering  collision models (usually there are more than one collision model per object), there are between (no self collision) and (if all collision models can self collide) pairs of collision models.</p> <p>The output of the broad phase is a collection of pairs of collision models which are potentially in intersection. At this stage, it is not known if those pairs are actually in intersection or not. It is not known which collision elements (i.e. point/line/triangle) are in intersection with which collision elements. The list of pairs is provided as an input to the narrow phase collision detection.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_BroadPhases/10_BroadPhase/#the-implementation","title":"The Implementation","text":"<p>Before starting the broad phase, all collision models in the scene must be listed. This is done in the function <code>void PipelineImpl::computeCollisionDetection()</code>  with: <pre><code>std::vector&lt;CollisionModel*&gt; collisionModels;\nroot-&gt;getTreeObjects&lt;CollisionModel&gt; (&amp;collisionModels);\n</code></pre></p> <p>Then, the broad phase collision detection is executed in 3 functions:</p> <pre><code>void BroadPhaseDetection::beginBroadPhase()\n</code></pre> <pre><code>void BroadPhaseDetection::addCollisionModels(const sofa::helper::vector&lt;core::CollisionModel *&gt;&amp; v)\n</code></pre> <pre><code>void BroadPhaseDetection::endBroadPhase()\n</code></pre> <p>The function <code>addCollisionModels</code> is called on the list of all collision models in the scene. Internally, this function is just a loop calling the following function: <pre><code>void BroadPhaseDetection::addCollisionModel(core::CollisionModel *cm)\n</code></pre></p> <p>The implementation of these 3 functions (<code>beginBroadPhase</code>, <code>addCollisionModel</code> and <code>endBroadPhase</code>) defines the behavior of the broad phase. It is where the algorithm is implemented. To implement a new broad phase algorithm, a developer will probably derive a class from <code>BroadPhaseDetection</code> and override the 3 mentioned functions.</p> <p>After the execution of the broad phase, the list of potential colliding pairs is stored in <pre><code>sofa::helper::vector&lt; CollisionModelPair &gt; BroadPhaseDetection::cmPairs;\n</code></pre> Finally, the collision pipeline provides this list to a narrow phase collision detection.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_BroadPhases/10_BroadPhase/#examples-of-components","title":"Examples of Components","text":"<p>The following components are all broad phase collision detections, and can be placed in a simulation scene:</p> <ul> <li>BruteForceBroadPhase</li> <li>ParallelBruteForceBroadPhase (plugin MultiThreading)</li> <li>BruteForceDetection</li> <li>THMPGSpatialHashing (plugin THMPGSpatialHashing)</li> <li>BulletCollisionDetection (plugin BulletCollisionDetection)</li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_BroadPhases/10_BroadPhase/#inheritance-diagram","title":"Inheritance Diagram","text":"<p>Read more on SOFA API documentation</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_BroadPhases/20_BruteForceBroadPhase/","title":"Broad Phase: Brute Force Broad Phase","text":"<p>BruteForceBroadPhase is a broad phase component, which is used in a Collision Detection pipeline.</p> <p>The method is based on the comparison of the overall bounding volumes of objects to determine if they are in collision or not. This test is very exhaustive because of its  pairwise checks. In SOFA, the proposed bounding volumes are commonly Axis-Aligned-Bounding-Box (AABB).</p> <p>Since, the bounding volumes are very simple (AABB), the tests are very fast for a few collision models. A more advanced method must be selected for simulations involving a high number of objects.</p> <p>A parallel implementation (ParallelBruteForceBroadPhase) can be found in the plugin MultiThreading.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/20_BroadPhases/20_BruteForceBroadPhase/#example-of-usage","title":"Example of Usage","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;FreeMotionAnimationLoop /&gt;\n&lt;DefaultPipeline depth=\"15\" verbose=\"0\" draw=\"0\" /&gt;\n&lt;BruteForceBroadPhase name=\"N2\" /&gt;\n&lt;BVHNarrowPhase/&gt;\n&lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"1.5\" contactDistance=\"1\" /&gt;\n&lt;DefaultContactManager name=\"Response\" response=\"FrictionContact\" /&gt;\n</code></pre>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/10_NarrowPhase/","title":"Narrow Phase Components","text":"<p>The narrow phase collision detection components are executed in a collision pipeline.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/10_NarrowPhase/#introduction","title":"Introduction","text":"<p>In SOFA, collision detection usually involves complex meshes (e.g. a set of triangles). For an accurate collision response, the collision detection detects which pairs of collision elements are in intersection.</p> <p>The naive approach would be to test every pair of collision elements. The number of tests depends on the number of objects, and the number of collision elements in each object. For performances reasons, this approach is never selected because of its quadratic complexity.</p> <p>Instead, the collision detection will be divided in two parts: 1. The broad phase collision detection 2. The narrow phase collision detection</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/10_NarrowPhase/#the-narrow-phase","title":"The Narrow Phase","text":"<p>The narrow phase is executed after the broad phase. The broad phase output is a list of collision models potentially in collision. The goal of the narrow phase is to examine the list more closely and determine if they are actually in intersection. If it is the case, it detects which elements are in intersection.</p> <p>Following the DefaultPipeline, the output of the narrow phase is provided to the contact manager.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/10_NarrowPhase/#the-implementation","title":"The Implementation","text":"<p>The narrow phase is executed in 3 functions:</p> <pre><code>/// Clear all the potentially colliding pairs detected in the previous simulation step\nvoid NarrowPhaseDetection::beginNarrowPhase()\n</code></pre> <pre><code>/// Add a new list of potentially colliding pairs of models\nvoid NarrowPhaseDetection::addCollisionPairs(const sofa::helper::vector&lt; std::pair&lt;core::CollisionModel*, core::CollisionModel*&gt; &gt;&amp; v)\n</code></pre> <pre><code>void NarrowPhaseDetection::endNarrowPhase()\n</code></pre> <p>The function <code>addCollisionPairs</code> is called on the list of pairs of collision models provided by the broad phase. Internally, this function is just a loop calling the following function: <pre><code>void NarrowPhaseDetection::addCollisionPair (const std::pair&lt;core::CollisionModel*, core::CollisionModel*&gt;&amp; cmPair)\n</code></pre></p> <p>The implementation of these 3 functions (<code>beginNarrowPhase</code>, <code>addCollisionPair</code> and <code>endNarrowPhase</code>) defines the behavior of the narrow phase. It is where the algorithm is implemented. To implement a new narrow phase algorithm, a developer will probably derive a class from <code>NarrowPhaseDetection</code> and override the 3 mentioned functions.</p> <p>After the execution of the narrow phase, the list of contact is stored in <pre><code>DetectionOutputMap NarrowPhaseDetection::m_outputsMap;\n</code></pre></p> <p>Finally, the collision pipeline provides this list to the contact manager.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/10_NarrowPhase/#examples-of-components","title":"Examples of Components","text":"<p>The following components are all narrow phase collision detections, and can be placed in a simulation scene:</p> <ul> <li>BVHNarrowPhase</li> <li>ParallelBVHNarrowPhase (plugin MultiThreading)</li> <li>DirectSAPNarrowPhase</li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/10_NarrowPhase/#inheritance-diagram","title":"Inheritance Diagram","text":"<p>Read more on SOFA API documentation</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/20_BVHNarrowPhase/","title":"Narrow Phase: BVH Narrow Phase","text":"<p>BVHNarrowPhase is narrow phase component, which is used in a Collision Detection pipeline. The algorithm is based on a Bounding Volume Hierarchy (BVH).</p> <p>BVHNarrowPhase is used as the narrow phase in the BruteForceDetection component.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/20_BVHNarrowPhase/#bounding-volume-hierarchy","title":"Bounding Volume Hierarchy","text":"<p>The data structure is built or updated by the collision pipeline before the actual collision detection. The hierarchy is contained internally into the collision models, through linked collision models and lists of elements (see CollisionModel).</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/20_BVHNarrowPhase/#the-algorithm","title":"The Algorithm","text":"<p>The algorithm examines a potential collision between a pair of collision models, which has  been detected in the broad phase. This test is time-consuming, this is why it is necessary to have a broad phase which eliminates a maximum number of pairs. For a pair of collision models, the algorithm traverses the hierarchy of collision elements to rapidly eliminate pairs of elements which are not in intersection. Finally, the intersection method is called on the remaining pairs of elements.</p> <p>Note that the algorithm is written in its iterative form, instead of a recursive form.</p> <p>A parallel implementation (ParallelBVHNarrowPhase) can be found in the plugin MultiThreading.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/20_BVHNarrowPhase/#example-of-usage","title":"Example of Usage","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;FreeMotionAnimationLoop /&gt;\n&lt;DefaultPipeline depth=\"15\" verbose=\"0\" draw=\"0\" /&gt;\n&lt;BruteForceBroadPhase name=\"N2\" /&gt;\n&lt;BVHNarrowPhase/&gt;\n&lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"1.5\" contactDistance=\"1\" /&gt;\n&lt;DefaultContactManager name=\"Response\" response=\"FrictionContact\" /&gt;\n</code></pre>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/30_DirectSAPNarrowPhase/","title":"Narrow Phase: Direct SAP Narrow Phase","text":"<p>DirectSAPNarrowPhase is a narrow phase component, which is used in a collision pipeline. The algorithm is based on the \"Sweep and Prune\" algorithm, noted SAP.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/30_DirectSAPNarrowPhase/#the-algorithm","title":"The Algorithm","text":"<p>As mentioned in Narrow Phase, DirectSAPNarrowPhase input is a list of pairs of collision models. Among this list, if it is the first time that a collision model is provided to DirectSAPNarrowPhase, a list of Axis-Aligned Bounding Box (AABB) is created. Each associated to a collision element of the new collision model. This list is saved from a time step to the next.</p> <p>In the second step, all the AABB are updated according to the geometry of the collision elements in the current time step. The size of the AABB takes into account the alarm distance defined in the intersection method.</p> <p>Then, the boxes end points are sorted, according to their position projected on the axis of the greatest variance.</p> <p>Finally, the sorted end points are processed. A list of active end points is used. If an end point corresponds to the beginning of an AABB, it is added to the active list. If an end point corresponds to the end of an AABB, it is removed from the active list. For each end point, it is tested against the active list.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/30_DirectSAPNarrowPhase/#direct-vs-inc","title":"Direct vs Inc.","text":"<p>DirectSAPNarrowPhase corresponds to the implementation of SAP in its \"direct\" version, i.e. at each step it sorts all the primitives along an axis (not checking the moving ones) and computes overlapping pairs without saving it. But the memory used to save these primitives is created just once, the first time CollisionModels are added.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/30_DirectSAPNarrowPhase/#example-of-usage","title":"Example of Usage","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;FreeMotionAnimationLoop /&gt;\n&lt;DefaultPipeline depth=\"15\" verbose=\"0\" draw=\"0\" /&gt;\n&lt;BruteForceBroadPhase name=\"N2\" /&gt;\n&lt;DirectSAPNarrowPhase/&gt;\n&lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"1.5\" contactDistance=\"1\" /&gt;\n&lt;DefaultContactManager name=\"Response\" response=\"FrictionContact\" /&gt;\n</code></pre>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/50_RayTraceNarrowPhase/","title":"Narrow Phase: Ray Trace Narrow Phase","text":"<p>The RayTraceNarrowPhase component is a narrow phase component, which is used in a collision pipeline. This method traces a ray for each point in one object following the opposite of the point's normal up to find a triangle in the other object. Both triangles are tested to evaluate if they are in a colliding state.</p> <p>It must be used with a TriangleOctreeModel, as an octree is used to traverse the object.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/50_RayTraceNarrowPhase/#the-algorithm","title":"The Algorithm","text":"<p>The CollisionModel at the lowest level is saved, in this case it must be a TriangleOctreeModel. If the octree would not be constructed already, build it. Then, rays are traced against the TriangleOctreeModel. Distances computed with the ray indicates if a collision occurs between the pair of TriangleOctreeModels. Finally, the DetectionOutput vector containing elements of TriangleOctreeModels in collision is returned, as well as the contact points on the triangle of each model.</p>"},{"location":"30_Components/15_Collision/10_Detection/10_Algorithm/30_NarrowPhases/50_RayTraceNarrowPhase/#example-of-usage","title":"Example of Usage","text":"<p>This component can be used as follows in XML format:</p> <pre><code>&lt;FreeMotionAnimationLoop /&gt;\n&lt;DefaultPipeline depth=\"15\" verbose=\"0\" draw=\"0\" /&gt;\n&lt;BruteForceBroadPhase name=\"N2\" /&gt;\n&lt;RayTraceNarrowPhase/&gt;\n&lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"1.5\" contactDistance=\"1\" /&gt;\n&lt;DefaultContactManager name=\"Response\" response=\"FrictionContact\" /&gt;\n</code></pre> <p>Colliding objects must have a TriangleOctreeModel:</p> <pre><code>&lt;TriangleOctreeModel/&gt;\n</code></pre>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/10_IntersectionMehod/","title":"Intersection Method","text":"<p>In SOFA, a proximity method can be used to detect contact when two objects are getting closer from another. Evaluating this proximity allows for a better anticipation of the contact, i.e. more stable contact.</p>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/10_IntersectionMehod/#examples-of-components","title":"Examples of Components","text":"<p>The following components are all intersection methods, and can be placed in a simulation scene:</p> <ul> <li>MinProximityIntersection</li> <li>LocalMinDistance</li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/10_IntersectionMehod/#inheritance-diagram","title":"Inheritance Diagram","text":""},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/50_MinProximityIntersection/","title":"MinProximityIntersection","text":"<p>This proximity method for intersection detection:</p> <ul> <li>detects a possible contact as soon as pair of collision elements are close to each other (distance smaller than the alarmDistance)</li> <li>and creates contact (aka DetectionOutput) when the distance is lower than contactDistance.</li> </ul> <p>This method is optimized for meshes. The intersection is implemented for the following primitives: Triangle/Point, Line/Point, Line/Line, so that it covers all Triangle/Triangle intersections. To get a proper detection, the TriangleModel, LineModel and PointModel must be simultaneously used in the scene.</p> <p>In the figure below, we describe the detection of the contacts for Object 1 due to an Object 2. It assumes here that a PointCollisionModel and a LineCollisionModel are defined. The detection gives: - 2 Point-Point contacts (yellow) - 1 Point-Line contact (blue) - 1 Line-Line contact (pink)</p> <p></p> <p>Although the method is working properly, the intersection might result in a high number of contacts. This works just fine for Penalty method (many springs will be generated). However, using a response method based on Lagrange multipliers, many constraints will be generated which might rapidly become computationally-demanding.</p> <p>Moreover, the contacts can be a bit degenerated: many contacts with different orientations. Again, using Penalty, it might only create some numerical friction but, using the Lagrange multiplier resolution, this can lead to contradictory constraints (worsening the convergence).</p>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/50_MinProximityIntersection/#data","title":"Data","text":"<p>The intersection methods include the following data:</p> <ul> <li>alarmDistance: threshold distance below which the collision pipeline detects the models as getting in proximity. This distance can be increased for objects with high curvatures</li> <li>contactDistance : threshold distance below which a contact will be created (in DetectionOutput) to generate a contact response</li> </ul> <p>and it allows for activating tests in the primitive checks:</p> <ul> <li>useSphereTriangle</li> <li>usePointPoint</li> <li>useLineLine</li> <li>useLinePoint</li> <li>useSurfaceNormals</li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/50_MinProximityIntersection/#usage","title":"Usage","text":"<p>The MinProximityIntersection must be placed right after the CollisionPipeline and the associated Detection methods (usually BruteForceBroadPhase and BVHNarrowPhase) on top the scene graph.</p>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/50_MinProximityIntersection/#additional-information","title":"Additional information","text":"<ul> <li>collision models in the scene will have the data proximity corresponding to an enlargement of the collision model, i.e., value added to the alarmDistance and the contactDistance and also when building AABBs in the broad phase</li> <li>a different alarmDistance and contactDistance can be specified for each CollisionModel by setting alarmDistance and contactDistance to zero and changing the proximity parameter</li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/50_MinProximityIntersection/#example-of-usage","title":"Example of Usage","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\".5\" contactDistance=\".3\" useLinePoint=\"false\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('MinProximityIntersection', name='Proximity', alarmDistance='.5', contactDistance='.3', useLinePoint='false')\n</code></pre> <p>An example scene involving a MinProximityIntersection is available in examples/Component/Collision/Geometry/TriangleModel.scn</p> <p>Target: <code>Sofa.Component.Collision.Detection.Intersection</code></p> <p>namespace: <code>sofa::component::collision::detection::intersection</code></p> <p>parents: </p> <ul> <li><code>BaseProximityIntersection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 alarmDistance  Proximity detection distance  1 contactDistance  Distance below which a contact is created  0.5 useSphereTriangle  activate Sphere-Triangle intersection tests  1 usePointPoint  activate Point-Point intersection tests  1 useSurfaceNormals  Compute the norms of the Detection Outputs by considering the normals of the surfaces involved.  0 useLinePoint  activate Line-Point intersection tests  1 useLineLine  activate Line-Line  intersection tests  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/60_LocalMinDistance/","title":"LocalMinDistance","text":"<p>This proximity method is an intersection detection close to the previous MinProximityIntersection but in addition, it filters the list of DetectionOutput to keep only the contacts with the local minimal distance.</p> <p>To find an optimal number of contact points, the LocalMinDistance computes cones on all nodes of the collision model. A cone is the combination of the orthogonal directions/planes of the neighboring lines/surfaces.</p> <p></p> <p>All contact outputs which are outside these cones will be invalidated (even if they are below the contactDistance). Thus, only the geometrically closest contacts remain: for convex surfaces, this method even ensures to find one and only one contact point.</p> <p></p> <p>Degenerated cases can occur when, for instance, surfaces are perfectly parallel. If we think about configuration described below:</p> <p>The cones on the sides (no 1 and 3) are open with an 90 degree angle, while the middle cone (2) is closed. No contact will therefore be detected from the cone 2.</p> <p></p> <ul> <li>In case our object is rigid, having the two cones exactly equal to 90 degrees may lead to instabilities: a small rotation would lead to the invalidation of one of the two corner contacts, and the object would start to oscillate. To prevent such cases, a data is available to open the cone: \"coneFactor\"</li> <li>In case of a soft body, the LocalMinDistance would not detect the middle point as a contact since the cone is closed. The method would therefore fail to keep the object over the surface. To solve such a generated case, a data aiming at opening all existing cones is defined: \"angleCone\"</li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/60_LocalMinDistance/#data","title":"Data","text":"<p>The intersection methods include the following data:</p> <ul> <li>alarmDistance: maximum distance between collision elements for wich a contact is created</li> <li>contactDistance : parameter used in the contact creation</li> <li>angleCone: Filtering cone extension angle</li> <li>coneFactor: Factor for filtering cone angle computation</li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/60_LocalMinDistance/#usage","title":"Usage","text":"<p>The MinProximityIntersection must be placed right after the CollisionPipeline and the associated Detection method (usually BruteForce) on top the scene graph.</p>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/60_LocalMinDistance/#additional-information","title":"Additional information","text":"<ul> <li>collision models in the scene will have the data proximity corresponding to an enlargement of the collision model, i.e., value added to the alarmDistance and the contactDistance and also when building AABBs in the broad phase</li> <li>a different alarmDistance and contactDistance can be specified for each CollisionModel by setting alarmDistance and contactDistance to zero and changing the proximity parameter</li> </ul>"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/60_LocalMinDistance/#example-of-usage","title":"Example of Usage","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;LocalMinDistance name=\"LMD-proximity\" alarmDistance=\"0.5\" contactDistance=\"0.3\" angleCone=\"0.0\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('LocalMinDistance', name='LMD-proximity', alarmDistance='.5', contactDistance='.3', angleCone='0.0')\n</code></pre> <p>An example scene involving a LocalMinDistance is available in examples/Component/Collision/Response/FrictionContact.scn</p> <p>Target: <code>Sofa.Component.Collision.Detection.Intersection</code></p> <p>namespace: <code>sofa::component::collision::detection::intersection</code></p> <p>parents: </p> <ul> <li><code>BaseProximityIntersection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 alarmDistance  Proximity detection distance  1 contactDistance  Distance below which a contact is created  0.5 filterIntersection  Activate LMD filter  1 angleCone  Filtering cone extension angle  0 coneFactor  Factor for filtering cone angle computation  0.5 useLMDFilters  Use external cone computation (Work in Progress)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/DiscreteIntersection/","title":"DiscreteIntersection","text":"<p>TODO-DiscreteIntersectionClass</p> <p>Target: <code>Sofa.Component.Collision.Detection.Intersection</code></p> <p>namespace: <code>sofa::component::collision::detection::intersection</code></p> <p>parents: </p> <ul> <li><code>Intersection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/10_Detection/20_Intersection/NewProximityIntersection/","title":"NewProximityIntersection","text":"<p>Optimized Proximity Intersection based on Triangle-Triangle tests, ignoring Edge-Edge cases</p> <p>Target: <code>Sofa.Component.Collision.Detection.Intersection</code></p> <p>namespace: <code>sofa::component::collision::detection::intersection</code></p> <p>parents: </p> <ul> <li><code>BaseProximityIntersection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 alarmDistance  Proximity detection distance  1 contactDistance  Distance below which a contact is created  0.5 useLineLine  Line-line collision detection enabled  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/20_Geometry/40_CollisionModels/","title":"Collision Models","text":"<p>SOFA implements a series of collision primitives called CollisionModel. A CollisionModel contains a list of same-type elements. It can be part of a list of CollisionModels or a hierarchy. Here is a list of them:</p> <ul> <li>PointCollisionModel</li> <li>LineCollisionModel</li> <li>TriangleCollisionModel</li> <li>SphereCollisionModel</li> <li>CylinderCollisionModel</li> <li>CubeCollisionModel</li> <li>CapsuleCollisionModel</li> <li>OBBCollisionModel</li> <li>RayCollisionModel</li> </ul> <p>See the detailed description of the CollisionModel class.</p>"},{"location":"30_Components/15_Collision/20_Geometry/40_CollisionModels/#data","title":"Data","text":"<p>All collision models define the following data:</p> <ul> <li>active: boolean defining if the CollisionModel should be considered in the detection</li> <li>moving: boolean defining if the object associated to this CollisionModel might move during the simulation. In most cases, moving being false prevents the unnecessary recomputation of the bounding tree, which is a mandatory step for some broad or narrow phases collision detection.</li> <li>simulated: boolean defining if this CollisionModel is attached to a simulation. It is false for immobile or procedurally animated objects that don't use contact forces (no Penalty or InteractionConstraint created). Usually, two colliding objects having simulated being false are not considered in collision detection. Self-collision is not considered if simulated is false. If one of two colliding objects has simulated being false, the contact response is created as a child of the other.</li> <li>selfCollision: boolean defining if the object can self collide</li> <li>group: integer ID corresponding to the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models). See info about collision group</li> </ul> <p>If you are using a collision response using the Penalty method, the following data will be also used:</p> <ul> <li>contactStiffness: defining the stiffness coefficient which will be used to compute the penalty force using the interpenetration distance (value) resulting from the collision detection.</li> </ul>"},{"location":"30_Components/15_Collision/20_Geometry/40_CollisionModels/#usage","title":"Usage","text":"<p>To use a CollisionModel, you must first make sure that the collision node in which the CollisionModel is defined does contain the associated topology (e.g. TriangleSetTopologyContainer if you want to use the TriangleCollisionModel).</p> <p>Moreover, the collision model is usually mapped to a node containing the mechanical representation of the object. The collision node should therefore include a mapping.</p>"},{"location":"30_Components/15_Collision/20_Geometry/40_CollisionModels/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;TriangleCollisionModel simulated=\"1\" contactStiffness=\"100\" selfCollision=\"0\" group=\"1\"/&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('TriangleCollisionModel', simulated='1', contactStiffness='100', selfCollision='0', group='1')\n</code></pre> <p>An example scene involving a TriangleCollisionModel is available in examples/Component/Collision/Geometry/TriangleModel.scn</p>"},{"location":"30_Components/15_Collision/20_Geometry/CubeCollisionModel/","title":"CubeCollisionModel","text":"<p>Collision model representing a cube</p> <p>Target: <code>Sofa.Component.Collision.Geometry</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution"},{"location":"30_Components/15_Collision/20_Geometry/CylinderCollisionModel/","title":"CylinderCollisionModel","text":"<p>Collision model which represents a set of rigid cylinders</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.Collision.Geometry</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 radii  Radius of each cylinder  heights  The cylinder heights  defaultRadius  The default radius  0.5 defaultHeight  The default height  2 defaultLocalAxis  The default local axis cylinder is modeled around  0 1 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution"},{"location":"30_Components/15_Collision/20_Geometry/LineCollisionModel/","title":"LineCollisionModel","text":"<p>collision model using a linear mesh, as described in MeshTopology Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Collision.Geometry</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 bothSide  activate collision on both side of the line model (when surface normals are defined on these lines)  0 displayFreePosition  Display Collision Model Points free position(in green)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution topology link to the topology container"},{"location":"30_Components/15_Collision/20_Geometry/PointCollisionModel/","title":"PointCollisionModel","text":"<p>Collision model which represents a set of points</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Collision.Geometry</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 bothSide  activate collision on both side of the point model (when surface normals are defined on these points)  0 computeNormals  activate computation of normal vectors (required for some collision detection algorithms)  0 displayFreePosition  Display Collision Model Points free position(in green)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution topology link to the topology container"},{"location":"30_Components/15_Collision/20_Geometry/RayCollisionModel/","title":"RayCollisionModel","text":"<p>Collision model representing a ray in space, e.g. a mouse click</p> <p>Target: <code>Sofa.Component.Collision.Geometry</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 defaultLength  The default length for all rays in this collision model  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution"},{"location":"30_Components/15_Collision/20_Geometry/SphereCollisionModel/","title":"SphereCollisionModel","text":"<p>Collision model which represents a set of Spheres Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Collision.Geometry</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 listRadius  Radius of each sphere  radius  Default Radius  1 Visualization showImpostors  Draw spheres as impostors instead of \"real\" spheres  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution"},{"location":"30_Components/15_Collision/20_Geometry/TetrahedronCollisionModel/","title":"TetrahedronCollisionModel","text":"<p>collision model using a tetrahedral mesh, as described in BaseMeshTopology</p> <p>Target: <code>Sofa.Component.Collision.Geometry</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution topology link to the topology container"},{"location":"30_Components/15_Collision/20_Geometry/TriangleCollisionModel/","title":"TriangleCollisionModel","text":"<p>collision model using a triangular mesh, as described in BaseMeshTopology Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Collision.Geometry</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 bothSide  activate collision on both side of the triangle model  0 computeNormals  set to false to disable computation of triangles normal  1 useCurvature  use the curvature of the mesh to avoid some self-intersection test  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution topology link to the topology container"},{"location":"30_Components/15_Collision/20_Geometry/TriangleModelInRegularGrid/","title":"TriangleModelInRegularGrid","text":"<p>collision model using a triangular mesh in a regular grid, as described in BaseMeshTopology</p> <p>Target: <code>Sofa.Component.Collision.Geometry</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>TriangleCollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 bothSide  activate collision on both side of the triangle model  0 computeNormals  set to false to disable computation of triangles normal  1 useCurvature  use the curvature of the mesh to avoid some self-intersection test  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution topology link to the topology container"},{"location":"30_Components/15_Collision/20_Geometry/TriangleOctreeModel/","title":"TriangleOctreeModel","text":"<p>collision model using a triangular mesh mapped to an Octree</p> <p>Target: <code>Sofa.Component.Collision.Geometry</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>TriangleCollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 bothSide  activate collision on both side of the triangle model  0 computeNormals  set to false to disable computation of triangles normal  1 useCurvature  use the curvature of the mesh to avoid some self-intersection test  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution topology link to the topology container"},{"location":"30_Components/15_Collision/60_CollisionGroupManagers/10_CollisionGroupManager/","title":"Collision Group Managers","text":"<p>The collision group manager components are used in a collision pipeline.</p> <p>The role of a collision group manager is to find and merge solvers for a contact, i.e. two different objects in collision, into groups. The term 'group' refers to a group of integration components. It includes an ODE solver, its associated linear solver and the constraint solver. DefaultCollisionGroupManager modifies the scene graph so that two objects in contact share the same node with a single integration algorithm. In that case, the integration algorithm solves the ODE of the two objects simultaneously.</p> <p>In DefaultPipeline, groups are created only for contacts between two non-static objects.</p> <p>After creating the groups, DefaultCollisionGroupManager is also in charge to create the contact responses. </p>"},{"location":"30_Components/15_Collision/60_CollisionGroupManagers/10_CollisionGroupManager/#merging-two-integration-nodes","title":"Merging Two Integration Nodes","text":"<p>It is possible that two objects in contact are not solved with the same type of solver. For example, objectA can be solved with EulerImplicitSolver, and objectB with EulerExplicitSolver. In that case, some rules are pre-defined to select which one is kept. The other one is removed. Usually, the more stable or precise solver is preferred. For example, EulerImplicitSolver, is preferred over EulerExplicitSolver.</p> <p>In case both ODE solvers are of the same type, but still a different instance, pre-defined rules merge Data values of both ODE solvers.</p> <p>Similar rules also exist for the linear solvers. For example, if two conjugate gradient solvers are merged, the maximum number of iterations will be the highest value of both solvers.</p> <p>Similarly, pre-defined rules merge Data values of two constraint solvers (only LCPConstraintSolver).</p>"},{"location":"30_Components/15_Collision/60_CollisionGroupManagers/10_CollisionGroupManager/#interaction-with-other-components","title":"Interaction with Other Components","text":"<p>A collision group manager is optional in a simulation scene. A collision pipeline uses it if one is defined in the scene. It is usually a good practice to place the group manager near the collision pipeline, at the same level (not in a child node).</p>"},{"location":"30_Components/15_Collision/60_CollisionGroupManagers/10_CollisionGroupManager/#implementation","title":"Implementation","text":"<p>The following function must be called in the collision pipeline, once contacts have been detected: <pre><code>/// Create the integration groups\nvoid CollisionGroupManager::createGroups(objectmodel::BaseContext* scene, const sofa::helper::vector&lt;Contact::SPtr&gt;&amp; contacts)\n</code></pre></p> <p>Contacts are provided through the contact manager: <pre><code>const helper::vector&lt;Contact::SPtr&gt;&amp; contacts = contactManager-&gt;getContacts();\n</code></pre></p>"},{"location":"30_Components/15_Collision/60_CollisionGroupManagers/10_CollisionGroupManager/#examples-of-components","title":"Examples of Components","text":"<p>The following components are collision group managers, and can be placed in a simulation scene:</p> <ul> <li>DefaultCollisionGroupManager (plugin SofaMiscCollision)</li> </ul>"},{"location":"30_Components/15_Collision/60_CollisionGroupManagers/10_CollisionGroupManager/#inheritance-diagram","title":"Inheritance Diagram","text":"<p>Read more on SOFA API documentation</p>"},{"location":"30_Components/15_Collision/Response/Contact/CollisionResponse/","title":"CollisionResponse","text":"<p>Default class to create reactions to the collisions</p> <p>Target: <code>Sofa.Component.Collision.Response.Contact</code></p> <p>namespace: <code>sofa::component::collision::response::contact</code></p> <p>parents: </p> <ul> <li><code>ContactManager</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 response  contact response class  responseParams  contact response parameters (syntax: name1=value1&amp;name2=value2&amp;...)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/Response/Contact/ContactListener/","title":"ContactListener","text":"<p>ContactListener .. </p> <p>Target: <code>Sofa.Component.Collision.Response.Contact</code></p> <p>namespace: <code>sofa::component::collision::response::contact</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/Response/Contact/PenalityContactForceField/","title":"PenalityContactForceField","text":"<p>Contact using repulsive springs Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Collision.Response.Contact</code></p> <p>namespace: <code>sofa::component::collision::response::contact</code></p> <p>parents: </p> <ul> <li><code>PairInteractionForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/15_Collision/Response/Contact/RuleBasedContactManager/","title":"RuleBasedContactManager","text":"<p>Create different response to the collisions based on a set of rules</p> <p>Target: <code>Sofa.Component.Collision.Response.Contact</code></p> <p>namespace: <code>sofa::component::collision::response::contact</code></p> <p>parents: </p> <ul> <li><code>CollisionResponse</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 response  contact response class  responseParams  contact response parameters (syntax: name1=value1&amp;name2=value2&amp;...)  variables  Define a list of variables to be used inside the rules  rules  Ordered list of rules, each with a triplet of strings. The first two define either the name of the collision model, its group number, or * meaning any model. The last string define the response algorithm to use for contacts matched by this rule. Rules are applied in the order they are specified. If none match a given contact, the default response is used.   <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/15_Collision/Response/Contact/RuleBasedContactManager/#examples","title":"Examples","text":"<p>Component/Collision/Response/RuleBasedContactManager.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!-- Mechanical RuleBasedContactManager Example --&gt;\n&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.AnimationLoop\"/&gt; &lt;!-- Needed to use components [FreeMotionAnimationLoop] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [LocalMinDistance] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [RuleBasedContactManager] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Correction\"/&gt; &lt;!-- Needed to use components [UncoupledConstraintCorrection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Solver\"/&gt; &lt;!-- Needed to use components [GenericConstraintSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;FreeMotionAnimationLoop /&gt;\n    &lt;GenericConstraintSolver maxIterations=\"1000\" tolerance=\"0.001\"/&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;LocalMinDistance name=\"Proximity\" alarmDistance=\"1.5\" contactDistance=\"1.0\" angleCone=\"0.0\" /&gt;\n    &lt;RuleBasedContactManager name=\"Response\" response=\"FrictionContactConstraint\" rules=\"default\"/&gt;\n\n    &lt;Node name=\"Torus1\"&gt;\n        &lt;MeshOBJLoader filename=\"mesh/torus2_for_collision.obj\" name=\"loader\" /&gt;\n        &lt;MeshTopology src=\"@loader\"/&gt;\n        &lt;MechanicalObject src=\"@loader\" scale=\"5.0\" /&gt;\n        &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" name=\"Torus1Triangle\" group=\"1\" /&gt;\n        &lt;LineCollisionModel simulated=\"0\" moving=\"0\" name=\"Torus1Line\" group=\"1\" /&gt;\n        &lt;PointCollisionModel simulated=\"0\" moving=\"0\" name=\"Torus1Point\" group=\"1\" /&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus2.obj\" scale=\"5.0\" handleSeams=\"1\" /&gt;\n        &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"0.5 0.5 0.5 1.0\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"Torus2\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" scale=\"5.0\" dx=\"-12\" dy=\"0\" /&gt;\n        &lt;UniformMass filename=\"BehaviorModels/torus.rigid\"/&gt;\n        &lt;UncoupledConstraintCorrection /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/torus.obj\" scale=\"5.0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"0.0 0.5 0.5 1.0\" /&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader filename=\"mesh/torus_for_collision.obj\" name=\"loader\" /&gt;\n            &lt;MeshTopology src=\"@loader\"/&gt;\n            &lt;MechanicalObject src=\"@loader\" scale=\"5.0\" /&gt;\n            &lt;TriangleCollisionModel name=\"Torus2Triangle\" group=\"2\" /&gt;\n            &lt;LineCollisionModel name=\"Torus2Line\" group=\"2\" /&gt;\n            &lt;PointCollisionModel name=\"Torus2Point\" group=\"2\" /&gt;\n            &lt;RigidMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"Torus3\"&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" scale=\"5.0\" dx=\"-25\" dy=\"0\" /&gt;\n        &lt;UniformMass filename=\"BehaviorModels/torus2.rigid\"/&gt;\n        &lt;UncoupledConstraintCorrection /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus2.obj\" scale=\"5.0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"1.0 0.5 0.25 1.0\" /&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader filename=\"mesh/torus2_for_collision.obj\" name=\"loader\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" scale=\"5.0\" /&gt;\n            &lt;TriangleCollisionModel name=\"Torus3Triangle\" group=\"3\" /&gt;\n            &lt;LineCollisionModel name=\"Torus3Line\" group=\"3\" /&gt;\n            &lt;PointCollisionModel name=\"Torus3Point\" group=\"3\" /&gt;\n            &lt;RigidMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"Torus4\"&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" scale=\"5.0\" dx=\"-38\" dy=\"0\" /&gt;\n        &lt;UniformMass filename=\"BehaviorModels/torus.rigid\"/&gt;\n        &lt;UncoupledConstraintCorrection /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" scale=\"5.0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"0.0 0.5 0.5 1.0\" /&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader filename=\"mesh/torus_for_collision.obj\" name=\"loader\" /&gt;\n            &lt;MeshTopology src=\"@loader\"/&gt;\n            &lt;MechanicalObject src=\"@loader\" scale=\"5.0\" /&gt;\n            &lt;TriangleCollisionModel name=\"Torus4Triangle\" group=\"4\" /&gt;\n            &lt;LineCollisionModel name=\"Torus4Line\" group=\"4\" /&gt;\n            &lt;PointCollisionModel name=\"Torus4Point\" group=\"4\" /&gt;\n            &lt;RigidMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.AnimationLoop\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Correction\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Solver\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('FreeMotionAnimationLoop')\n    root.addObject('GenericConstraintSolver', maxIterations=\"1000\", tolerance=\"0.001\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('LocalMinDistance', name=\"Proximity\", alarmDistance=\"1.5\", contactDistance=\"1.0\", angleCone=\"0.0\")\n    root.addObject('RuleBasedContactManager', name=\"Response\", response=\"FrictionContactConstraint\", rules=\"default\")\n\n    Torus1 = root.addChild('Torus1')\n    Torus1.addObject('MeshOBJLoader', filename=\"mesh/torus2_for_collision.obj\", name=\"loader\")\n    Torus1.addObject('MeshTopology', src=\"@loader\")\n    Torus1.addObject('MechanicalObject', src=\"@loader\", scale=\"5.0\")\n    Torus1.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\", name=\"Torus1Triangle\", group=\"1\")\n    Torus1.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\", name=\"Torus1Line\", group=\"1\")\n    Torus1.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\", name=\"Torus1Point\", group=\"1\")\n    Torus1.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus2.obj\", scale=\"5.0\", handleSeams=\"1\")\n    Torus1.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"0.5 0.5 0.5 1.0\")\n\n    Torus2 = root.addChild('Torus2')\n    Torus2.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Torus2.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Torus2.addObject('MechanicalObject', template=\"Rigid3\", scale=\"5.0\", dx=\"-12\", dy=\"0\")\n    Torus2.addObject('UniformMass', filename=\"BehaviorModels/torus.rigid\")\n    Torus2.addObject('UncoupledConstraintCorrection')\n\n    Visu = Torus2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/torus.obj\", scale=\"5.0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"0.0 0.5 0.5 1.0\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = Torus2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', filename=\"mesh/torus_for_collision.obj\", name=\"loader\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", scale=\"5.0\")\n    Surf2.addObject('TriangleCollisionModel', name=\"Torus2Triangle\", group=\"2\")\n    Surf2.addObject('LineCollisionModel', name=\"Torus2Line\", group=\"2\")\n    Surf2.addObject('PointCollisionModel', name=\"Torus2Point\", group=\"2\")\n    Surf2.addObject('RigidMapping')\n\n    Torus3 = root.addChild('Torus3')\n    Torus3.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Torus3.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Torus3.addObject('MechanicalObject', template=\"Rigid3\", scale=\"5.0\", dx=\"-25\", dy=\"0\")\n    Torus3.addObject('UniformMass', filename=\"BehaviorModels/torus2.rigid\")\n    Torus3.addObject('UncoupledConstraintCorrection')\n\n    Visu = Torus3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus2.obj\", scale=\"5.0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"1.0 0.5 0.25 1.0\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = Torus3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', filename=\"mesh/torus2_for_collision.obj\", name=\"loader\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", scale=\"5.0\")\n    Surf2.addObject('TriangleCollisionModel', name=\"Torus3Triangle\", group=\"3\")\n    Surf2.addObject('LineCollisionModel', name=\"Torus3Line\", group=\"3\")\n    Surf2.addObject('PointCollisionModel', name=\"Torus3Point\", group=\"3\")\n    Surf2.addObject('RigidMapping')\n\n    Torus4 = root.addChild('Torus4')\n    Torus4.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Torus4.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Torus4.addObject('MechanicalObject', template=\"Rigid3\", scale=\"5.0\", dx=\"-38\", dy=\"0\")\n    Torus4.addObject('UniformMass', filename=\"BehaviorModels/torus.rigid\")\n    Torus4.addObject('UncoupledConstraintCorrection')\n\n    Visu = Torus4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", scale=\"5.0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"0.0 0.5 0.5 1.0\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = Torus4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', filename=\"mesh/torus_for_collision.obj\", name=\"loader\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", scale=\"5.0\")\n    Surf2.addObject('TriangleCollisionModel', name=\"Torus4Triangle\", group=\"4\")\n    Surf2.addObject('LineCollisionModel', name=\"Torus4Line\", group=\"4\")\n    Surf2.addObject('PointCollisionModel', name=\"Torus4Point\", group=\"4\")\n    Surf2.addObject('RigidMapping')\n</code></pre>"},{"location":"30_Components/20_Constraint/10_Projective/10_AttachProjectiveConstraint/","title":"AttachProjectiveConstraint","text":"<p>This component belongs to the category of Projective Constraint. The AttachProjectiveConstraint works with a pair of objects and it projects the degrees of freedom (e.g. position) and their derivatives (e.g. velocity), so that both objects are attached. As being a projective constraint, this projective constraints ensures a geometrical connection between both objects at the end of the time step but it does not integrate the physics of both object (contrary to Lagrange based constraints).</p>"},{"location":"30_Components/20_Constraint/10_Projective/10_AttachProjectiveConstraint/#data","title":"Data","text":"<p>The AttachProjectiveConstraint can be initialized using three input data:</p> <ul> <li>object1: link to the first model (MechanicalModel)</li> <li>object2: link to the second model (MechanicalModel)</li> <li>indices1: corresponding to the indices of the source points on the first model</li> <li>indices2: corresponding to the indices of the fixed points on the second model</li> <li>constraintFactor: allows for the partial application of the constraint using this factor per pair of points constrained (0=the constraint is released. 1=the constraint is fully constrained)</li> <li>twoWay:</li> <li>if true, this boolean projects the constraint vertices of both object1 and object2 towards their average degrees of freedom and derivatives:    <pre><code>Deriv corr = (dx2-dx1)*0.5*responseFactor*getConstraintFactor(index);\n      dx1 += corr;\n      dx2 -= corr;\n</code></pre></li> <li>if false, the position of the object1 are projected onto the object2. Therefore, object2 only follows object1 without affecting the motion of object1 <pre><code>dx2 = Deriv();\n</code></pre></li> </ul>"},{"location":"30_Components/20_Constraint/10_Projective/10_AttachProjectiveConstraint/#usage","title":"Usage","text":"<p>The AttachProjectiveConstraint requires two MechanicalObjects so that both degrees of freedom can be accessed and projected to the attached configuration. An integration scheme and a solver are also necessary to solve the linear system at each time step.</p>"},{"location":"30_Components/20_Constraint/10_Projective/10_AttachProjectiveConstraint/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;AttachProjectiveConstraint name=\"AttachProjectiveConstraint\" object1=\"@M1\" object2=\"@M2\" indices1=\"0 1 2\" indices2=\"10 11 12\" constraintFactor=\"1 1 1\"/&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('AttachProjectiveConstraint', object1=\"@M1\", object2=\"@M2\", indices1=\"0 1 2\", indices2=\"10 11 12\", constraintFactor=\"1 1 1\")\n</code></pre> <p>An example scene involving a AttachProjectiveConstraint is available in examples/Component/Constraint/Projective/AttachProjectiveConstraint.scn</p> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>PairInteractionProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices1  Indices of the source points on the first model  indices2  Indices of the fixed points on the second model  twoWay  true if forces should be projected back from model2 to model1  0 freeRotations  true to keep rotations free (only used for Rigid DOFs)  0 lastFreeRotation  true to keep rotation of the last attached point free (only used for Rigid DOFs)  0 restRotations  true to use rest rotations local offsets (only used for Rigid DOFs)  0 lastPos  position at which the attach constraint should become inactive  lastDir  direction from lastPos at which the attach coustraint should become inactive  clamp  true to clamp particles at lastPos instead of freeing them.  0 minDistance  the constraint become inactive if the distance between the points attached is bigger than minDistance.  -1 positionFactor  IN: Factor applied to projection of position  1 velocityFactor  IN: Factor applied to projection of velocity  1 responseFactor  IN: Factor applied to projection of force/acceleration  1 constraintFactor  Constraint factor per pair of points constrained. 0 -&gt; the constraint is released. 1 -&gt; the constraint is fully constrained  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/20_Constraint/10_Projective/50_FixedProjectiveConstraint/","title":"FixedProjectiveConstraint","text":"<p>This component belongs to the category of Projective Constraint. The FixedProjectiveConstraint projects a constant velocity. If the fixed points have a zero velocity at the simulation start, they will keep a zero velocity i.e. be fixed.</p> <p>As introduced in the page about the Projective Constraint, the FixedProjectiveConstraint corresponds to a projection matrix noted  which will multiply the system matrix  so that: . This projection matrix  is the identity matrix in which the diagonal value corresponding to the indices of the fixed points equals zero. These lines and columns equals 0. As a consequence, when the integration scheme (ODESolver) will call the <code>projectResponse()</code> or <code>projectVelocity()</code> the constraint will be applied, ensuring that the desired degrees of freedom remain fixed.</p> <p>Example of a system of size 6, with a fixed constraint at the indice 5:  </p> <p>By projecting this  matrix on the right hand side vector we have . This ensures to have the projection , thus preventing any time evolution of the fifth degree of freedom. In such case, we function projectResponse():</p> <pre><code>template &lt;class DataTypes&gt;\nvoid FixedProjectiveConstraint&lt;DataTypes&gt;::projectResponse(const core::MechanicalParams* mparams, DataVecDeriv&amp; resData)\n{\n    SOFA_UNUSED(mparams);\n\n    helper::WriteAccessor&lt;DataVecDeriv&gt; res (resData );\n    const SetIndexArray &amp; indices = d_indices.getValue();\n\n    if( d_fixAll.getValue() )\n    {\n        // fix everything\n        typename VecDeriv::iterator it;\n        for( it = res.begin(); it != res.end(); ++it )\n        {\n            *it = Deriv();\n        }\n    }\n    else\n    {\n        for (SetIndexArray::const_iterator it = indices.begin(); it != indices.end(); ++it)\n        {\n            res[*it] = Deriv();\n        }\n    }\n}\n</code></pre>"},{"location":"30_Components/20_Constraint/10_Projective/50_FixedProjectiveConstraint/#data","title":"Data","text":"<p>The FixedProjectiveConstraint can be initialized using three input data:</p> <ul> <li>indices: corresponding to the indices of the fixed points</li> <li>fixAll: filters all the DOF to implement a fixed object</li> <li>activate_projectVelocity: if true, projects not only a constant but a zero velocity</li> </ul>"},{"location":"30_Components/20_Constraint/10_Projective/50_FixedProjectiveConstraint/#usage","title":"Usage","text":"<p>The FixedProjectiveConstraint requires a MechanicalObject to store the degrees of freedom associated to the nodes, as well as a Mass so that the system matrix is not null. An integration scheme and a solver are also necessary to solve the linear system at each time step.</p> <p>Note that if only a part of the degrees of freedom must be constraint, you can use the PartialFixedProjectiveConstraint working in the same way as the FixedProjectiveConstraint.</p>"},{"location":"30_Components/20_Constraint/10_Projective/50_FixedProjectiveConstraint/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('FixedProjectiveConstraint', indices='3 39 64')\n</code></pre> <p>An example scene involving a FixedProjectiveConstraint is available in examples/Component/Constraint/Projective/FixedProjectiveConstraint.scn</p> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the fixed points  fixAll  filter all the DOF to implement a fixed object  0 activate_projectVelocity  activate project velocity to set velocity  0 Visualization showObject  draw or not the fixed constraints  1 drawSize  0 -&gt; point based rendering, &gt;0 -&gt; radius of spheres  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/AffineMovementProjectiveConstraint/","title":"AffineMovementProjectiveConstraint","text":"<p>Constraint the movement by a rigid transform.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 meshIndices  Indices of the mesh  indices  Indices of the constrained points  beginConstraintTime  Begin time of the bilinear constraint  endConstraintTime  End time of the bilinear constraint  rotation  rotation applied to border points  quaternion  quaternion applied to border points  translation  translation applied to border points  Visualization drawConstrainedPoints  draw constrained points  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/DirectionProjectiveConstraint/","title":"DirectionProjectiveConstraint","text":"<p>Attach given particles to their initial positions</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the fixed points  direction  Direction of the line  0 0 0 Visualization drawSize  0 -&gt; point based rendering, &gt;0 -&gt; radius of spheres  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container <p>Templates:</p> <ul> <li><code>Vec2d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the fixed points  direction  Direction of the line  0 0 Visualization drawSize  0 -&gt; point based rendering, &gt;0 -&gt; radius of spheres  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/FixedPlaneProjectiveConstraint/","title":"FixedPlaneProjectiveConstraint","text":"<p>Project particles on a given plane</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 direction  normal direction of the plane  dmin  Minimum plane distance from the origin  0 dmax  Maximum plane distance from the origin  0 indices  Indices of the fixed points  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/FixedRotationProjectiveConstraint/","title":"FixedRotationProjectiveConstraint","text":"<p>Prevents rotation around x or/and y or/and z axis</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 FixedXRotation  Prevent Rotation around X axis  0 FixedYRotation  Prevent Rotation around Y axis  0 FixedZRotation  Prevent Rotation around Z axis  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/20_Constraint/10_Projective/FixedTranslationProjectiveConstraint/","title":"FixedTranslationProjectiveConstraint","text":"<p>Attach given rigids to their initial positions but they still can have rotations Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the fixed points  fixAll  filter all the DOF to implement a fixed object  0 coordinates  Coordinates of the fixed points  Visualization drawSize  0 -&gt; point based rendering, &gt;0 -&gt; radius of spheres  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/HermiteSplineProjectiveConstraint/","title":"HermiteSplineProjectiveConstraint","text":"<p>Apply a hermite cubic spline trajectory to given points</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the constrained points  BeginTime  Begin Time of the motion  EndTime  End Time of the motion  X0  first control point  dX0  first control tangente  X1  second control point  dX1  sceond control tangente  SX0  first interpolation vector  SX1  second interpolation vector  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/LineProjectiveConstraint/","title":"LineProjectiveConstraint","text":"<p>Attach given particles to their initial positions</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the fixed points  origin  A point in the line  0 0 0 direction  Direction of the line  0 0 0 Visualization drawSize  0 -&gt; point based rendering, &gt;0 -&gt; radius of spheres  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container <p>Templates:</p> <ul> <li><code>Vec2d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the fixed points  origin  A point in the line  0 0 direction  Direction of the line  0 0 Visualization drawSize  0 -&gt; point based rendering, &gt;0 -&gt; radius of spheres  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/LinearMovementProjectiveConstraint/","title":"LinearMovementProjectiveConstraint","text":"<p>translate given particles Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the constrained points  keyTimes  key times for the movements  movements  movements corresponding to the key times  relativeMovements  If true, movements are relative to first position, absolute otherwise  1 d_showMovement  Visualization of the movement to be applied to constrained dofs.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/LinearVelocityProjectiveConstraint/","title":"LinearVelocityProjectiveConstraint","text":"<p>apply velocity to given particles Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the constrained points  keyTimes  key times for the movements  velocities  velocities corresponding to the key times  coordinates  coordinates on which to apply velocities  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/OscillatorProjectiveConstraint/","title":"OscillatorProjectiveConstraint","text":"<p>Apply a sinusoidal trajectory to given points</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 oscillators  Define a sequence of oscillating particules:  [index, Mean(x,y,z), amplitude(x,y,z), pulsation, phase]  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/20_Constraint/10_Projective/ParabolicProjectiveConstraint/","title":"ParabolicProjectiveConstraint","text":"<p>Apply a parabolic trajectory to given points</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the constrained points  P1  first point of the parabol  P2  second point of the parabol  P3  third point of the parabol  BeginTime  Begin Time of the motion  EndTime  End Time of the motion  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/PartialFixedProjectiveConstraint/","title":"PartialFixedProjectiveConstraint","text":"<p>Attach given particles to their initial positions</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>FixedProjectiveConstraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the fixed points  fixAll  filter all the DOF to implement a fixed object  0 activate_projectVelocity  activate project velocity to set velocity  0 fixedDirections  for each direction, 1 if fixed, 0 if free  projectVelocity  project velocity to ensure no drift of the fixed point  0 Visualization showObject  draw or not the fixed constraints  1 drawSize  0 -&gt; point based rendering, &gt;0 -&gt; radius of spheres  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/PartialLinearMovementProjectiveConstraint/","title":"PartialLinearMovementProjectiveConstraint","text":"<p>translate given particles</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the constrained points  keyTimes  key times for the movements  movements  movements corresponding to the key times  d_showMovement  Visualization of the movement to be applied to constrained dofs.  0 d_linearMovementBetweenNodesInIndices  Take into account the linear movement between the constrained points  0 d_mainIndice  The main indice node in the list of constrained nodes, it defines how to apply the linear movement between this constrained nodes   d_minDepIndice  The indice node in the list of constrained nodes, which is imposed the minimum displacment   d_maxDepIndice  The indice node in the list of constrained nodes, which is imposed the maximum displacment   imposedDisplacmentOnMacroNodes  The imposed displacment on macro nodes  X0  Size of specimen in X-direction  0 Y0  Size of specimen in Y-direction  0 Z0  Size of specimen in Z-direction  0 d_movedDirections  for each direction, 1 if moved, 0 if free  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/PatchTestMovementProjectiveConstraint/","title":"PatchTestMovementProjectiveConstraint","text":"<p>bilinear constraint</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 meshIndices  Indices of the mesh  indices  Indices of the constrained points  beginConstraintTime  Begin time of the bilinear constraint  endConstraintTime  End time of the bilinear constraint  constrainedPoints  Coordinates of the constrained points  cornerMovements  movements of the corners of the grid  cornerPoints  corner points for computing constraint  Visualization drawConstrainedPoints  draw constrained points  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/PlaneProjectiveConstraint/","title":"PlaneProjectiveConstraint","text":"<p>Attach given particles to their initial positions</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the fixed points  origin  A point in the plane  0 0 0 normal  Normal vector to the plane  0 0 0 Visualization drawSize  0 -&gt; point based rendering, &gt;0 -&gt; radius of spheres  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container <p>Templates:</p> <ul> <li><code>Vec2d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the fixed points  origin  A point in the plane  0 0 normal  Normal vector to the plane  0 0 Visualization drawSize  0 -&gt; point based rendering, &gt;0 -&gt; radius of spheres  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/PointProjectiveConstraint/","title":"PointProjectiveConstraint","text":"<p>Project particles to a point</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of the points to project  point  Target of the projection  fixAll  filter all the DOF to implement a fixed object  0 Visualization drawSize  0 -&gt; point based rendering, &gt;0 -&gt; radius of spheres  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/20_Constraint/10_Projective/PositionBasedDynamicsProjectiveConstraint/","title":"PositionBasedDynamicsProjectiveConstraint","text":"<p>Position-based dynamics</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 stiffness  Blending between current pos and target pos.  1 position  Target positions.  velocity  Velocities.  old_position  Old positions.  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/20_Constraint/10_Projective/SkeletalMotionProjectiveConstraint/","title":"SkeletalMotionProjectiveConstraint","text":"<p>animate a skeleton</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Projective</code></p> <p>namespace: <code>sofa::component::constraint::projective</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 joints  skeleton joints  bones  skeleton bones  animationSpeed  animation speed  1 active  is the constraint active?  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/20_Constraint/20_Lagrangian/30_BilateralLagrangianConstraint/","title":"BilateralLagrangianConstraint","text":"<p>This component belongs to the category of Constraint Laws used for the Lagrange constraint resolution and inherits from the PairInteractionConstraint. The BilateralLagrangianConstraint defines an holonomic constraint law between a pair of simulated body, i.e. the constraint defined between the pair of objects must have an equality form:</p> <p></p> <p>Such a constraint is suited for attachment cases or sliding joints. For an attachment case, if the vertex i of object 1 and the vertex j of object 2 are attached, the holonomic constraint law can be written as .</p> <p>For a BilateralLagrangianConstraint, the constraint matrix  (derivative of the constraint law) corresponds to:</p> <ul> <li> for object 1</li> <li> for object 2</li> </ul> <p>As all constraint laws, the BilateralLagrangianConstraint will be called in the following functions and for the following steps:</p> <ul> <li><code>getConstraintViolation()</code>: project the free velocity in the constraint space and compute the free interpenetration </li> <li><code>buildConstraintMatrix()</code>: build the compliance made up of  and </li> </ul>"},{"location":"30_Components/20_Constraint/20_Lagrangian/30_BilateralLagrangianConstraint/#data","title":"Data","text":"<p>As a PairInteractionConstraint, the BilateralLagrangianConstraint requires the following Data:</p> <ul> <li>object1: link towards the object 1 to constraint</li> <li>object2: link towards the object 2 to constraint</li> <li>first_point: index of the constraint on the first model (object 1)</li> <li>second_point: index of the constraint on the second model (object 2)</li> </ul>"},{"location":"30_Components/20_Constraint/20_Lagrangian/30_BilateralLagrangianConstraint/#usage","title":"Usage","text":"<p>The BilateralLagrangianConstraint can only be used in the context of Lagrange constraint resolution. The scene must therefore contain:</p> <ul> <li>a FreeMotionAnimationLoop</li> <li>a ConstraintSolver</li> </ul> <p>Moreover, each constrained object must define in its node a ConstraintCorrection so that the corrective motion can be applied.</p>"},{"location":"30_Components/20_Constraint/20_Lagrangian/30_BilateralLagrangianConstraint/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;BilateralLagrangianConstraint template=\"Vec3d\" object1=\"@CUBE_2/Constraints/points\" object2=\"@CUBE_4/Constraints/points\" first_point=\"1\" second_point=\"0\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('BilateralLagrangianConstraint', template='Vec3d' object1='@CUBE_2/Constraints/points' object2='@CUBE_4/Constraints/points' first_point='1' second_point='0')\n</code></pre> <p>An example scene involving a BilateralLagrangianConstraint is available in examples/Component/Constraint/Lagrangian/BilateralLagrangianConstraint_PGS.scn</p>"},{"location":"30_Components/20_Constraint/20_Lagrangian/50_UnilateralLagrangianConstraint/","title":"UnilateralLagrangianConstraint","text":"<p>This component belongs to the category of Constraint Laws used for the Lagrange constraint resolution and inherits from the PairInteractionConstraint. The UnilateralLagrangianConstraint defines an non-holonomic constraint law between a pair of simulated body, i.e. the constraint defined between the pair of objects must have an inequality form:</p> <p></p> <p>Such a constraint are used for friction-less and friction contact modeling (it can even be used as a starting point for puncture modeling). For a UnilateralLagrangianConstraint, the constraint matrix  (derivative of the constraint law) corresponds to:</p> <ul> <li> for object 1</li> <li> for object 2</li> </ul> <p>We can see from these matrices that the UnilateralLagrangianConstraint is a transformation towards the constraint space, by building a projection of any field against the contact direction (normal here, and possibly tangential directions as well if friction is defined).</p> <p>As all constraint laws, the UnilateralLagrangianConstraint will be called in the following functions and for the following steps:</p> <ul> <li><code>getConstraintViolation()</code>: project the free velocity in the constraint space and compute the free interpenetration </li> <li><code>buildConstraintMatrix()</code>: build the compliance made up of  and </li> </ul>"},{"location":"30_Components/20_Constraint/20_Lagrangian/50_UnilateralLagrangianConstraint/#data","title":"Data","text":"<p>As a PairInteractionConstraint, the UnilateralLagrangianConstraint requires the following Data:</p> <ul> <li>object1: link towards the object 1 to constraint</li> <li>object2: link towards the object 2 to constraint</li> <li>first_point: index of the constraint on the first model (object 1)</li> <li>second_point: index of the constraint on the second model (object 2)</li> </ul>"},{"location":"30_Components/20_Constraint/20_Lagrangian/50_UnilateralLagrangianConstraint/#usage","title":"Usage","text":"<p>The UnilateralLagrangianConstraint can only be used in the context of Lagrange constraint resolution. The scene must therefore contain:</p> <ul> <li>a FreeMotionAnimationLoop</li> <li>a ConstraintSolver</li> </ul> <p>Moreover, each constrained object must define in its node a ConstraintCorrection so that the corrective motion can be applied. Unlike other constraints, the UnilateralLagrangianConstraint is mostly used in SOFA for contact modeling. UnilateralLagrangianConstraint are therefore dynamically and automatically created within the scene graph when two objects are colliding: when the CollisionPipeline defines new DetectionOutput with ContactResponse using Lagrange multipliers, each DetectionOutput generates a new UnilateralLagrangianConstraint.</p>"},{"location":"30_Components/20_Constraint/20_Lagrangian/50_UnilateralLagrangianConstraint/#example","title":"Example","text":"<p>An example scene involving a UnilateralLagrangianConstraint is available in examples/Component/Constraint/Lagrangian/FrictionContact_LCP_without_friction.scn. Note that in this example, the UnilateralLagrangianConstraint will be created as soon as a contact point is outputed from the collision detection phase.</p>"},{"location":"30_Components/20_Constraint/20_Lagrangian/Correction/GenericConstraintCorrection/","title":"GenericConstraintCorrection","text":"<p>Target: <code>Sofa.Component.Constraint.Lagrangian.Correction</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::correction</code></p> <p>parents: </p> <ul> <li><code>BaseConstraintCorrection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 complianceFactor  Factor applied to the position factor and velocity factor used to calculate compliance matrix  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSolver Link towards the linear solver used to compute the compliance matrix, requiring the inverse of the linear system matrix ODESolver Link towards the ODE solver used to recover the integration factors"},{"location":"30_Components/20_Constraint/20_Lagrangian/Correction/LinearSolverConstraintCorrection/","title":"LinearSolverConstraintCorrection","text":"<p>Supports GPU-side computations using CUDA.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Correction</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::correction</code></p> <p>parents: </p> <ul> <li><code>ConstraintCorrection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 wire_optimization  constraints are reordered along a wire-like topology (from tip to base)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects constraintSolvers Constraint solvers using this constraint correction linearSolver Link towards the linear solver used to compute the compliance matrix, requiring the inverse of the linear system matrix ODESolver Link towards the ODE solver used to recover the integration factors"},{"location":"30_Components/20_Constraint/20_Lagrangian/Correction/PrecomputedConstraintCorrection/","title":"PrecomputedConstraintCorrection","text":"<p>Component computing constraint forces within a simulated body using the compliance method. Supports GPU-side computations using CUDA.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Correction</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::correction</code></p> <p>parents: </p> <ul> <li><code>ConstraintCorrection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 rotations 0 restDeformations 0 recompute  if true, always recompute the compliance  0 debugViewFrameScale  Scale on computed node's frame  1 fileCompliance  Precomputed compliance matrix data file  fileDir  If not empty, the compliance will be saved in this repertory  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects constraintSolvers Constraint solvers using this constraint correction"},{"location":"30_Components/20_Constraint/20_Lagrangian/Correction/UncoupledConstraintCorrection/","title":"UncoupledConstraintCorrection","text":"<p>Component computing constraint forces within a simulated body using the compliance method. Supports GPU-side computations using CUDA.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Correction</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::correction</code></p> <p>parents: </p> <ul> <li><code>ConstraintCorrection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 compliance  compliance value on each dof. If Rigid compliance (7 values): 1st value for translations, 6 others for upper-triangular part of symmetric 3x3 rotation compliance matrix  defaultCompliance  Default compliance value for new dof or if all should have the same (in which case compliance vector should be empty)  1e-05 verbose  Dump the constraint matrix at each iteration  0 correctionVelocityFactor  Factor applied to the constraint forces when correcting the velocities  1 correctionPositionFactor  Factor applied to the constraint forces when correcting the positions  1 useOdeSolverIntegrationFactors  Use odeSolver integration factors instead of correctionVelocityFactor and correctionPositionFactor  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects constraintSolvers Constraint solvers using this constraint correction topology link to the topology container"},{"location":"30_Components/20_Constraint/20_Lagrangian/Model/BilateralLagrangianConstraint/","title":"BilateralLagrangianConstraint","text":"<p>BilateralLagrangianConstraint defining an holonomic equality constraint (attachment) Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Model</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::model</code></p> <p>parents: </p> <ul> <li><code>PairInteractionConstraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 first_point  index of the constraint on the first model  second_point  index of the constraint on the second model  rest_vector  Relative position to maintain between attached points (optional)  numericalTolerance  a real value specifying the tolerance during the constraint solving. (optional, default=0.0001)  0.0001 activate  control constraint activation (true by default)  1 keepOrientationDifference  keep the initial difference in orientation (only for rigids)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component topology1 link to the first topology container topology2 link to the second topology container"},{"location":"30_Components/20_Constraint/20_Lagrangian/Model/FixedLagrangianConstraint/","title":"FixedLagrangianConstraint","text":"<p>Lagrangian-based fixation of DOFs of the model</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Model</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::model</code></p> <p>parents: </p> <ul> <li><code>Constraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 indices  Indices of points to fix  fixAll  If true, fix all points  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/20_Constraint/20_Lagrangian/Model/SlidingLagrangianConstraint/","title":"SlidingLagrangianConstraint","text":"<p>TODO-SlidingLagrangianConstraint</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Model</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::model</code></p> <p>parents: </p> <ul> <li><code>PairInteractionConstraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 sliding_point  index of the spliding point on the first model  0 axis_1  index of one end of the sliding axis  0 axis_2  index of the other end of the sliding axis  0 force  force (impulse) used to solve the constraint  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/20_Constraint/20_Lagrangian/Model/StopperLagrangianConstraint/","title":"StopperLagrangianConstraint","text":"<p>TODO-StopperLagrangianConstraint</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Model</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::model</code></p> <p>parents: </p> <ul> <li><code>Constraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 index  index of the stop constraint  0 min  minimum value accepted  -100 max  maximum value accepted  100 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/20_Constraint/20_Lagrangian/Model/UniformLagrangianConstraint/","title":"UniformLagrangianConstraint","text":"<p>A constraint equation applied on all dofs.</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Model</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::model</code></p> <p>parents: </p> <ul> <li><code>Constraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 iterative  Iterate over the bilateral constraints, otherwise a block factorisation is computed.  1 constrainToRestPos  if false, constrains the pos to be zero / if true constraint the current position to stay at rest position  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/20_Constraint/20_Lagrangian/Model/UnilateralLagrangianConstraint/","title":"UnilateralLagrangianConstraint","text":"<p>TODO-UnilateralLagrangianConstraint</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Model</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::model</code></p> <p>parents: </p> <ul> <li><code>PairInteractionConstraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/20_Constraint/20_Lagrangian/Solver/GenericConstraintSolver/","title":"GenericConstraintSolver","text":"<p>A Generic Constraint Solver using the Linear Complementarity Problem formulation to solve Constraint based components</p> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Solver</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::solver</code></p> <p>parents: </p> <ul> <li><code>ConstraintSolverImpl</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 resolutionMethod  Method used to solve the constraint problem, among: \"ProjectedGaussSeidel\", \"UnbuiltGaussSeidel\" or \"for NonsmoothNonlinearConjugateGradient\"  maxIterations  maximal number of iterations of the Gauss-Seidel algorithm  1000 tolerance  residual error threshold for termination of the Gauss-Seidel algorithm  0.001 sor  Successive Over Relaxation parameter (0-2)  1 scaleTolerance  Scale the error tolerance with the number of constraints  1 allVerified  All contraints must be verified (each constraint's error &lt; tolerance)  0 newtonIterations  Maximum iteration number of Newton (for the NonsmoothNonlinearConjugateGradient solver only)  100 multithreading  Build compliances concurrently  0 computeGraphs  Compute graphs of errors and forces during resolution  0 reverseAccumulateOrder  True to accumulate constraints from nodes in reversed order (can be necessary when using multi-mappings or interaction constraints not following the node hierarchy)  0 constraintForces  OUTPUT: constraint forces (stored only if computeConstraintForces=True)  computeConstraintForces  enable the storage of the constraintForces.  0 Graph graphErrors  Sum of the constraints' errors at each iteration  graphConstraints  Graph of each constraint's error at the end of the resolution  Graph2 graphForces  Graph of each constraint's force at each step of the resolution  graphViolations  Graph of each constraint's violation at each step of the resolution  Stats currentNumConstraints  OUTPUT: current number of constraints  0 currentNumConstraintGroups  OUTPUT: current number of constraints  0 currentIterations  OUTPUT: current number of constraint groups  0 currentError  OUTPUT: current error  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects constraintCorrections List of constraint corrections handled by this constraint solver"},{"location":"30_Components/20_Constraint/20_Lagrangian/Solver/LCPConstraintSolver/","title":"LCPConstraintSolver","text":"<p>A Constraint Solver using the Linear Complementarity Problem formulation to solve BaseConstraint based components</p> <p>Target: <code>Sofa.Component.Constraint.Lagrangian.Solver</code></p> <p>namespace: <code>sofa::component::constraint::lagrangian::solver</code></p> <p>parents: </p> <ul> <li><code>ConstraintSolverImpl</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 displayDebug  Display debug information.  0 initial_guess  activate LCP results history to improve its resolution performances.  1 build_lcp  LCP is not fully built to increase performance in some case.  1 tolerance  residual error threshold for termination of the Gauss-Seidel algorithm  0.001 maxIt  maximal number of iterations of the Gauss-Seidel algorithm  1000 mu  Friction coefficient  0.6 minW  If not zero, constraints whose self-compliance (i.e. the corresponding value on the diagonal of W) is smaller than this threshold will be ignored  0 maxF  If not zero, constraints whose response force becomes larger than this threshold will be ignored  0 multi_grid  activate multi_grid resolution (NOT STABLE YET)  0 multi_grid_levels  if multi_grid is active: how many levels to create (&gt;=2)  2 merge_method  if multi_grid is active: which method to use to merge constraints (0 = compliance-based, 1 = spatial coordinates)  0 merge_spatial_step  if merge_method is 1: grid size reduction between multigrid levels  2 merge_local_levels  if merge_method is 1: up to the specified level of the multigrid, constraints are grouped locally, i.e. separately within each contact pairs, while on upper levels they are grouped globally independently of contact pairs.  2 constraintForces  OUTPUT: constraint forces (stored only if computeConstraintForces=True)  computeConstraintForces  enable the storage of the constraintForces.  0 group  list of ID of groups of constraints to be handled by this solver.  graph  Graph of residuals at each iteration  Visualization showLevels  Number of constraint levels to display  0 showCellWidth  Distance between each constraint cells  showTranslation  Position of the first cell  showLevelTranslation  Translation between levels  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects constraintCorrections List of constraint corrections handled by this constraint solver"},{"location":"30_Components/25_Engine/26_TextureInterpolation/","title":"TextureInterpolation","text":"<p>This component belongs to the category of Engines. This engine creates texture coordinate in 1D according to an input state vector. Coordinate can be interpolated either from min and max value of input states (default behavior) or on a manual define scale.</p>"},{"location":"30_Components/25_Engine/26_TextureInterpolation/#input-data","title":"Input Data","text":"<ul> <li>input_states: input array of state values</li> <li>input_coordinates: input array of coordinates values (not mandatory)</li> </ul>"},{"location":"30_Components/25_Engine/26_TextureInterpolation/#output-data","title":"Output Data","text":"<ul> <li>output_coordinates: output array of texture coordinates</li> </ul>"},{"location":"30_Components/25_Engine/26_TextureInterpolation/#additional-parameter","title":"Additional Parameter","text":"<p>For manual scale :</p> <ul> <li>min_value: minimum value of state value for interpolation</li> <li>max_value: maximum value of state value for interpolation</li> <li>manual_scale: compute texture interpolation on manually scale defined above</li> </ul>"},{"location":"30_Components/25_Engine/26_TextureInterpolation/#examples","title":"Examples","text":"<p>An example scene involving the TextureInterpolation engine is available in examples/Component/Engine/GL/TextureInterpolation.scn</p> <p>Target: <code>Sofa.GL.Component.Engine</code></p> <p>namespace: <code>sofa::gl::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 input_coordinates  input array of coordinates values.  scalarField  To interpolate only the first dimension of input field (useful if this component need to be templated in higher dimension).  1 min_value  minimum value of state value for interpolation.  0 max_value  maximum value of state value for interpolation.  0 manual_scale  compute texture interpolation on manually scale defined above.  0 vertexPloted  Vertex index of values display in graph for each iteration.  0 graph  Vertex state value per iteration  Inputs input_states  input array of state values.  Outputs output_coordinates  output array of texture coordinates.  Visualization drawPotentiels  Debug: view state values.  0 showIndicesScale  Debug : scale of state values displayed.  0.0001 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/26_TextureInterpolation/#examples_1","title":"Examples","text":"<p>Component/Engine/GL/TextureInterpolation.scn</p> XMLPython <pre><code>&lt;Node name=\"Root\" gravity=\"0 0 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Engine\"/&gt; &lt;!-- Needed to use components [TextureInterpolation] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"MecaNode\" gravity=\"0 0 0\"&gt;\n        &lt;MeshGmshLoader name=\"loader\" tags=\"meca\" filename=\"mesh/square3.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"mecaObj\" tags=\"meca\" scale=\"10\" /&gt;\n        &lt;TriangleSetTopologyContainer src=\"@loader\" name=\"topo\" tags=\"meca\" /&gt;\n        &lt;Node name=\"ElecNode\" gravity=\"0 0 0\"&gt;\n            &lt;EulerImplicitSolver name=\"euler\" tags=\"elec\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" tags=\"elec\" /&gt;\n            &lt;MechanicalObject template=\"Vec1\" name=\"ElecObj\" position=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 10 10 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 100 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" tags=\"elec\" /&gt;\n            &lt;!-- Components used in heat diffusion, still in work in Sophia. the potentiel\n    evolve and interpolation is computed at the same time to display the diffusion. --&gt;\n            &lt;!--   &lt;TriangularDiffusionForceField template=\"Vec1\" name=\"ffDiffusion\" tags=\"elec\"/&gt;\n             &lt;MeshMatrixMass template=\"Vec1\" name=\"mass\" tags=\"elec\" /&gt;   --&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"visu\" gravity=\"0 0 0\"&gt;\n            &lt;TextureInterpolation template=\"Vec1\" name=\"EngineInterpolation\" input_states=\"@../ElecNode/ElecObj.position\" input_coordinates=\"@../mecaObj.position\" min_value=\"0.0\" max_value=\"10.0\" manual_scale=\"1\" drawPotentiels=\"1\" /&gt;\n            &lt;OglModel template=\"Vec3\" name=\"oglPotentiel\" texcoords=\"@EngineInterpolation.output_coordinates\" texturename=\"textures/heatColor.bmp\" handleDynamicTopology=\"0\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", dt=\"0.02\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Engine\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\")\n    Root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    Root.addObject('BruteForceBroadPhase')\n    Root.addObject('BVHNarrowPhase')\n    Root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    Root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    MecaNode = Root.addChild('MecaNode', gravity=\"0 0 0\")\n    MecaNode.addObject('MeshGmshLoader', name=\"loader\", tags=\"meca\", filename=\"mesh/square3.msh\")\n    MecaNode.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"mecaObj\", tags=\"meca\", scale=\"10\")\n    MecaNode.addObject('TriangleSetTopologyContainer', src=\"@loader\", name=\"topo\", tags=\"meca\")\n\n    ElecNode = MecaNode.addChild('ElecNode', gravity=\"0 0 0\")\n    ElecNode.addObject('EulerImplicitSolver', name=\"euler\", tags=\"elec\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    ElecNode.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\", tags=\"elec\")\n    ElecNode.addObject('MechanicalObject', template=\"Vec1\", name=\"ElecObj\", position=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 9 10 10 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 100 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n              0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", tags=\"elec\")\n\n    visu = MecaNode.addChild('visu', gravity=\"0 0 0\")\n    visu.addObject('TextureInterpolation', template=\"Vec1\", name=\"EngineInterpolation\", input_states=\"@../ElecNode/ElecObj.position\", input_coordinates=\"@../mecaObj.position\", min_value=\"0.0\", max_value=\"10.0\", manual_scale=\"1\", drawPotentiels=\"1\")\n    visu.addObject('OglModel', template=\"Vec3\", name=\"oglPotentiel\", texcoords=\"@EngineInterpolation.output_coordinates\", texturename=\"textures/heatColor.bmp\", handleDynamicTopology=\"0\")\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/20_ExtrudeSurface/","title":"ExtrudeSurface","text":"<p>This component belongs to the category of Engines. This engine extrude a surface and returns corresponding triangles.</p>"},{"location":"30_Components/25_Engine/10_Generate/20_ExtrudeSurface/#input-data","title":"Input Data","text":"<ul> <li>triangles: list of triangles of the object to extrude. It must me a vector of BaseMeshTopology::Triangle</li> <li>surfaceTriangles: list of triangles of the surface to extrude. The type of triangle must be BaseMeshTopology::TriangleID, and not BaseMeshTopology::Triangle</li> <li>surfaceVertices: list of positions</li> </ul>"},{"location":"30_Components/25_Engine/10_Generate/20_ExtrudeSurface/#output-data","title":"Output Data","text":"<ul> <li>extrusionVertices: list of positions of the new triangles, created from extrusion</li> <li>extrusionTriangles: list of triangles from extrusion (vector of BaseMeshTopology::Triangle)</li> </ul>"},{"location":"30_Components/25_Engine/10_Generate/20_ExtrudeSurface/#important-parameter","title":"Important Parameter","text":"<ul> <li>heightFactor: extrusion is based on normals. So, this factor defines the final height of the extrusion.</li> </ul>"},{"location":"30_Components/25_Engine/10_Generate/20_ExtrudeSurface/#examples","title":"Examples","text":"<p>An example scene involving the ExtrudeSurface engine is available in examples/Component/Engine/Generate/ExtrudeSurface.scn</p> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isVisible  is Visible ?  1 heightFactor  Factor for the height of the extrusion (based on normal) ?  1 Inputs triangles  List of triangle indices  surfaceVertices  Position coordinates of the surface  surfaceTriangles  Indices of the triangles of the surface to extrude  Outputs extrusionVertices  Position coordinates of the extrusion  extrusionTriangles  Triangles indices of the extrusion  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/20_ExtrudeSurface/#examples_1","title":"Examples","text":"<p>Component/Engine/Generate/ExtrudeSurface.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [ExtrudeSurface RandomPointDistributionInSurface] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [SphereROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"extrude\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader\" filename=\"mesh/liver.obj\" /&gt;\n        &lt;MechanicalObject src=\"@meshLoader\"/&gt;\n        &lt;SphereROI name=\"surface1\" centers=\"2 4 0\" radii=\"0.88\" drawSize=\"0\" isVisible=\"0\" src=\"@meshLoader\" /&gt;\n        &lt;ExtrudeSurface template=\"Vec3\" name=\"extrusion\" triangles=\"@meshLoader.triangles\" surfaceVertices=\"@meshLoader.position\" surfaceTriangles=\"@surface1.triangleIndices\" isVisible=\"0\" /&gt;\n        &lt;RandomPointDistributionInSurface template=\"Vec3\" vertices=\"@extrusion.extrusionVertices\" triangles=\"@extrusion.extrusionTriangles\" numberOfInPoints=\"100\" numberOfTests=\"3\" minDistanceBetweenPoints=\"0.1\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Extrusion\"&gt;\n        &lt;MeshTopology points=\"@../extrude/extrusion.extrusionVertices\" triangles=\"@../extrude/extrusion.extrusionTriangles\" /&gt;\n        &lt;MechanicalObject position=\"@../extrude/extrusion.extrusionVertices\"/&gt;\n        &lt;OglModel color=\"red\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node&gt;\n        &lt;MeshOBJLoader name='myLoader' filename='mesh/liver.obj'/&gt;\n        &lt;OglModel src='@myLoader'/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n\n    extrude = root.addChild('extrude')\n    extrude.addObject('MeshOBJLoader', name=\"meshLoader\", filename=\"mesh/liver.obj\")\n    extrude.addObject('MechanicalObject', src=\"@meshLoader\")\n    extrude.addObject('SphereROI', name=\"surface1\", centers=\"2 4 0\", radii=\"0.88\", drawSize=\"0\", isVisible=\"0\", src=\"@meshLoader\")\n    extrude.addObject('ExtrudeSurface', template=\"Vec3\", name=\"extrusion\", triangles=\"@meshLoader.triangles\", surfaceVertices=\"@meshLoader.position\", surfaceTriangles=\"@surface1.triangleIndices\", isVisible=\"0\")\n    extrude.addObject('RandomPointDistributionInSurface', template=\"Vec3\", vertices=\"@extrusion.extrusionVertices\", triangles=\"@extrusion.extrusionTriangles\", numberOfInPoints=\"100\", numberOfTests=\"3\", minDistanceBetweenPoints=\"0.1\")\n\n    Extrusion = root.addChild('Extrusion')\n    Extrusion.addObject('MeshTopology', points=\"@../extrude/extrusion.extrusionVertices\", triangles=\"@../extrude/extrusion.extrusionTriangles\")\n    Extrusion.addObject('MechanicalObject', position=\"@../extrude/extrusion.extrusionVertices\")\n    Extrusion.addObject('OglModel', color=\"red\")\n\n    root = root.addChild('root')\n    root.addObject('MeshOBJLoader', name=\"myLoader\", filename=\"mesh/liver.obj\")\n    root.addObject('OglModel', src=\"@myLoader\")\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/22_MergePoints/","title":"MergePoints","text":"<p>This component belongs to the category of Engines. This engine returns a merged list of positions, given 2 primary lists.</p>"},{"location":"30_Components/25_Engine/10_Generate/22_MergePoints/#input-data","title":"Input Data","text":"<ul> <li>position1: positions of the 1st object</li> <li>position2: positions of the 2nd object</li> </ul>"},{"location":"30_Components/25_Engine/10_Generate/22_MergePoints/#output-data","title":"Output Data","text":"<ul> <li>points: a new list of positions, containing the 2 previous lists</li> <li>indices1: indices of the 1st position list in the new list</li> <li>indices2: indices of the 2nd position list in the new list</li> </ul>"},{"location":"30_Components/25_Engine/10_Generate/22_MergePoints/#examples","title":"Examples","text":"<p>An example scene involving the MergePoints engine is available in examples/Component/Engine/Generate/MergePoints.scn</p> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 noUpdate  do not update the output at eacth time step (false)  0 Inputs position1  position coordinates of the degrees of freedom of the first object  position2  Rest position coordinates of the degrees of freedom of the second object  mappingX2  Mapping of indices to inject position2 inside position1 vertex buffer  Outputs indices1  Indices of the points of the first object  indices2  Indices of the points of the second object  points  position coordinates of the merge  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/22_MergePoints/#examples_1","title":"Examples","text":"<p>Component/Engine/Generate/MergePoints.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 -9 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Correction\"/&gt; &lt;!-- Needed to use components [UncoupledConstraintCorrection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [MergePoints] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI SubsetTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridRamificationTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [LightManager SpotLight] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n\n    &lt;LightManager /&gt;\n    &lt;SpotLight name=\"light1\" color=\"1 1 1\" position=\"0 80 25\" direction=\"0 -1 -0.8\" cutoff=\"30\" exponent=\"1\" /&gt;\n    &lt;SpotLight name=\"light2\" color=\"1 1 1\" position=\"0 40 100\" direction=\"0 0 -1\" cutoff=\"30\" exponent=\"1\" /&gt;\n\n    &lt;Node name=\"mesh\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader\" filename=\"mesh/raptor_35kp.obj\"/&gt;  \n        &lt;SubsetTopology template=\"Vec3\" name=\"subset_head\" box=\"-2 4 4 2 8 8\" drawROI=\"1\" src=\"@meshLoader\" rest_position=\"@meshLoader.position\" localIndices=\"1\"/&gt;\n\n        &lt;Node name=\"simu_head\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;SparseGridRamificationTopology position=\"@../subset_head.pointsInROI\" n=\"10 10 10\" nbVirtualFinerLevels=\"0\" finestConnectivity=\"0\" /&gt;          \n            &lt;MechanicalObject template=\"Vec3\" name=\"mecaObj2\"  /&gt;\n            &lt;BoxConstraint box=\"-2 4 4 2 8 4.5\" drawBoxes=\"0\"/&gt;\n            &lt;UniformMass totalMass=\"50.0\" /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"4000.0\" poissonRatio=\"0.30\" method=\"large\" updateStiffnessMatrix=\"false\" printLog=\"0\" \n            drawing=\"1\"/&gt;            \n            &lt;UncoupledConstraintCorrection /&gt;\n\n            &lt;Node name=\"Visu\"&gt;  \n                &lt;QuadSetTopologyContainer  name=\"Container\" \n                    position=\"@../../subset_head.pointsInROI\"\n                    quads=\"@../../subset_head.quadsInROI\"\n                     /&gt;\n                &lt;QuadSetTopologyModifier   name=\"Modifier\" /&gt;\n                &lt;QuadSetGeometryAlgorithms name=\"GeomAlgo\"   template=\"Vec3\" drawEdges=\"0\" /&gt;                           \n                &lt;MechanicalObject name=\"CollisModel\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@CollisModel\" /&gt;\n            &lt;/Node&gt;  \n        &lt;/Node&gt;\n\n        &lt;MergePoints template=\"Vec3\" name=\"merge_subsets\" position1=\"@meshLoader.position\"\n            position2=\"@simu_head/Visu/CollisModel.position\" mappingX2=\"@subset_head.indices\"/&gt;\n\n       &lt;Node&gt;\n            &lt;OglModel name=\"Visual\" position=\"@../merge_subsets.points\" \n                src=\"@../meshLoader\" texturename=\"textures/snakeskin.png\" scaleTex=\"20 20\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 -9 1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Correction\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('LightManager')\n    root.addObject('SpotLight', name=\"light1\", color=\"1 1 1\", position=\"0 80 25\", direction=\"0 -1 -0.8\", cutoff=\"30\", exponent=\"1\")\n    root.addObject('SpotLight', name=\"light2\", color=\"1 1 1\", position=\"0 40 100\", direction=\"0 0 -1\", cutoff=\"30\", exponent=\"1\")\n\n    mesh = root.addChild('mesh')\n    mesh.addObject('MeshOBJLoader', name=\"meshLoader\", filename=\"mesh/raptor_35kp.obj\")\n    mesh.addObject('SubsetTopology', template=\"Vec3\", name=\"subset_head\", box=\"-2 4 4 2 8 8\", drawROI=\"1\", src=\"@meshLoader\", rest_position=\"@meshLoader.position\", localIndices=\"1\")\n\n    simu_head = mesh.addChild('simu_head')\n    simu_head.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    simu_head.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    simu_head.addObject('SparseGridRamificationTopology', position=\"@../subset_head.pointsInROI\", n=\"10 10 10\", nbVirtualFinerLevels=\"0\", finestConnectivity=\"0\")\n    simu_head.addObject('MechanicalObject', template=\"Vec3\", name=\"mecaObj2\")\n    simu_head.addObject('BoxConstraint', box=\"-2 4 4 2 8 4.5\", drawBoxes=\"0\")\n    simu_head.addObject('UniformMass', totalMass=\"50.0\")\n    simu_head.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"4000.0\", poissonRatio=\"0.30\", method=\"large\", updateStiffnessMatrix=\"false\", printLog=\"0\", drawing=\"1\")\n    simu_head.addObject('UncoupledConstraintCorrection')\n\n    Visu = simu_head.addChild('Visu')\n    Visu.addObject('QuadSetTopologyContainer', name=\"Container\", position=\"@../../subset_head.pointsInROI\", quads=\"@../../subset_head.quadsInROI\")\n    Visu.addObject('QuadSetTopologyModifier', name=\"Modifier\")\n    Visu.addObject('QuadSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\", drawEdges=\"0\")\n    Visu.addObject('MechanicalObject', name=\"CollisModel\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@CollisModel\")\n    mesh.addObject('MergePoints', template=\"Vec3\", name=\"merge_subsets\", position1=\"@meshLoader.position\", position2=\"@simu_head/Visu/CollisModel.position\", mappingX2=\"@subset_head.indices\")\n\n    mesh = mesh.addChild('mesh')\n    mesh.addObject('OglModel', name=\"Visual\", position=\"@../merge_subsets.points\", src=\"@../meshLoader\", texturename=\"textures/snakeskin.png\", scaleTex=\"20 20\")\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/30_Spiral/","title":"Spiral","text":"<p>This component belongs to the category of Engines. This engine turns on spiral any topological model.</p>"},{"location":"30_Components/25_Engine/10_Generate/30_Spiral/#input-data","title":"Input Data","text":"<ul> <li>rest_position: rest position of the mechanical object</li> </ul>"},{"location":"30_Components/25_Engine/10_Generate/30_Spiral/#output-data","title":"Output Data","text":"<ul> <li>position: position of the mechanical object once it has been turned on spiral</li> </ul>"},{"location":"30_Components/25_Engine/10_Generate/30_Spiral/#additional-parameter","title":"Additional Parameter","text":"<ul> <li>curvature: real defining the curvature of the spiral</li> </ul>"},{"location":"30_Components/25_Engine/10_Generate/30_Spiral/#examples","title":"Examples","text":"<p>An example scene involving the Spiral engine is available in examples/Component/Engine/Generate/spiral.scn</p> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 curvature  Spiral curvature factor  0.2 Inputs rest_position  Rest position coordinates of the degrees of freedom  Outputs position  Position coordinates of the degrees of freedom  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/32_Vertex2Frame/","title":"Vertex2Frame","text":"<p>This component belongs to the category of Engines. For each point defined in an .obj file, this engine computes a set of rigid points using the normals. Normal vector will be collinear to the Z axis and orthonormal to X and Y as showed bellow:</p> <pre><code>Y\n|\n|   / X\n|  /\n| /\n|/_ _ _ _ _ Z/normal\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/32_Vertex2Frame/#input-data","title":"Input Data","text":"<ul> <li>position: vertices defined in the loaded mesh</li> <li>texCoords: texture coordinate defined in the loaded mesh</li> <li>normals: normals defined in the loaded mesh</li> </ul>"},{"location":"30_Components/25_Engine/10_Generate/32_Vertex2Frame/#output-data","title":"Output Data","text":"<ul> <li>frames: set of rigid types oriented as described before.  </li> </ul>"},{"location":"30_Components/25_Engine/10_Generate/32_Vertex2Frame/#examples","title":"Examples","text":"<p>An example scene involving the vertex2Frame engine is available in examples/Component/Engine/Transform/vertex2Frame.scn</p>"},{"location":"30_Components/25_Engine/10_Generate/ExtrudeEdgesAndGenerateQuads/","title":"ExtrudeEdgesAndGenerateQuads","text":"<p>This engine extrudes an edge-based curve into a quad surface patch</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 extrudeDirection  Direction along which to extrude the curve  1 0 0 thicknessIn  Thickness of the extruded volume in the opposite direction of the normals  0 thicknessOut  Thickness of the extruded volume in the direction of the normals  1 numberOfSections  Number of sections / steps in the extrusion  1 Inputs curveVertices  Position coordinates along the initial curve  curveEdges  Indices of the edges of the curve to extrude  Outputs extrudedVertices  Coordinates of the extruded vertices  extrudedEdges  List of all edges generated during the extrusion  extrudedQuads  List of all quads generated during the extrusion  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/ExtrudeQuadsAndGenerateHexas/","title":"ExtrudeQuadsAndGenerateHexas","text":"<p>This engine extrudes a quad-based surface into a set of hexahedral elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isVisible  is Visible ?  1 scale  Apply a scaling factor to the extruded mesh  1 1 1 thicknessIn  Thickness of the extruded volume in the opposite direction of the normals  0 thicknessOut  Thickness of the extruded volume in the direction of the normals  1 numberOfSlices  Number of slices / steps in the extrusion  1 flipNormals  If true, will inverse point order when creating hexa  0 Inputs surfaceVertices  Position coordinates of the surface  surfaceQuads  Indices of the quads of the surface to extrude  Outputs extrudedVertices  Coordinates of the extruded vertices  extrudedSurfaceQuads  List of new surface quads generated during the extrusion  extrudedQuads  List of all quads generated during the extrusion  extrudedHexas  List of hexahedra generated during the extrusion  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/GenerateCylinder/","title":"GenerateCylinder","text":"<p>Generate a Cylindrical Tetrahedral Mesh</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 BezierTriangleDegree  order of Bezier triangles  BezierTetrahedronDegree  order of Bezier tetrahedra  openSurface  if the cylinder is open at its 2 ends  1 Inputs radius  input cylinder radius  0.2 height  input cylinder height  1 origin  cylinder origin point  0 0 0 resCircumferential  Resolution in the circumferential direction  6 resRadial  Resolution in the radial direction  3 resHeight  Resolution in the height direction  5 Outputs output_TetrahedraPosition  output array of 3d points of tetrahedra mesh  output_TrianglesPosition  output array of 3d points of triangle mesh  tetrahedra  output mesh tetrahedra  triangles  output triangular mesh  BezierTriangleWeights  weights of rational Bezier triangles  isBezierTriangleRational  booleans indicating if each Bezier triangle is rational or integral  BezierTetrahedronWeights  weights of rational Bezier tetrahedra  isBezierTetrahedronRational  booleans indicating if each Bezier tetrahedron is rational or integral  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/GenerateCylinder/#examples","title":"Examples","text":"<p>Component/Engine/Generate/GenerateCylinder.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"1\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedPlaneProjectiveConstraint FixedProjectiveConstraint LineProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [GenerateCylinder] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TrianglePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [FastTetrahedralCorotationalForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;GenerateCylinder template=\"Vec3\" name=\"Cylinder\" radius=\"0.2\" height=\"1\" resHeight=\"7\" resCircumferential=\"7\" resRadial=\"3\" /&gt;\n    &lt;Node name=\"Tetra\" &gt;\n        &lt;CGLinearSolver iterations=\"3000\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt; \n        &lt;EulerImplicitSolver name=\"default12\" rayleighStiffness=\"0.01\"  rayleighMass=\"0.1\" /&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"Container\" tetrahedra=\"@../Cylinder.tetrahedra\" position=\"@../Cylinder.output_position\" createTriangleArray=\"1\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms  drawEdges=\"1\"/&gt;\n        &lt;MechanicalObject name=\"dofs\" showObject=\"1\"/&gt;\n        &lt;MeshMatrixMass name=\"mass\" lumping=\"1\" printMass=\"0\" massDensity=\"1\" /&gt;\n        &lt;BoxROI box=\"-0.01 -0.01 -0.01 0.01 0.01 0.01\" drawBoxes=\"1\" name=\"fixedPoint\"  /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@fixedPoint.indices\" /&gt;\n        &lt;FixedPlaneProjectiveConstraint direction=\"0 0 1\" dmin=\"-0.01\" dmax=\"0.01\"  /&gt;\n        &lt;BoxROI box=\"-0.2 -0.2 0.99 0.2 0.2 1.01\" drawBoxes=\"1\" name=\"pressurePlane\"  /&gt;\n        &lt;LineProjectiveConstraint direction=\"1 0 0\" origin=\"0 0 0\" indices=\"15\"  /&gt;\n        &lt;TrianglePressureForceField  showForces=\"1\"  triangleList=\"@pressurePlane.triangleIndices\" pressure=\"0.01 0 -0.04\" /&gt;\n        &lt;FastTetrahedralCorotationalForceField poissonRatio=\"0.45\" youngModulus=\"1\" method=\"polar\" /&gt; \n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"1\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('GenerateCylinder', template=\"Vec3\", name=\"Cylinder\", radius=\"0.2\", height=\"1\", resHeight=\"7\", resCircumferential=\"7\", resRadial=\"3\")\n\n    Tetra = root.addChild('Tetra')\n    Tetra.addObject('CGLinearSolver', iterations=\"3000\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Tetra.addObject('EulerImplicitSolver', name=\"default12\", rayleighStiffness=\"0.01\", rayleighMass=\"0.1\")\n    Tetra.addObject('TetrahedronSetTopologyContainer', name=\"Container\", tetrahedra=\"@../Cylinder.tetrahedra\", position=\"@../Cylinder.output_position\", createTriangleArray=\"1\")\n    Tetra.addObject('TetrahedronSetGeometryAlgorithms', drawEdges=\"1\")\n    Tetra.addObject('MechanicalObject', name=\"dofs\", showObject=\"1\")\n    Tetra.addObject('MeshMatrixMass', name=\"mass\", lumping=\"1\", printMass=\"0\", massDensity=\"1\")\n    Tetra.addObject('BoxROI', box=\"-0.01 -0.01 -0.01 0.01 0.01 0.01\", drawBoxes=\"1\", name=\"fixedPoint\")\n    Tetra.addObject('FixedProjectiveConstraint', indices=\"@fixedPoint.indices\")\n    Tetra.addObject('FixedPlaneProjectiveConstraint', direction=\"0 0 1\", dmin=\"-0.01\", dmax=\"0.01\")\n    Tetra.addObject('BoxROI', box=\"-0.2 -0.2 0.99 0.2 0.2 1.01\", drawBoxes=\"1\", name=\"pressurePlane\")\n    Tetra.addObject('LineProjectiveConstraint', direction=\"1 0 0\", origin=\"0 0 0\", indices=\"15\")\n    Tetra.addObject('TrianglePressureForceField', showForces=\"1\", triangleList=\"@pressurePlane.triangleIndices\", pressure=\"0.01 0 -0.04\")\n    Tetra.addObject('FastTetrahedralCorotationalForceField', poissonRatio=\"0.45\", youngModulus=\"1\", method=\"polar\")\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/GenerateGrid/","title":"GenerateGrid","text":"<p>Generate a Grid Tetrahedral or Hexahedral Mesh</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs min  the 3 coordinates of the minimum corner  0 0 0 max  the 3 coordinates of the maximum corner  0 0 0 resolution  the number of cubes in the x,y,z directions. If resolution in the z direction is  0 then a 2D grid is generated  3 3 3 Outputs output_position  output array of 3d points  tetrahedra  output mesh tetrahedra  quads  output mesh quads  triangles  output mesh triangles  hexahedra  output mesh hexahedra  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/GenerateGrid/#examples","title":"Examples","text":"<p>Component/Engine/Generate/GenerateGrid.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"1\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedPlaneProjectiveConstraint FixedProjectiveConstraint LineProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [GenerateGrid] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [QuadPressureForceField TrianglePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [FastTetrahedralCorotationalForceField HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetGeometryAlgorithms HexahedronSetTopologyContainer TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;GenerateGrid template=\"Vec3\" name=\"Slab\" max=\"0.5 1.5 1\" resolution=\"5 3 4\" /&gt;\n    &lt;Node name=\"Tetra\"&gt;\n        &lt;CGLinearSolver iterations=\"3000\" name=\"linear solver\" tolerance=\"1.0e-12\" threshold=\"1.0e-12\" /&gt; \n        &lt;EulerImplicitSolver name=\"default12\" rayleighStiffness=\"0.01\"  rayleighMass=\"0.1\" /&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"Container1\" tetrahedra=\"@../Slab.tetrahedra\" position=\"@../Slab.output_position\" createTriangleArray=\"1\"/&gt;\n        &lt;TetrahedronSetGeometryAlgorithms  drawTriangles=\"1\"/&gt;\n        &lt;MechanicalObject name=\"dofs\" showObject=\"1\"/&gt;\n        &lt;MeshMatrixMass name=\"mass\" lumping=\"1\" printMass=\"0\" massDensity=\"1\" /&gt;    \n        &lt;BoxROI box=\"-0.01 -0.01 -0.01 0.01 0.01 0.01\" drawBoxes=\"1\" name=\"fixedPoint\"  /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@fixedPoint.indices\" /&gt;\n        &lt;FixedPlaneProjectiveConstraint direction=\"0 0 1\" dmin=\"-0.01\" dmax=\"0.01\"  /&gt;\n        &lt;BoxROI box=\"-5.2 -5.2 7.49 5.2 5.2 7.51\" drawBoxes=\"1\" name=\"pressurePlane\"  /&gt;\n        &lt;LineProjectiveConstraint direction=\"1 0 0\" origin=\"0 0 0\" indices=\"4\"  /&gt;\n        &lt;TrianglePressureForceField  showForces=\"1\"  triangleList=\"@pressurePlane.triangleIndices\" pressure=\"0.00 0 -0.04\" /&gt;\n        &lt;FastTetrahedralCorotationalForceField poissonRatio=\"0.45\" youngModulus=\"1\" method=\"polar\" /&gt; \n    &lt;/Node&gt;\n    &lt;Node name=\"Hexa\"&gt;\n        &lt;CGLinearSolver iterations=\"3000\" name=\"linear solver\" tolerance=\"1.0e-12\" threshold=\"1.0e-12\" /&gt; \n        &lt;EulerImplicitSolver name=\"default12\" rayleighStiffness=\"0.01\" /&gt;\n        &lt;HexahedronSetTopologyContainer name=\"Container1\" hexahedra=\"@../Slab.hexahedra\" position=\"@../Slab.output_position\" createQuadArray=\"1\"/&gt;\n        &lt;HexahedronSetGeometryAlgorithms  drawQuads=\"1\"/&gt;\n        &lt;MechanicalObject name=\"dofs\" translation=\"5 0 0\" showObject=\"1\"/&gt;\n        &lt;MeshMatrixMass name=\"mass\" lumping=\"1\" printMass=\"0\" massDensity=\"1\" /&gt;    \n        &lt;BoxROI box=\"-4.99 -0.01 -0.01 5.01 0.01 0.01\" drawBoxes=\"1\" name=\"fixedPointHexa\"  /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@fixedPointHexa.indices\" /&gt;\n        &lt;FixedPlaneProjectiveConstraint direction=\"0 0 1\" dmin=\"-0.01\" dmax=\"0.01\"  /&gt;\n        &lt;BoxROI box=\"-0.2 -5.2 7.49 10.2 5.2 7.51\" drawBoxes=\"1\" name=\"pressurePlaneQuad\"  /&gt;\n        &lt;LineProjectiveConstraint direction=\"1 0 0\" origin=\"0 0 0\" indices=\"4\"  /&gt;\n        &lt;QuadPressureForceField  showForces=\"1\"  quadList=\"@pressurePlaneQuad.quadIndices\" pressure=\"0.00 0 -0.04\" /&gt;\n        &lt;HexahedronFEMForceField poissonRatio=\"0.45\" youngModulus=\"1\" method=\"polar\" /&gt; \n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"1\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('GenerateGrid', template=\"Vec3\", name=\"Slab\", max=\"0.5 1.5 1\", resolution=\"5 3 4\")\n\n    Tetra = root.addChild('Tetra')\n    Tetra.addObject('CGLinearSolver', iterations=\"3000\", name=\"linear solver\", tolerance=\"1.0e-12\", threshold=\"1.0e-12\")\n    Tetra.addObject('EulerImplicitSolver', name=\"default12\", rayleighStiffness=\"0.01\", rayleighMass=\"0.1\")\n    Tetra.addObject('TetrahedronSetTopologyContainer', name=\"Container1\", tetrahedra=\"@../Slab.tetrahedra\", position=\"@../Slab.output_position\", createTriangleArray=\"1\")\n    Tetra.addObject('TetrahedronSetGeometryAlgorithms', drawTriangles=\"1\")\n    Tetra.addObject('MechanicalObject', name=\"dofs\", showObject=\"1\")\n    Tetra.addObject('MeshMatrixMass', name=\"mass\", lumping=\"1\", printMass=\"0\", massDensity=\"1\")\n    Tetra.addObject('BoxROI', box=\"-0.01 -0.01 -0.01 0.01 0.01 0.01\", drawBoxes=\"1\", name=\"fixedPoint\")\n    Tetra.addObject('FixedProjectiveConstraint', indices=\"@fixedPoint.indices\")\n    Tetra.addObject('FixedPlaneProjectiveConstraint', direction=\"0 0 1\", dmin=\"-0.01\", dmax=\"0.01\")\n    Tetra.addObject('BoxROI', box=\"-5.2 -5.2 7.49 5.2 5.2 7.51\", drawBoxes=\"1\", name=\"pressurePlane\")\n    Tetra.addObject('LineProjectiveConstraint', direction=\"1 0 0\", origin=\"0 0 0\", indices=\"4\")\n    Tetra.addObject('TrianglePressureForceField', showForces=\"1\", triangleList=\"@pressurePlane.triangleIndices\", pressure=\"0.00 0 -0.04\")\n    Tetra.addObject('FastTetrahedralCorotationalForceField', poissonRatio=\"0.45\", youngModulus=\"1\", method=\"polar\")\n\n    Hexa = root.addChild('Hexa')\n    Hexa.addObject('CGLinearSolver', iterations=\"3000\", name=\"linear solver\", tolerance=\"1.0e-12\", threshold=\"1.0e-12\")\n    Hexa.addObject('EulerImplicitSolver', name=\"default12\", rayleighStiffness=\"0.01\")\n    Hexa.addObject('HexahedronSetTopologyContainer', name=\"Container1\", hexahedra=\"@../Slab.hexahedra\", position=\"@../Slab.output_position\", createQuadArray=\"1\")\n    Hexa.addObject('HexahedronSetGeometryAlgorithms', drawQuads=\"1\")\n    Hexa.addObject('MechanicalObject', name=\"dofs\", translation=\"5 0 0\", showObject=\"1\")\n    Hexa.addObject('MeshMatrixMass', name=\"mass\", lumping=\"1\", printMass=\"0\", massDensity=\"1\")\n    Hexa.addObject('BoxROI', box=\"-4.99 -0.01 -0.01 5.01 0.01 0.01\", drawBoxes=\"1\", name=\"fixedPointHexa\")\n    Hexa.addObject('FixedProjectiveConstraint', indices=\"@fixedPointHexa.indices\")\n    Hexa.addObject('FixedPlaneProjectiveConstraint', direction=\"0 0 1\", dmin=\"-0.01\", dmax=\"0.01\")\n    Hexa.addObject('BoxROI', box=\"-0.2 -5.2 7.49 10.2 5.2 7.51\", drawBoxes=\"1\", name=\"pressurePlaneQuad\")\n    Hexa.addObject('LineProjectiveConstraint', direction=\"1 0 0\", origin=\"0 0 0\", indices=\"4\")\n    Hexa.addObject('QuadPressureForceField', showForces=\"1\", quadList=\"@pressurePlaneQuad.quadIndices\", pressure=\"0.00 0 -0.04\")\n    Hexa.addObject('HexahedronFEMForceField', poissonRatio=\"0.45\", youngModulus=\"1\", method=\"polar\")\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/GenerateRigidMass/","title":"GenerateRigidMass","text":"<p>An engine computing the RigidMass of a mesh : mass, volume and inertia matrix.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs density  input: Density of the object  1000 position  input: positions of the vertices  triangles  input: triangles of the mesh  quads  input: quads of the mesh  polygons  input: polygons of the mesh  Outputs rigidMass  output: rigid mass computed  mass  output: mass of the mesh  volume  output: volume of the mesh  inertiaMatrix  output: the inertia matrix of the mesh  massCenter  output: the gravity center of the mesh  centerToOrigin  output: vector going from the mass center to the space origin  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/GenerateRigidMass/#examples","title":"Examples","text":"<p>Component/Engine/Generate/GenerateRigidMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"Root\" gravity=\"0 0 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [GenerateRigidMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Transform\"/&gt; &lt;!-- Needed to use components [TransformPosition] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showWireframe\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"Livers\"&gt;\n        &lt;Node name=\"Green Liver\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/liver-smooth.obj\" trianglesGroups=\"Mesh1  -1 0 4384\" /&gt;\n            &lt;GenerateRigidMass template=\"Rigid3\" name=\"massEngine\" density=\"1000\" position=\"@loader.position\" triangles=\"@loader.triangles\" quads=\"@loader.quads\" /&gt;\n            &lt;TransformPosition template=\"Vec3\" name=\"positionEngine\" input_position=\"@loader.position\" translation=\"@massEngine.centerToOrigin\" method=\"translation\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" name=\"RigidObject\" translation=\"@massEngine.massCenter\" translation2=\"-5 10 0\" /&gt;\n            &lt;UniformMass template=\"Rigid3\" name=\"Mass\" vertexMass=\"@massEngine.rigidMass\" showAxisSizeFactor=\"1\" /&gt;\n            &lt;Node name=\"VisualNode\" tags=\"Visual\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" position=\"@../positionEngine.output_position\" normal=\"@../loader.normals\" triangles=\"@../loader.triangles\" material=\"Default Diffuse 1 0 0.8 0 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45\" /&gt;\n                &lt;RigidMapping template=\"Rigid3,Vec3\" name=\"VisualMapping\" input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Red Liver\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/liver-smooth.obj\" trianglesGroups=\"Mesh1  -1 0 4384\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" name=\"RigidObject\" translation2=\"5 10 0\" /&gt;\n            &lt;UniformMass template=\"Rigid3\" name=\"Mass\" totalMass=\"1\" showAxisSizeFactor=\"1\" /&gt;\n            &lt;Node name=\"VisualNode\" tags=\"Visual\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" position=\"@../loader.position\" normal=\"@../loader.normals\" triangles=\"@../loader.triangles\" material=\"Default Diffuse 1 0.8 0 0 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45\" /&gt;\n                &lt;RigidMapping template=\"Rigid3,Vec3\" name=\"VisualMapping\" input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Dragons\"&gt;\n        &lt;Node name=\"Green Dragon\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/dragon_clean.obj\" trianglesGroups=\"Mesh  -1 0 2484\" /&gt;\n            &lt;GenerateRigidMass template=\"Rigid3\" name=\"massEngine\" density=\"1000\" position=\"@loader.position\" triangles=\"@loader.triangles\" quads=\"@loader.quads\" /&gt;\n            &lt;TransformPosition template=\"Vec3\" name=\"positionEngine\" input_position=\"@loader.position\" translation=\"@massEngine.centerToOrigin\" method=\"translation\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" name=\"RigidObject\" translation=\"@massEngine.massCenter\" translation2=\"-15 0 0\" /&gt;\n            &lt;UniformMass template=\"Rigid3\" name=\"Mass\" vertexMass=\"@massEngine.rigidMass\" showAxisSizeFactor=\"1\" /&gt;\n            &lt;Node name=\"VisualNode\" tags=\"Visual\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" position=\"@../positionEngine.output_position\" normal=\"@../loader.normals\" triangles=\"@../loader.triangles\" material=\"Default Diffuse 1 0 0.8 0 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45\" /&gt;\n                &lt;RigidMapping template=\"Rigid3,Vec3\" name=\"VisualMapping\" input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Red Dragon 2\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/dragon_clean.obj\" trianglesGroups=\"Mesh  -1 0 2484\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" name=\"RigidObject\" translation2=\"15 0 0\" /&gt;\n            &lt;UniformMass template=\"Rigid3\" name=\"Mass\" filename=\"BehaviorModels/dragon_clean.rigid\" showAxisSizeFactor=\"1\" /&gt;\n            &lt;Node name=\"VisualNode\" tags=\"Visual\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" position=\"@../loader.position\" normal=\"@../loader.normals\" triangles=\"@../loader.triangles\" material=\"Default Diffuse 1 0.8 0 0 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45\" /&gt;\n                &lt;RigidMapping template=\"Rigid3,Vec3\" name=\"VisualMapping\" input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", dt=\"0.02\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Transform\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    Root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showWireframe\")\n    Root.addObject('DefaultAnimationLoop')\n\n    Livers = Root.addChild('Livers')\n\n    Green Liver = Livers.addChild('Green Liver')\n    Green Liver.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/liver-smooth.obj\", trianglesGroups=\"Mesh1  -1 0 4384\")\n    Green Liver.addObject('GenerateRigidMass', template=\"Rigid3\", name=\"massEngine\", density=\"1000\", position=\"@loader.position\", triangles=\"@loader.triangles\", quads=\"@loader.quads\")\n    Green Liver.addObject('TransformPosition', template=\"Vec3\", name=\"positionEngine\", input_position=\"@loader.position\", translation=\"@massEngine.centerToOrigin\", method=\"translation\")\n    Green Liver.addObject('MechanicalObject', template=\"Rigid3\", name=\"RigidObject\", translation=\"@massEngine.massCenter\", translation2=\"-5 10 0\")\n    Green Liver.addObject('UniformMass', template=\"Rigid3\", name=\"Mass\", vertexMass=\"@massEngine.rigidMass\", showAxisSizeFactor=\"1\")\n\n    VisualNode = Green Liver.addChild('VisualNode', tags=\"Visual\")\n    VisualNode.addObject('OglModel', template=\"Vec3\", name=\"Visual\", position=\"@../positionEngine.output_position\", normal=\"@../loader.normals\", triangles=\"@../loader.triangles\", material=\"Default Diffuse 1 0 0.8 0 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45\")\n    VisualNode.addObject('RigidMapping', template=\"Rigid3,Vec3\", name=\"VisualMapping\", input=\"@..\", output=\"@Visual\")\n\n    Red Liver = Livers.addChild('Red Liver')\n    Red Liver.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/liver-smooth.obj\", trianglesGroups=\"Mesh1  -1 0 4384\")\n    Red Liver.addObject('MechanicalObject', template=\"Rigid3\", name=\"RigidObject\", translation2=\"5 10 0\")\n    Red Liver.addObject('UniformMass', template=\"Rigid3\", name=\"Mass\", totalMass=\"1\", showAxisSizeFactor=\"1\")\n\n    VisualNode = Red Liver.addChild('VisualNode', tags=\"Visual\")\n    VisualNode.addObject('OglModel', template=\"Vec3\", name=\"Visual\", position=\"@../loader.position\", normal=\"@../loader.normals\", triangles=\"@../loader.triangles\", material=\"Default Diffuse 1 0.8 0 0 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45\")\n    VisualNode.addObject('RigidMapping', template=\"Rigid3,Vec3\", name=\"VisualMapping\", input=\"@..\", output=\"@Visual\")\n\n    Dragons = Root.addChild('Dragons')\n\n    Green Dragon = Dragons.addChild('Green Dragon')\n    Green Dragon.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/dragon_clean.obj\", trianglesGroups=\"Mesh  -1 0 2484\")\n    Green Dragon.addObject('GenerateRigidMass', template=\"Rigid3\", name=\"massEngine\", density=\"1000\", position=\"@loader.position\", triangles=\"@loader.triangles\", quads=\"@loader.quads\")\n    Green Dragon.addObject('TransformPosition', template=\"Vec3\", name=\"positionEngine\", input_position=\"@loader.position\", translation=\"@massEngine.centerToOrigin\", method=\"translation\")\n    Green Dragon.addObject('MechanicalObject', template=\"Rigid3\", name=\"RigidObject\", translation=\"@massEngine.massCenter\", translation2=\"-15 0 0\")\n    Green Dragon.addObject('UniformMass', template=\"Rigid3\", name=\"Mass\", vertexMass=\"@massEngine.rigidMass\", showAxisSizeFactor=\"1\")\n\n    VisualNode = Green Dragon.addChild('VisualNode', tags=\"Visual\")\n    VisualNode.addObject('OglModel', template=\"Vec3\", name=\"Visual\", position=\"@../positionEngine.output_position\", normal=\"@../loader.normals\", triangles=\"@../loader.triangles\", material=\"Default Diffuse 1 0 0.8 0 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45\")\n    VisualNode.addObject('RigidMapping', template=\"Rigid3,Vec3\", name=\"VisualMapping\", input=\"@..\", output=\"@Visual\")\n\n    Red Dragon 2 = Dragons.addChild('Red Dragon 2')\n    Red Dragon 2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/dragon_clean.obj\", trianglesGroups=\"Mesh  -1 0 2484\")\n    Red Dragon 2.addObject('MechanicalObject', template=\"Rigid3\", name=\"RigidObject\", translation2=\"15 0 0\")\n    Red Dragon 2.addObject('UniformMass', template=\"Rigid3\", name=\"Mass\", filename=\"BehaviorModels/dragon_clean.rigid\", showAxisSizeFactor=\"1\")\n\n    VisualNode = Red Dragon 2.addChild('VisualNode', tags=\"Visual\")\n    VisualNode.addObject('OglModel', template=\"Vec3\", name=\"Visual\", position=\"@../loader.position\", normal=\"@../loader.normals\", triangles=\"@../loader.triangles\", material=\"Default Diffuse 1 0.8 0 0 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45\")\n    VisualNode.addObject('RigidMapping', template=\"Rigid3,Vec3\", name=\"VisualMapping\", input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/GenerateSphere/","title":"GenerateSphere","text":"<p>Generate a sphereical (Bezier) Tetrahedral and Triangular Mesh</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 BezierTetrahedronDegree  order of Bezier tetrahedra  BezierTriangleDegree  order of Bezier triangles  radius  input sphere radius  0.2 Inputs origin  sphere center point  0 0 0 tessellationDegree  Degree of tessellation of each Platonic triangulation  1 platonicSolid  name of the Platonic triangulation used to create the spherical dome : either \"tetrahedron\", \"octahedron\" or \"icosahedron\"  icosahedron Outputs output_TetrahedraPosition  output array of 3d points of tetrahedra mesh  tetrahedra  output mesh tetrahedra  output_TrianglesPosition  output array of 3d points of triangle mesh  triangles  output triangular mesh  BezierTetrahedronWeights  weights of rational Bezier tetrahedra  isBezierTetrahedronRational  booleans indicating if each Bezier tetrahedron is rational or integral  BezierTriangleWeights  weights of rational Bezier triangles  isBezierTriangleRational  booleans indicating if each Bezier triangle is rational or integral  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/GroupFilterYoungModulus/","title":"GroupFilterYoungModulus","text":"<p>This class gives a vector of young modulus according of a list of defined groups</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 elementsGroup  Vector of groups (each element gives its group  mapGroupModulus  Mapping between groups and modulus  defaultYoungModulus  Default value if the primitive is not in a group  10000 groupModulus  list of young modulus for each group  Inputs groups  Groups  primitives  Vector of primitives (indices)  Outputs youngModulus  Vector of young modulus for each primitive  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/JoinPoints/","title":"JoinPoints","text":"<p>?</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs points  Points  distance  Distance to merge points  Outputs mergedPoints  Merged Points  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/MergeMeshes/","title":"MergeMeshes","text":"<p>Merge several meshes</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 nbMeshes  number of meshes to merge  2 npoints  Number Of out points  0 position  Output Vertices of the merged mesh  edges  Output Edges of the merged mesh  triangles  Output Triangles of the merged mesh  quads  Output Quads of the merged mesh  polygons  Output Polygons of the merged mesh  tetrahedra  Output Tetrahedra of the merged mesh  hexahedra  Output Hexahedra of the merged mesh  Inputs position1  input positions for mesh 1  position2  input positions for mesh 2  edges1  input edges for mesh 1  edges2  input edges for mesh 2  triangles1  input triangles for mesh 1  triangles2  input triangles for mesh 2  quads1  input quads for mesh 1  quads2  input quads for mesh 2  tetrahedra1  input tetrahedra for mesh 1  tetrahedra2  input tetrahedra for mesh 2  hexahedra1  input hexahedra for mesh 1  hexahedra2  input hexahedra for mesh 2  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/MergeMeshes/#examples","title":"Examples","text":"<p>Component/Engine/Generate/MergeMeshes.scn</p> XMLPython <pre><code>&lt;Node name=\"Scene\" gravity=\"0 0 0\" dt=\"0.1\" &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [MergeMeshes] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehavior\" /&gt;\n    &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-05\" threshold=\"1e-05\"/&gt;\n    &lt;Node&gt;\n        &lt;MeshOBJLoader name=\"frog\" filename=\"mesh/frog.obj\" /&gt;\n        &lt;MeshOBJLoader name=\"dragon\" filename=\"mesh/dragon.obj\" /&gt;\n\n        &lt;MergeMeshes name=\"basis\" nbMeshes=\"2\" \n                     position1=\"@frog.position\" \n                     triangles1=\"@frog.triangles\"\n                     position2=\"@dragon.position\"\n                     triangles2=\"@dragon.triangles\"\n                     /&gt;\n\n        &lt;MeshTopology src=\"@basis\" drawTriangles=\"1\"/&gt;\n        &lt;MechanicalObject showObject=\"1\"/&gt;\n        &lt;UniformMass /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Scene = rootNode.addChild('Scene', gravity=\"0 0 0\", dt=\"0.1\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Scene.addObject('DefaultAnimationLoop')\n    Scene.addObject('VisualStyle', displayFlags=\"showBehavior\")\n    Scene.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Scene.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-05\", threshold=\"1e-05\")\n\n    Scene = Scene.addChild('Scene')\n    Scene.addObject('MeshOBJLoader', name=\"frog\", filename=\"mesh/frog.obj\")\n    Scene.addObject('MeshOBJLoader', name=\"dragon\", filename=\"mesh/dragon.obj\")\n    Scene.addObject('MergeMeshes', name=\"basis\", nbMeshes=\"2\", position1=\"@frog.position\", triangles1=\"@frog.triangles\", position2=\"@dragon.position\", triangles2=\"@dragon.triangles\")\n    Scene.addObject('MeshTopology', src=\"@basis\", drawTriangles=\"1\")\n    Scene.addObject('MechanicalObject', showObject=\"1\")\n    Scene.addObject('UniformMass')\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/MergeSets/","title":"MergeSets","text":"<p>Merge two sets of indices using specified boolean operation</p> <p>Templates:</p> <ul> <li><code>I</code></li> <li><code>i</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs in1  first set of indices  in2  second set of indices  op  name of operation to compute (union, intersection, difference, symmetric_difference)  union Outputs out  merged set of indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/MergeVectors/","title":"MergeVectors","text":"<p>Apply a merge operation to combine several inputs</p> <p>Templates:</p> <ul> <li><code>vector&lt;RigidCoord2d&gt;</code></li> <li><code>vector&lt;RigidCoord3d&gt;</code></li> <li><code>vector&lt;RigidDeriv2d&gt;</code></li> <li><code>vector&lt;RigidDeriv3d&gt;</code></li> <li><code>vector&lt;Vec2I&gt;</code></li> <li><code>vector&lt;Vec2d&gt;</code></li> <li><code>vector&lt;Vec3d&gt;</code></li> <li><code>vector&lt;Vec4d&gt;</code></li> <li><code>vector&lt;bool&gt;</code></li> <li><code>vector&lt;d&gt;</code></li> <li><code>vector&lt;i&gt;</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 nbInputs  Number of input vectors  2 output  Output vector  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/MergeVectors/#examples","title":"Examples","text":"<p>Component/Engine/Generate/MergeVectors.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 -9 1\"&gt;\n\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [MergeVectors] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"mesh\"&gt;\n\n        &lt;MeshOBJLoader name=\"mesh1\" filename=\"mesh/raptor_35kp.obj\"/&gt;  \n                &lt;MeshOBJLoader name=\"mesh2\" filename=\"mesh/snake_body.obj\"/&gt;  \n\n                &lt;MergeVectors template=\"Data&lt;double&gt;\" name=\"mergedPositions\"  nbInputs=\"2\" input1=\"@mesh1.position\" input2=\"@mesh2.position\" /&gt;\n                &lt;MechanicalObject  template=\"Vec3\"  position=\"@mergedPositions.output\" showObject=\"True\" /&gt;\n\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 -9 1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels\")\n    root.addObject('DefaultAnimationLoop')\n\n    mesh = root.addChild('mesh')\n    mesh.addObject('MeshOBJLoader', name=\"mesh1\", filename=\"mesh/raptor_35kp.obj\")\n    mesh.addObject('MeshOBJLoader', name=\"mesh2\", filename=\"mesh/snake_body.obj\")\n    mesh.addObject('MergeVectors', template=\"Data&lt;double&gt;\", name=\"mergedPositions\", nbInputs=\"2\", input1=\"@mesh1.position\", input2=\"@mesh2.position\")\n    mesh.addObject('MechanicalObject', template=\"Vec3\", position=\"@mergedPositions.output\", showObject=\"True\")\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/MeshBarycentricMapperEngine/","title":"MeshBarycentricMapperEngine","text":"<p>This class maps a set of points in a topological model and provide barycentric coordinates</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 computeLinearInterpolation  if true, computes a linear interpolation (debug)  0 linearInterpolationIndices  Indices of a linear interpolation  linearInterpolationValues  Values of a linear interpolation  Inputs inputPositions  Initial positions of the master points  mappedPointPositions  Initial positions of the points to be mapped  Outputs barycentricPositions  Output : Barycentric positions of the mapped points  tableElements  Output : Table that provides the index of the element to which each input point belongs  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology Name of the master topology"},{"location":"30_Components/25_Engine/10_Generate/MeshBarycentricMapperEngine/#examples","title":"Examples","text":"<p>Component/Engine/Generate/MeshBarycentricMapperEngine.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [MeshBarycentricMapperEngine] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RegularGridTopology name=\"GridTopology\" nx=\"10\" ny=\"10\" nz=\"10\" min=\"-10 -10 -10\" max=\"10 10 10\" drawEdges=\"1\"/&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"Tetra-Topo\"&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"Container\" checkTopology=\"1\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../GridTopology\" output=\"@Container\" /&gt;\n        &lt;Node name=\"Liver\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader\" filename=\"mesh/liver.obj\" /&gt;\n            &lt;MeshTopology src=\"@meshLoader\" name=\"LiverTopo\"  /&gt;\n            &lt;MeshBarycentricMapperEngine inputPositions=\"@../../GridTopology.position\" mappedPointPositions=\"@./LiverTopo.position\" topology=\"@../Container\"/&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader\" color='1.0 0.0 0.0 1' /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RegularGridTopology', name=\"GridTopology\", nx=\"10\", ny=\"10\", nz=\"10\", min=\"-10 -10 -10\", max=\"10 10 10\", drawEdges=\"1\")\n    root.addObject('DefaultAnimationLoop')\n\n    Tetra-Topo = root.addChild('Tetra-Topo')\n    Tetra-Topo.addObject('TetrahedronSetTopologyContainer', name=\"Container\", checkTopology=\"1\")\n    Tetra-Topo.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Tetra-Topo.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../GridTopology\", output=\"@Container\")\n\n    Liver = Tetra-Topo.addChild('Liver')\n    Liver.addObject('MeshOBJLoader', name=\"meshLoader\", filename=\"mesh/liver.obj\")\n    Liver.addObject('MeshTopology', src=\"@meshLoader\", name=\"LiverTopo\")\n    Liver.addObject('MeshBarycentricMapperEngine', inputPositions=\"@../../GridTopology.position\", mappedPointPositions=\"@./LiverTopo.position\", topology=\"@../Container\")\n    Liver.addObject('OglModel', name=\"Visual\", src=\"@meshLoader\", color=\"1.0 0.0 0.0 1\")\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/MeshClosingEngine/","title":"MeshClosingEngine","text":"<p>Merge several meshes</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs inputPosition  input vertices  inputTriangles  input triangles  inputQuads  input quads  Outputs position  Vertices of closed mesh  triangles  Triangles of closed mesh  quads  Quads of closed mesh (=input quads with current method)  indices  Index lists of the closing parts  closingPosition  Vertices of the closing parts  closingTriangles  Triangles of the closing parts  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/MeshClosingEngine/#examples","title":"Examples","text":"<p>Component/Engine/Generate/MeshClosingEngine.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" gravity=\"0 0 0\" dt=\"1\"  &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [MeshClosingEngine] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Setting\"/&gt; &lt;!-- Needed to use components [BackgroundSetting] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;BackgroundSetting color=\"1 1 1\" /&gt;\n    &lt;MeshOBJLoader name=\"mesh\" filename=\"mesh/c_open.obj\" triangulate=\"0\"/&gt;\n    &lt;MeshClosingEngine name=\"closer\" inputPosition=\"@mesh.position\" inputTriangles=\"@mesh.triangles\" inputQuads=\"@mesh.quads\"/&gt;\n\n    &lt;Node name=\"plain visu of closing area (red)\" &gt;\n        &lt;OglModel name=\"closingVisual\"  position=\"@../closer.closingPosition\" triangles=\"@../closer.closingTriangles\" color=\"1 0.1 0.1 1\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"visu of closed mesh (green)\" &gt;\n        &lt;OglModel name=\"closedMesh\"  position=\"@../closer.position\" vertices=\"@../closer.position\" triangles=\"@../closer.triangles\" quads=\"@../closer.quads\" color=\"0.5 1 0.5 1\" translation=\"0 0 4\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"visu of original open mesh (wireframe)\" &gt;\n        &lt;VisualStyle displayFlags=\"showVisual showWireframe\" /&gt;\n        &lt;OglModel name=\"visual\"  src=\"@../mesh\" color=\"0.5 0.5 1 1\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 0\", dt=\"1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Setting\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('BackgroundSetting', color=\"1 1 1\")\n    root.addObject('MeshOBJLoader', name=\"mesh\", filename=\"mesh/c_open.obj\", triangulate=\"0\")\n    root.addObject('MeshClosingEngine', name=\"closer\", inputPosition=\"@mesh.position\", inputTriangles=\"@mesh.triangles\", inputQuads=\"@mesh.quads\")\n\n    plain visu of closing area (red) = root.addChild('plain visu of closing area (red)')\n    plain visu of closing area (red).addObject('OglModel', name=\"closingVisual\", position=\"@../closer.closingPosition\", triangles=\"@../closer.closingTriangles\", color=\"1 0.1 0.1 1\")\n\n    visu of closed mesh (green) = root.addChild('visu of closed mesh (green)')\n    visu of closed mesh (green).addObject('OglModel', name=\"closedMesh\", position=\"@../closer.position\", vertices=\"@../closer.position\", triangles=\"@../closer.triangles\", quads=\"@../closer.quads\", color=\"0.5 1 0.5 1\", translation=\"0 0 4\")\n\n    visu of original open mesh (wireframe) = root.addChild('visu of original open mesh (wireframe)')\n    visu of original open mesh (wireframe).addObject('VisualStyle', displayFlags=\"showVisual showWireframe\")\n    visu of original open mesh (wireframe).addObject('OglModel', name=\"visual\", src=\"@../mesh\", color=\"0.5 0.5 1 1\")\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/MeshTetraStuffing/","title":"MeshTetraStuffing","text":"<p>Create a tetrahedral volume mesh from a surface, using the algorithm from F. Labelle and J.R. Shewchuk, \"Isosurface Stuffing: Fast Tetrahedral Meshes with Good Dihedral Angles\", SIGGRAPH 2007.</p> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 d_vbbox  BBox to restrict the volume to  size  Size of the generate tetrahedra. If negative, number of grid cells in the largest bbox dimension  -8 outputPoints  Output volume mesh points  outputTetrahedra  Output volume mesh tetrahedra  Inputs inputPoints  Input surface mesh points  inputTriangles  Input surface mesh triangles  inputQuads  Input surface mesh quads  alphaLong  Minimum alpha values on long edges when snapping points  0.24999 alphaShort  Minimum alpha values on short edges when snapping points  0.42978 snapPoints  Snap points to the surface if intersections on edges are closed to given alpha values  0 splitTetrahedra  Split tetrahedra crossing the surface  0 Visualization draw  Activate rendering of internal datasets  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/MeshTetraStuffing/#examples","title":"Examples","text":"<p>Component/Engine/Generate/MeshTetraStuffing.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [MeshTetraStuffing] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping Mesh2PointTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [PointSetTopologyContainer PointSetTopologyModifier TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;!--\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\"/&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;DiscreteIntersection/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\"/&gt;\n--&gt;\n    &lt;DefaultAnimationLoop/&gt;    \n    &lt;VisualStyle displayFlags=\"showForceFields\" /&gt;\n    &lt;Node name=\"input\"&gt;\n        &lt;MeshTopology name=\"surface\" filename=\"mesh/liver-smooth.obj\" /&gt;\n        &lt;MeshTetraStuffing name=\"stuffing\" snapPoints=\"true\" splitTetras=\"true\" draw=\"true\" size=\"0.7\" alphaLong=\"0.3\" alphaShort=\"0.4\" inputPoints=\"@surface.points\" inputTriangles=\"@surface.triangles\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node activated=\"1\" name=\"output\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"10\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"volume\" points=\"@../input/stuffing.outputPoints\" tetras=\"@../input/stuffing.outputTetras\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;!-- Algorithms: used in DiagonalMass to compute the mass --&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass massDensity=\"1\" name=\"computed using mass density\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"3000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;BoxConstraint box=\"-6 0 -2 -2 1.5 3\" /&gt;\n        &lt;!--&lt;SphereCollisionModel radius=\"0.4\" /&gt;--&gt;\n        &lt;!--\n        &lt;Node name=\"Surface\"&gt;\n      &lt;include href=\"Objects/TriangleSetTopology.xml\" /&gt;\n      &lt;Tetra2TriangleTopologicalMapping input=\"@../volume\" output=\"@Container\"/&gt;\n          &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"60\" poissonRatio=\"0.3\" method=\"large\" /&gt; \n        &lt;/Node&gt;\n--&gt;\n        &lt;Node name=\"VM\"&gt;\n            &lt;MeshOBJLoader name='myLoader' filename='mesh/liver-smooth.obj'/&gt;  \n            &lt;OglModel name=\"visual\" src=\"@myLoader\" /&gt;\n            &lt;BarycentricMapping output=\"@visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Circumcenters\"&gt;\n            &lt;PointSetTopologyContainer name=\"Container2\" /&gt;\n            &lt;PointSetTopologyModifier /&gt;\n            &lt;Mesh2PointTopologicalMapping input=\"@volume\" output=\"@Container2\" tetraBaryCoords=\"0.25 0.25 0.25\" /&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;!--&lt;BarycentricMapping /&gt;--&gt;\n            &lt;!--&lt;CircumcenterMapping/&gt;--&gt;\n            &lt;!--&lt;SphereCollisionModel radius=\"0.1\" /&gt;--&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;!--\n    &lt;Node activated=\"0\" name=\"output-gpu\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver\" /&gt;\n        &lt;CGLinearSolver iterations=\"10\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshTopology name=\"volume\" points=\"@../input/stuffing.outputPoints\" tetras=\"@../input/stuffing.outputTetras\" /&gt;\n        &lt;MechanicalObject template=\"CudaVec3f\" /&gt;\n        &lt;UniformMass totalMass=\"5\" name=\"mass\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"3000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;BoxConstraint box=\"-6 0 -2 -2 1.5 3\" /&gt;\n        &lt;Node name=\"VM\"&gt;\n            &lt;OglModel name=\"visual\" filename=\"mesh/liver-smooth.obj\" /&gt;\n            &lt;BarycentricMapping output=\"@visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n--&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    rootNode = rootNode.addChild('rootNode')\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    rootNode.addObject('DefaultAnimationLoop')\n    rootNode.addObject('VisualStyle', displayFlags=\"showForceFields\")\n\n    input = rootNode.addChild('input')\n    input.addObject('MeshTopology', name=\"surface\", filename=\"mesh/liver-smooth.obj\")\n    input.addObject('MeshTetraStuffing', name=\"stuffing\", snapPoints=\"true\", splitTetras=\"true\", draw=\"true\", size=\"0.7\", alphaLong=\"0.3\", alphaShort=\"0.4\", inputPoints=\"@surface.points\", inputTriangles=\"@surface.triangles\")\n\n    output = rootNode.addChild('output', activated=\"1\")\n    output.addObject('EulerImplicitSolver', name=\"odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    output.addObject('CGLinearSolver', iterations=\"10\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    output.addObject('TetrahedronSetTopologyContainer', name=\"volume\", points=\"@../input/stuffing.outputPoints\", tetras=\"@../input/stuffing.outputTetras\")\n    output.addObject('MechanicalObject')\n    output.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    output.addObject('DiagonalMass', massDensity=\"1\", name=\"computed using mass density\")\n    output.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"3000\", poissonRatio=\"0.3\", method=\"large\")\n    output.addObject('BoxConstraint', box=\"-6 0 -2 -2 1.5 3\")\n\n    VM = output.addChild('VM')\n    VM.addObject('MeshOBJLoader', name=\"myLoader\", filename=\"mesh/liver-smooth.obj\")\n    VM.addObject('OglModel', name=\"visual\", src=\"@myLoader\")\n    VM.addObject('BarycentricMapping', output=\"@visual\")\n\n    Circumcenters = output.addChild('Circumcenters')\n    Circumcenters.addObject('PointSetTopologyContainer', name=\"Container2\")\n    Circumcenters.addObject('PointSetTopologyModifier')\n    Circumcenters.addObject('Mesh2PointTopologicalMapping', input=\"@volume\", output=\"@Container2\", tetraBaryCoords=\"0.25 0.25 0.25\")\n    Circumcenters.addObject('MechanicalObject')\n</code></pre>"},{"location":"30_Components/25_Engine/10_Generate/NormEngine/","title":"NormEngine","text":"<p>Convert Vec in Real</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs input  input array of 3d points  normType  The type of norm. Use a negative value for the infinite norm.  2 Outputs output  output array of scalar norms  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/NormalsFromPoints/","title":"NormalsFromPoints","text":"<p>Compute vertex normals by averaging face normals</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs position  Vertices of the mesh  triangles  Triangles of the mesh  quads  Quads of the mesh  invertNormals  Swap normals  0 useAngles  Use incident angles to weight faces normal contributions at each vertex  0 Outputs normals  Computed vertex normals of the mesh  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/RandomPointDistributionInSurface/","title":"RandomPointDistributionInSurface","text":"<p>This class truns on spiral any topological model</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Generate</code></p> <p>namespace: <code>sofa::component::engine::generate</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 randomSeed  Set a specified seed for random generation (0 for \"true pseudo-randomness\"   0 isVisible  is Visible ?  1 minDistanceBetweenPoints  Min Distance between 2 points (-1 for true randomness)  0.1 numberOfInPoints  Number of points inside  10 numberOfTests  Number of tests to find if the point is inside or not (odd number)  5 outPoints  Points outside the surface  Inputs vertices  Vertices  triangles  Triangles indices  Outputs inPoints  Points inside the surface  Visualization drawOutputPoints  Output points visible ?  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/10_Generate/RandomPointDistributionInSurface/#examples","title":"Examples","text":"<p>Component/Engine/Generate/RandomPointDistributionInSurface.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [RandomPointDistributionInSurface] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Random\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader\" filename=\"mesh/liver.obj\" /&gt;\n        &lt;MechanicalObject src=\"@meshLoader\"/&gt;\n        &lt;RandomPointDistributionInSurface template=\"Vec3\" drawOutputPoints=\"true\"\n            vertices=\"@meshLoader.position\" triangles=\"@meshLoader.triangles\" numberOfInPoints=\"100\" numberOfTests=\"3\" minDistanceBetweenPoints=\"0.1\" \n        /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Visu\"&gt;\n        &lt;VisualStyle displayFlags=\"showWireframe\" /&gt;\n        &lt;MeshOBJLoader name='myLoader' filename='mesh/liver.obj'/&gt;  \n        &lt;OglModel src='@myLoader'/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels\")\n    root.addObject('DefaultAnimationLoop')\n\n    Random = root.addChild('Random')\n    Random.addObject('MeshOBJLoader', name=\"meshLoader\", filename=\"mesh/liver.obj\")\n    Random.addObject('MechanicalObject', src=\"@meshLoader\")\n    Random.addObject('RandomPointDistributionInSurface', template=\"Vec3\", drawOutputPoints=\"true\", vertices=\"@meshLoader.position\", triangles=\"@meshLoader.triangles\", numberOfInPoints=\"100\", numberOfTests=\"3\", minDistanceBetweenPoints=\"0.1\")\n\n    Visu = root.addChild('Visu')\n    Visu.addObject('VisualStyle', displayFlags=\"showWireframe\")\n    Visu.addObject('MeshOBJLoader', name=\"myLoader\", filename=\"mesh/liver.obj\")\n    Visu.addObject('OglModel', src=\"@myLoader\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/10_ROI_Selection/","title":"ROI Selection","text":"<p>An Engine is a component that computes a set of output Data's from a set of input Data's. Several ROI engines (standing for \"Region Of Interest\") allow for selecting topological elements of an object. Three engines thus provide point indices, edges, triangles, tetrahedra and/or hexahedra as output:</p> <ul> <li>BoxROI</li> <li>PlaneROI</li> <li>SphereROI</li> </ul>"},{"location":"30_Components/25_Engine/20_Select/10_ROI_Selection/#inputs","title":"Inputs","text":""},{"location":"30_Components/25_Engine/20_Select/10_ROI_Selection/#boxroi","title":"BoxROI","text":"<p>This engine finds the topological primitives which are inside a given box. Below are given its Data:</p> <ul> <li>box: defined by two points (xmin,ymin,zmin, xmax,ymax,zmax)</li> <li>position/rest_position: rest position coordinates of the degrees of freedom    </li> </ul> <p>{.wp-image-1424 .aligncenter width=\"40%\" height=\"auto\"}</p>"},{"location":"30_Components/25_Engine/20_Select/10_ROI_Selection/#planeroi","title":"PlaneROI","text":"<p>This engine finds the points which are inside a given box computed from a plane defined by three points and a depth distance. Below are given its Data:</p> <ul> <li>planes: plane defined by 3 points and a depth distance (as shown above).</li> <li>position/rest_position: rest position coordinates of the degrees of freedom  </li> </ul> <p>{.wp-image-1437 .aligncenter width=\"40%\" height=\"auto\"}</p>"},{"location":"30_Components/25_Engine/20_Select/10_ROI_Selection/#sphereroi","title":"SphereROI","text":"<p>This engine finds the topological primitives which are inside a given sphere.</p> <ul> <li>centers: center(s) of the sphere(s)</li> <li>radii: radius(i) of the sphere(s)</li> <li>direction: edge direction(if edgeAngle &gt; 0)</li> <li>normal: normal direction of the triangles (if triAngle &gt; 0)</li> <li>edgeAngle: max angle between the direction of the selected edges and the specified direction</li> <li>triAngle: max angle between the normal of the selected triangle and the specified normal direction</li> <li>position/rest_position: rest position coordinates of the degrees of freedom</li> </ul> <p>{.wp-image-1439 .aligncenter width=\"40%\" height=\"auto\"}</p>"},{"location":"30_Components/25_Engine/20_Select/10_ROI_Selection/#output","title":"Output","text":"<p>These three engines also have shared input and output parameters that can be used depending of the need in the scene :</p>"},{"location":"30_Components/25_Engine/20_Select/10_ROI_Selection/#input-topology","title":"Input topology","text":"<ul> <li>edges: edge Topology array</li> <li>triangles: triangle Topology array</li> <li>tetrahedra: tetrahedron Topology array</li> </ul>"},{"location":"30_Components/25_Engine/20_Select/10_ROI_Selection/#input-parameters","title":"Input parameters","text":"<p>Concerning topology Note that those parameters are set to true by default. So it means that as default behaviour, all topological component array will be parse. Set some parameters to false if you just need a part of the information and want to speed-up your simulation.</p> <ul> <li>computeEdges: if true, will compute edge list and index list inside the ROI.</li> <li>computeTriangles: if true, will compute triangle list and index list inside the ROI.</li> <li>computeTetrahedra: if true, will compute tetrahedra list and index list inside the ROI.  </li> </ul>"},{"location":"30_Components/25_Engine/20_Select/10_ROI_Selection/#output-datas","title":"Output data's","text":"<ul> <li>indices: indices of the points contained in the ROI</li> <li>edgeIndices: indices of the edges contained in the ROI</li> <li>triangleIndices: indices of the triangles contained in the ROI</li> <li>tetrahedronIndices: indices of the tetrahedra contained in the ROI</li> <li>pointsInROI: points contained in the ROI</li> <li>edgesInROI: edges contained in the ROI</li> <li>trianglesInROI: triangles contained in the ROI</li> <li>tetrahedraInROI: tetrahedra contained in the ROI</li> </ul>"},{"location":"30_Components/25_Engine/20_Select/10_ROI_Selection/#examples","title":"Examples","text":"<p>BoxROI usage is shown in the following scene files:</p> <ul> <li>examples/Component/Engine/Select/BoxROI.scn</li> <li>examples/Component/Constraint/Projective/BoxConstraint.scn</li> </ul> <p>PlaneROI usage is shown in the following scene files:</p> <ul> <li>examples/Component/Engine/Select/PlaneROI.scn</li> <li>examples/Component/Constraint/Projective/PlaneConstraint.scn</li> </ul> <p>SphereROI usage is shown in the following scene files:</p> <ul> <li>examples/Component/Engine/Select/SphereROI.scn</li> </ul>"},{"location":"30_Components/25_Engine/20_Select/24_PointsFromIndices/","title":"PointsFromIndices","text":"<p>This component belongs to the category of Engines. This engine returns positions from given indices.</p>"},{"location":"30_Components/25_Engine/20_Select/24_PointsFromIndices/#input-data","title":"Input Data","text":"<ul> <li>position: positions of the mechanical object</li> <li>indices: indices we want to have corresponding positions</li> </ul>"},{"location":"30_Components/25_Engine/20_Select/24_PointsFromIndices/#output-data","title":"Output Data","text":"<ul> <li>indices_position: positions according to given indices  </li> </ul>"},{"location":"30_Components/25_Engine/20_Select/24_PointsFromIndices/#examples","title":"Examples","text":"<p>An example scene involving the PointsFromIndices engine is available in examples/Component/Engine/Select/PointsFromIndices.scn</p> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs position  Position coordinates of the degrees of freedom  indices  Indices of the points  Outputs indices_position  Coordinates of the points contained in indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/24_PointsFromIndices/#examples_1","title":"Examples","text":"<p>Component/Engine/Select/PointsFromIndices.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" gravity=\"0 -9 1\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI PointsFromIndices] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareGravity\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"true\"/&gt;\n        &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"mecaObj\" scale3d=\"10 10 10\" restScale=\"1\" /&gt;\n        &lt;TriangleSetTopologyContainer src=\"@loader\" name=\"Container\" /&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass name=\"default5\" massDensity=\"0.15\" /&gt;\n        &lt;BoxROI template=\"Vec3\" name=\"FixedROI\" box=\"2 9.5 -0.5 8 10.5 0.5\" drawBoxes=\"1\" position=\"@mecaObj.rest_position\" computeTriangles=\"0\" computeTetrahedra=\"0\" computeEdges=\"0\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default6\" indices=\"@FixedROI.indices\" /&gt;\n        &lt;TriangularFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"60\" /&gt;\n        &lt;TriangularBendingSprings template=\"Vec3\" name=\"FEM-Bend\" stiffness=\"300\" damping=\"1\" /&gt;\n\n        &lt;PointsFromIndices name=\"PFI\" position=\"@mecaObj.position\" indices=\"10 20 30\" /&gt;\n\n        &lt;Node name=\"Selection\" &gt;\n            &lt;MechanicalObject template=\"Vec3\" position=\"@../PFI.indices_position\" name=\"SelectedDOFs\" showIndices=\"1\" showIndicesScale=\"0.2\"  /&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9 1\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareGravity = root.addChild('SquareGravity', gravity=\"0 -9.81 0\")\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"mecaObj\", scale3d=\"10 10 10\", restScale=\"1\")\n    SquareGravity.addObject('TriangleSetTopologyContainer', src=\"@loader\", name=\"Container\")\n    SquareGravity.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    SquareGravity.addObject('DiagonalMass', name=\"default5\", massDensity=\"0.15\")\n    SquareGravity.addObject('BoxROI', template=\"Vec3\", name=\"FixedROI\", box=\"2 9.5 -0.5 8 10.5 0.5\", drawBoxes=\"1\", position=\"@mecaObj.rest_position\", computeTriangles=\"0\", computeTetrahedra=\"0\", computeEdges=\"0\")\n    SquareGravity.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default6\", indices=\"@FixedROI.indices\")\n    SquareGravity.addObject('TriangularFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"60\")\n    SquareGravity.addObject('TriangularBendingSprings', template=\"Vec3\", name=\"FEM-Bend\", stiffness=\"300\", damping=\"1\")\n    SquareGravity.addObject('PointsFromIndices', name=\"PFI\", position=\"@mecaObj.position\", indices=\"10 20 30\")\n\n    Selection = SquareGravity.addChild('Selection')\n    Selection.addObject('MechanicalObject', template=\"Vec3\", position=\"@../PFI.indices_position\", name=\"SelectedDOFs\", showIndices=\"1\", showIndicesScale=\"0.2\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/34_SubSetTopology/","title":"SubSetTopology","text":"<p>This component belongs to the category of Engines. This engine separate topology in two parts, considering a ROI, a topology inside and a topology outside the ROI which can be a sphere or a box ROI used in this engine are similar to BoxROI and SphereROI. {.wp-image-1612 .alignright width=\"40%\" height=\"auto\"}</p>"},{"location":"30_Components/25_Engine/20_Select/34_SubSetTopology/#input-data","title":"Input Data","text":"<ul> <li>box: box defined by two points (xmin,ymin,zmin, xmax,ymax,zmax)</li> <li>centers: center(s) of the sphere(s)</li> <li>radii: radius(i) of the sphere(s)</li> <li>direction: edge direction(if edgeAngle &gt; 0)</li> <li>normal: normal direction of the triangles (if triAngle &gt; 0)</li> <li>edgeAngle: max angle between the direction of the selected edges and the specified direction</li> <li>triAngle: max angle between the normal of the selected triangle and the specified normal direction</li> </ul> <p>Input topology</p> <ul> <li>position/rest_position: rest position coordinates of the degrees of freedom</li> <li>edges: edge Topology array</li> <li>triangles: triangle Topology array</li> <li>tetrahedra: tetrahedron Topology array</li> </ul>"},{"location":"30_Components/25_Engine/20_Select/34_SubSetTopology/#input-parameters","title":"Input parameters","text":"<p>For display:</p> <ul> <li>drawROI: if true, Draw ROI(s).</li> <li>drawPoints: if true, Draw Points</li> <li>drawEdges: if true, Draw Edges.</li> <li>drawTriangle: if true, Draw Triangles.</li> <li>drawTetrahedra: if true, draw tetrahedra</li> <li>drawSize: rendering size for box and elements.</li> </ul> <p>For behaviour:</p> <ul> <li>localIndices: if true, will compute local dof indices in topological elements. (see examples below)  </li> </ul>"},{"location":"30_Components/25_Engine/20_Select/34_SubSetTopology/#output-data","title":"Output Data","text":"<ul> <li>indices: indices of the points contained in the ROI</li> <li>edgeIndices: indices of the edges contained in the ROI</li> <li>triangleIndices: indices of the triangles contained in the ROI</li> <li>tetrahedronIndices: indices of the tetrahedra contained in the ROI</li> <li>pointsInROI: points contained in the ROI</li> <li>pointsOutROI: points contained out of the ROI</li> <li>edgesInROI: edges contained in the ROI</li> <li>edgesOutROI: edges contained out of the ROI</li> <li>trianglesInROI: triangles contained in the ROI</li> <li>trianglesOutROI: triangles contained out of the ROI</li> <li>tetrahedraInROI: tetrahedra contained in the ROI</li> <li>tetrahedraOutROI: tetrahedra contained out of the ROI</li> <li>nbrborder: if localIndices option is activated, will give the number of vertices on the border of the ROI (being the n first points of each output Topology).  </li> </ul>"},{"location":"30_Components/25_Engine/20_Select/34_SubSetTopology/#examples","title":"Examples","text":"<p>Three example scenes involving the SubsetTopology engine are available:</p> <ul> <li>examples/Component/Engine/Select/SubsetTopology.scn</li> <li>examples/Component/Engine/Select/SubsetTopology_localIndicesOption.scn</li> <li>examples/Component/Engine/Select/SubsetTopology_refiningMesh.scn</li> </ul>"},{"location":"30_Components/25_Engine/20_Select/BoxROI/","title":"BoxROI","text":"<p>Find the primitives (vertex/edge/triangle/quad/tetrahedron/hexahedron) inside given boxes Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select::boxroi</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 computeEdges  If true, will compute edge list and index list inside the ROI. (default = true)  1 computeTriangles  If true, will compute triangle list and index list inside the ROI. (default = true)  1 computeTetrahedra  If true, will compute tetrahedra list and index list inside the ROI. (default = true)  1 computeHexahedra  If true, will compute hexahedra list and index list inside the ROI. (default = true)  1 computeQuad  If true, will compute quad list and index list inside the ROI. (default = true)  1 strict  If true, an element is inside the box iif all of its nodes are inside. If False, only the center point of the element is checked. (default = true)  1 doUpdate  If true, updates the selection at the beginning of simulation steps. (default = true)  1 Inputs box  List of boxes defined by xmin,ymin,zmin, xmax,ymax,zmax  orientedBox  List of boxes defined by 3 points (p0, p1, p2) and a depth distance  A parallelogram will be defined by (p0, p1, p2, p3 = p0 + (p2-p1)).  The box will finaly correspond to the parallelogram extrusion of depth/2  along its normal and depth/2 in the opposite direction.   position  Rest position coordinates of the degrees of freedom.  If empty the positions from a MechanicalObject then a MeshLoader are searched in the current context.  If none are found the parent's context is searched for MechanicalObject.  edges  Edge Topology  triangles  Triangle Topology  tetrahedra  Tetrahedron Topology  hexahedra  Hexahedron Topology  quad  Quad Topology  Outputs indices  Indices of the points contained in the ROI  edgeIndices  Indices of the edges contained in the ROI  triangleIndices  Indices of the triangles contained in the ROI  tetrahedronIndices  Indices of the tetrahedra contained in the ROI  hexahedronIndices  Indices of the hexahedra contained in the ROI  quadIndices  Indices of the quad contained in the ROI  pointsInROI  Points contained in the ROI  edgesInROI  Edges contained in the ROI  trianglesInROI  Triangles contained in the ROI  tetrahedraInROI  Tetrahedra contained in the ROI  hexahedraInROI  Hexahedra contained in the ROI  quadInROI  Quad contained in the ROI  nbIndices  Number of selected indices  Visualization drawBoxes  Draw Boxes. (default = false)  0 drawPoints  Draw Points. (default = false)  0 drawEdges  Draw Edges. (default = false)  0 drawTriangles  Draw Triangles. (default = false)  0 drawTetrahedra  Draw Tetrahedra. (default = false)  0 drawHexahedra  Draw Tetrahedra. (default = false)  0 drawQuads  Draw Quads. (default = false)  0 drawSize  rendering size for box and topological elements  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/BoxROI/#examples","title":"Examples","text":"<p>Component/Engine/Select/BoxROI.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" gravity=\"0 -9 1\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n    &lt;CollisionPipeline name=\"default0\" verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default1\" response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"SquareGravity\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"true\"/&gt;\n        &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"mecaObj\" scale3d=\"10 10 10\" restScale=\"1\" /&gt;\n        &lt;TriangleSetTopologyContainer src=\"@loader\" name=\"Container\" /&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass name=\"default5\" massDensity=\"0.15\" /&gt;\n        &lt;BoxROI template=\"Vec3\" box=\"2 9.5 -0.5 8 10.5 0.5\" drawBoxes=\"1\" position=\"@mecaObj.rest_position\" name=\"FixedROI\" computeTriangles=\"0\" computeTetrahedra=\"0\" computeEdges=\"0\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default6\" indices=\"@FixedROI.indices\" /&gt;\n        &lt;TriangularFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"60\" /&gt;\n        &lt;TriangularBendingSprings template=\"Vec3\" name=\"FEM-Bend\" stiffness=\"300\" damping=\"1\" /&gt;\n        &lt;TriangleCollisionModel template=\"Vec3\" name=\"default7\" /&gt;\n        &lt;BoxROI template=\"Vec3\" box=\"3 3 0 6 6 1\" orientedBox=\"3 9 0 6 7 0 3 7 0 1   8 3 0 9 5.5 0 8 6 0 1\" drawBoxes=\"1\" position=\"@mecaObj.position\" drawTriangles=\"1\" triangles=\"@Container.triangles\" name=\"boxROI\" /&gt;\n        &lt;Node name=\"visu\"&gt;\n            &lt;OglModel template=\"Vec3\" name=\"Visual\" material=\"Default Diffuse 1 1 0 0 0.6 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n            &lt;IdentityMapping template=\"Vec3,Vec3\" name=\"default8\" input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9 1\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n    root.addObject('CollisionPipeline', name=\"default0\", verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"default1\", response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    SquareGravity = root.addChild('SquareGravity', gravity=\"0 -9.81 0\")\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"mecaObj\", scale3d=\"10 10 10\", restScale=\"1\")\n    SquareGravity.addObject('TriangleSetTopologyContainer', src=\"@loader\", name=\"Container\")\n    SquareGravity.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    SquareGravity.addObject('DiagonalMass', name=\"default5\", massDensity=\"0.15\")\n    SquareGravity.addObject('BoxROI', template=\"Vec3\", box=\"2 9.5 -0.5 8 10.5 0.5\", drawBoxes=\"1\", position=\"@mecaObj.rest_position\", name=\"FixedROI\", computeTriangles=\"0\", computeTetrahedra=\"0\", computeEdges=\"0\")\n    SquareGravity.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default6\", indices=\"@FixedROI.indices\")\n    SquareGravity.addObject('TriangularFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"60\")\n    SquareGravity.addObject('TriangularBendingSprings', template=\"Vec3\", name=\"FEM-Bend\", stiffness=\"300\", damping=\"1\")\n    SquareGravity.addObject('TriangleCollisionModel', template=\"Vec3\", name=\"default7\")\n    SquareGravity.addObject('BoxROI', template=\"Vec3\", box=\"3 3 0 6 6 1\", orientedBox=\"3 9 0 6 7 0 3 7 0 1   8 3 0 9 5.5 0 8 6 0 1\", drawBoxes=\"1\", position=\"@mecaObj.position\", drawTriangles=\"1\", triangles=\"@Container.triangles\", name=\"boxROI\")\n\n    visu = SquareGravity.addChild('visu')\n    visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", material=\"Default Diffuse 1 1 0 0 0.6 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    visu.addObject('IdentityMapping', template=\"Vec3,Vec3\", name=\"default8\", input=\"@..\", output=\"@Visual\")\n</code></pre> <p>Component/Engine/Select/BoxROI_2d.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" gravity=\"0 -9.81 1\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;DefaultVisualManagerLoop/&gt;\n\n    &lt;Node name=\"M1\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"CompressedRowSparseMatrix\" iterations=\"1000\" threshold=\"1e-9\" tolerance=\"1e-9\"/&gt;\n        &lt;MechanicalObject template=\"Vec2\"/&gt;\n        &lt;UniformMass vertexMass=\"1\" /&gt;\n        &lt;RegularGridTopology nx=\"21\" ny=\"5\" nz=\"1\" xmin=\"0\" xmax=\"20\" ymin=\"0\" ymax=\"4\" zmin=\"0\" zmax=\"0\"/&gt;\n        &lt;BoxROI name=\"box\" box=\"-0.1 -0.1 -1e4  0.1 4.1 1e4\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\" /&gt;\n        &lt;MeshSpringForceField stiffness=\"10000\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 1\", dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('DefaultVisualManagerLoop')\n\n    M1 = root.addChild('M1')\n    M1.addObject('EulerImplicitSolver', name=\"odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M1.addObject('CGLinearSolver', template=\"CompressedRowSparseMatrix\", iterations=\"1000\", threshold=\"1e-9\", tolerance=\"1e-9\")\n    M1.addObject('MechanicalObject', template=\"Vec2\")\n    M1.addObject('UniformMass', vertexMass=\"1\")\n    M1.addObject('RegularGridTopology', nx=\"21\", ny=\"5\", nz=\"1\", xmin=\"0\", xmax=\"20\", ymin=\"0\", ymax=\"4\", zmin=\"0\", zmax=\"0\")\n    M1.addObject('BoxROI', name=\"box\", box=\"-0.1 -0.1 -1e4  0.1 4.1 1e4\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    M1.addObject('MeshSpringForceField', stiffness=\"10000\")\n</code></pre> <p>Component/Engine/Select/BoxROI_1d.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" gravity=\"9.81 0 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;DefaultVisualManagerLoop/&gt;\n\n    &lt;Node name=\"M1\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"CompressedRowSparseMatrix\" iterations=\"1000\" threshold=\"1e-9\" tolerance=\"1e-9\"/&gt;\n        &lt;MechanicalObject template=\"Vec1\" showObject=\"true\" showObjectScale=\"10\"/&gt;\n        &lt;UniformMass vertexMass=\"1\" /&gt;\n        &lt;RegularGridTopology nx=\"21\" ny=\"1\" nz=\"1\" xmin=\"0\" xmax=\"20\" ymin=\"0\" ymax=\"0\" zmin=\"0\" zmax=\"0\"/&gt;\n        &lt;BoxROI name=\"box\" box=\"-0.1 -1e4 -1e4  0.1 1e4 1e4\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\" /&gt;\n        &lt;MeshSpringForceField stiffness=\"500\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"9.81 0 0\", dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('DefaultVisualManagerLoop')\n\n    M1 = root.addChild('M1')\n    M1.addObject('EulerImplicitSolver', name=\"odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M1.addObject('CGLinearSolver', template=\"CompressedRowSparseMatrix\", iterations=\"1000\", threshold=\"1e-9\", tolerance=\"1e-9\")\n    M1.addObject('MechanicalObject', template=\"Vec1\", showObject=\"true\", showObjectScale=\"10\")\n    M1.addObject('UniformMass', vertexMass=\"1\")\n    M1.addObject('RegularGridTopology', nx=\"21\", ny=\"1\", nz=\"1\", xmin=\"0\", xmax=\"20\", ymin=\"0\", ymax=\"0\", zmin=\"0\", zmax=\"0\")\n    M1.addObject('BoxROI', name=\"box\", box=\"-0.1 -1e4 -1e4  0.1 1e4 1e4\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    M1.addObject('MeshSpringForceField', stiffness=\"500\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/ComplementaryROI/","title":"ComplementaryROI","text":"<p>Find the points that are NOT in the input sets</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs position  input positions  nbSet  number of sets to complement  0 Outputs indices  indices of the point in the ROI  pointsInROI  points in the ROI  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/IndicesFromValues/","title":"IndicesFromValues","text":"<p>Find the indices of a list of values within a larger set of values</p> <p>Templates:</p> <ul> <li><code>I</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>d</code></li> <li><code>fixed_array&lt;I,2&gt;</code></li> <li><code>fixed_array&lt;I,3&gt;</code></li> <li><code>fixed_array&lt;I,4&gt;</code></li> <li><code>fixed_array&lt;I,8&gt;</code></li> <li><code>i</code></li> <li><code>string</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 recursiveSearch  if set to true, output are indices of the \"global\" data matching with one of the values  0 Inputs values  input values  global  Global values, in which the input values are searched  Outputs indices  Output indices of the given values, searched in global  otherIndices  Output indices of the other values, (NOT the given ones) searched in global  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/MergeROIs/","title":"MergeROIs","text":"<p>Merge a list of ROIs (vector) into a single Data (vector&gt;) <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 nbROIs  size of indices/value vector  0 roiIndices  Vector of ROIs  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/MeshBoundaryROI/","title":"MeshBoundaryROI","text":"<p>Outputs indices of boundary vertices of a triangle/quad mesh</p> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs triangles  input triangles  quads  input quads  inputROI  optional subset of the input mesh  Outputs indices  Index lists of the closing vertices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/MeshBoundaryROI/#examples","title":"Examples","text":"<p>Component/Engine/Select/MeshBoundaryROI.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node   name=\"root\" gravity=\"0 0 0\" dt=\"1\"  &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [MergeMeshes] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [MeshBoundaryROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Setting\"/&gt; &lt;!-- Needed to use components [BackgroundSetting] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;BackgroundSetting color=\"1 1 1\" /&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshOBJLoader name=\"mesh1\" filename=\"mesh/c_open.obj\" triangulate=\"0\"/&gt;\n    &lt;!-- computeTriangleList or computeQuadList must be set to false. Otherwise both are consider, and boundary detection cannot rely on a unique element --&gt;\n    &lt;RegularGridTopology name=\"mesh2\" nx=\"5\" ny=\"5\" nz=\"1\" xmin=\"-10\" xmax=\"10\" ymin=\"-10\" ymax=\"10\" zmin=\"-5\" zmax=\"-5\" computeTriangleList=\"false\"/&gt;\n    &lt;MergeMeshes name=\"mesh\" nbMeshes=\"2\" position1=\"@mesh1.position\" position2=\"@mesh2.position\" triangles1=\"@mesh1.triangles\" triangles2=\"@mesh2.triangles\" quads1=\"@mesh1.quads\" quads2=\"@mesh2.quads\"/&gt;\n\n    &lt;OglModel name=\"visual\"  src=\"@mesh\" color=\"0.5 0.5 1 1\" /&gt;\n\n    &lt;MechanicalObject template=\"Vec3\" position=\"@mesh.position\" /&gt;\n    &lt;MeshBoundaryROI name=\"roi\" triangles=\"@mesh.triangles\" quads=\"@mesh.quads\"/&gt;\n    &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@roi.indices\" /&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 0\", dt=\"1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Setting\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('BackgroundSetting', color=\"1 1 1\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshOBJLoader', name=\"mesh1\", filename=\"mesh/c_open.obj\", triangulate=\"0\")\n    root.addObject('RegularGridTopology', name=\"mesh2\", nx=\"5\", ny=\"5\", nz=\"1\", xmin=\"-10\", xmax=\"10\", ymin=\"-10\", ymax=\"10\", zmin=\"-5\", zmax=\"-5\", computeTriangleList=\"false\")\n    root.addObject('MergeMeshes', name=\"mesh\", nbMeshes=\"2\", position1=\"@mesh1.position\", position2=\"@mesh2.position\", triangles1=\"@mesh1.triangles\", triangles2=\"@mesh2.triangles\", quads1=\"@mesh1.quads\", quads2=\"@mesh2.quads\")\n    root.addObject('OglModel', name=\"visual\", src=\"@mesh\", color=\"0.5 0.5 1 1\")\n    root.addObject('MechanicalObject', template=\"Vec3\", position=\"@mesh.position\")\n    root.addObject('MeshBoundaryROI', name=\"roi\", triangles=\"@mesh.triangles\", quads=\"@mesh.quads\")\n    root.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@roi.indices\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/MeshROI/","title":"MeshROI","text":"<p>Find the primitives (vertex/edge/triangle/tetrahedron) inside a given mesh</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 computeEdges  If true, will compute edge list and index list inside the ROI.  1 computeTriangles  If true, will compute triangle list and index list inside the ROI.  1 computeTetrahedra  If true, will compute tetrahedra list and index list inside the ROI.  1 computeMeshROI  Compute with the mesh (not only bounding box)  1 doUpdate  Update the computation (not only at the init)  0 Inputs position  Rest position coordinates of the degrees of freedom  edges  Edge Topology  triangles  Triangle Topology  tetrahedra  Tetrahedron Topology  ROIposition  ROI position coordinates of the degrees of freedom  ROIedges  ROI Edge Topology  ROItriangles  ROI Triangle Topology  Outputs box  Bounding box defined by xmin,ymin,zmin, xmax,ymax,zmax  indices  Indices of the points contained in the ROI  edgeIndices  Indices of the edges contained in the ROI  triangleIndices  Indices of the triangles contained in the ROI  tetrahedronIndices  Indices of the tetrahedra contained in the ROI  pointsInROI  Points contained in the ROI  edgesInROI  Edges contained in the ROI  trianglesInROI  Triangles contained in the ROI  tetrahedraInROI  Tetrahedra contained in the ROI  pointsOutROI  Points not contained in the ROI  edgesOutROI  Edges not contained in the ROI  trianglesOutROI  Triangles not contained in the ROI  tetrahedraOutROI  Tetrahedra not contained in the ROI  indicesOut  Indices of the points not contained in the ROI  edgeOutIndices  Indices of the edges not contained in the ROI  triangleOutIndices  Indices of the triangles not contained in the ROI  tetrahedronOutIndices  Indices of the tetrahedra not contained in the ROI  Visualization drawOut  Draw the data not contained in the ROI  0 drawMesh  Draw Mesh used for the ROI  0 drawBox  Draw the Bounding box around the mesh used for the ROI  0 drawPoints  Draw Points  0 drawEdges  Draw Edges  0 drawTriangles  Draw Triangles  0 drawTetrahedra  Draw Tetrahedra  0 drawSize  rendering size for mesh and topological elements  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/MeshROI/#examples","title":"Examples","text":"<p>Component/Engine/Select/MeshROI.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 -9 1\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [MeshROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader MeshVTKLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n    &lt;CollisionPipeline /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection  alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node &gt;\n        &lt;EulerImplicitSolver   rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-05\" threshold=\"1e-05\" /&gt;\n        &lt;MeshVTKLoader name=\"loader\" filename=\"mesh/Ossicles.vtu\" /&gt;\n        &lt;MechanicalObject src=\"@loader\"  name=\"mecaObj\" scale3d=\"1 1 1\" restScale=\"1\" /&gt;\n\n\n        &lt;TetrahedronSetTopologyContainer name=\"Container\"  src=\"@loader\"/&gt;\n        &lt;TriangleSetTopologyModifier name=\"ModifierTri\" /&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"ModifierTetra\"/&gt;\n        &lt;TetrahedronSetGeometryAlgorithms  name=\"GeomAlgo\"/&gt;\n        &lt;DiagonalMass  massDensity=\"0.15\" /&gt;\n\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"1e10\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n\n        &lt;Node name=\"MeshROI\"  &gt;\n            &lt;MeshOBJLoader name=\"ROIloader\" filename=\"mesh/malleus.obj\" scale3d=\"1 1 1\" translation=\"0 0 0\" rotation=\"0 0 0\"/&gt;\n            &lt;OglModel /&gt;\n            &lt;MeshROI name=\"ROIm\"  drawMesh=\"0\" drawBox=\"0\" drawEdges=\"0\" drawTriangles=\"1\" drawTetrahedra=\"1\" drawOut=\"0\" computeMeshROI=\"1\"  doUpdate=\"0\"\n               position=\"@../mecaObj.position\" tetrahedra=\"@../loader.tetrahedra\" ROIposition=\"@ROIloader.position\" ROItriangles=\"@ROIloader.triangles\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9 1\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n    root.addObject('CollisionPipeline')\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    root = root.addChild('root')\n    root.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-05\", threshold=\"1e-05\")\n    root.addObject('MeshVTKLoader', name=\"loader\", filename=\"mesh/Ossicles.vtu\")\n    root.addObject('MechanicalObject', src=\"@loader\", name=\"mecaObj\", scale3d=\"1 1 1\", restScale=\"1\")\n    root.addObject('TetrahedronSetTopologyContainer', name=\"Container\", src=\"@loader\")\n    root.addObject('TriangleSetTopologyModifier', name=\"ModifierTri\")\n    root.addObject('TetrahedronSetTopologyModifier', name=\"ModifierTetra\")\n    root.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    root.addObject('DiagonalMass', massDensity=\"0.15\")\n    root.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"1e10\", poissonRatio=\"0.3\", method=\"large\")\n\n    MeshROI = root.addChild('MeshROI')\n    MeshROI.addObject('MeshOBJLoader', name=\"ROIloader\", filename=\"mesh/malleus.obj\", scale3d=\"1 1 1\", translation=\"0 0 0\", rotation=\"0 0 0\")\n    MeshROI.addObject('OglModel')\n    MeshROI.addObject('MeshROI', name=\"ROIm\", drawMesh=\"0\", drawBox=\"0\", drawEdges=\"0\", drawTriangles=\"1\", drawTetrahedra=\"1\", drawOut=\"0\", computeMeshROI=\"1\", doUpdate=\"0\", position=\"@../mecaObj.position\", tetrahedra=\"@../loader.tetrahedra\", ROIposition=\"@ROIloader.position\", ROItriangles=\"@ROIloader.triangles\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/MeshSampler/","title":"MeshSampler","text":"<p>Select uniformly distributed points on a mesh based on Euclidean or Geodesic distance measure</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs number  Sample number  1 position  Input positions.  edges  Input edges for geodesic sampling (Euclidean distances are used if not specified).  maxIter  Max number of Lloyd iterations.  100 Outputs outputIndices  Computed sample indices.  outputPosition  Computed sample coordinates.  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/MeshSampler/#examples","title":"Examples","text":"<p>Component/Engine/Select/MeshSampler.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node   name=\"root\" gravity=\"0 -1 0\" dt=\"0.05\"  &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [MeshSampler] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showWireframe\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"using Geodesic Distances (red)\" &gt;\n        &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/dragon.obj\" handleSeams=\"1\" /&gt;\n        &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"red\" dz=\"0\" /&gt;\n        &lt;MeshTopology name=\"topo\" src=\"@Visual\" /&gt;\n        &lt;MeshSampler name=\"sampler1\" position=\"@topo.position\" edges=\"@topo.edges\"  number=\"10\" maxIter=\"100\" printLog=\"1\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" position=\"@sampler1.outputPosition\" showObject=\"1\" showObjectScale=\"10\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"using Euclidean Distances (blue)\" &gt;\n        &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/dragon.obj\" handleSeams=\"1\" /&gt;\n        &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"blue\" dy=\"20\" /&gt;\n\n        &lt;MeshSampler name=\"sampler2\" position=\"@Visual.position\"  number=\"10\" maxIter=\"100\" printLog=\"1\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" position=\"@sampler2.outputPosition\" showObject=\"1\" showObjectScale=\"10\" /&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -1 0\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showWireframe\")\n    root.addObject('DefaultAnimationLoop')\n\n    using Geodesic Distances (red) = root.addChild('using Geodesic Distances (red)')\n    using Geodesic Distances (red).addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/dragon.obj\", handleSeams=\"1\")\n    using Geodesic Distances (red).addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"red\", dz=\"0\")\n    using Geodesic Distances (red).addObject('MeshTopology', name=\"topo\", src=\"@Visual\")\n    using Geodesic Distances (red).addObject('MeshSampler', name=\"sampler1\", position=\"@topo.position\", edges=\"@topo.edges\", number=\"10\", maxIter=\"100\", printLog=\"1\")\n    using Geodesic Distances (red).addObject('MechanicalObject', template=\"Vec3\", position=\"@sampler1.outputPosition\", showObject=\"1\", showObjectScale=\"10\")\n\n    using Euclidean Distances (blue) = root.addChild('using Euclidean Distances (blue)')\n    using Euclidean Distances (blue).addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/dragon.obj\", handleSeams=\"1\")\n    using Euclidean Distances (blue).addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"blue\", dy=\"20\")\n    using Euclidean Distances (blue).addObject('MeshSampler', name=\"sampler2\", position=\"@Visual.position\", number=\"10\", maxIter=\"100\", printLog=\"1\")\n    using Euclidean Distances (blue).addObject('MechanicalObject', template=\"Vec3\", position=\"@sampler2.outputPosition\", showObject=\"1\", showObjectScale=\"10\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/MeshSplittingEngine/","title":"MeshSplittingEngine","text":"<p>This class breaks a mesh in multiple parts, based on selected vertices or cells.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 position  input vertices  edges  input edges  triangles  input triangles  quads  input quads  tetrahedra  input tetrahedra  hexahedra  input hexahedra  nbInputs  Number of input vectors  0 indexPairs  couples for input vertices: ROI index + index in the ROI  Outputs position1  output vertices(1)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/MeshSplittingEngine/#examples","title":"Examples","text":"<p>Component/Engine/Select/MeshSplittingEngine.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!-- MeshSplittingEngine Example --&gt;\n\n&lt;Node name=\"root\" dt=\"0.1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI MeshSplittingEngine] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping SubsetMultiMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Setting\"/&gt; &lt;!-- Needed to use components [BackgroundSetting] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehavior showVisual\" /&gt;\n    &lt;BackgroundSetting color=\"1 1 1\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n    &lt;MeshTopology name=\"mesh\" src=\"@loader\" /&gt;\n    &lt;BoxROI template=\"Vec3\" box=\"0 -2 0 5 2 5\" src=\"@mesh\" name=\"roi\" drawBoxes=\"true\"/&gt;\n\n    &lt;MeshSplittingEngine name=\"split\" src=\"@loader\" nbInputs=\"1\" tetrahedronIndices1=\"@roi.tetrahedronIndices\" printLog=\"true\"/&gt;\n\n        &lt;Node name=\"rigid\"&gt;\n            &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"50\" threshold=\"1e-15\" tolerance=\"1e-15\" printLog=\"0\" /&gt;\n\n            &lt;MechanicalObject name=\"rigidframe\" template=\"Rigid3\" position=\"1 0 1 0 0 0 1\" /&gt;\n            &lt;UniformMass  /&gt;\n            &lt;FixedProjectiveConstraint indices=\"0\"/&gt;\n\n            &lt;Node name=\"rigidmapped points\"&gt;\n                    &lt;MechanicalObject position=\"@/split.position1\"/&gt;\n                    &lt;RigidMapping globalToLocalCoords=\"1\"/&gt;\n\n                    &lt;Node name=\"free points\"&gt;\n                        &lt;MechanicalObject position=\"@/split.position2\" showObject=\"true\"/&gt;\n                        &lt;UniformMass totalMass=\"1\" /&gt;\n\n                        &lt;Node name=\"multimapped full object\"&gt;\n                            &lt;MeshTopology name=\"mesh\" src=\"@/mesh\" /&gt;\n                            &lt;MechanicalObject src=\"@mesh\" /&gt;\n                            &lt;SubsetMultiMapping template = \"Vec3,Vec3\" input=\"@../../ @../\" output=\"@./\" indexPairs=\"@/split.indexPairs\"/&gt;\n                            &lt;TetrahedronFEMForceField youngModulus=\"100\" poissonRatio=\"0.3\"/&gt;\n\n                            &lt;Node name=\"Visu\"&gt;\n                                &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                                &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"5E-1 5E-1 5E-1 5E-1\" /&gt;\n                                &lt;BarycentricMapping  /&gt;\n                            &lt;/Node&gt;\n                        &lt;/Node&gt;\n\n                    &lt;/Node&gt;\n\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Setting\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehavior showVisual\")\n    root.addObject('BackgroundSetting', color=\"1 1 1\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    root.addObject('MeshTopology', name=\"mesh\", src=\"@loader\")\n    root.addObject('BoxROI', template=\"Vec3\", box=\"0 -2 0 5 2 5\", src=\"@mesh\", name=\"roi\", drawBoxes=\"true\")\n    root.addObject('MeshSplittingEngine', name=\"split\", src=\"@loader\", nbInputs=\"1\", tetrahedronIndices1=\"@roi.tetrahedronIndices\", printLog=\"true\")\n\n    rigid = root.addChild('rigid')\n    rigid.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    rigid.addObject('CGLinearSolver', iterations=\"50\", threshold=\"1e-15\", tolerance=\"1e-15\", printLog=\"0\")\n    rigid.addObject('MechanicalObject', name=\"rigidframe\", template=\"Rigid3\", position=\"1 0 1 0 0 0 1\")\n    rigid.addObject('UniformMass')\n    rigid.addObject('FixedProjectiveConstraint', indices=\"0\")\n\n    rigidmapped points = rigid.addChild('rigidmapped points')\n    rigidmapped points.addObject('MechanicalObject', position=\"@/split.position1\")\n    rigidmapped points.addObject('RigidMapping', globalToLocalCoords=\"1\")\n\n    free points = rigidmapped points.addChild('free points')\n    free points.addObject('MechanicalObject', position=\"@/split.position2\", showObject=\"true\")\n    free points.addObject('UniformMass', totalMass=\"1\")\n\n    multimapped full object = free points.addChild('multimapped full object')\n    multimapped full object.addObject('MeshTopology', name=\"mesh\", src=\"@/mesh\")\n    multimapped full object.addObject('MechanicalObject', src=\"@mesh\")\n    multimapped full object.addObject('SubsetMultiMapping', template=\"Vec3,Vec3\", input=\"@../../ @../\", output=\"@./\", indexPairs=\"@/split.indexPairs\")\n    multimapped full object.addObject('TetrahedronFEMForceField', youngModulus=\"100\", poissonRatio=\"0.3\")\n\n    Visu = multimapped full object.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"5E-1 5E-1 5E-1 5E-1\")\n    Visu.addObject('BarycentricMapping')\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/MeshSubsetEngine/","title":"MeshSubsetEngine","text":"<p>Extract a mesh subset based on selected vertices</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs inputPosition  input vertices  inputEdges  input edges  inputTriangles  input triangles  inputQuads  input quads  indices  Index lists of the selected vertices  Outputs position  Vertices of mesh subset  edges  edges of mesh subset  triangles  Triangles of mesh subset  quads  Quads of mesh subset  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/MeshSubsetEngine/#examples","title":"Examples","text":"<p>Component/Engine/Select/MeshSubsetEngine.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node   name=\"root\" gravity=\"0 -1 0\" dt=\"0.05\"  &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI MeshSubsetEngine] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Setting\"/&gt; &lt;!-- Needed to use components [BackgroundSetting] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;BackgroundSetting color=\"1 1 1\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/dragon.obj\" /&gt;\n    &lt;BoxROI name=\"boxroi\" template=\"Vec3\" position=\"@loader.position\" box=\"-15 0 -5 0 10 5\" drawBoxes=\"1\"/&gt;\n    &lt;MeshSubsetEngine name=\"engine\" inputPosition=\"@loader.position\" inputTriangles=\"@loader.triangles\" inputQuads=\"@loader.quads\" indices=\"@boxroi.indices\"/&gt;\n\n    &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/dragon.obj\" handleSeams=\"1\" /&gt;\n    &lt;OglModel name=\"Original Mesh (red)\" src=\"@meshLoader_0\" color=\"1 0 0 0.4\" dz=\"0\" /&gt;\n    &lt;OglModel name=\"Subset Mesh (blue)\" position=\"@engine.position\" triangles=\"@engine.triangles\" quads=\"@engine.quads\" color=\"0 0.4 1 1\"  /&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -1 0\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Setting\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('BackgroundSetting', color=\"1 1 1\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/dragon.obj\")\n    root.addObject('BoxROI', name=\"boxroi\", template=\"Vec3\", position=\"@loader.position\", box=\"-15 0 -5 0 10 5\", drawBoxes=\"1\")\n    root.addObject('MeshSubsetEngine', name=\"engine\", inputPosition=\"@loader.position\", inputTriangles=\"@loader.triangles\", inputQuads=\"@loader.quads\", indices=\"@boxroi.indices\")\n    root.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/dragon.obj\", handleSeams=\"1\")\n    root.addObject('OglModel', name=\"Original Mesh (red)\", src=\"@meshLoader_0\", color=\"1 0 0 0.4\", dz=\"0\")\n    root.addObject('OglModel', name=\"Subset Mesh (blue)\", position=\"@engine.position\", triangles=\"@engine.triangles\", quads=\"@engine.quads\", color=\"0 0.4 1 1\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/NearestPointROI/","title":"NearestPointROI","text":"<p>Attach given pair of particles, projecting the positions of the second particles to the first ones Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> <li><code>PairStateAccessor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 inputIndices1  Indices of the points to consider on the first model  inputIndices2  Indices of the points to consider on the first model  radius  Radius to search corresponding fixed point  1 useRestPosition  If true will use restPosition only at init  1 Outputs indices1  Indices from the first model associated to a dof from the second model  indices2  Indices from the second model associated to a dof from the first model  edges  List of edge indices  indexPairs  list of couples (parent index + index in the parent)  distances  List of distances between pairs of points  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/25_Engine/20_Select/NearestPointROI/#examples","title":"Examples","text":"<p>Component/Engine/Select/NearestPointROI.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;Node name=\"requiredPlugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.AnimationLoop\"/&gt; &lt;!-- Needed to use components [FreeMotionAnimationLoop] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Correction\"/&gt; &lt;!-- Needed to use components [UncoupledConstraintCorrection] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Model\"/&gt; &lt;!-- Needed to use components [BilateralLagrangianConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Solver\"/&gt; &lt;!-- Needed to use components [GenericConstraintSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI NearestPointROI] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [SubsetMultiMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetTopologyContainer] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;/Node&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showInteractionForceFields\" /&gt;\n\n    &lt;FreeMotionAnimationLoop parallelODESolving=\"true\"/&gt;\n    &lt;GenericConstraintSolver tolerance=\"0.001\" maxIterations=\"1000\" resolutionMethod=\"UnbuildGaussSeidel\" multithreading=\"true\"/&gt;\n\n    &lt;!--\n        This Node shows how NearestPointROI is used to create constraints to link close vertices\n    --&gt;\n    &lt;Node name=\"ObjectsAttachedWithConstraints\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;Node name=\"M1\"&gt;\n            &lt;MechanicalObject name=\"mo\"/&gt;\n            &lt;UniformMass totalMass=\"160\" /&gt;\n            &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"10\" xmin=\"0\" xmax=\"3\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"9\" /&gt;\n            &lt;BoxROI box=\"-0.1 -0.1 -0.1 3.1 3.1 0.1\" name=\"box\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"4000\" poissonRatio=\"0.3\" computeVonMisesStress=\"1\" showVonMisesStressPerElement=\"true\"/&gt;\n            &lt;UncoupledConstraintCorrection useOdeSolverIntegrationFactors=\"0\"/&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"M2\"&gt;\n            &lt;MechanicalObject name=\"mo\"/&gt;\n            &lt;UniformMass totalMass=\"160\" /&gt;\n            &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"10\" xmin=\"0\" xmax=\"3\" ymin=\"0\" ymax=\"3\" zmin=\"9\" zmax=\"18\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"20000\" poissonRatio=\"0.3\" computeVonMisesStress=\"1\" showVonMisesStressPerElement=\"true\"/&gt;\n            &lt;UncoupledConstraintCorrection useOdeSolverIntegrationFactors=\"0\"/&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"M3\"&gt;\n            &lt;MechanicalObject name=\"mo\"/&gt;\n            &lt;UniformMass totalMass=\"160\" /&gt;\n            &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"10\" xmin=\"0\" xmax=\"3\" ymin=\"0\" ymax=\"3\" zmin=\"18\" zmax=\"27\" /&gt;\n            &lt;BoxROI box=\"-0.1 -0.1 26.99 3.1 3.1 27.1\" name=\"box\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"4000\" poissonRatio=\"0.3\" computeVonMisesStress=\"1\" showVonMisesStressPerElement=\"true\"/&gt;\n            &lt;UncoupledConstraintCorrection useOdeSolverIntegrationFactors=\"0\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;NearestPointROI template=\"Vec3\" name=\"np1\" object1=\"@./M1/mo\" object2=\"@./M2/mo\" radius=\"0.1\"/&gt;\n        &lt;NearestPointROI template=\"Vec3\" name=\"np2\" object1=\"@./M2/mo\" object2=\"@./M3/mo\" radius=\"0.1\"/&gt;\n\n        &lt;BilateralLagrangianConstraint template=\"Vec3\" object1=\"@M1\" object2=\"@M2\" first_point=\"@np1.indices1\" second_point=\"@np1.indices2\" /&gt;\n        &lt;BilateralLagrangianConstraint template=\"Vec3\" object1=\"@M2\" object2=\"@M3\" first_point=\"@np2.indices1\" second_point=\"@np2.indices2\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;!--\n        This Node shows how NearestPointROI is used to create SubsetMultiMapping and EdgeSetTopologyContainer.\n    --&gt;\n    &lt;Node name=\"Springs\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;Node name=\"M1\"&gt;\n            &lt;MechanicalObject name=\"mo\"/&gt;\n            &lt;UniformMass totalMass=\"160\" /&gt;\n            &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"10\" xmin=\"4\" xmax=\"7\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"9\" /&gt;\n            &lt;BoxROI box=\"3.9 -0.1 -0.1 7.1 3.1 0.1\" name=\"box\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"4000\" poissonRatio=\"0.3\" computeVonMisesStress=\"1\" showVonMisesStressPerElement=\"true\"/&gt;\n            &lt;UncoupledConstraintCorrection useOdeSolverIntegrationFactors=\"0\"/&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"M2\"&gt; &lt;!-- This object has a higher resolution than the others --&gt;\n            &lt;MechanicalObject name=\"mo\"/&gt;\n            &lt;UniformMass totalMass=\"160\" /&gt;\n            &lt;RegularGridTopology nx=\"8\" ny=\"8\" nz=\"20\" xmin=\"4\" xmax=\"7\" ymin=\"0\" ymax=\"3\" zmin=\"9\" zmax=\"18\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"20000\" poissonRatio=\"0.3\" computeVonMisesStress=\"1\" showVonMisesStressPerElement=\"true\"/&gt;\n            &lt;UncoupledConstraintCorrection useOdeSolverIntegrationFactors=\"0\"/&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"M3\"&gt;\n            &lt;MechanicalObject name=\"mo\"/&gt;\n            &lt;UniformMass totalMass=\"160\" /&gt;\n            &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"10\" xmin=\"4\" xmax=\"7\" ymin=\"0\" ymax=\"3\" zmin=\"18\" zmax=\"27\" /&gt;\n            &lt;BoxROI box=\"3.9 -0.1 26.99 7.1 3.1 27.1\" name=\"box\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"4000\" poissonRatio=\"0.3\" computeVonMisesStress=\"1\" showVonMisesStressPerElement=\"true\"/&gt;\n            &lt;UncoupledConstraintCorrection useOdeSolverIntegrationFactors=\"0\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;!--\n            In the following Nodes, dofs from 2 mechanical objects are fused into a new mechanical object, based on the\n            minimal distance between points.\n            A mapping links the three objects. An edge topology is created.\n            Springs are created based on the topology.\n        --&gt;\n        &lt;Node name=\"merge1\"&gt;\n            &lt;BoxROI name=\"box1\" position=\"@../M1/mo.position\" box=\"3.9 -0.1 8.9 7.1 3.1 9.1\"/&gt;\n            &lt;BoxROI name=\"box2\" position=\"@../M2/mo.position\" box=\"3.9 -0.1 8.9 7.1 3.1 9.1\"/&gt;\n            &lt;NearestPointROI template=\"Vec3\" name=\"np\" object1=\"@../M1/mo\" object2=\"@../M2/mo\" radius=\"1e5\" inputIndices1=\"@box1.indices\" inputIndices2=\"@box2.indices\"/&gt;\n            &lt;MechanicalObject name=\"dofs\"/&gt;\n            &lt;SubsetMultiMapping input=\"@../M1/mo @../M2/mo\" output=\"@dofs\" indexPairs=\"@np.indexPairs\"/&gt;\n            &lt;EdgeSetTopologyContainer edges=\"@np.edges\"/&gt;\n            &lt;MeshSpringForceField stiffness=\"10000\" damping=\"1\" linesStiffness=\"10000\" linesDamping=\"1\" drawMode=\"1\" drawSpringSize=\"1\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"merge2\"&gt;\n            &lt;BoxROI name=\"box1\" position=\"@../M2/mo.position\" box=\"3.9 -0.1 17.9 7.1 3.1 18.1\"/&gt;\n            &lt;BoxROI name=\"box2\" position=\"@../M3/mo.position\" box=\"3.9 -0.1 17.9 7.1 3.1 18.1\"/&gt;\n            &lt;NearestPointROI template=\"Vec3\" name=\"np\" object1=\"@../M2/mo\" object2=\"@../M3/mo\" radius=\"1e5\" inputIndices1=\"@box1.indices\" inputIndices2=\"@box2.indices\"/&gt;\n            &lt;MechanicalObject name=\"dofs\"/&gt;\n            &lt;SubsetMultiMapping input=\"@../M2/mo @../M3/mo\" output=\"@dofs\" indexPairs=\"@np.indexPairs\"/&gt;\n            &lt;EdgeSetTopologyContainer edges=\"@np.edges\"/&gt;\n            &lt;MeshSpringForceField stiffness=\"10000\" damping=\"1\" linesStiffness=\"10000\" linesDamping=\"1\" drawMode=\"1\" drawSpringSize=\"1\"/&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n\n    requiredPlugins = root.addChild('requiredPlugins')\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.AnimationLoop\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Correction\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Model\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Solver\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    requiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showInteractionForceFields\")\n    root.addObject('FreeMotionAnimationLoop', parallelODESolving=\"true\")\n    root.addObject('GenericConstraintSolver', tolerance=\"0.001\", maxIterations=\"1000\", resolutionMethod=\"UnbuildGaussSeidel\", multithreading=\"true\")\n\n    ObjectsAttachedWithConstraints = root.addChild('ObjectsAttachedWithConstraints')\n    ObjectsAttachedWithConstraints.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    ObjectsAttachedWithConstraints.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n\n    M1 = ObjectsAttachedWithConstraints.addChild('M1')\n    M1.addObject('MechanicalObject', name=\"mo\")\n    M1.addObject('UniformMass', totalMass=\"160\")\n    M1.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"10\", xmin=\"0\", xmax=\"3\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"9\")\n    M1.addObject('BoxROI', box=\"-0.1 -0.1 -0.1 3.1 3.1 0.1\", name=\"box\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    M1.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"4000\", poissonRatio=\"0.3\", computeVonMisesStress=\"1\", showVonMisesStressPerElement=\"true\")\n    M1.addObject('UncoupledConstraintCorrection', useOdeSolverIntegrationFactors=\"0\")\n\n    M2 = ObjectsAttachedWithConstraints.addChild('M2')\n    M2.addObject('MechanicalObject', name=\"mo\")\n    M2.addObject('UniformMass', totalMass=\"160\")\n    M2.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"10\", xmin=\"0\", xmax=\"3\", ymin=\"0\", ymax=\"3\", zmin=\"9\", zmax=\"18\")\n    M2.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"20000\", poissonRatio=\"0.3\", computeVonMisesStress=\"1\", showVonMisesStressPerElement=\"true\")\n    M2.addObject('UncoupledConstraintCorrection', useOdeSolverIntegrationFactors=\"0\")\n\n    M3 = ObjectsAttachedWithConstraints.addChild('M3')\n    M3.addObject('MechanicalObject', name=\"mo\")\n    M3.addObject('UniformMass', totalMass=\"160\")\n    M3.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"10\", xmin=\"0\", xmax=\"3\", ymin=\"0\", ymax=\"3\", zmin=\"18\", zmax=\"27\")\n    M3.addObject('BoxROI', box=\"-0.1 -0.1 26.99 3.1 3.1 27.1\", name=\"box\")\n    M3.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    M3.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"4000\", poissonRatio=\"0.3\", computeVonMisesStress=\"1\", showVonMisesStressPerElement=\"true\")\n    M3.addObject('UncoupledConstraintCorrection', useOdeSolverIntegrationFactors=\"0\")\n    ObjectsAttachedWithConstraints.addObject('NearestPointROI', template=\"Vec3\", name=\"np1\", object1=\"@./M1/mo\", object2=\"@./M2/mo\", radius=\"0.1\")\n    ObjectsAttachedWithConstraints.addObject('NearestPointROI', template=\"Vec3\", name=\"np2\", object1=\"@./M2/mo\", object2=\"@./M3/mo\", radius=\"0.1\")\n    ObjectsAttachedWithConstraints.addObject('BilateralLagrangianConstraint', template=\"Vec3\", object1=\"@M1\", object2=\"@M2\", first_point=\"@np1.indices1\", second_point=\"@np1.indices2\")\n    ObjectsAttachedWithConstraints.addObject('BilateralLagrangianConstraint', template=\"Vec3\", object1=\"@M2\", object2=\"@M3\", first_point=\"@np2.indices1\", second_point=\"@np2.indices2\")\n\n    Springs = root.addChild('Springs')\n    Springs.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Springs.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n\n    M1 = Springs.addChild('M1')\n    M1.addObject('MechanicalObject', name=\"mo\")\n    M1.addObject('UniformMass', totalMass=\"160\")\n    M1.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"10\", xmin=\"4\", xmax=\"7\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"9\")\n    M1.addObject('BoxROI', box=\"3.9 -0.1 -0.1 7.1 3.1 0.1\", name=\"box\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    M1.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"4000\", poissonRatio=\"0.3\", computeVonMisesStress=\"1\", showVonMisesStressPerElement=\"true\")\n    M1.addObject('UncoupledConstraintCorrection', useOdeSolverIntegrationFactors=\"0\")\n\n    M2 = Springs.addChild('M2')\n    M2.addObject('MechanicalObject', name=\"mo\")\n    M2.addObject('UniformMass', totalMass=\"160\")\n    M2.addObject('RegularGridTopology', nx=\"8\", ny=\"8\", nz=\"20\", xmin=\"4\", xmax=\"7\", ymin=\"0\", ymax=\"3\", zmin=\"9\", zmax=\"18\")\n    M2.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"20000\", poissonRatio=\"0.3\", computeVonMisesStress=\"1\", showVonMisesStressPerElement=\"true\")\n    M2.addObject('UncoupledConstraintCorrection', useOdeSolverIntegrationFactors=\"0\")\n\n    M3 = Springs.addChild('M3')\n    M3.addObject('MechanicalObject', name=\"mo\")\n    M3.addObject('UniformMass', totalMass=\"160\")\n    M3.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"10\", xmin=\"4\", xmax=\"7\", ymin=\"0\", ymax=\"3\", zmin=\"18\", zmax=\"27\")\n    M3.addObject('BoxROI', box=\"3.9 -0.1 26.99 7.1 3.1 27.1\", name=\"box\")\n    M3.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    M3.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"4000\", poissonRatio=\"0.3\", computeVonMisesStress=\"1\", showVonMisesStressPerElement=\"true\")\n    M3.addObject('UncoupledConstraintCorrection', useOdeSolverIntegrationFactors=\"0\")\n\n    merge1 = Springs.addChild('merge1')\n    merge1.addObject('BoxROI', name=\"box1\", position=\"@../M1/mo.position\", box=\"3.9 -0.1 8.9 7.1 3.1 9.1\")\n    merge1.addObject('BoxROI', name=\"box2\", position=\"@../M2/mo.position\", box=\"3.9 -0.1 8.9 7.1 3.1 9.1\")\n    merge1.addObject('NearestPointROI', template=\"Vec3\", name=\"np\", object1=\"@../M1/mo\", object2=\"@../M2/mo\", radius=\"1e5\", inputIndices1=\"@box1.indices\", inputIndices2=\"@box2.indices\")\n    merge1.addObject('MechanicalObject', name=\"dofs\")\n    merge1.addObject('SubsetMultiMapping', input=\"@../M1/mo @../M2/mo\", output=\"@dofs\", indexPairs=\"@np.indexPairs\")\n    merge1.addObject('EdgeSetTopologyContainer', edges=\"@np.edges\")\n    merge1.addObject('MeshSpringForceField', stiffness=\"10000\", damping=\"1\", linesStiffness=\"10000\", linesDamping=\"1\", drawMode=\"1\", drawSpringSize=\"1\")\n\n    merge2 = Springs.addChild('merge2')\n    merge2.addObject('BoxROI', name=\"box1\", position=\"@../M2/mo.position\", box=\"3.9 -0.1 17.9 7.1 3.1 18.1\")\n    merge2.addObject('BoxROI', name=\"box2\", position=\"@../M3/mo.position\", box=\"3.9 -0.1 17.9 7.1 3.1 18.1\")\n    merge2.addObject('NearestPointROI', template=\"Vec3\", name=\"np\", object1=\"@../M2/mo\", object2=\"@../M3/mo\", radius=\"1e5\", inputIndices1=\"@box1.indices\", inputIndices2=\"@box2.indices\")\n    merge2.addObject('MechanicalObject', name=\"dofs\")\n    merge2.addObject('SubsetMultiMapping', input=\"@../M2/mo @../M3/mo\", output=\"@dofs\", indexPairs=\"@np.indexPairs\")\n    merge2.addObject('EdgeSetTopologyContainer', edges=\"@np.edges\")\n    merge2.addObject('MeshSpringForceField', stiffness=\"10000\", damping=\"1\", linesStiffness=\"10000\", linesDamping=\"1\", drawMode=\"1\", drawSpringSize=\"1\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/PairBoxROI/","title":"PairBoxROI","text":"<p>Find the primitives (vertex/edge/triangle/tetrahedron) inside a given box</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 inclusiveBox  Inclusive box defined by xmin,ymin,zmin, xmax,ymax,zmax  includedBox  Included box defined by xmin,ymin,zmin, xmax,ymax,zmax  meshPosition  Vertices of the mesh loaded  Inputs position  Rest position coordinates of the degrees of freedom  Outputs indices  Indices of the points contained in the ROI  pointsInROI  Points contained in the ROI  Visualization drawInclusiveBox  Draw Inclusive Box  0 drawIncludedBox  Draw Included Box  0 drawPoints  Draw Points  0 drawSize  Draw Size  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/PlaneROI/","title":"PlaneROI","text":"<p>Find the primitives inside a given plane</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 plane  Plane defined by 3 points and a depth distance  computeEdges  If true, will compute edge list and index list inside the ROI.  1 computeTriangles  If true, will compute triangle list and index list inside the ROI.  1 computeTetrahedra  If true, will compute tetrahedra list and index list inside the ROI.  1 Inputs position  Rest position coordinates of the degrees of freedom  edges  Edge Topology  triangles  Triangle Topology  tetrahedra  Tetrahedron Topology  Outputs indices  Indices of the points contained in the ROI  edgeIndices  Indices of the edges contained in the ROI  triangleIndices  Indices of the triangles contained in the ROI  tetrahedronIndices  Indices of the tetrahedra contained in the ROI  pointsInROI  Points contained in the ROI  edgesInROI  Edges contained in the ROI  trianglesInROI  Triangles contained in the ROI  tetrahedraInROI  Tetrahedra contained in the ROI  Visualization drawBoxes  Draw Box(es)  0 drawPoints  Draw Points  0 drawEdges  Draw Edges  0 drawTriangles  Draw Triangles  0 drawTetrahedra  Draw Tetrahedra  0 drawSize  rendering size for box and topological elements  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/PlaneROI/#examples","title":"Examples","text":"<p>Component/Engine/Select/PlaneROI.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [PlaneROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TrianglePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"TT\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/cylinder.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"Volume\" /&gt;\n        &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;PlaneROI plane=\"0.3 0 0 0 0 0 0 0.3 0 0\" drawBoxes=\"1\" position=\"@Volume.rest_position\" computeTriangles=\"0\" computeTetrahedra=\"0\" computeEdges=\"0\" name=\"FixedROI\" /&gt;\n        &lt;DiagonalMass massDensity=\"5\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@FixedROI.indices\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"20\" poissonRatio=\"0.4\" method=\"large\" /&gt;\n        &lt;Node name=\"T\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@../loader\" tags=\" \" /&gt;\n            &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"10\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n            &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"300\" damping=\"1.0\" /&gt;\n            &lt;TrianglePressureForceField normal=\"0 0 1\" dmin=\"0.9\" dmax=\"1.1\" pressure=\"0.4 0 0\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;PlaneROI plane=\"0 0 0.5 0 0.3 1 0 0 1.5 0.2\" position=\"@../Volume.position\" drawTriangles=\"1\" drawTetrahedra=\"1\" triangles=\"@Container.triangles\" tetrahedra=\"@../Container.tetrahedra\" name=\"boxROI\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" material=\"Default Diffuse 1 0 0 1 0.5 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n                &lt;IdentityMapping input=\"@../../Volume\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    TT = root.addChild('TT')\n    TT.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TT.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TT.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/cylinder.msh\")\n    TT.addObject('MechanicalObject', src=\"@loader\", name=\"Volume\")\n    TT.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\")\n    TT.addObject('PlaneROI', plane=\"0.3 0 0 0 0 0 0 0.3 0 0\", drawBoxes=\"1\", position=\"@Volume.rest_position\", computeTriangles=\"0\", computeTetrahedra=\"0\", computeEdges=\"0\", name=\"FixedROI\")\n    TT.addObject('DiagonalMass', massDensity=\"5\")\n    TT.addObject('FixedProjectiveConstraint', indices=\"@FixedROI.indices\")\n    TT.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"20\", poissonRatio=\"0.4\", method=\"large\")\n\n    T = TT.addChild('T')\n    T.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@../loader\", tags=\" \")\n    T.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n    T.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"10\", poissonRatio=\"0.3\", method=\"large\")\n    T.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"300\", damping=\"1.0\")\n    T.addObject('TrianglePressureForceField', normal=\"0 0 1\", dmin=\"0.9\", dmax=\"1.1\", pressure=\"0.4 0 0\")\n    T.addObject('TriangleCollisionModel')\n    T.addObject('PlaneROI', plane=\"0 0 0.5 0 0.3 1 0 0 1.5 0.2\", position=\"@../Volume.position\", drawTriangles=\"1\", drawTetrahedra=\"1\", triangles=\"@Container.triangles\", tetrahedra=\"@../Container.tetrahedra\", name=\"boxROI\")\n\n    Visu = T.addChild('Visu')\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", material=\"Default Diffuse 1 0 0 1 0.5 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visu.addObject('IdentityMapping', input=\"@../../Volume\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/ProximityROI/","title":"ProximityROI","text":"<p>Find the N closest primitives from a given position</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs centers  Center(s) of the sphere(s)  radii  Radius(i) of the sphere(s)  N  Maximum number of points to select  position  Rest position coordinates of the degrees of freedom  Outputs indices  Indices of the points contained in the ROI  pointsInROI  Points contained in the ROI  distance  distance between the points contained in the ROI and the closest center.  indicesOut  Indices of the points not contained in the ROI  Visualization drawSphere  Draw shpere(s)  0 drawPoints  Draw Points  0 drawSize  rendering size for box and topological elements  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/ProximityROI/#examples","title":"Examples","text":"<p>Component/Engine/Select/ProximityROI.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [ProximityROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TrianglePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"TT\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/cylinder.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"Volume\" /&gt;\n        &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;DiagonalMass massDensity=\"5\" /&gt;\n\n        &lt;ProximityROI name=\"fixedROI\"  centers=\"0 0 1 0 0 0 0 0 0.5\"  radii=\"0.1 0.2\"  N=\"40\" drawSphere=\"1\"  drawPoints=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@fixedROI.indices\" /&gt;\n\n        &lt;Node name=\"doNothing\"&gt;\n            &lt;ProximityROI name=\"p1\" centers=\"0 0 1\"  radii=\"0.1 0.2 0.3\"  N=\"40\" /&gt;\n            &lt;ProximityROI name=\"p2\" centers=\"0 0 1 0 0 0\" N=\"40\" /&gt;\n            &lt;ProximityROI name=\"p3\" centers=\"0 0 1 0 0 0\" radii=\"0.1 0.1\" /&gt;\n        &lt;/Node&gt; \n\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"20\" poissonRatio=\"0.4\" method=\"large\" /&gt;\n        &lt;Node name=\"T\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@../loader\" tags=\" \" /&gt;\n            &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"50\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n            &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"300\" damping=\"1.0\" /&gt;\n            &lt;TrianglePressureForceField normal=\"0 -0.2 1\" dmin=\"0.9\" dmax=\"1.1\" pressure=\"0.4 0 0\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" material=\"Default Diffuse 1 0 0 1 0.5 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n                &lt;IdentityMapping input=\"@../../Volume\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    TT = root.addChild('TT')\n    TT.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TT.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TT.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/cylinder.msh\")\n    TT.addObject('MechanicalObject', src=\"@loader\", name=\"Volume\")\n    TT.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\")\n    TT.addObject('DiagonalMass', massDensity=\"5\")\n    TT.addObject('ProximityROI', name=\"fixedROI\", centers=\"0 0 1 0 0 0 0 0 0.5\", radii=\"0.1 0.2\", N=\"40\", drawSphere=\"1\", drawPoints=\"1\")\n    TT.addObject('FixedProjectiveConstraint', indices=\"@fixedROI.indices\")\n\n    doNothing = TT.addChild('doNothing')\n    doNothing.addObject('ProximityROI', name=\"p1\", centers=\"0 0 1\", radii=\"0.1 0.2 0.3\", N=\"40\")\n    doNothing.addObject('ProximityROI', name=\"p2\", centers=\"0 0 1 0 0 0\", N=\"40\")\n    doNothing.addObject('ProximityROI', name=\"p3\", centers=\"0 0 1 0 0 0\", radii=\"0.1 0.1\")\n    TT.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"20\", poissonRatio=\"0.4\", method=\"large\")\n\n    T = TT.addChild('T')\n    T.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@../loader\", tags=\" \")\n    T.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n    T.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"50\", poissonRatio=\"0.3\", method=\"large\")\n    T.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"300\", damping=\"1.0\")\n    T.addObject('TrianglePressureForceField', normal=\"0 -0.2 1\", dmin=\"0.9\", dmax=\"1.1\", pressure=\"0.4 0 0\")\n    T.addObject('TriangleCollisionModel')\n\n    Visu = T.addChild('Visu')\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", material=\"Default Diffuse 1 0 0 1 0.5 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visu.addObject('IdentityMapping', input=\"@../../Volume\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/SelectConnectedLabelsROI/","title":"SelectConnectedLabelsROI","text":"<p>Select a subset of points or cells labeled from different sources, that are connected given a list of connection pairs</p> <p>Templates:</p> <ul> <li><code>B</code></li> <li><code>H</code></li> <li><code>I</code></li> <li><code>i</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs nbLabels  number of label lists  0 connectLabels  Pairs of label to be connected accross different label lists  Outputs indices  selected point/cell indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/SelectLabelROI/","title":"SelectLabelROI","text":"<p>Select a subset of labeled points or cells stored in (vector&gt;) given certain labels <p>Templates:</p> <ul> <li><code>B</code></li> <li><code>H</code></li> <li><code>I</code></li> <li><code>i</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs labels  lists of labels associated to each point/cell  selectLabels  list of selected labels  Outputs indices  selected point/cell indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/SphereROI/","title":"SphereROI","text":"<p>Find the primitives (vertex/edge/triangle/tetrahedron) inside a given sphere Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 computeEdges  If true, will compute edge list and index list inside the ROI.  1 computeTriangles  If true, will compute triangle list and index list inside the ROI.  1 computeQuads  If true, will compute quad list and index list inside the ROI.  1 computeTetrahedra  If true, will compute tetrahedra list and index list inside the ROI.  1 tetrahedronIndices  Indices of the tetrahedra contained in the ROI  Inputs centers  Center(s) of the sphere(s)  radii  Radius(i) of the sphere(s)  direction  Edge direction(if edgeAngle &gt; 0)  normal  Normal direction of the triangles (if triAngle &gt; 0)  edgeAngle  Max angle between the direction of the selected edges and the specified direction  0 triAngle  Max angle between the normal of the selected triangle and the specified normal direction  0 position  Rest position coordinates of the degrees of freedom  edges  Edge Topology  triangles  Triangle Topology  quads  Quads Topology  tetrahedra  Tetrahedron Topology  Outputs indices  Indices of the points contained in the ROI  edgeIndices  Indices of the edges contained in the ROI  triangleIndices  Indices of the triangles contained in the ROI  quadIndices  Indices of the quads contained in the ROI  pointsInROI  Points contained in the ROI  edgesInROI  Edges contained in the ROI  trianglesInROI  Triangles contained in the ROI  quadsInROI  Quads contained in the ROI  tetrahedraInROI  Tetrahedra contained in the ROI  indicesOut  Indices of the points not contained in the ROI  Visualization drawSphere  Draw shpere(s)  0 drawPoints  Draw Points  0 drawEdges  Draw Edges  0 drawTriangles  Draw Triangles  0 drawQuads  Draw Quads  0 drawTetrahedra  Draw Tetrahedra  0 drawSize  rendering size for box and topological elements  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/SphereROI/#examples","title":"Examples","text":"<p>Component/Engine/Select/SphereROI.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [SphereROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TrianglePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"TT\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/cylinder.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"Volume\" /&gt;\n        &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;SphereROI centers=\"0 0 0\" radii=\"0.2\" drawSphere=\"1\" position=\"@Volume.rest_position\" computeTriangles=\"0\" computeTetrahedra=\"0\" computeEdges=\"0\" name=\"FixedROI\" /&gt;\n        &lt;DiagonalMass massDensity=\"5\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@FixedROI.indices\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"20\" poissonRatio=\"0.4\" method=\"large\" /&gt;\n        &lt;Node name=\"T\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@../loader\" tags=\" \" /&gt;\n            &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"50\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n            &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"300\" damping=\"1.0\" /&gt;\n            &lt;TrianglePressureForceField normal=\"0 -0.2 1\" dmin=\"0.9\" dmax=\"1.1\" pressure=\"0.4 0 0\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;SphereROI centers=\"0 0 1\" radii=\"0.2\" drawSphere=\"1\" position=\"@../Volume.position\" drawTriangles=\"1\" drawTetrahedra=\"1\" triangles=\"@Container.triangles\" tetrahedra=\"@../Container.tetrahedra\" name=\"SphereROI\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" material=\"Default Diffuse 1 0 0 1 0.5 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n                &lt;IdentityMapping input=\"@../../Volume\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    TT = root.addChild('TT')\n    TT.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TT.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TT.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/cylinder.msh\")\n    TT.addObject('MechanicalObject', src=\"@loader\", name=\"Volume\")\n    TT.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\")\n    TT.addObject('SphereROI', centers=\"0 0 0\", radii=\"0.2\", drawSphere=\"1\", position=\"@Volume.rest_position\", computeTriangles=\"0\", computeTetrahedra=\"0\", computeEdges=\"0\", name=\"FixedROI\")\n    TT.addObject('DiagonalMass', massDensity=\"5\")\n    TT.addObject('FixedProjectiveConstraint', indices=\"@FixedROI.indices\")\n    TT.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"20\", poissonRatio=\"0.4\", method=\"large\")\n\n    T = TT.addChild('T')\n    T.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@../loader\", tags=\" \")\n    T.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n    T.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"50\", poissonRatio=\"0.3\", method=\"large\")\n    T.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"300\", damping=\"1.0\")\n    T.addObject('TrianglePressureForceField', normal=\"0 -0.2 1\", dmin=\"0.9\", dmax=\"1.1\", pressure=\"0.4 0 0\")\n    T.addObject('TriangleCollisionModel')\n    T.addObject('SphereROI', centers=\"0 0 1\", radii=\"0.2\", drawSphere=\"1\", position=\"@../Volume.position\", drawTriangles=\"1\", drawTetrahedra=\"1\", triangles=\"@Container.triangles\", tetrahedra=\"@../Container.tetrahedra\", name=\"SphereROI\")\n\n    Visu = T.addChild('Visu')\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", material=\"Default Diffuse 1 0 0 1 0.5 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visu.addObject('IdentityMapping', input=\"@../../Volume\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/SubsetTopology/","title":"SubsetTopology","text":"<p>Engine used to create subset topology given box, sphere, plan, ...</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 box  Box defined by xmin,ymin,zmin, xmax,ymax,zmax  centers  Center(s) of the sphere(s)  radii  Radius(i) of the sphere(s)  direction  Edge direction(if edgeAngle &gt; 0)  normal  Normal direction of the triangles (if triAngle &gt; 0)  edgeAngle  Max angle between the direction of the selected edges and the specified direction  0 triAngle  Max angle between the normal of the selected triangle and the specified normal direction  0 rest_position  Rest position coordinates of the degrees of freedom  edges  Edge Topology  triangles  Triangle Topology  quads  Quad Topology  tetrahedra  Tetrahedron Topology  hexahedra  Hexahedron Topology  tetrahedraInput  Indices of the tetrahedra to keep  indices  Indices of the points contained in the ROI  edgeIndices  Indices of the edges contained in the ROI  triangleIndices  Indices of the triangles contained in the ROI  quadIndices  Indices of the quads contained in the ROI  tetrahedronIndices  Indices of the tetrahedra contained in the ROI  hexahedronIndices  Indices of the hexahedra contained in the ROI  pointsInROI  Points contained in the ROI  pointsOutROI  Points out of the ROI  edgesInROI  Edges contained in the ROI  edgesOutROI  Edges out of the ROI  trianglesInROI  Triangles contained in the ROI  trianglesOutROI  Triangles out of the ROI  quadsInROI  Quads contained in the ROI  quadsOutROI  Quads out of the ROI  tetrahedraInROI  Tetrahedra contained in the ROI  tetrahedraOutROI  Tetrahedra out of the ROI  hexahedraInROI  Hexahedra contained in the ROI  hexahedraOutROI  Hexahedra out of the ROI  nbrborder  If localIndices option is activated, will give the number of vertices on the border of the ROI (being the n first points of each output Topology).   0 localIndices  If true, will compute local dof indices in topological elements  0 Visualization drawROI  Draw ROI  0 drawPoints  Draw Points  0 drawEdges  Draw Edges  0 drawTriangle  Draw Triangles  0 drawTetrahedra  Draw Tetrahedra  0 drawSize  rendering size for box and topological elements  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/SubsetTopology/#examples","title":"Examples","text":"<p>Component/Engine/Select/SubsetTopology_subsetbehaviormodel.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"Root\" gravity=\"0 0 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [SubsetTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showWireframe\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"Cylinder\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"default18\" iterations=\"100\" tolerance=\"1e-05\" threshold=\"1e-05\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" name=\"rigid\" position=\"0 0 0 0 0 0 1\" velocity=\"0 0 0 0 0 0\" force=\"0 0 0 0 0 0\" externalForce=\"0 0 0 0 0 0\" derivX=\"0 0 0 0 0 0\" free_position=\"0 0 0 0 0 0 1\" free_velocity=\"0 0 0 0 0 0\" restScale=\"1\" /&gt;\n        &lt;UniformMass name=\"default0\" /&gt;\n        &lt;Node name=\"topology\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" name=\"meshTopology\" /&gt;\n            &lt;SubsetTopology template=\"Vec3\" name=\"Subset\" box=\"-5 -20 -5 5 -10 5\" rest_position=\"@meshTopology.position\" edges=\"@meshTopology.edges\" triangles=\"@meshTopology.triangles\" tetrahedra=\"@meshTopology.tetrahedra\" indices=\"0\" localIndices=\"1\" drawROI=\"0\" /&gt;\n            &lt;OglModel template=\"Vec3\" name=\"visual\" position=\"@meshTopology.position\" useNormals=\"0\" computeTangents=\"1\" vertices=\"@meshTopology.position\" triangles=\"@meshTopology.triangles\" material=\"Default Diffuse 1 0.74902 0.74902 0.74902 1 Ambient 1 0.2 0.2 0.2 1 Specular 0 1 1 1 1 Emissive 0 0 0 0 0 Shininess 0 45\" /&gt;\n            &lt;RigidMapping template=\"Rigid3,Vec3\" name=\"default15\" mapForces=\"0\" mapConstraints=\"0\" mapMasses=\"0\" input=\"@..\" output=\"@visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"InROI\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"mobj\" position=\"@../topology/Subset.pointsInROI\" velocity=\"0 0 0\" force=\"0 0 0\" externalForce=\"0 0 0\" derivX=\"0 0 0\" free_position=\"0 0 0\" free_velocity=\"0 0 0\" restScale=\"1\" /&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"container\" position=\"@../topology/Subset.pointsInROI\" tetrahedra=\"@../topology/Subset.tetrahedraInROI\" /&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"default10\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"default12\" /&gt;\n            &lt;UniformMass name=\"mass\" vertexMass=\"15\" /&gt;\n            &lt;TetrahedronFEMForceField template=\"Vec3\" name=\"FEM\" poissonRatio=\"0.49\" youngModulus=\"1000\" gatherPt=\" \" gatherBsize=\" \" /&gt;\n            &lt;RigidMapping template=\"Rigid3,Vec3\" name=\"rigidMapping\" input=\"@..\" output=\"@.\" /&gt;\n            &lt;Node name=\"Surf\" gravity=\"0 -9.81 0\"&gt;\n                &lt;VisualStyle displayFlags=\"hideWireframe\" /&gt;\n                &lt;TriangleSetTopologyContainer name=\"container\" /&gt;\n                &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" /&gt;\n                &lt;TriangleSetTopologyModifier /&gt;\n                &lt;Tetra2TriangleTopologicalMapping input=\"@../container\" output=\"@container\" /&gt;\n                &lt;TriangleCollisionModel template=\"Vec3\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", dt=\"0.02\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisual showWireframe\")\n    Root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    Root.addObject('BruteForceBroadPhase')\n    Root.addObject('BVHNarrowPhase')\n    Root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    Root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    Cylinder = Root.addChild('Cylinder', gravity=\"0 -9.81 0\")\n    Cylinder.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Cylinder.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"default18\", iterations=\"100\", tolerance=\"1e-05\", threshold=\"1e-05\")\n    Cylinder.addObject('MechanicalObject', template=\"Rigid3\", name=\"rigid\", position=\"0 0 0 0 0 0 1\", velocity=\"0 0 0 0 0 0\", force=\"0 0 0 0 0 0\", externalForce=\"0 0 0 0 0 0\", derivX=\"0 0 0 0 0 0\", free_position=\"0 0 0 0 0 0 1\", free_velocity=\"0 0 0 0 0 0\", restScale=\"1\")\n    Cylinder.addObject('UniformMass', name=\"default0\")\n\n    topology = Cylinder.addChild('topology', gravity=\"0 -9.81 0\")\n    topology.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    topology.addObject('MeshTopology', src=\"@loader\", name=\"meshTopology\")\n    topology.addObject('SubsetTopology', template=\"Vec3\", name=\"Subset\", box=\"-5 -20 -5 5 -10 5\", rest_position=\"@meshTopology.position\", edges=\"@meshTopology.edges\", triangles=\"@meshTopology.triangles\", tetrahedra=\"@meshTopology.tetrahedra\", indices=\"0\", localIndices=\"1\", drawROI=\"0\")\n    topology.addObject('OglModel', template=\"Vec3\", name=\"visual\", position=\"@meshTopology.position\", useNormals=\"0\", computeTangents=\"1\", vertices=\"@meshTopology.position\", triangles=\"@meshTopology.triangles\", material=\"Default Diffuse 1 0.74902 0.74902 0.74902 1 Ambient 1 0.2 0.2 0.2 1 Specular 0 1 1 1 1 Emissive 0 0 0 0 0 Shininess 0 45\")\n    topology.addObject('RigidMapping', template=\"Rigid3,Vec3\", name=\"default15\", mapForces=\"0\", mapConstraints=\"0\", mapMasses=\"0\", input=\"@..\", output=\"@visual\")\n\n    InROI = Cylinder.addChild('InROI', gravity=\"0 -9.81 0\")\n    InROI.addObject('MechanicalObject', template=\"Vec3\", name=\"mobj\", position=\"@../topology/Subset.pointsInROI\", velocity=\"0 0 0\", force=\"0 0 0\", externalForce=\"0 0 0\", derivX=\"0 0 0\", free_position=\"0 0 0\", free_velocity=\"0 0 0\", restScale=\"1\")\n    InROI.addObject('TetrahedronSetTopologyContainer', name=\"container\", position=\"@../topology/Subset.pointsInROI\", tetrahedra=\"@../topology/Subset.tetrahedraInROI\")\n    InROI.addObject('TetrahedronSetTopologyModifier', name=\"default10\")\n    InROI.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"default12\")\n    InROI.addObject('UniformMass', name=\"mass\", vertexMass=\"15\")\n    InROI.addObject('TetrahedronFEMForceField', template=\"Vec3\", name=\"FEM\", poissonRatio=\"0.49\", youngModulus=\"1000\", gatherPt=\" \", gatherBsize=\" \")\n    InROI.addObject('RigidMapping', template=\"Rigid3,Vec3\", name=\"rigidMapping\", input=\"@..\", output=\"@.\")\n\n    Surf = InROI.addChild('Surf', gravity=\"0 -9.81 0\")\n    Surf.addObject('VisualStyle', displayFlags=\"hideWireframe\")\n    Surf.addObject('TriangleSetTopologyContainer', name=\"container\")\n    Surf.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\")\n    Surf.addObject('TriangleSetTopologyModifier')\n    Surf.addObject('Tetra2TriangleTopologicalMapping', input=\"@../container\", output=\"@container\")\n    Surf.addObject('TriangleCollisionModel', template=\"Vec3\")\n</code></pre> <p>Component/Engine/Select/SubsetTopology_withtetrahedra.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.05\" gravity=\"0 -9.81 0\" showBoundingTree=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedPlaneProjectiveConstraint FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [SubsetTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TrianglePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"TT\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/cylinder.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"Volume\" /&gt;\n        &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.5\" /&gt;\n        &lt;FixedPlaneProjectiveConstraint direction=\"0 0 1\" dmin=\"-0.1\" dmax=\"0.1\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"30\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;SubsetTopology template=\"Vec3\" box=\"0 0 0 0.3 0.3 0.5\" tetrahedra=\"@Container.tetrahedra\" drawTetrahedra=\"1\" drawROI=\"1\" rest_position=\"@Volume.position\" name=\"Subset\" /&gt;\n        &lt;Node name=\"T\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@../loader\" tags=\" \" /&gt;\n            &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"100\" damping=\"1.0\" /&gt;\n            &lt;TrianglePressureForceField normal=\"0 0 1\" dmin=\"0.9\" dmax=\"1.1\" pressure=\"0.4 0 0\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" material=\"Default Diffuse 1 0 0 1 0.5 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n                &lt;IdentityMapping input=\"@../../Volume\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", gravity=\"0 -9.81 0\", showBoundingTree=\"0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    TT = root.addChild('TT')\n    TT.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TT.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TT.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/cylinder.msh\")\n    TT.addObject('MechanicalObject', src=\"@loader\", name=\"Volume\")\n    TT.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\")\n    TT.addObject('DiagonalMass', massDensity=\"0.5\")\n    TT.addObject('FixedPlaneProjectiveConstraint', direction=\"0 0 1\", dmin=\"-0.1\", dmax=\"0.1\")\n    TT.addObject('FixedProjectiveConstraint', indices=\"0\")\n    TT.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"30\", poissonRatio=\"0.3\", method=\"large\")\n    TT.addObject('SubsetTopology', template=\"Vec3\", box=\"0 0 0 0.3 0.3 0.5\", tetrahedra=\"@Container.tetrahedra\", drawTetrahedra=\"1\", drawROI=\"1\", rest_position=\"@Volume.position\", name=\"Subset\")\n\n    T = TT.addChild('T')\n    T.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@../loader\", tags=\" \")\n    T.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n    T.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"100\", damping=\"1.0\")\n    T.addObject('TrianglePressureForceField', normal=\"0 0 1\", dmin=\"0.9\", dmax=\"1.1\", pressure=\"0.4 0 0\")\n    T.addObject('TriangleCollisionModel')\n\n    Visu = T.addChild('Visu')\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", material=\"Default Diffuse 1 0 0 1 0.5 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visu.addObject('IdentityMapping', input=\"@../../Volume\", output=\"@Visual\")\n</code></pre> <p>Component/Engine/Select/SubsetTopology.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [SubsetTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline name=\"default0\" verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default1\" response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;MeshGmshLoader name=\"meshLoader\" filename=\"mesh/square3.msh\" /&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-05\" threshold=\"1e-05\"/&gt;\n        &lt;SubsetTopology template=\"Vec3\" box=\"0.3 0 -0.1 0.6 1 0.1\" drawTriangle=\"0\" drawROI=\"1\" src=\"@meshLoader\" rest_position=\"@meshLoader.position\" name=\"Subset\" /&gt;\n        &lt;Node name=\"in\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"mecaObj2\" position=\"@../meshLoader.position\" /&gt;\n            &lt;TriangleSetTopologyContainer name=\"Container\" position=\"@mecaObj2.position\" triangles=\"@../Subset.trianglesInROI\" /&gt;\n            &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;DiagonalMass name=\"default5\" massDensity=\"1.15\" /&gt;\n            &lt;TriangularFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"30\" /&gt;\n            &lt;TriangularBendingSprings template=\"Vec3\" name=\"FEM-Bend\" stiffness=\"300\" damping=\"1\" /&gt;\n            &lt;TriangleCollisionModel template=\"Vec3\" name=\"default7\" /&gt;\n\n            &lt;Node &gt;\n              &lt;OglModel name=\"Visual\" color=\"blue\" /&gt;\n              &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;        &lt;/Node&gt;\n        &lt;Node name=\"Out\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"mecaObj2\" position=\"@../meshLoader.position\" /&gt;\n            &lt;TriangleSetTopologyContainer name=\"Container\" position=\"@mecaObj2.position\" triangles=\"@../Subset.trianglesOutROI\" /&gt;\n            &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;DiagonalMass name=\"default5\" massDensity=\"1.15\" /&gt;\n            &lt;TriangularFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"30\" /&gt;\n            &lt;TriangularBendingSprings template=\"Vec3\" name=\"FEM-Bend\" stiffness=\"300\" damping=\"1\" /&gt;\n            &lt;TriangleCollisionModel template=\"Vec3\" name=\"default7\" /&gt;\n            &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default6\" indices=\"0 1\" /&gt;\n            &lt;Node &gt;\n              &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n              &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n     &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', name=\"default0\", verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"default1\", response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('MeshGmshLoader', name=\"meshLoader\", filename=\"mesh/square3.msh\")\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-05\", threshold=\"1e-05\")\n    SquareGravity.addObject('SubsetTopology', template=\"Vec3\", box=\"0.3 0 -0.1 0.6 1 0.1\", drawTriangle=\"0\", drawROI=\"1\", src=\"@meshLoader\", rest_position=\"@meshLoader.position\", name=\"Subset\")\n\n    in = SquareGravity.addChild('in')\n    in.addObject('MechanicalObject', template=\"Vec3\", name=\"mecaObj2\", position=\"@../meshLoader.position\")\n    in.addObject('TriangleSetTopologyContainer', name=\"Container\", position=\"@mecaObj2.position\", triangles=\"@../Subset.trianglesInROI\")\n    in.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    in.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    in.addObject('DiagonalMass', name=\"default5\", massDensity=\"1.15\")\n    in.addObject('TriangularFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"30\")\n    in.addObject('TriangularBendingSprings', template=\"Vec3\", name=\"FEM-Bend\", stiffness=\"300\", damping=\"1\")\n    in.addObject('TriangleCollisionModel', template=\"Vec3\", name=\"default7\")\n\n    in = in.addChild('in')\n    in.addObject('OglModel', name=\"Visual\", color=\"blue\")\n    in.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    Out = SquareGravity.addChild('Out')\n    Out.addObject('MechanicalObject', template=\"Vec3\", name=\"mecaObj2\", position=\"@../meshLoader.position\")\n    Out.addObject('TriangleSetTopologyContainer', name=\"Container\", position=\"@mecaObj2.position\", triangles=\"@../Subset.trianglesOutROI\")\n    Out.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Out.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Out.addObject('DiagonalMass', name=\"default5\", massDensity=\"1.15\")\n    Out.addObject('TriangularFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"30\")\n    Out.addObject('TriangularBendingSprings', template=\"Vec3\", name=\"FEM-Bend\", stiffness=\"300\", damping=\"1\")\n    Out.addObject('TriangleCollisionModel', template=\"Vec3\", name=\"default7\")\n    Out.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default6\", indices=\"0 1\")\n\n    Out = Out.addChild('Out')\n    Out.addObject('OglModel', name=\"Visual\", color=\"red\")\n    Out.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre> <p>Component/Engine/Select/SubsetTopology_refiningMesh.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"-9.81 0 0\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI SubsetTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [StiffSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"3\" contactDistance=\"2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"meshLoader\" filename=\"mesh/truthcylinder1.msh\" /&gt;\n        &lt;SubsetTopology template=\"Vec3\" box=\"-5 -20 -5 5 -10 5\" drawROI=\"0\" src=\"@meshLoader\" rest_position=\"@meshLoader.position\" name=\"Subset\" localIndices=\"1\" /&gt;\n        &lt;Node name=\"in\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"mecaObj1\" position=\"@../Subset.pointsInROI\" /&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\" position=\"@mecaObj1.position\" tetrahedra=\"@../Subset.tetrahedraInROI\" /&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" drawTetrahedra=\"0\" /&gt;\n            &lt;UniformMass totalMass=\"15\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"300\" poissonRatio=\"0.49\" /&gt;\n            &lt;TriangleCollisionModel template=\"Vec3\" name=\"default7\" /&gt;\n            &lt;BoxConstraint box_roi=\"fixedROI\" box=\"-5 -20 -5 5 -17.5 5\" drawBoxes=\"1\" /&gt;\n            &lt;Node&gt;\n                &lt;TriangleSetTopologyContainer name=\"ContainerTri\" /&gt;\n                &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n                &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n                &lt;Tetra2TriangleTopologicalMapping name=\"Mapping\" input=\"@../Container\" output=\"@ContainerTri\" /&gt;\n                &lt;OglModel name=\"Visual\" color=\"red\" dx=\"60\" /&gt;\n                &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Out\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"mecaObj2\" /&gt;\n            &lt;SparseGridTopology n=\"4 7 4\" position=\"@../Subset.pointsOutROI\" name=\"name\" drawHexahedra=\"0\" /&gt;\n            &lt;UniformMass totalMass=\"15\" /&gt;\n            &lt;HexahedronFEMForceField template=\"Vec3\" name=\"FEM\" youngModulus=\"50\" poissonRatio=\"0.49\" /&gt;\n            &lt;Node name=\"tetra\"&gt;\n                &lt;TetrahedronSetTopologyContainer name=\"Container\" position=\"@../../Subset.pointsOutROI\" tetrahedra=\"@../../Subset.tetrahedraOutROI\" /&gt;\n                &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n                &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" drawTetrahedra=\"0\" /&gt;\n                &lt;MechanicalObject name=\"mecaObj3\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@.\" /&gt;\n                &lt;Node&gt;\n                    &lt;TriangleSetTopologyContainer name=\"ContainerTri\" /&gt;\n                    &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n                    &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n                    &lt;Tetra2TriangleTopologicalMapping name=\"Mapping\" input=\"@../Container\" output=\"@ContainerTri\" /&gt;\n                    &lt;TriangleCollisionModel template=\"Vec3\" name=\"default7\" /&gt;\n                    &lt;OglModel name=\"Visual\" color=\"blue\" dx=\"60\" /&gt;\n                    &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;StiffSpringForceField name=\"Spring\" object1=\"@in/mecaObj1\" object2=\"@Out/tetra/mecaObj3\" tags=\"extraSpring\" spring=\"0 0 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       1 1 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       2 2 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       3 3 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       4 4 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       5 5 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       6 6 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       7 7 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       8 8 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       9 9 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       10 10 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       11 11 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       12 12 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       13 13 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       14 14 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       15 15 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       16 16 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       17 17 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       18 18 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       19 19 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       20 20 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       21 21 10000 0 0&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;       22 22 10000 0 0\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"-9.81 0 0\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"3\", contactDistance=\"2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"meshLoader\", filename=\"mesh/truthcylinder1.msh\")\n    SquareGravity.addObject('SubsetTopology', template=\"Vec3\", box=\"-5 -20 -5 5 -10 5\", drawROI=\"0\", src=\"@meshLoader\", rest_position=\"@meshLoader.position\", name=\"Subset\", localIndices=\"1\")\n\n    in = SquareGravity.addChild('in')\n    in.addObject('MechanicalObject', template=\"Vec3\", name=\"mecaObj1\", position=\"@../Subset.pointsInROI\")\n    in.addObject('TetrahedronSetTopologyContainer', name=\"Container\", position=\"@mecaObj1.position\", tetrahedra=\"@../Subset.tetrahedraInROI\")\n    in.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    in.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\", drawTetrahedra=\"0\")\n    in.addObject('UniformMass', totalMass=\"15\")\n    in.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"300\", poissonRatio=\"0.49\")\n    in.addObject('TriangleCollisionModel', template=\"Vec3\", name=\"default7\")\n    in.addObject('BoxConstraint', box_roi=\"fixedROI\", box=\"-5 -20 -5 5 -17.5 5\", drawBoxes=\"1\")\n\n    in = in.addChild('in')\n    in.addObject('TriangleSetTopologyContainer', name=\"ContainerTri\")\n    in.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    in.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    in.addObject('Tetra2TriangleTopologicalMapping', name=\"Mapping\", input=\"@../Container\", output=\"@ContainerTri\")\n    in.addObject('OglModel', name=\"Visual\", color=\"red\", dx=\"60\")\n    in.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    Out = SquareGravity.addChild('Out')\n    Out.addObject('MechanicalObject', template=\"Vec3\", name=\"mecaObj2\")\n    Out.addObject('SparseGridTopology', n=\"4 7 4\", position=\"@../Subset.pointsOutROI\", name=\"name\", drawHexahedra=\"0\")\n    Out.addObject('UniformMass', totalMass=\"15\")\n    Out.addObject('HexahedronFEMForceField', template=\"Vec3\", name=\"FEM\", youngModulus=\"50\", poissonRatio=\"0.49\")\n\n    tetra = Out.addChild('tetra')\n    tetra.addObject('TetrahedronSetTopologyContainer', name=\"Container\", position=\"@../../Subset.pointsOutROI\", tetrahedra=\"@../../Subset.tetrahedraOutROI\")\n    tetra.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    tetra.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\", drawTetrahedra=\"0\")\n    tetra.addObject('MechanicalObject', name=\"mecaObj3\")\n    tetra.addObject('BarycentricMapping', input=\"@..\", output=\"@.\")\n\n    tetra = tetra.addChild('tetra')\n    tetra.addObject('TriangleSetTopologyContainer', name=\"ContainerTri\")\n    tetra.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    tetra.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    tetra.addObject('Tetra2TriangleTopologicalMapping', name=\"Mapping\", input=\"@../Container\", output=\"@ContainerTri\")\n    tetra.addObject('TriangleCollisionModel', template=\"Vec3\", name=\"default7\")\n    tetra.addObject('OglModel', name=\"Visual\", color=\"blue\", dx=\"60\")\n    tetra.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n    SquareGravity.addObject('StiffSpringForceField', name=\"Spring\", object1=\"@in/mecaObj1\", object2=\"@Out/tetra/mecaObj3\", tags=\"extraSpring\", spring=\"0 0 10000 0 0\n                       1 1 10000 0 0\n                       2 2 10000 0 0\n                       3 3 10000 0 0\n                       4 4 10000 0 0\n                       5 5 10000 0 0\n                       6 6 10000 0 0\n                       7 7 10000 0 0\n                       8 8 10000 0 0\n                       9 9 10000 0 0\n                       10 10 10000 0 0\n                       11 11 10000 0 0\n                       12 12 10000 0 0\n                       13 13 10000 0 0\n                       14 14 10000 0 0\n                       15 15 10000 0 0\n                       16 16 10000 0 0\n                       17 17 10000 0 0\n                       18 18 10000 0 0\n                       19 19 10000 0 0\n                       20 20 10000 0 0\n                       21 21 10000 0 0\n                       22 22 10000 0 0\")\n</code></pre> <p>Component/Engine/Select/SubsetTopology_localIndicesOption.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [SubsetTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels\" /&gt;\n    &lt;CollisionPipeline name=\"default0\" verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default1\" response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"meshLoader\" filename=\"mesh/square3.msh\" /&gt;\n        &lt;SubsetTopology template=\"Vec3\" box=\"0.3 0 -0.1 0.6 1 0.1\" drawROI=\"1\" src=\"@meshLoader\" rest_position=\"@meshLoader.position\" name=\"Subset\" localIndices=\"1\" /&gt;\n        &lt;Node name=\"in\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"mecaObj2\" position=\"@../Subset.pointsInROI\" /&gt;\n            &lt;TriangleSetTopologyContainer name=\"Container\" position=\"@mecaObj2.position\" triangles=\"@../Subset.trianglesInROI\" /&gt;\n            &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;DiagonalMass name=\"default5\" massDensity=\"1.15\" /&gt;\n            &lt;TriangularFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"60\" /&gt;\n            &lt;TriangularBendingSprings template=\"Vec3\" name=\"FEM-Bend\" stiffness=\"300\" damping=\"1\" /&gt;\n            &lt;TriangleCollisionModel template=\"Vec3\" name=\"default7\" /&gt;\n\n            &lt;Node &gt;\n              &lt;OglModel name=\"Visual\" color=\"blue\" /&gt;\n              &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;        &lt;/Node&gt;\n        &lt;Node name=\"Out\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"mecaObj2\" position=\"@../Subset.pointsOutROI\" /&gt;\n            &lt;TriangleSetTopologyContainer name=\"Container\" position=\"@mecaObj2.position\" triangles=\"@../Subset.trianglesOutROI\" /&gt;\n            &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;DiagonalMass name=\"default5\" massDensity=\"1.15\" /&gt;\n            &lt;TriangleCollisionModel template=\"Vec3\" name=\"default7\" /&gt;\n            &lt;TriangularFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"60\" /&gt;\n            &lt;TriangularBendingSprings template=\"Vec3\" name=\"FEM-Bend\" stiffness=\"300\" damping=\"1\" /&gt;\n            &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default6\" indices=\"0 1\" /&gt;\n\n            &lt;Node &gt;\n              &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n              &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels\")\n    root.addObject('CollisionPipeline', name=\"default0\", verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"default1\", response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"meshLoader\", filename=\"mesh/square3.msh\")\n    SquareGravity.addObject('SubsetTopology', template=\"Vec3\", box=\"0.3 0 -0.1 0.6 1 0.1\", drawROI=\"1\", src=\"@meshLoader\", rest_position=\"@meshLoader.position\", name=\"Subset\", localIndices=\"1\")\n\n    in = SquareGravity.addChild('in')\n    in.addObject('MechanicalObject', template=\"Vec3\", name=\"mecaObj2\", position=\"@../Subset.pointsInROI\")\n    in.addObject('TriangleSetTopologyContainer', name=\"Container\", position=\"@mecaObj2.position\", triangles=\"@../Subset.trianglesInROI\")\n    in.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    in.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    in.addObject('DiagonalMass', name=\"default5\", massDensity=\"1.15\")\n    in.addObject('TriangularFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"60\")\n    in.addObject('TriangularBendingSprings', template=\"Vec3\", name=\"FEM-Bend\", stiffness=\"300\", damping=\"1\")\n    in.addObject('TriangleCollisionModel', template=\"Vec3\", name=\"default7\")\n\n    in = in.addChild('in')\n    in.addObject('OglModel', name=\"Visual\", color=\"blue\")\n    in.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    Out = SquareGravity.addChild('Out')\n    Out.addObject('MechanicalObject', template=\"Vec3\", name=\"mecaObj2\", position=\"@../Subset.pointsOutROI\")\n    Out.addObject('TriangleSetTopologyContainer', name=\"Container\", position=\"@mecaObj2.position\", triangles=\"@../Subset.trianglesOutROI\")\n    Out.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Out.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Out.addObject('DiagonalMass', name=\"default5\", massDensity=\"1.15\")\n    Out.addObject('TriangleCollisionModel', template=\"Vec3\", name=\"default7\")\n    Out.addObject('TriangularFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"60\")\n    Out.addObject('TriangularBendingSprings', template=\"Vec3\", name=\"FEM-Bend\", stiffness=\"300\", damping=\"1\")\n    Out.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default6\", indices=\"0 1\")\n\n    Out = Out.addChild('Out')\n    Out.addObject('OglModel', name=\"Visual\", color=\"red\")\n    Out.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/25_Engine/20_Select/ValuesFromIndices/","title":"ValuesFromIndices","text":"<p>Find the values given a list of indices</p> <p>Templates:</p> <ul> <li><code>I</code></li> <li><code>RigidCoord2d</code></li> <li><code>RigidCoord3d</code></li> <li><code>RigidDeriv2d</code></li> <li><code>RigidDeriv3d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec4d</code></li> <li><code>Vec6d</code></li> <li><code>d</code></li> <li><code>fixed_array&lt;I,2&gt;</code></li> <li><code>fixed_array&lt;I,3&gt;</code></li> <li><code>fixed_array&lt;I,4&gt;</code></li> <li><code>fixed_array&lt;I,8&gt;</code></li> <li><code>i</code></li> <li><code>string</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 outStr  Output values corresponding to the indices, converted as a string  Inputs in  input values  indices  Indices of the values  Outputs out  Output values corresponding to the indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/ValuesFromPositions/","title":"ValuesFromPositions","text":"<p>Assign values to primitives (vertex/edge/triangle/tetrahedron) based on a linear interpolation of values along a direction</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Select</code></p> <p>namespace: <code>sofa::component::engine::select</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 fieldType  field type of output elements  Inputs inputValues  Input values  direction  Direction along which the values are interpolated  0 1 0 position  Rest position coordinates of the degrees of freedom  edges  Edge Topology  triangles  Triangle Topology  tetrahedra  Tetrahedron Topology  Outputs values  Values of the points contained in the ROI  edgeValues  Values of the edges contained in the ROI  triangleValues  Values of the triangles contained in the ROI  tetrahedronValues  Values of the tetrahedra contained in the ROI  pointVectors  Vectors of the points contained in the ROI  edgeVectors  Vectors of the edges contained in the ROI  triangleVectors  Vectors of the triangles contained in the ROI  tetrahedronVectors  Vectors of the tetrahedra contained in the ROI  Visualization drawVectors  draw vectors line  0 drawVectorLength  vector length visualisation.   10 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/20_Select/ValuesFromPositions/#examples","title":"Examples","text":"<p>Component/Engine/Select/ValuesFromPositions_vectorField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"Root\" gravity=\"0 0 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI ValuesFromPositions] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"Cube\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"0\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver\" iterations=\"25\" tolerance=\"1e-09\" threshold=\"1e-09\" /&gt;\n        &lt;RegularGridTopology name=\"grid\" n=\"6 6 6\" min=\"-10 -10 -10\" max=\"10 10 10\" p0=\"-10 -10 -10\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"mecaObj\" src=\"@grid\"/&gt;\n        &lt;UniformMass name=\"default25\" vertexMass=\"0.25\" /&gt;\n        &lt;TetrahedronFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.4\" youngModulus=\"1000\" computeGlobalMatrix=\"0\" /&gt;\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-11 -11 -11 11 -9 11\" indices=\"0\" drawSize=\"0\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default27\" indices=\"@box_roi.indices\" drawSize=\"0\" /&gt;\n        &lt;Node name=\"Tetra\" gravity=\"0 -9.81 0\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\" /&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;TriangleCollisionModel template=\"Vec3\" name=\"default30\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../grid\" output=\"@Container\" /&gt;\n            &lt;Node name=\"interpol\" gravity=\"0 -9.81 0\"&gt;\n                &lt;ValuesFromPositions template=\"Vec3\" direction=\"1 1 0\" position=\"@../../mecaObj.position\" fieldType=\"Vector\" drawVectors=\"1\" drawVectorLength=\"5\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", dt=\"0.02\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\")\n    Root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    Root.addObject('BruteForceBroadPhase')\n    Root.addObject('BVHNarrowPhase')\n    Root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    Root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    Cube = Root.addChild('Cube', gravity=\"0 -9.81 0\")\n    Cube.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Cube.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver\", iterations=\"25\", tolerance=\"1e-09\", threshold=\"1e-09\")\n    Cube.addObject('RegularGridTopology', name=\"grid\", n=\"6 6 6\", min=\"-10 -10 -10\", max=\"10 10 10\", p0=\"-10 -10 -10\")\n    Cube.addObject('MechanicalObject', template=\"Vec3\", name=\"mecaObj\", src=\"@grid\")\n    Cube.addObject('UniformMass', name=\"default25\", vertexMass=\"0.25\")\n    Cube.addObject('TetrahedronFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.4\", youngModulus=\"1000\", computeGlobalMatrix=\"0\")\n    Cube.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-11 -11 -11 11 -9 11\", indices=\"0\", drawSize=\"0\")\n    Cube.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default27\", indices=\"@box_roi.indices\", drawSize=\"0\")\n\n    Tetra = Cube.addChild('Tetra', gravity=\"0 -9.81 0\")\n    Tetra.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    Tetra.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Tetra.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Tetra.addObject('TriangleCollisionModel', template=\"Vec3\", name=\"default30\")\n    Tetra.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../grid\", output=\"@Container\")\n\n    interpol = Tetra.addChild('interpol', gravity=\"0 -9.81 0\")\n    interpol.addObject('ValuesFromPositions', template=\"Vec3\", direction=\"1 1 0\", position=\"@../../mecaObj.position\", fieldType=\"Vector\", drawVectors=\"1\", drawVectorLength=\"5\")\n</code></pre>"},{"location":"30_Components/25_Engine/30_Transform/27_TransformEngine/","title":"TransformEngine","text":"<p>This component belongs to the category of Engines. The TransformEngine transforms the positions of one DataFields into new positions after applying a transformation. This transformation can be either: translation, rotation or scale.</p>"},{"location":"30_Components/25_Engine/30_Transform/27_TransformEngine/#input-data","title":"Input Data","text":"<ul> <li>input_position: input array of 3d points Output Data</li> </ul> <ul> <li>output_position: output array of 3d points</li> </ul>"},{"location":"30_Components/25_Engine/30_Transform/27_TransformEngine/#additional-parameter","title":"Additional Parameter","text":"<ul> <li>translation: Vector3 defining the translation to be applied</li> <li>rotation: Vector3 defining the rotation to be applied</li> <li>scale: Vector3 describing the scale to be applied</li> </ul>"},{"location":"30_Components/25_Engine/30_Transform/27_TransformEngine/#examples","title":"Examples","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;TransformEngine name=\"translationEngine\" template=\"Vec3d\" translation=\"10 0 0\" input_position=\"@meshLoader.position\" /&gt;\n&lt;MechanicalObject name=\"transform\" template=\"Vec3d\" position=\"@translationEngine.output_position\" /&gt;\n</code></pre> <p>or in python:</p> <pre><code>node.addObject(\"TransformEngine\", name=\"translationEngine\", template=\"Vec3d\", translation=\"10 0 0\", input_position=\"@meshLoader.position\")\nnode.addObject(\"MechanicalObject\", name=\"transform\", template=\"Vec3d\", position=\"@translationEngine.output_position\")\n</code></pre> <p>An example scene involving the TransformEngine engine is available in examples/Component/Engine/Transform/TransformEngine.scn</p> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs input_position  input array of 3d points  translation  translation vector   0 0 0 rotation  rotation vector   0 0 0 quaternion  rotation quaternion   0 0 0 1 scale  scale factor  1 1 1 inverse  true to apply inverse transformation  0 Outputs output_position  output array of 3d points  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/27_TransformEngine/#examples_1","title":"Examples","text":"<p>Component/Engine/Transform/TransformEngine.scn</p> XMLPython <pre><code>&lt;Node name=\"Root\" gravity=\"0 0 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Transform\"/&gt; &lt;!-- Needed to use components [TransformEngine] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;!-- Using the Transform Engine on the independent MechanicalState --&gt;\n    &lt;Node name=\"TransformedState\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"default12\" rayleighStiffness=\"0.01\"  rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"default13\" iterations=\"25\" threshold=\"1e-08\" tolerance=\"1e-05\"/&gt;\n        &lt;SparseGridTopology name=\"default14\" fileTopology=\"mesh/doubleBall.obj\" n=\"6 6 6\" /&gt;\n        &lt;TransformEngine name=\"transform\" template=\"Vec3\" translation=\"10 0 0\" rotation=\"0 0 90\" scale=\"0.5 1 2\" input_position=\"@[-1].position\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"dofTransformed\" position=\"@[-1].output_position\" restScale=\"1\" /&gt;\n        &lt;UniformMass name=\"default16\" totalMass=\"5\" /&gt;\n        &lt;HexahedronFEMForceField template=\"Vec3\" name=\"FEM\" method=\"polar\" poissonRatio=\"0.3\" youngModulus=\"5000\" /&gt;\n        &lt;Node name=\"VisualNode\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/doubleBall.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel template=\"Vec3\" name=\"Visual\" src=\"@meshLoader_0\" texturename=\"textures/board.png\" material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n            &lt;BarycentricMapping template=\"Vec3,Vec3\" name=\"default17\" input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"CollisionNode\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/doubleBall.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" name=\"default18\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"default19\" restScale=\"1\" /&gt;\n            &lt;TriangleCollisionModel name=\"default20\" /&gt;\n            &lt;LineCollisionModel name=\"default21\" /&gt;\n            &lt;PointCollisionModel name=\"default22\" /&gt;\n            &lt;BarycentricMapping template=\"Vec3,Vec3\" name=\"default23\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"VisualModel\"&gt;\n        &lt;MeshOBJLoader name=\"ObjLoader\" filename=\"mesh/floor3.obj\" /&gt;\n        &lt;TransformEngine name=\"transform\" template=\"Vec3\" translation=\"5 0 0\" rotation=\"0 0 -90\" scale=\"0.1 0.3 0.1\" input_position=\"@[-1].position\" /&gt;\n        &lt;OglModel name=\"VisualModel\" src=\"@./ObjLoader\" position=\"@[-1].output_position\" texturename=\"textures/floor.bmp\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", dt=\"0.02\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Transform\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisual\")\n    Root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    Root.addObject('BruteForceBroadPhase')\n    Root.addObject('BVHNarrowPhase')\n    Root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    Root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    TransformedState = Root.addChild('TransformedState', gravity=\"0 -9.81 0\")\n    TransformedState.addObject('EulerImplicitSolver', name=\"default12\", rayleighStiffness=\"0.01\", rayleighMass=\"0.1\")\n    TransformedState.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"default13\", iterations=\"25\", threshold=\"1e-08\", tolerance=\"1e-05\")\n    TransformedState.addObject('SparseGridTopology', name=\"default14\", fileTopology=\"mesh/doubleBall.obj\", n=\"6 6 6\")\n    TransformedState.addObject('TransformEngine', name=\"transform\", template=\"Vec3\", translation=\"10 0 0\", rotation=\"0 0 90\", scale=\"0.5 1 2\", input_position=\"@[-1].position\")\n    TransformedState.addObject('MechanicalObject', template=\"Vec3\", name=\"dofTransformed\", position=\"@[-1].output_position\", restScale=\"1\")\n    TransformedState.addObject('UniformMass', name=\"default16\", totalMass=\"5\")\n    TransformedState.addObject('HexahedronFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"polar\", poissonRatio=\"0.3\", youngModulus=\"5000\")\n\n    VisualNode = TransformedState.addChild('VisualNode', gravity=\"0 -9.81 0\")\n    VisualNode.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/doubleBall.obj\", handleSeams=\"1\")\n    VisualNode.addObject('OglModel', template=\"Vec3\", name=\"Visual\", src=\"@meshLoader_0\", texturename=\"textures/board.png\", material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    VisualNode.addObject('BarycentricMapping', template=\"Vec3,Vec3\", name=\"default17\", input=\"@..\", output=\"@Visual\")\n\n    CollisionNode = TransformedState.addChild('CollisionNode', gravity=\"0 -9.81 0\")\n    CollisionNode.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/doubleBall.obj\")\n    CollisionNode.addObject('MeshTopology', src=\"@loader\", name=\"default18\")\n    CollisionNode.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"default19\", restScale=\"1\")\n    CollisionNode.addObject('TriangleCollisionModel', name=\"default20\")\n    CollisionNode.addObject('LineCollisionModel', name=\"default21\")\n    CollisionNode.addObject('PointCollisionModel', name=\"default22\")\n    CollisionNode.addObject('BarycentricMapping', template=\"Vec3,Vec3\", name=\"default23\")\n\n    VisualModel = Root.addChild('VisualModel')\n    VisualModel.addObject('MeshOBJLoader', name=\"ObjLoader\", filename=\"mesh/floor3.obj\")\n    VisualModel.addObject('TransformEngine', name=\"transform\", template=\"Vec3\", translation=\"5 0 0\", rotation=\"0 0 -90\", scale=\"0.1 0.3 0.1\", input_position=\"@[-1].position\")\n    VisualModel.addObject('OglModel', name=\"VisualModel\", src=\"@./ObjLoader\", position=\"@[-1].output_position\", texturename=\"textures/floor.bmp\")\n</code></pre>"},{"location":"30_Components/25_Engine/30_Transform/28_TransformPosition/","title":"TransformPosition","text":"<p>This component belongs to the category of Engines. The TransformPosition engine transforms the positions of one DataFields into new positions after applying a transformation. This transformation can be either:</p> <ul> <li>Projection on a plane (plane defined by an origin and a normal vector)</li> <li>Translation, rotation, scale and some combinations of translation rotation and scale</li> </ul>"},{"location":"30_Components/25_Engine/30_Transform/28_TransformPosition/#input-data","title":"Input Data","text":"<ul> <li>input_position: input array of 3d points.</li> </ul>"},{"location":"30_Components/25_Engine/30_Transform/28_TransformPosition/#output-data","title":"Output Data","text":"<ul> <li>output_position: output array of 3d points projected on a plane.</li> </ul>"},{"location":"30_Components/25_Engine/30_Transform/28_TransformPosition/#additional-parameters","title":"Additional parameters","text":"<ul> <li>method: transformation method either translation or scale or rotation or projectOnPlane.</li> </ul>"},{"location":"30_Components/25_Engine/30_Transform/28_TransformPosition/#examples","title":"Examples","text":"<p>An example scene involving the TransformPosition engine is available in examples/Component/Engine/Transform/TransformPosition.scn</p> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 method  transformation method either translation or scale or rotation or random or projectOnPlane  seedValue  the seed value for the random generator  0 maxRandomDisplacement  the maximum displacement around initial position for the random transformation  1 filename  filename of an affine matrix. Supported extensions are: .trm, .tfm, .xfm and .txt(read as .xfm)  Inputs origin  A 3d point on the plane/Center of the scale  input_position  input array of 3d points  normal  plane normal  translation  translation vector   rotation  rotation vector   scale  scale factor  1 1 1 matrix  4x4 affine matrix  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] fixedIndices  Indices of the entries that are not transformed  Outputs output_position  output array of 3d points projected on a plane  Visualization drawInput  Draw input points  0 drawOutput  Draw output points  0 pointSize  Point size  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/28_TransformPosition/#examples_1","title":"Examples","text":"<p>Component/Engine/Transform/TransformPosition.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 0 -9.81\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Transform\"/&gt; &lt;!-- Needed to use components [TransformPosition] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [PlaneForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"3\" contactDistance=\"2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"Object\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"Implicit Euler Solver\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver  name=\"Conjugate Gradient\" tolerance=\"1e-05\" threshold=\"1e-05\" iterations=\"5\"/&gt;\n        &lt;SparseGridTopology name=\"grid\" fileTopology=\"mesh/dragon.obj\" n=\"7 6 5\" /&gt;\n        &lt;TransformPosition name=\"transfo\" method=\"fromFile\" filename=\"transfo.tfm\" input_position=\"@grid.position\"/&gt;\n        &lt;MechanicalObject  name=\"Particles\" restScale=\"1\" position=\"@transfo.output_position\" /&gt;\n        &lt;UniformMass  name=\"Mass\" /&gt;\n        &lt;PlaneForceField  name=\"Plane\" normal=\"0 0 1\" d=\"-10\" /&gt;\n        &lt;HexahedronFEMForceField  name=\"FEM\" youngModulus=\"200\" poissonRatio=\"0.45\"/&gt;\n        &lt;Node name=\"VisualNode\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/dragon.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Objective\" src=\"@meshLoader_0\" /&gt;\n            &lt;BarycentricMapping  name=\"Visual Mapping\" output=\"@Objective\"  /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Floor\"&gt;\n        &lt;MeshOBJLoader name=\"ObjLoader\" filename=\"mesh/floor.obj\" /&gt;\n        &lt;OglModel name=\"VisualModel\" src=\"@./ObjLoader\" translation=\"0 0 -9\" rotation=\"90 0 0\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 -9.81\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Transform\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels\")\n    root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"3\", contactDistance=\"2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    Object = root.addChild('Object', gravity=\"0 -9.81 0\")\n    Object.addObject('EulerImplicitSolver', name=\"Implicit Euler Solver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Object.addObject('CGLinearSolver', name=\"Conjugate Gradient\", tolerance=\"1e-05\", threshold=\"1e-05\", iterations=\"5\")\n    Object.addObject('SparseGridTopology', name=\"grid\", fileTopology=\"mesh/dragon.obj\", n=\"7 6 5\")\n    Object.addObject('TransformPosition', name=\"transfo\", method=\"fromFile\", filename=\"transfo.tfm\", input_position=\"@grid.position\")\n    Object.addObject('MechanicalObject', name=\"Particles\", restScale=\"1\", position=\"@transfo.output_position\")\n    Object.addObject('UniformMass', name=\"Mass\")\n    Object.addObject('PlaneForceField', name=\"Plane\", normal=\"0 0 1\", d=\"-10\")\n    Object.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"200\", poissonRatio=\"0.45\")\n\n    VisualNode = Object.addChild('VisualNode', gravity=\"0 -9.81 0\")\n    VisualNode.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/dragon.obj\", handleSeams=\"1\")\n    VisualNode.addObject('OglModel', name=\"Objective\", src=\"@meshLoader_0\")\n    VisualNode.addObject('BarycentricMapping', name=\"Visual Mapping\", output=\"@Objective\")\n\n    Floor = root.addChild('Floor')\n    Floor.addObject('MeshOBJLoader', name=\"ObjLoader\", filename=\"mesh/floor.obj\")\n    Floor.addObject('OglModel', name=\"VisualModel\", src=\"@./ObjLoader\", translation=\"0 0 -9\", rotation=\"90 0 0\")\n</code></pre>"},{"location":"30_Components/25_Engine/30_Transform/DifferenceEngine/","title":"DifferenceEngine","text":"<p>Computing the difference between two vector of dofs</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs input  input vector  substractor  vector to substract to input  Outputs output  output vector = input-substractor  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/DilateEngine/","title":"DilateEngine","text":"<p>Dilates a given mesh by moving vertices along their normal.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs input_position  input array of 3d points  triangles  input mesh triangles  quads  input mesh quads  distance  distance to move the points (positive for dilatation, negative for erosion)  0 minThickness  minimal thickness to enforce  0 Outputs output_position  output array of 3d points  normal  point normals  thickness  point thickness  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/DisplacementMatrixEngine/","title":"DisplacementMatrixEngine","text":"<p>Converts a vector of Rigid to a vector of displacement matrices.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DisplacementTransformEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs x0  Rest position  x  Current position  scales  Scale transformation added to the rigid transformation  Outputs displaceMats  Displacement transforms with respect to original rigid positions  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/DisplacementMatrixEngine/#examples","title":"Examples","text":"<p>Component/Engine/Transform/DisplacementMatrixEngine.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node    name=\"root\"  dt=\"0.01\" animate=\"1\" &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [LinearMovementProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Transform\"/&gt; &lt;!-- Needed to use components [DisplacementTransformEngine] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Forward\"/&gt; &lt;!-- Needed to use components [EulerExplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [OglFloat4Attribute OglInt4Attribute OglMatrix4VectorVariable OglShader] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;EulerExplicitSolver name=\"odesolver\"  /&gt;\n    &lt;Node    name=\"DeformableObject\"   &gt;\n        &lt;MechanicalObject template=\"Rigid3\" name=\"Bones\"  position=\"0 -2 0 0 0 0 1 0 2 0 0 0 0 1\" rest_position=\"0 -2 0 0 0 0 1 0 2 0 0 0 0 1\"  showObject=\"1\"  showObjectScale=\"0.5\" /&gt;\n        &lt;LinearMovementProjectiveConstraint template=\"Rigid3\" name=\"BoneTrajectories\"  indices=\"1\"  keyTimes=\"0 1 2 3 4 5 6 7 8 9 10 11 12 20\"  movements=\" 0 0 0 0 0 0 0 0 0 1.5708 0 0 0 0 0 0 0 0 0 0 0 0 1.5708 0 0 0 0 0 0 0 0 0 0 0 0 1.5708 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" /&gt;\n        &lt;Node    name=\"StaticMesh\" &gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"2\"  position=\"-1 -2 0 1 -2 0 -1 0 0 1 0 0 -1 2 0 1 2 0\"    /&gt;\n            &lt;MeshTopology   triangles=\"0 1 2  2 1 3  2 3 4  4 3 5 \" /&gt;\n            &lt;Node    name=\"GPUMesh\"  &gt;\n               &lt;OglModel template=\"Vec3\"  /&gt;\n                &lt;IdentityMapping template=\"Vec3,Vec3\" mapForces=\"0\"  mapConstraints=\"0\"  mapMasses=\"0\"   /&gt;\n                &lt;DisplacementTransformEngine name=\"BoneDisplacements\" template=\"Rigid3,Mat4x4\"  x0=\"@../../Bones.rest_position\"  x=\"@../../Bones.position\"   /&gt;\n                &lt;OglShader name=\"SkinningShader\" fileFragmentShaders=\"['shaders/linearBlendSkinning.frag']\" fileVertexShaders=\"['shaders/linearBlendSkinning.vert']\"/&gt;\n                &lt;OglMatrix4VectorVariable  id=\"boneMatrix\"  value=\"@BoneDisplacements.displacements\"  transpose=\"1\" /&gt;\n                &lt;OglInt4Attribute   id=\"indices\"  value=\"0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 0\" /&gt;\n                &lt;OglFloat4Attribute id=\"weights\"  value=\"1 0 0 0 1 0 0 0 0.5 0.5 0 0 0.5 0.5 0 0 1 0 0 0 1 0 0 0\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", animate=\"1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Transform\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Forward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('EulerExplicitSolver', name=\"odesolver\")\n\n    DeformableObject = root.addChild('DeformableObject')\n    DeformableObject.addObject('MechanicalObject', template=\"Rigid3\", name=\"Bones\", position=\"0 -2 0 0 0 0 1 0 2 0 0 0 0 1\", rest_position=\"0 -2 0 0 0 0 1 0 2 0 0 0 0 1\", showObject=\"1\", showObjectScale=\"0.5\")\n    DeformableObject.addObject('LinearMovementProjectiveConstraint', template=\"Rigid3\", name=\"BoneTrajectories\", indices=\"1\", keyTimes=\"0 1 2 3 4 5 6 7 8 9 10 11 12 20\", movements=\" 0 0 0 0 0 0 0 0 0 1.5708 0 0 0 0 0 0 0 0 0 0 0 0 1.5708 0 0 0 0 0 0 0 0 0 0 0 0 1.5708 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\")\n\n    StaticMesh = DeformableObject.addChild('StaticMesh')\n    StaticMesh.addObject('MechanicalObject', template=\"Vec3\", name=\"2\", position=\"-1 -2 0 1 -2 0 -1 0 0 1 0 0 -1 2 0 1 2 0\")\n    StaticMesh.addObject('MeshTopology', triangles=\"0 1 2  2 1 3  2 3 4  4 3 5 \")\n\n    GPUMesh = StaticMesh.addChild('GPUMesh')\n    GPUMesh.addObject('OglModel', template=\"Vec3\")\n    GPUMesh.addObject('IdentityMapping', template=\"Vec3,Vec3\", mapForces=\"0\", mapConstraints=\"0\", mapMasses=\"0\")\n    GPUMesh.addObject('DisplacementTransformEngine', name=\"BoneDisplacements\", template=\"Rigid3,Mat4x4\", x0=\"@../../Bones.rest_position\", x=\"@../../Bones.position\")\n    GPUMesh.addObject('OglShader', name=\"SkinningShader\", fileFragmentShaders=\"['shaders/linearBlendSkinning.frag']\", fileVertexShaders=\"['shaders/linearBlendSkinning.vert']\")\n    GPUMesh.addObject('OglMatrix4VectorVariable', id=\"boneMatrix\", value=\"@BoneDisplacements.displacements\", transpose=\"1\")\n    GPUMesh.addObject('OglInt4Attribute', id=\"indices\", value=\"0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 1 0 0 0\")\n    GPUMesh.addObject('OglFloat4Attribute', id=\"weights\", value=\"1 0 0 0 1 0 0 0 0.5 0.5 0 0 0.5 0.5 0 0 1 0 0 0 1 0 0 0\")\n</code></pre>"},{"location":"30_Components/25_Engine/30_Transform/DisplacementTransformEngine/","title":"DisplacementTransformEngine","text":"<p>Converts a vector of Rigid to a vector of displacement transforms.</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Mat4x4d</code></li> <li><code>Rigid3d,RigidCoord3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs x0  Rest position  x  Current position  Outputs displacements  Displacement transforms with respect to original rigid positions  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/IndexValueMapper/","title":"IndexValueMapper","text":"<p>Input values to output values mapper. Includes indices rules, such as replacement, resize Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 defaultValue  Default value for indices without any value  1 Inputs inputValues  Already existing values (can be empty)   indices  Indices to map value on   value  Value to map indices on   Outputs outputValues  New map between indices and values  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/Indices2ValuesMapper/","title":"Indices2ValuesMapper","text":"<p>?</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 defaultValue  Default value for indices without any value  1 Inputs inputValues  Already existing values (can be empty)   indices  Indices to map value on   values  Values to map indices on   Outputs outputValues  New map between indices and values  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/InvertTransformMatrixEngine/","title":"InvertTransformMatrixEngine","text":"<p>Inverts the input transform</p> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>AbstractTransformMatrixEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs inT  input transformation if any  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] Outputs outT  output transformation  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/MapIndices/","title":"MapIndices","text":"<p>Apply a permutation to a set of indices</p> <p>Templates:</p> <ul> <li><code>I</code></li> <li><code>fixed_array&lt;I,2&gt;</code></li> <li><code>fixed_array&lt;I,3&gt;</code></li> <li><code>fixed_array&lt;I,4&gt;</code></li> <li><code>fixed_array&lt;I,8&gt;</code></li> <li><code>i</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 outStr  Output indices, converted as a string  Inputs in  input indices  indices  array containing in ith cell the input index corresponding to the output index i (or reversively if transpose=true)  transpose  Should the transposed mapping be used ?  0 Outputs out  Output indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/MathOp/","title":"MathOp","text":"<p>Apply a math operation to combine several inputs</p> <p>Templates:</p> <ul> <li><code>vector&lt;RigidCoord2d&gt;</code></li> <li><code>vector&lt;RigidCoord3d&gt;</code></li> <li><code>vector&lt;RigidDeriv2d&gt;</code></li> <li><code>vector&lt;RigidDeriv3d&gt;</code></li> <li><code>vector&lt;Vec2d&gt;</code></li> <li><code>vector&lt;Vec3d&gt;</code></li> <li><code>vector&lt;bool&gt;</code></li> <li><code>vector&lt;d&gt;</code></li> <li><code>vector&lt;i&gt;</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 nbInputs  Number of input values  2 op  Selected operation to apply  output  Output values  Inputs input1  input values 1  input2  input values 2  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/ProjectiveTransformEngine/","title":"ProjectiveTransformEngine","text":"<p>Project the position of 3d points onto a plane according to a projection matrix</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 proj_mat  projection matrix   Inputs input_position  input array of 3d points  focal_distance  focal distance   1 Outputs output_position  output array of projected 3d points  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/QuatToRigidEngine/","title":"QuatToRigidEngine","text":"<p>Transform a vector of Rigids into two independant vectors for positions (Vec3) and orientations (Quat).</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs positions  Positions (Vector of 3)  orientations  Orientations (Quaternion)  colinearPositions  Optional positions to restrict output to be colinear in the quaternion Z direction  Outputs rigids  Rigid (Position + Orientation)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/ROIValueMapper/","title":"ROIValueMapper","text":"<p>Generate a list of values from value-indices pairs</p> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 defaultValue  Default value for indices out of ROIs  0 Inputs nbROIs  size of indices/value vector  0 Outputs outputValues  New vector of values  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/RigidToQuatEngine/","title":"RigidToQuatEngine","text":"<p>Transform a couple of Vec3 and Quaternion in Rigid</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs rigids  Rigid (Position + Orientation)  Outputs positions  Positions (Vector of 3)  orientations  Orientations (Quaternion)  orientationsEuler  Orientations (Euler angle)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/RotateTransformMatrixEngine/","title":"RotateTransformMatrixEngine","text":"<p>Compose the input transform (if any) with the given rotation</p> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>AbstractTransformMatrixEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 rotation  euler angles  Inputs inT  input transformation if any  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] Outputs outT  output transformation  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/ScaleTransformMatrixEngine/","title":"ScaleTransformMatrixEngine","text":"<p>Compose the input transform (if any) with the given scale transformation</p> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>AbstractTransformMatrixEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 scale  scaling values  Inputs inT  input transformation if any  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] Outputs outT  output transformation  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/SmoothMeshEngine/","title":"SmoothMeshEngine","text":"<p>Compute the laplacian smoothing of a mesh</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 input_indices  Position indices that need to be smoothed, leave empty for all positions  nb_iterations  Number of iterations of laplacian smoothing  1 Inputs input_position  Input position  Outputs output_position  Output position  Visualization showInput  showInput  0 showOutput  showOutput  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/25_Engine/30_Transform/SmoothMeshEngine/#examples","title":"Examples","text":"<p>Component/Engine/Transform/SmoothMeshEngine.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Transform\"/&gt; &lt;!-- Needed to use components [SmoothMeshEngine] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"origin\" &gt;\n        &lt;VisualStyle displayFlags=\"showWireframe\" /&gt;\n        &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/dragon.obj\" /&gt;\n        &lt;OglModel name=\"visual\" src=\"@loader\" color=\"yellow\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"smoothed\" &gt;\n        &lt;VisualStyle displayFlags=\"hideWireframe\" /&gt;\n        &lt;MeshTopology name=\"topology\" src=\"@/origin/loader\"/&gt;\n        &lt;SmoothMeshEngine template=\"Vec3\" name=\"smoother\" input_position=\"@/origin/loader.position\" nb_iterations=\"1\" showOutput=\"true\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root')\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Transform\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n\n    origin = root.addChild('origin')\n    origin.addObject('VisualStyle', displayFlags=\"showWireframe\")\n    origin.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/dragon.obj\")\n    origin.addObject('OglModel', name=\"visual\", src=\"@loader\", color=\"yellow\")\n\n    smoothed = root.addChild('smoothed')\n    smoothed.addObject('VisualStyle', displayFlags=\"hideWireframe\")\n    smoothed.addObject('MeshTopology', name=\"topology\", src=\"@/origin/loader\")\n    smoothed.addObject('SmoothMeshEngine', template=\"Vec3\", name=\"smoother\", input_position=\"@/origin/loader.position\", nb_iterations=\"1\", showOutput=\"true\")\n</code></pre>"},{"location":"30_Components/25_Engine/30_Transform/TranslateTransformMatrixEngine/","title":"TranslateTransformMatrixEngine","text":"<p>Compose the input transform (if any) with the given translation</p> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>AbstractTransformMatrixEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 translation  translation vector  Inputs inT  input transformation if any  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] Outputs outT  output transformation  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/30_Transform/Vertex2Frame/","title":"Vertex2Frame","text":"<p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Transform</code></p> <p>namespace: <code>sofa::component::engine::transform</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 useNormals  Use normals to compute the orientations; if disabled the direction of the x axisof a vertice is the one from this vertice to the next one  1 invertNormals  Swap normals  0 Inputs position  Vertices of the mesh loaded  texCoords  TexCoords of the mesh loaded  normals  Normals of the mesh loaded  rotation  Apply a local rotation on the frames. If 0 a x-axis rotation is applied. If 1 a y-axis rotation is applied, If 2 a z-axis rotation is applied.  0 rotationAngle  Angle rotation  0 Outputs frames  Frames at output  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/Analyze/AverageCoord/","title":"AverageCoord","text":"<p>Compute the average of coordinates</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Analyze</code></p> <p>namespace: <code>sofa::component::engine::analyze</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs indices  indices of the coordinates to average  vecId  index of the vector (default value corresponds to core::VecCoordId::position() )  1 Outputs average  average of the values with the given indices in the given coordinate vector  (default value corresponds to the average coord of the mechanical context)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/25_Engine/Analyze/ClusteringEngine/","title":"ClusteringEngine","text":"<p>Group points into overlapping clusters according to a user defined number of clusters and radius</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Analyze</code></p> <p>namespace: <code>sofa::component::engine::analyze</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 useTopo  Use avalaible topology to compute neighborhood.  1 outFile  export clusters  Inputs radius  Neighborhood range.  1 fixedRadius  Neighborhood range (for non mechanical particles).  1 number  Number of clusters (-1 means that all input points are selected).  -1 fixedPosition  Input positions of fixed (non mechanical) particles.  position  Input rest positions.  inFile  import precomputed clusters  Outputs cluster  Computed clusters.  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/Analyze/Distances/","title":"Distances","text":"<p>Compute distances based on a grid.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Analyze</code></p> <p>namespace: <code>sofa::component::engine::analyze</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 offset  translation offset between the topology and the point set.  0 0 0 distanceType  type of distance to compute for inserted frames.  Geodesic initTarget  initialize the target MechanicalObject from the grid.  0 initTargetStep  initialize the target MechanicalObject from the grid using this step.  1 zonesFramePair  Correspondence between the segmented value and the frames.  harmonicMaxValue  Max value used to initialize the harmonic distance grid.  100 filename  file containing the result of the computation of the distances  targetPath  path to the goal point set topology  hexaContainerPath  path to the grid used to compute the distances  Visualization showMapIndex  Frame DOF index on which display values.  0 showDistancesMap  show the distance for each point of the target point set.  0 showGoalDistancesMap  show the distance for each point of the target point set.  0 showTextScaleFactor  Scale to apply on the text.  0.001 showGradients  show gradients for each point of the target point set.  0 showGradientsScaleFactor  scale for the gradients displayed.  0.1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/Analyze/HausdorffDistance/","title":"HausdorffDistance","text":"<p>Compute the Hausdorff distance of two point clouds</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Analyze</code></p> <p>namespace: <code>sofa::component::engine::analyze</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 update  Recompute every time step  0 Input points1  Points belonging to the first point cloud  points2  Points belonging to the second point cloud  Output d12  Distance from point cloud 1 to 2  d21  Distance from point cloud 2 to 1  max  Symmetrical Hausdorff distance  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/25_Engine/Analyze/HausdorffDistance/#examples","title":"Examples","text":"<p>Component/Engine/Analyze/HausdorffDistance.scn</p> XMLPython <pre><code>&lt;Node name=\"Scene\" gravity=\"0 0 0\" dt=\"0.1\" &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Analyze\"/&gt; &lt;!-- Needed to use components [HausdorffDistance] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Setting\"/&gt; &lt;!-- Needed to use components [BackgroundSetting] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehavior\" /&gt;\n    &lt;BackgroundSetting color=\"1 1 1\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"case1\"&gt;\n        &lt;Node name=\"mesh1\"&gt;\n            &lt;MeshOBJLoader name=\"meshloader1\" filename=\"mesh/cube.obj\"/&gt;          \n            &lt;OglModel name=\"visu1\" src=\"@meshloader1\" color=\"0.8 0.2 0.2 0.5\"/&gt;\n\n        &lt;/Node&gt;\n\n        &lt;Node name=\"mesh2\"&gt;\n            &lt;MeshOBJLoader name=\"meshloader2\" filename=\"mesh/cube.obj\" /&gt;\n            &lt;OglModel name=\"visu1\" src=\"@meshloader2\" color=\"0.2 0.2 0.8 0.5\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;HausdorffDistance points1=\"@mesh1/meshloader1.position\" points2=\"@mesh2/meshloader2.position\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"case2\"&gt;\n        &lt;Node name=\"mesh1\"&gt;\n            &lt;MeshOBJLoader name=\"meshloader1\" filename=\"mesh/cube.obj\" translation=\"5 0 0\"/&gt;          \n            &lt;OglModel name=\"visu1\" src=\"@meshloader1\" color=\"0.8 0.2 0.2 0.5\"/&gt;\n\n        &lt;/Node&gt;\n\n        &lt;Node name=\"mesh2\"&gt;\n            &lt;MeshOBJLoader name=\"meshloader2\" filename=\"mesh/cube.obj\" translation=\"6 0 0\"/&gt;\n            &lt;OglModel name=\"visu1\" src=\"@meshloader2\" color=\"0.2 0.2 0.8 0.5\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;HausdorffDistance points1=\"@mesh1/meshloader1.position\" points2=\"@mesh2/meshloader2.position\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"case3\"&gt;\n        &lt;Node name=\"mesh1\"&gt;\n            &lt;MeshOBJLoader name=\"meshloader1\" filename=\"mesh/cube.obj\" translation=\"10 0 0\"/&gt;          \n            &lt;OglModel name=\"visu1\" src=\"@meshloader1\" color=\"0.8 0.2 0.2 0.5\"/&gt;\n\n        &lt;/Node&gt;\n\n        &lt;Node name=\"mesh2\"&gt;\n            &lt;MeshOBJLoader name=\"meshloader2\" filename=\"mesh/sphere.obj\" translation=\"10 0 0\"/&gt;\n            &lt;OglModel name=\"visu1\" src=\"@meshloader2\" color=\"0.2 0.2 0.8 0.5\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;HausdorffDistance points1=\"@mesh1/meshloader1.position\" points2=\"@mesh2/meshloader2.position\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"case4\"&gt;\n        &lt;MeshOBJLoader name=\"meshloader1\" filename=\"mesh/sphere.obj\" translation=\"10 0 0\"/&gt;\n        &lt;HausdorffDistance points1=\"@meshloader1.position\" points2=\"0 0 0\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"case5\"&gt;\n        &lt;HausdorffDistance points1=\"10 0 0\" points2=\"0 0 0\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"case6\"&gt;\n        &lt;HausdorffDistance template=\"Vec2\" points1=\"10 0\" points2=\"0 0\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"case7\"&gt;\n        &lt;HausdorffDistance template=\"Vec1\" points1=\"10\" points2=\"0\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Scene = rootNode.addChild('Scene', gravity=\"0 0 0\", dt=\"0.1\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Analyze\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.Setting\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Scene.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    Scene.addObject('VisualStyle', displayFlags=\"showBehavior\")\n    Scene.addObject('BackgroundSetting', color=\"1 1 1\")\n    Scene.addObject('DefaultAnimationLoop')\n\n    case1 = Scene.addChild('case1')\n\n    mesh1 = case1.addChild('mesh1')\n    mesh1.addObject('MeshOBJLoader', name=\"meshloader1\", filename=\"mesh/cube.obj\")\n    mesh1.addObject('OglModel', name=\"visu1\", src=\"@meshloader1\", color=\"0.8 0.2 0.2 0.5\")\n\n    mesh2 = case1.addChild('mesh2')\n    mesh2.addObject('MeshOBJLoader', name=\"meshloader2\", filename=\"mesh/cube.obj\")\n    mesh2.addObject('OglModel', name=\"visu1\", src=\"@meshloader2\", color=\"0.2 0.2 0.8 0.5\")\n    case1.addObject('HausdorffDistance', points1=\"@mesh1/meshloader1.position\", points2=\"@mesh2/meshloader2.position\")\n\n    case2 = Scene.addChild('case2')\n\n    mesh1 = case2.addChild('mesh1')\n    mesh1.addObject('MeshOBJLoader', name=\"meshloader1\", filename=\"mesh/cube.obj\", translation=\"5 0 0\")\n    mesh1.addObject('OglModel', name=\"visu1\", src=\"@meshloader1\", color=\"0.8 0.2 0.2 0.5\")\n\n    mesh2 = case2.addChild('mesh2')\n    mesh2.addObject('MeshOBJLoader', name=\"meshloader2\", filename=\"mesh/cube.obj\", translation=\"6 0 0\")\n    mesh2.addObject('OglModel', name=\"visu1\", src=\"@meshloader2\", color=\"0.2 0.2 0.8 0.5\")\n    case2.addObject('HausdorffDistance', points1=\"@mesh1/meshloader1.position\", points2=\"@mesh2/meshloader2.position\")\n\n    case3 = Scene.addChild('case3')\n\n    mesh1 = case3.addChild('mesh1')\n    mesh1.addObject('MeshOBJLoader', name=\"meshloader1\", filename=\"mesh/cube.obj\", translation=\"10 0 0\")\n    mesh1.addObject('OglModel', name=\"visu1\", src=\"@meshloader1\", color=\"0.8 0.2 0.2 0.5\")\n\n    mesh2 = case3.addChild('mesh2')\n    mesh2.addObject('MeshOBJLoader', name=\"meshloader2\", filename=\"mesh/sphere.obj\", translation=\"10 0 0\")\n    mesh2.addObject('OglModel', name=\"visu1\", src=\"@meshloader2\", color=\"0.2 0.2 0.8 0.5\")\n    case3.addObject('HausdorffDistance', points1=\"@mesh1/meshloader1.position\", points2=\"@mesh2/meshloader2.position\")\n\n    case4 = Scene.addChild('case4')\n    case4.addObject('MeshOBJLoader', name=\"meshloader1\", filename=\"mesh/sphere.obj\", translation=\"10 0 0\")\n    case4.addObject('HausdorffDistance', points1=\"@meshloader1.position\", points2=\"0 0 0\")\n\n    case5 = Scene.addChild('case5')\n    case5.addObject('HausdorffDistance', points1=\"10 0 0\", points2=\"0 0 0\")\n\n    case6 = Scene.addChild('case6')\n    case6.addObject('HausdorffDistance', template=\"Vec2\", points1=\"10 0\", points2=\"0 0\")\n\n    case7 = Scene.addChild('case7')\n    case7.addObject('HausdorffDistance', template=\"Vec1\", points1=\"10\", points2=\"0\")\n</code></pre>"},{"location":"30_Components/25_Engine/Analyze/ShapeMatching/","title":"ShapeMatching","text":"<p>Compute target positions using shape matching deformation method by Mueller et al.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Analyze</code></p> <p>namespace: <code>sofa::component::engine::analyze</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 iterations  Number of iterations.  1 affineRatio  Blending between affine and rigid.  0 fixedweight  weight of fixed particles.  1 Inputs fixedPosition0  rest positions of non mechanical particles.  fixedPosition  current (fixed) positions of non mechanical particles.  position  Input positions.  cluster  Input clusters.  Outputs targetPosition  Computed target positions.  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/25_Engine/Analyze/ShapeMatching/#examples","title":"Examples","text":"<p>Component/Engine/Analyze/ShapeMatching.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node   name=\"root\" gravity=\"0 -1 0\" dt=\"0.05\"  &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [PositionBasedDynamicsProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Analyze\"/&gt; &lt;!-- Needed to use components [ClusteringEngine ShapeMatching] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node   name=\"dragon\"  &gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/dragon.obj\" /&gt;\n        &lt;MeshTopology name=\"topo\" src=\"@loader\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" src=\"@loader\" scale=\"1\" dz=\"10\" /&gt;\n        &lt;UniformMass vertexMass=\"3\" /&gt;\n\n        &lt;ClusteringEngine template=\"Vec3\" name=\"clustering\" radius='1'  number='50' position=\"@topo.position\"/&gt;\n        &lt;ShapeMatching template=\"Vec3\" name=\"shapeMatching\" iterations='1' position=\"@dofs.position\" cluster=\"@clustering.cluster\"/&gt;\n        &lt;PositionBasedDynamicsProjectiveConstraint template=\"Vec3\" stiffness = '1' position=\"@shapeMatching.targetPosition\"/&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/dragon.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"red\" dz=\"10\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/dragon.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dz=\"10\" /&gt;\n            &lt;TriangleCollisionModel contactStiffness=\"1000\" /&gt;\n            &lt;LineCollisionModel contactStiffness=\"1000\" /&gt;\n            &lt;PointCollisionModel contactStiffness=\"1000\" /&gt;\n            &lt;IdentityMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Floor\"&gt;\n        &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/floor3.obj\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dy=\"-10\" scale=\"1.75\" /&gt;\n        &lt;TriangleCollisionModel name=\"FloorTriangle\" simulated=\"0\" moving=\"0\" /&gt;\n        &lt;LineCollisionModel name=\"FloorLine\" simulated=\"0\" moving=\"0\" /&gt;\n        &lt;PointCollisionModel name=\"FloorPoint\" simulated=\"0\" moving=\"0\" /&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/floor3.obj\" scale=\"1.75\" handleSeams=\"1\" /&gt;\n        &lt;OglModel name=\"FloorV\" src=\"@meshLoader_0\" texturename=\"textures/brushed_metal.bmp\" dy=\"-10\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -1 0\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Analyze\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('CollisionPipeline', verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    dragon = root.addChild('dragon')\n    dragon.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    dragon.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    dragon.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/dragon.obj\")\n    dragon.addObject('MeshTopology', name=\"topo\", src=\"@loader\")\n    dragon.addObject('MechanicalObject', name=\"dofs\", src=\"@loader\", scale=\"1\", dz=\"10\")\n    dragon.addObject('UniformMass', vertexMass=\"3\")\n    dragon.addObject('ClusteringEngine', template=\"Vec3\", name=\"clustering\", radius=\"1\", number=\"50\", position=\"@topo.position\")\n    dragon.addObject('ShapeMatching', template=\"Vec3\", name=\"shapeMatching\", iterations=\"1\", position=\"@dofs.position\", cluster=\"@clustering.cluster\")\n    dragon.addObject('PositionBasedDynamicsProjectiveConstraint', template=\"Vec3\", stiffness=\"1\", position=\"@shapeMatching.targetPosition\")\n\n    Visu = dragon.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/dragon.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"red\", dz=\"10\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf = dragon.addChild('Surf')\n    Surf.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/dragon.obj\")\n    Surf.addObject('MeshTopology', src=\"@loader\")\n    Surf.addObject('MechanicalObject', src=\"@loader\", dz=\"10\")\n    Surf.addObject('TriangleCollisionModel', contactStiffness=\"1000\")\n    Surf.addObject('LineCollisionModel', contactStiffness=\"1000\")\n    Surf.addObject('PointCollisionModel', contactStiffness=\"1000\")\n    Surf.addObject('IdentityMapping')\n\n    Floor = root.addChild('Floor')\n    Floor.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/floor3.obj\")\n    Floor.addObject('MeshTopology', src=\"@loader\")\n    Floor.addObject('MechanicalObject', src=\"@loader\", dy=\"-10\", scale=\"1.75\")\n    Floor.addObject('TriangleCollisionModel', name=\"FloorTriangle\", simulated=\"0\", moving=\"0\")\n    Floor.addObject('LineCollisionModel', name=\"FloorLine\", simulated=\"0\", moving=\"0\")\n    Floor.addObject('PointCollisionModel', name=\"FloorPoint\", simulated=\"0\", moving=\"0\")\n    Floor.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/floor3.obj\", scale=\"1.75\", handleSeams=\"1\")\n    Floor.addObject('OglModel', name=\"FloorV\", src=\"@meshLoader_0\", texturename=\"textures/brushed_metal.bmp\", dy=\"-10\")\n</code></pre>"},{"location":"30_Components/25_Engine/Analyze/SumEngine/","title":"SumEngine","text":"<p>Computing the Sum between two vector of dofs</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Engine.Analyze</code></p> <p>namespace: <code>sofa::component::engine::analyze</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs input  input vector  Outputs output  output sum  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/30_SolidMechanics/10_FEM/30_TetrahedronHyperelasticityFEMForceField/","title":"TetrahedronHyperelasticityFEMForceField","text":"<p>This component belongs to the category of ForceField. The TetrahedronHyperelasticityFEMForceField implements - for tetrahedral topology only - several non-linear mechanical constitutive laws, also named as hyperelastic constitutive laws. The available models are:</p> <ul> <li>Arruda-Boyce model</li> <li>Costa model</li> <li>Mooney-Rivlin model</li> <li>Neo-Hookean model</li> <li>Ogden model (order 1)</li> <li>St Venant-Kirchhoff model</li> <li>Veronda-Westmann model</li> </ul>"},{"location":"30_Components/30_SolidMechanics/10_FEM/30_TetrahedronHyperelasticityFEMForceField/#data","title":"Data","text":"<ul> <li>materialName: name of the material to be used, the possible options are:<ul> <li>\"ArrudaBoyce\"</li> <li>\"Costa\"</li> <li>\"MooneyRivlin\"</li> <li>\"NeoHookean\"</li> <li>\"Ogden\"</li> <li>\"StVenantKirchhoff\"</li> <li>\"VerondaWestman\"</li> </ul> </li> <li>ParameterSet: global parameters specifying the material, the number of data depends on the materialName given:<ul> <li>for \"ArrudaBoyce\", two parameters are required: </li> <li>for \"Costa\", eight parameters are required: </li> <li>for \"MooneyRivlin\", three parameters are required: </li> <li>for \"NeoHookean\", two parameters are required: </li> <li>for \"Ogden\", three parameters are required: </li> <li>for \"StVenantKirchhoff\", two parameters are required: </li> <li>for \"VerondaWestman\", parameters are required: </li> </ul> </li> <li>AnisotropyDirections: global directions of anisotropy of the material, it is a <code>vector&lt;Coord&gt;</code> i.e. a vector containing at each entry a vector which size is the dimension of your degrees of freedom (e.g. 3 if Vec3d). The size of the array is 0 if the material is isotropic, 1 if it is transversely isotropic and 2 for orthotropic materials.</li> <li>topology: link towards the TetrahedronSetTopologyContainer associated to your degrees of freedom in the node or in the graph</li> </ul>"},{"location":"30_Components/30_SolidMechanics/10_FEM/30_TetrahedronHyperelasticityFEMForceField/#usage","title":"Usage","text":"<p>As a Forcefield, the TetrahedronHyperelasticityFEMForceField requires a MechanicalObject and the associated solvers (integration scheme and linear solver), as well as a TetrahedronSetTopologyContainer.</p>"},{"location":"30_Components/30_SolidMechanics/10_FEM/30_TetrahedronHyperelasticityFEMForceField/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;TetrahedronHyperelasticityFEMForceField name=\"HyperElasticMaterial\" materialName=\"StVenantKirchhoff\" ParameterSet=\"3448.2 31034.4\"/&gt;\n</code></pre> <p>with a St Venant-Kirchhoff model using the parameters:  Using SofaPython3:</p> <pre><code>node.addObject('TetrahedronHyperelasticityFEMForceField', name=\"HyperElasticMaterial\", materialName=\"StVenantKirchhoff\", ParameterSet=\"3448.2 31034.4\")\n</code></pre> <p>An example scene involving a TetrahedronHyperelasticityFEMForceField is available in examples/Component/SolidMechanics/FEM/TetrahedronHyperelasticityFEMForceField.scn</p>"},{"location":"30_Components/30_SolidMechanics/10_FEM/81_QuadBendingFEMForceField/","title":"QuadBendingFEMForceField","text":"<p>This component belongs to the category of ForceField. The page is still incomplete, but give us a bit of time to work on it!</p> <p>Description of the component ...</p> <p>What it is made for, what it does</p>"},{"location":"30_Components/30_SolidMechanics/10_FEM/81_QuadBendingFEMForceField/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"30_Components/30_SolidMechanics/10_FEM/81_QuadBendingFEMForceField/#data","title":"Data","text":""},{"location":"30_Components/30_SolidMechanics/10_FEM/81_QuadBendingFEMForceField/#usage","title":"Usage","text":"<p>How to use it, what required component, case</p> <p>In which case it works, in which case it doesn't</p> <p>Limitations</p>"},{"location":"30_Components/30_SolidMechanics/10_FEM/81_QuadBendingFEMForceField/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <p><pre><code>&lt;QuadBendingFEMForceField data_field=\"X\" /&gt;\n</code></pre> or using SofaPython3:</p> <pre><code>node.addObject('QuadBendingFEMForceField', data_field='X')\n</code></pre> <p>With a description of each data</p> <p>An example scene involving a QuadBendingFEMForceField is available in examples/Component/SolidMechanics/FEM/QuadBendingFEMForceField.scn</p>"},{"location":"30_Components/30_SolidMechanics/10_FEM/85_TetrahedronFEMForceField/","title":"TetrahedronFEMForceField","text":"<p>This component belongs to the category of ForceField. The page is still incomplete, but give us a bit of time to work on it!</p> <p>Description of the component ...</p> <p>What it is made for, what it does</p>"},{"location":"30_Components/30_SolidMechanics/10_FEM/85_TetrahedronFEMForceField/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"30_Components/30_SolidMechanics/10_FEM/85_TetrahedronFEMForceField/#data","title":"Data","text":""},{"location":"30_Components/30_SolidMechanics/10_FEM/85_TetrahedronFEMForceField/#usage","title":"Usage","text":"<p>How to use it, what required component, case</p> <p>In which case it works, in which case it doesn't</p> <p>Limitations</p>"},{"location":"30_Components/30_SolidMechanics/10_FEM/85_TetrahedronFEMForceField/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;TetrahedronFEMForceField data_field=\"X\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('TetrahedronFEMForceField', data_field='X')\n</code></pre> <p>With a description of each data</p> <p>An example scene involving a TetrahedronFEMForceField is available in examples/Component/SolidMechanics/FEM/TetrahedronFEMForceField.scn</p>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/BeamFEMForceField/","title":"BeamFEMForceField","text":"<p>Beam finite elements</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic::_beamfemforcefield_</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 beamsData  Internal element data  poissonRatio  Poisson's Ratio  0.49 youngModulus  Young Modulus  5000 radius  radius of the section  0.1 radiusInner  inner radius of the section for hollow beams  0 listSegment  apply the forcefield to a subset list of beam segments. If no segment defined, forcefield applies to the whole topology  useSymmetricAssembly  use symmetric assembly of the matrix K  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/BeamFEMForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/BeamFEMForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n\n&lt;!-- BeamFEMForceField example --&gt;\n&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel SphereCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [BTDLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BeamLinearMapping IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [BeamFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [CubeTopology MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels hideForceFields showCollisionModels hideVisual showInteractionForceFields\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n\n    &lt;Node name=\"beam-withPointCollision\"&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0\" printLog=\"false\"  rayleighMass=\"0.1\" /&gt;\n        &lt;BTDLinearSolver template=\"BTDMatrix6d\" printLog=\"false\" verbose=\"false\" /&gt;\n        &lt;MechanicalObject template=\"Rigid3\" name=\"DOFs\" position=\"0 0 0 0 0 0 1  1 0 0 0 0 0 1  2 0 0 0 0 0 1  3 0 0 0 0 0 1  4 0 0 0 0 0 1  5 0 0 0 0 0 1  6 0 0 0 0 0 1  7 0 0 0 0 0 1\" /&gt;\n        &lt;MeshTopology name=\"lines\" lines=\"0 1 1 2 2 3 3 4 4 5 5 6 6 7\" /&gt;\n\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"0\" /&gt;\n        &lt;UniformMass vertexMass=\"1 1 0.01 0 0 0 0.1 0 0 0 0.1\" printLog=\"false\" /&gt;\n        &lt;BeamFEMForceField name=\"FEM\" radius=\"0.1\" radiusInner=\"0\" youngModulus=\"20000000\" poissonRatio=\"0.49\"/&gt;\n\n\n        &lt;Node name=\"Collision\"&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;IdentityMapping  /&gt;\n            &lt;PointCollisionModel name=\"FloorPoint\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"beam-withTriangulatedCubeCollision\"&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0\" printLog=\"false\"  rayleighMass=\"0.1\" /&gt;\n        &lt;BTDLinearSolver template=\"BTDMatrix6d\" printLog=\"false\" verbose=\"false\" /&gt;\n        &lt;MechanicalObject template=\"Rigid3\" name=\"DOFs\" position=\"0 0 -1 0 0 0 1  1 0 -1 0 0 0 1  2 0 -1 0 0 0 1  3 0 -1 0 0 0 1  4 0 -1 0 0 0 1  5 0 -1 0 0 0 1  6 0  -1 0 0 0 1  7 0 -1 0 0 0 1\" /&gt;\n        &lt;MeshTopology name=\"lines\" lines=\"0 1 1 2 2 3 3 4 4 5 5 6 6 7\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"0\" /&gt;\n        &lt;UniformMass vertexMass=\"1 1 0.01 0 0 0 0.1 0 0 0 0.1\" printLog=\"false\" /&gt;\n        &lt;BeamFEMForceField name=\"FEM\" radius=\"0.1\" radiusInner=\"0\" youngModulus=\"20000000\" poissonRatio=\"0.49\"/&gt;\n\n        &lt;Node name=\"Collision\"&gt;\n            &lt;CubeTopology nx=\"15\" ny=\"2\" nz=\"2\" min=\"0 -0.1 -0.1\" max=\"7 0.1 0.1\" /&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;BeamLinearMapping isMechanical=\"true\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;LineCollisionModel /&gt;\n            &lt;PointCollisionModel  /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"beam-withSphereCollision\"&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0\" printLog=\"false\" rayleighMass=\"0.1\"/&gt;\n        &lt;CGLinearSolver threshold=\"0.000000001\" tolerance=\"0.0000000001\" iterations=\"25\" printLog=\"false\" /&gt;\n\n        &lt;MechanicalObject template=\"Rigid3\" name=\"DOFs\" position=\"0 0 1 0 0 0 1  1 0 1 0 0 0 1  2 0 1 0 0 0 1  3 0 1 0 0 0 1\" /&gt;\n        &lt;MeshTopology name=\"lines\" lines=\"0 1 1 2 2 3\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"0\" /&gt;\n        &lt;UniformMass totalMass=\"4\" /&gt;\n        &lt;BeamFEMForceField name=\"FEM\" radius=\"0.05\" radiusInner=\"0\" youngModulus=\"20000000\" poissonRatio=\"0.49\"/&gt;\n\n        &lt;Node name=\"Collision\"&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;SphereCollisionModel radius=\"0.4\" /&gt;\n            &lt;IdentityMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"Floor\"&gt;\n        &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/floor3.obj\" scale3d=\"0.5 0.5 0.5\"/&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\"  dy=\"-1\"/&gt;\n        &lt;TriangleCollisionModel name=\"FloorTriangle\" simulated=\"0\" moving=\"0\" contactStiffness=\"100\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels hideForceFields showCollisionModels hideVisual showInteractionForceFields\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    beam-withPointCollision = root.addChild('beam-withPointCollision')\n    beam-withPointCollision.addObject('EulerImplicitSolver', rayleighStiffness=\"0\", printLog=\"false\", rayleighMass=\"0.1\")\n    beam-withPointCollision.addObject('BTDLinearSolver', template=\"BTDMatrix6d\", printLog=\"false\", verbose=\"false\")\n    beam-withPointCollision.addObject('MechanicalObject', template=\"Rigid3\", name=\"DOFs\", position=\"0 0 0 0 0 0 1  1 0 0 0 0 0 1  2 0 0 0 0 0 1  3 0 0 0 0 0 1  4 0 0 0 0 0 1  5 0 0 0 0 0 1  6 0 0 0 0 0 1  7 0 0 0 0 0 1\")\n    beam-withPointCollision.addObject('MeshTopology', name=\"lines\", lines=\"0 1 1 2 2 3 3 4 4 5 5 6 6 7\")\n    beam-withPointCollision.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"0\")\n    beam-withPointCollision.addObject('UniformMass', vertexMass=\"1 1 0.01 0 0 0 0.1 0 0 0 0.1\", printLog=\"false\")\n    beam-withPointCollision.addObject('BeamFEMForceField', name=\"FEM\", radius=\"0.1\", radiusInner=\"0\", youngModulus=\"20000000\", poissonRatio=\"0.49\")\n\n    Collision = beam-withPointCollision.addChild('Collision')\n    Collision.addObject('MechanicalObject')\n    Collision.addObject('IdentityMapping')\n    Collision.addObject('PointCollisionModel', name=\"FloorPoint\")\n\n    beam-withTriangulatedCubeCollision = root.addChild('beam-withTriangulatedCubeCollision')\n    beam-withTriangulatedCubeCollision.addObject('EulerImplicitSolver', rayleighStiffness=\"0\", printLog=\"false\", rayleighMass=\"0.1\")\n    beam-withTriangulatedCubeCollision.addObject('BTDLinearSolver', template=\"BTDMatrix6d\", printLog=\"false\", verbose=\"false\")\n    beam-withTriangulatedCubeCollision.addObject('MechanicalObject', template=\"Rigid3\", name=\"DOFs\", position=\"0 0 -1 0 0 0 1  1 0 -1 0 0 0 1  2 0 -1 0 0 0 1  3 0 -1 0 0 0 1  4 0 -1 0 0 0 1  5 0 -1 0 0 0 1  6 0  -1 0 0 0 1  7 0 -1 0 0 0 1\")\n    beam-withTriangulatedCubeCollision.addObject('MeshTopology', name=\"lines\", lines=\"0 1 1 2 2 3 3 4 4 5 5 6 6 7\")\n    beam-withTriangulatedCubeCollision.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"0\")\n    beam-withTriangulatedCubeCollision.addObject('UniformMass', vertexMass=\"1 1 0.01 0 0 0 0.1 0 0 0 0.1\", printLog=\"false\")\n    beam-withTriangulatedCubeCollision.addObject('BeamFEMForceField', name=\"FEM\", radius=\"0.1\", radiusInner=\"0\", youngModulus=\"20000000\", poissonRatio=\"0.49\")\n\n    Collision = beam-withTriangulatedCubeCollision.addChild('Collision')\n    Collision.addObject('CubeTopology', nx=\"15\", ny=\"2\", nz=\"2\", min=\"0 -0.1 -0.1\", max=\"7 0.1 0.1\")\n    Collision.addObject('MechanicalObject')\n    Collision.addObject('BeamLinearMapping', isMechanical=\"true\")\n    Collision.addObject('TriangleCollisionModel')\n    Collision.addObject('LineCollisionModel')\n    Collision.addObject('PointCollisionModel')\n\n    beam-withSphereCollision = root.addChild('beam-withSphereCollision')\n    beam-withSphereCollision.addObject('EulerImplicitSolver', rayleighStiffness=\"0\", printLog=\"false\", rayleighMass=\"0.1\")\n    beam-withSphereCollision.addObject('CGLinearSolver', threshold=\"0.000000001\", tolerance=\"0.0000000001\", iterations=\"25\", printLog=\"false\")\n    beam-withSphereCollision.addObject('MechanicalObject', template=\"Rigid3\", name=\"DOFs\", position=\"0 0 1 0 0 0 1  1 0 1 0 0 0 1  2 0 1 0 0 0 1  3 0 1 0 0 0 1\")\n    beam-withSphereCollision.addObject('MeshTopology', name=\"lines\", lines=\"0 1 1 2 2 3\")\n    beam-withSphereCollision.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"0\")\n    beam-withSphereCollision.addObject('UniformMass', totalMass=\"4\")\n    beam-withSphereCollision.addObject('BeamFEMForceField', name=\"FEM\", radius=\"0.05\", radiusInner=\"0\", youngModulus=\"20000000\", poissonRatio=\"0.49\")\n\n    Collision = beam-withSphereCollision.addChild('Collision')\n    Collision.addObject('MechanicalObject')\n    Collision.addObject('SphereCollisionModel', radius=\"0.4\")\n    Collision.addObject('IdentityMapping')\n\n    Floor = root.addChild('Floor')\n    Floor.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/floor3.obj\", scale3d=\"0.5 0.5 0.5\")\n    Floor.addObject('MeshTopology', src=\"@loader\")\n    Floor.addObject('MechanicalObject', src=\"@loader\", dy=\"-1\")\n    Floor.addObject('TriangleCollisionModel', name=\"FloorTriangle\", simulated=\"0\", moving=\"0\", contactStiffness=\"100\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/FastTetrahedralCorotationalForceField/","title":"FastTetrahedralCorotationalForceField","text":"<p>Fast Corotational Tetrahedral Mesh</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 pointInfo  Internal point data  edgeInfo  Internal edge data  tetrahedronInfo  Internal tetrahedron data  method   method for rotation computation :\"qr\" (by QR) or \"polar\" or \"polar2\" or \"none\" (Linear elastic)   qr poissonRatio  Poisson ratio in Hooke's law  0.45 youngModulus  Young modulus in Hooke's law  5000 Visualization drawing   draw the forcefield if true  1 drawColor1   draw color for faces 1  0 0 1 1 drawColor2   draw color for faces 2  0 0.5 1 1 drawColor3   draw color for faces 3  0 1 1 1 drawColor4   draw color for faces 4  0.5 1 1 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/FastTetrahedralCorotationalForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/FastTetrahedralCorotationalForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [EigenSimplicialLDLT] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [FastTetrahedralCorotationalForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n\n    &lt;Node name=\"BeamFEM_SMALL\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;EigenSimplicialLDLT template=\"CompressedRowSparseMatrixMat3x3\"/&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" /&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;FastTetrahedralCorotationalForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" method=\"small\"/&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 50 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"BeamFEM_LARGE\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;EigenSimplicialLDLT template=\"CompressedRowSparseMatrixMat3x3\"/&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" translation=\"11 0 0\"/&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;FastTetrahedralCorotationalForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" method=\"large\"/&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 50 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"BeamFEM_POLAR\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;EigenSimplicialLDLT template=\"CompressedRowSparseMatrixMat3x3\"/&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" translation=\"22 0 0\"/&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\" /&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;FastTetrahedralCorotationalForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" method=\"polar\"/&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 50 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"BeamFEM_polar2\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;EigenSimplicialLDLT template=\"CompressedRowSparseMatrixMat3x3\"/&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" translation=\"33 0 0\"/&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;FastTetrahedralCorotationalForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" method=\"polar2\"/&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 50 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n\n    BeamFEM_SMALL = root.addChild('BeamFEM_SMALL')\n    BeamFEM_SMALL.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_SMALL.addObject('EigenSimplicialLDLT', template=\"CompressedRowSparseMatrixMat3x3\")\n    BeamFEM_SMALL.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_SMALL.addObject('MechanicalObject', template=\"Vec3\")\n    BeamFEM_SMALL.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_SMALL.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_SMALL.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_SMALL.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_SMALL.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_SMALL.addObject('FastTetrahedralCorotationalForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", method=\"small\")\n    BeamFEM_SMALL.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 50 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_SMALL.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n\n    BeamFEM_LARGE = root.addChild('BeamFEM_LARGE')\n    BeamFEM_LARGE.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_LARGE.addObject('EigenSimplicialLDLT', template=\"CompressedRowSparseMatrixMat3x3\")\n    BeamFEM_LARGE.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_LARGE.addObject('MechanicalObject', template=\"Vec3\", translation=\"11 0 0\")\n    BeamFEM_LARGE.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_LARGE.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_LARGE.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_LARGE.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_LARGE.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_LARGE.addObject('FastTetrahedralCorotationalForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", method=\"large\")\n    BeamFEM_LARGE.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 50 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_LARGE.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n\n    BeamFEM_POLAR = root.addChild('BeamFEM_POLAR')\n    BeamFEM_POLAR.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_POLAR.addObject('EigenSimplicialLDLT', template=\"CompressedRowSparseMatrixMat3x3\")\n    BeamFEM_POLAR.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_POLAR.addObject('MechanicalObject', template=\"Vec3\", translation=\"22 0 0\")\n    BeamFEM_POLAR.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_POLAR.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_POLAR.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_POLAR.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_POLAR.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_POLAR.addObject('FastTetrahedralCorotationalForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", method=\"polar\")\n    BeamFEM_POLAR.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 50 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_POLAR.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n\n    BeamFEM_polar2 = root.addChild('BeamFEM_polar2')\n    BeamFEM_polar2.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_polar2.addObject('EigenSimplicialLDLT', template=\"CompressedRowSparseMatrixMat3x3\")\n    BeamFEM_polar2.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_polar2.addObject('MechanicalObject', template=\"Vec3\", translation=\"33 0 0\")\n    BeamFEM_polar2.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_polar2.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_polar2.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_polar2.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_polar2.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_polar2.addObject('FastTetrahedralCorotationalForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", method=\"polar2\")\n    BeamFEM_polar2.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 50 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_polar2.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/HexahedralFEMForceField/","title":"HexahedralFEMForceField","text":"<p>Hexahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 method  \"large\" or \"polar\" displacements  large poissonRatio 0.45 youngModulus 5000 hexahedronInfo  Internal hexahedron data  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/HexahedralFEMForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/HexahedralFEMForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.005\" showBoundingTree=\"0\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedralFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetGeometryAlgorithms HexahedronSetTopologyContainer HexahedronSetTopologyModifier QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2QuadTopologicalMapping Quad2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"H\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/nine_hexa.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"Hexa\" /&gt;\n        &lt;include href=\"Objects/HexahedronSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;HexahedralFEMForceField name=\"FEM\" youngModulus=\"100\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"12 15 28 31\" /&gt;\n        &lt;Node name=\"Q\"&gt;\n            &lt;include href=\"Objects/QuadSetTopology.xml\" src=\"@../loader\" /&gt;\n            &lt;Hexa2QuadTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n                &lt;IdentityMapping input=\"@../../Hexa\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"T\"&gt;\n                &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@../Container\" /&gt;\n                &lt;Quad2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", showBoundingTree=\"0\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    H = root.addChild('H')\n    H.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    H.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    H.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/nine_hexa.msh\")\n    H.addObject('MechanicalObject', src=\"@loader\", name=\"Hexa\")\n    H.addObject('include', href=\"Objects/HexahedronSetTopology.xml\", src=\"@loader\")\n    H.addObject('HexahedralFEMForceField', name=\"FEM\", youngModulus=\"100\", poissonRatio=\"0.3\", method=\"large\")\n    H.addObject('DiagonalMass', massDensity=\"0.2\")\n    H.addObject('FixedProjectiveConstraint', indices=\"12 15 28 31\")\n\n    Q = H.addChild('Q')\n    Q.addObject('include', href=\"Objects/QuadSetTopology.xml\", src=\"@../loader\")\n    Q.addObject('Hexa2QuadTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n\n    Visu = Q.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    Visu.addObject('IdentityMapping', input=\"@../../Hexa\", output=\"@Visual\")\n\n    T = Q.addChild('T')\n    T.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@../Container\")\n    T.addObject('Quad2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n    T.addObject('TriangleCollisionModel')\n</code></pre> <p>Component/SolidMechanics/FEM/HexahedralFEMForceFieldAndMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedralFEMForceFieldAndMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.3\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"M1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-9\" xmax=\"-6\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"19\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\" /&gt;\n        &lt;HexahedralFEMForceFieldAndMass name=\"FEM\" youngModulus=\"40000\" poissonRatio=\"0.3\" method=\"large\" density=\"1\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;LineCollisionModel /&gt;\n        &lt;PointCollisionModel /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.3\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    M1 = root.addChild('M1')\n    M1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M1.addObject('MechanicalObject')\n    M1.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-9\", xmax=\"-6\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"19\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\")\n    M1.addObject('HexahedralFEMForceFieldAndMass', name=\"FEM\", youngModulus=\"40000\", poissonRatio=\"0.3\", method=\"large\", density=\"1\")\n    M1.addObject('TriangleCollisionModel')\n    M1.addObject('LineCollisionModel')\n    M1.addObject('PointCollisionModel')\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/HexahedralFEMForceFieldAndMass/","title":"HexahedralFEMForceFieldAndMass","text":"<p>Hexahedral finite elements with mass</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> <li><code>HexahedralFEMForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 method  \"large\" or \"polar\" displacements  large poissonRatio 0.45 youngModulus 5000 hexahedronInfo  Internal hexahedron data  density  density == volumetric mass in english (kg.m-3)  1 lumpedMass  Does it use lumped masses?  0 massMatrices  Mass matrices per element (M_i)  totalMass  Total mass per element  particleMasses  Mass per particle  lumpedMasses  Lumped masses  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/HexahedralFEMForceFieldAndMass/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/HexahedralFEMForceFieldAndMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedralFEMForceFieldAndMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.3\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"M1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-9\" xmax=\"-6\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"19\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\" /&gt;\n        &lt;HexahedralFEMForceFieldAndMass name=\"FEM\" youngModulus=\"40000\" poissonRatio=\"0.3\" method=\"large\" density=\"1\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;LineCollisionModel /&gt;\n        &lt;PointCollisionModel /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.3\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    M1 = root.addChild('M1')\n    M1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M1.addObject('MechanicalObject')\n    M1.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-9\", xmax=\"-6\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"19\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\")\n    M1.addObject('HexahedralFEMForceFieldAndMass', name=\"FEM\", youngModulus=\"40000\", poissonRatio=\"0.3\", method=\"large\", density=\"1\")\n    M1.addObject('TriangleCollisionModel')\n    M1.addObject('LineCollisionModel')\n    M1.addObject('PointCollisionModel')\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/HexahedronFEMForceField/","title":"HexahedronFEMForceField","text":"<p>Hexahedral finite elements Hexahedron FEM ForceField Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 method  \"large\" or \"polar\" or \"small\" displacements  large poissonRatio  FEM Poisson Ratio in Hooke's law [0,0.5[  0.45 youngModulus  FEM Young's modulus in Hooke's law  5000 updateStiffnessMatrix 0 gatherPt  number of dof accumulated per threads during the gather operation (Only use in GPU version)  gatherBsize  number of dof accumulated per threads during the gather operation (Only use in GPU version)  stiffnessMatrices  Stiffness matrices per element (K_i)  initialPoints  Initial Position  Visualization drawing  draw the forcefield if true  1 drawPercentageOffset  size of the hexa  0.15 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/HexahedronFEMForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/HexahedronFEMForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.3\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"M1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" template=\"CompressedRowSparseMatrixMat3x3\"/&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"1\" /&gt;\n        &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-9\" xmax=\"-6\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"19\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\" /&gt;\n        &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"4000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;LineCollisionModel /&gt;\n        &lt;PointCollisionModel /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.3\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    M1 = root.addChild('M1')\n    M1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\", template=\"CompressedRowSparseMatrixMat3x3\")\n    M1.addObject('MechanicalObject')\n    M1.addObject('UniformMass', vertexMass=\"1\")\n    M1.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-9\", xmax=\"-6\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"19\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\")\n    M1.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"4000\", poissonRatio=\"0.3\", method=\"large\")\n    M1.addObject('TriangleCollisionModel')\n    M1.addObject('LineCollisionModel')\n    M1.addObject('PointCollisionModel')\n</code></pre> <p>Component/SolidMechanics/FEM/HexahedronFEMForceFieldAndMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceFieldAndMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.3\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"M1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-9\" xmax=\"-6\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"19\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\" /&gt;\n        &lt;HexahedronFEMForceFieldAndMass name=\"FEM\" youngModulus=\"40000\" poissonRatio=\"0.3\" method=\"large\" density=\"1\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;LineCollisionModel /&gt;\n        &lt;PointCollisionModel /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.3\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    M1 = root.addChild('M1')\n    M1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M1.addObject('MechanicalObject')\n    M1.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-9\", xmax=\"-6\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"19\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\")\n    M1.addObject('HexahedronFEMForceFieldAndMass', name=\"FEM\", youngModulus=\"40000\", poissonRatio=\"0.3\", method=\"large\", density=\"1\")\n    M1.addObject('TriangleCollisionModel')\n    M1.addObject('LineCollisionModel')\n    M1.addObject('PointCollisionModel')\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/HexahedronFEMForceFieldAndMass/","title":"HexahedronFEMForceFieldAndMass","text":"<p>Hexahedral finite elements with mass</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> <li><code>HexahedronFEMForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 method  \"large\" or \"polar\" or \"small\" displacements  large poissonRatio  FEM Poisson Ratio in Hooke's law [0,0.5[  0.45 youngModulus  FEM Young's modulus in Hooke's law  5000 updateStiffnessMatrix 0 gatherPt  number of dof accumulated per threads during the gather operation (Only use in GPU version)  gatherBsize  number of dof accumulated per threads during the gather operation (Only use in GPU version)  stiffnessMatrices  Stiffness matrices per element (K_i)  initialPoints  Initial Position  massMatrices  Mass matrices per element (M_i)  density  density == volumetric mass in english (kg.m-3)  1 lumpedMass  Does it use lumped masses?  0 Visualization drawing  draw the forcefield if true  1 drawPercentageOffset  size of the hexa  0.15 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/HexahedronFEMForceFieldAndMass/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/HexahedronFEMForceFieldAndMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceFieldAndMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.3\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"M1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-9\" xmax=\"-6\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"19\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\" /&gt;\n        &lt;HexahedronFEMForceFieldAndMass name=\"FEM\" youngModulus=\"40000\" poissonRatio=\"0.3\" method=\"large\" density=\"1\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;LineCollisionModel /&gt;\n        &lt;PointCollisionModel /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.3\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    M1 = root.addChild('M1')\n    M1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M1.addObject('MechanicalObject')\n    M1.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-9\", xmax=\"-6\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"19\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\")\n    M1.addObject('HexahedronFEMForceFieldAndMass', name=\"FEM\", youngModulus=\"40000\", poissonRatio=\"0.3\", method=\"large\", density=\"1\")\n    M1.addObject('TriangleCollisionModel')\n    M1.addObject('LineCollisionModel')\n    M1.addObject('PointCollisionModel')\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/QuadBendingFEMForceField/","title":"QuadBendingFEMForceField","text":"<p>Bending Quad finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 quadInfo  Internal quad data  vertexInfo  Internal node data  edgeInfo  Internal edge data  method  large: large displacements, small: small displacements  small poissonRatio  Poisson ratio in Hooke's law (vector)  0.45 youngModulus  Young modulus in Hooke's law (vector)  1000 thickness  Thickness of the elements  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/QuadBendingFEMForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/QuadBendingFEMForceField.scn</p> XMLPython <pre><code>&lt;!-- Mechanical QuadbendingFEMForceField Example --&gt;\n&lt;Node name=\"root\" gravity=\"-1 0 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshVTKLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [QuadBendingFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showForceFields showBehaviorModels\" /&gt;\n    &lt;CollisionPipeline name=\"CollisionPipeline\" verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"collision response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"proximity\" alarmDistance=\"0.5\" contactDistance=\"0.33\"/&gt;\n\n    &lt;Node name=\"skin\" gravity=\"0 0 -9.81\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshVTKLoader filename=\"mesh/test_quad.vtk\" name=\"loader\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\" src=\"@loader\" name=\"DOFs\" /&gt;\n        &lt;QuadSetTopologyContainer src=\"@loader\" name=\"topology\" /&gt;\n        &lt;QuadSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;QuadSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.5\" name=\"mass\" /&gt;\n\n        &lt;QuadBendingFEMForceField name=\"FEM\" youngModulus=\"2000\" poissonRatio=\"0.49\" thickness=\"0.5\" method=\"small\" /&gt;\n\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58\" /&gt;\n\n        &lt;Node name=\"Visual\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping template=\"Vec3,Vec3\" name=\"visualMapping\" input=\"@../DOFs\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"-1 0 0\", dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showVisual showForceFields showBehaviorModels\")\n    root.addObject('CollisionPipeline', name=\"CollisionPipeline\", verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"collision response\", response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"proximity\", alarmDistance=\"0.5\", contactDistance=\"0.33\")\n\n    skin = root.addChild('skin', gravity=\"0 0 -9.81\")\n    skin.addObject('EulerImplicitSolver', name=\"cg_odesolver\")\n    skin.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    skin.addObject('MeshVTKLoader', filename=\"mesh/test_quad.vtk\", name=\"loader\")\n    skin.addObject('MechanicalObject', template=\"Vec3\", src=\"@loader\", name=\"DOFs\")\n    skin.addObject('QuadSetTopologyContainer', src=\"@loader\", name=\"topology\")\n    skin.addObject('QuadSetTopologyModifier', name=\"Modifier\")\n    skin.addObject('QuadSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    skin.addObject('DiagonalMass', massDensity=\"0.5\", name=\"mass\")\n    skin.addObject('QuadBendingFEMForceField', name=\"FEM\", youngModulus=\"2000\", poissonRatio=\"0.49\", thickness=\"0.5\", method=\"small\")\n    skin.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58\")\n\n    Visual = skin.addChild('Visual')\n    Visual.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    Visual.addObject('IdentityMapping', template=\"Vec3,Vec3\", name=\"visualMapping\", input=\"@../DOFs\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TetrahedralCorotationalFEMForceField/","title":"TetrahedralCorotationalFEMForceField","text":"<p>Corotational FEM Tetrahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 tetrahedronInfo  Internal tetrahedron data  method  \"small\", \"large\" (by QR) or \"polar\" displacements  large poissonRatio  FEM Poisson Ratio  0.45 youngModulus  FEM Young Modulus  5000 localStiffnessFactor  Allow specification of different stiffness per element. If there are N element and M values are specified, the youngModulus factor for element i would be localStiffnessFactor[i*M/N]  updateStiffnessMatrix 0 computeGlobalMatrix 0 Visualization drawing   draw the forcefield if true  1 drawColor1   draw color for faces 1  0 0 1 1 drawColor2   draw color for faces 2  0 0.5 1 1 drawColor3   draw color for faces 3  0 1 1 1 drawColor4   draw color for faces 4  0.5 1 1 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TetrahedralCorotationalFEMForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/TetrahedralCorotationalFEMForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!-- Mechanical Tetrahedral Corotational FEM Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;CollisionResponse /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"BeamFEM_SMALL\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" /&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"CFEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" method=\"small\" /&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 30 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"BeamFEM_LARGE\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" translation=\"11 0 0\"/&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\" /&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"CFEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 30 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"BeamFEM_POLAR\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" translation=\"22 0 0\"/&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"CFEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" method=\"polar\" /&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 30 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('CollisionResponse')\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    BeamFEM_SMALL = root.addChild('BeamFEM_SMALL')\n    BeamFEM_SMALL.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_SMALL.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    BeamFEM_SMALL.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_SMALL.addObject('MechanicalObject', template=\"Vec3\")\n    BeamFEM_SMALL.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_SMALL.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_SMALL.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_SMALL.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_SMALL.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_SMALL.addObject('TetrahedralCorotationalFEMForceField', name=\"CFEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", method=\"small\")\n    BeamFEM_SMALL.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 30 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_SMALL.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n\n    BeamFEM_LARGE = root.addChild('BeamFEM_LARGE')\n    BeamFEM_LARGE.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_LARGE.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    BeamFEM_LARGE.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_LARGE.addObject('MechanicalObject', template=\"Vec3\", translation=\"11 0 0\")\n    BeamFEM_LARGE.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_LARGE.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_LARGE.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_LARGE.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_LARGE.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_LARGE.addObject('TetrahedralCorotationalFEMForceField', name=\"CFEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", method=\"large\")\n    BeamFEM_LARGE.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 30 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_LARGE.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n\n    BeamFEM_POLAR = root.addChild('BeamFEM_POLAR')\n    BeamFEM_POLAR.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_POLAR.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    BeamFEM_POLAR.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_POLAR.addObject('MechanicalObject', template=\"Vec3\", translation=\"22 0 0\")\n    BeamFEM_POLAR.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_POLAR.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_POLAR.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_POLAR.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_POLAR.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_POLAR.addObject('TetrahedralCorotationalFEMForceField', name=\"CFEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", method=\"polar\")\n    BeamFEM_POLAR.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 30 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_POLAR.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TetrahedronFEMForceField/","title":"TetrahedronFEMForceField","text":"<p>Tetrahedral finite elements Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 initialPoints  Initial Position  method  \"small\", \"large\" (by QR), \"polar\" or \"svd\" displacements  large poissonRatio  FEM Poisson Ratio in Hooke's law [0,0.5[  0.45 youngModulus  FEM Young's Modulus in Hooke's law  localStiffnessFactor  Allow specification of different stiffness per element. If there are N element and M values are specified, the youngModulus factor for element i would be localStiffnessFactor[i*M/N]  updateStiffnessMatrix 0 computeGlobalMatrix 0 plasticMaxThreshold  Plastic Max Threshold (2-norm of the strain)  0 plasticYieldThreshold  Plastic Yield Threshold (2-norm of the strain)  0.0001 plasticCreep  Plastic Creep Factor * dt [0,1]. Warning this factor depends on dt.  0.9 gatherPt  number of dof accumulated per threads during the gather operation (Only use in GPU version)  gatherBsize  number of dof accumulated per threads during the gather operation (Only use in GPU version)  computeVonMisesStress  compute and display von Mises stress: 0: no computations, 1: using corotational strain, 2: using full Green strain. Set listening=1  0 vonMisesPerElement  von Mises Stress per element  vonMisesPerNode  von Mises Stress per node  vonMisesStressColors  Vector of colors describing the VonMises stress  updateStiffness  udpate structures (precomputed in init) using stiffness parameters in each iteration (set listening=1)  0 Visualization drawHeterogeneousTetra  Draw Heterogeneous Tetra in different color  0 showStressColorMap  Color map used to show stress values  Blue to Red showStressAlpha  Alpha for vonMises visualisation  1 showVonMisesStressPerNode  draw points showing vonMises stress interpolated in nodes  0 showVonMisesStressPerNodeColorMap  draw elements showing vonMises stress interpolated in nodes  0 showVonMisesStressPerElement  draw triangles showing vonMises stress interpolated in elements  0 showElementGapScale  draw gap between elements (when showWireFrame is disabled) [0,1]: 0: no gap, 1: no element  0.333 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the tetrahedron topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TetrahedronFEMForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/TetrahedronFEMForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n\n    &lt;Node name=\"BeamFEM_SMALL\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\"/&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" /&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\"\n                                  method=\"small\" computeVonMisesStress=\"2\" showVonMisesStressPerElement=\"true\"/&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 50 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"BeamFEM_LARGE\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" translation=\"11 0 0\"/&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\"\n                                  method=\"large\" computeVonMisesStress=\"1\" showVonMisesStressPerElement=\"true\"/&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 50 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"BeamFEM_POLAR\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" translation=\"22 0 0\"/&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\" /&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\"\n                                  method=\"polar\" computeVonMisesStress=\"1\" showVonMisesStressPerElement=\"true\"/&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 50 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"BeamFEM_SVD\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" translation=\"33 0 0\"/&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\"\n                                  method=\"svd\" computeVonMisesStress=\"1\" showVonMisesStressPerElement=\"true\"/&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 50 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n\n    BeamFEM_SMALL = root.addChild('BeamFEM_SMALL')\n    BeamFEM_SMALL.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_SMALL.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    BeamFEM_SMALL.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_SMALL.addObject('MechanicalObject', template=\"Vec3\")\n    BeamFEM_SMALL.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_SMALL.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_SMALL.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_SMALL.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_SMALL.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_SMALL.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"small\", computeVonMisesStress=\"2\", showVonMisesStressPerElement=\"true\")\n    BeamFEM_SMALL.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 50 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_SMALL.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n\n    BeamFEM_LARGE = root.addChild('BeamFEM_LARGE')\n    BeamFEM_LARGE.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_LARGE.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    BeamFEM_LARGE.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_LARGE.addObject('MechanicalObject', template=\"Vec3\", translation=\"11 0 0\")\n    BeamFEM_LARGE.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_LARGE.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_LARGE.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_LARGE.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_LARGE.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_LARGE.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"large\", computeVonMisesStress=\"1\", showVonMisesStressPerElement=\"true\")\n    BeamFEM_LARGE.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 50 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_LARGE.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n\n    BeamFEM_POLAR = root.addChild('BeamFEM_POLAR')\n    BeamFEM_POLAR.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_POLAR.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    BeamFEM_POLAR.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_POLAR.addObject('MechanicalObject', template=\"Vec3\", translation=\"22 0 0\")\n    BeamFEM_POLAR.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_POLAR.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_POLAR.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_POLAR.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_POLAR.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_POLAR.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"polar\", computeVonMisesStress=\"1\", showVonMisesStressPerElement=\"true\")\n    BeamFEM_POLAR.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 50 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_POLAR.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n\n    BeamFEM_SVD = root.addChild('BeamFEM_SVD')\n    BeamFEM_SVD.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_SVD.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    BeamFEM_SVD.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_SVD.addObject('MechanicalObject', template=\"Vec3\", translation=\"33 0 0\")\n    BeamFEM_SVD.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_SVD.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_SVD.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_SVD.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_SVD.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_SVD.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"svd\", computeVonMisesStress=\"1\", showVonMisesStressPerElement=\"true\")\n    BeamFEM_SVD.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 50 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_SVD.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n</code></pre> <p>Component/SolidMechanics/FEM/TetrahedronFEMForceField_assemble.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"BeamFEM_SMALL\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\"/&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" /&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"true\"\n        method=\"small\" computeVonMisesStress=\"2\" showVonMisesStressPerElement=\"true\"/&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 50 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"BeamFEM_LARGE\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"grid\" min=\"-5 -5 0\" max=\"5 5 40\" n=\"5 5 20\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" translation=\"11 0 0\"/&gt;\n\n        &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"true\"\n        method=\"large\" computeVonMisesStress=\"1\" showVonMisesStressPerElement=\"true\"/&gt;\n\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-6 -6 -1 50 6 0.1\" drawBoxes=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" indices=\"@box_roi.indices\" /&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n\n    BeamFEM_SMALL = root.addChild('BeamFEM_SMALL')\n    BeamFEM_SMALL.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_SMALL.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    BeamFEM_SMALL.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_SMALL.addObject('MechanicalObject', template=\"Vec3\")\n    BeamFEM_SMALL.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_SMALL.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_SMALL.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_SMALL.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_SMALL.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_SMALL.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"true\", method=\"small\", computeVonMisesStress=\"2\", showVonMisesStressPerElement=\"true\")\n    BeamFEM_SMALL.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 50 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_SMALL.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n\n    BeamFEM_LARGE = root.addChild('BeamFEM_LARGE')\n    BeamFEM_LARGE.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    BeamFEM_LARGE.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    BeamFEM_LARGE.addObject('RegularGridTopology', name=\"grid\", min=\"-5 -5 0\", max=\"5 5 40\", n=\"5 5 20\")\n    BeamFEM_LARGE.addObject('MechanicalObject', template=\"Vec3\", translation=\"11 0 0\")\n    BeamFEM_LARGE.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    BeamFEM_LARGE.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    BeamFEM_LARGE.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    BeamFEM_LARGE.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    BeamFEM_LARGE.addObject('DiagonalMass', massDensity=\"0.2\")\n    BeamFEM_LARGE.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"true\", method=\"large\", computeVonMisesStress=\"1\", showVonMisesStressPerElement=\"true\")\n    BeamFEM_LARGE.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-6 -6 -1 50 6 0.1\", drawBoxes=\"1\")\n    BeamFEM_LARGE.addObject('FixedProjectiveConstraint', template=\"Vec3\", indices=\"@box_roi.indices\")\n</code></pre> <p>Component/SolidMechanics/FEM/TetrahedronFEMForceField_plasticity.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [PlaneForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showForceFields\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;NewProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n    &lt;Node name=\"Plastic1\"&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" rotation=\"90 0 0\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\"  /&gt;\n        &lt;UniformMass totalMass=\"5\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\" method=\"large\" plasticYieldThreshold=\"0.01\" plasticMaxThreshold=\"0.025\" plasticCreep=\"1\"/&gt;\n        &lt;PlaneForceField normal=\"0 1 0\" d=\"-3\" stiffness=\"100000\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus.obj\" rotation=\"90 0 0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"red\"/&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" rotation=\"90 0 0\"/&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\"  /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"Plastic2\"&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" rotation=\"90 0 0\" translation=\"-6 0 0\"/&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\"  /&gt;\n        &lt;UniformMass totalMass=\"5\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\" method=\"large\" plasticYieldThreshold=\"0.005\" plasticMaxThreshold=\"0.5\" plasticCreep=\"1\"/&gt;\n        &lt;PlaneForceField normal=\"0 1 0\" d=\"-3\" stiffness=\"100000\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" rotation=\"90 0 0\" translation=\"-6 0 0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"blue\"/&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" rotation=\"90 0 0\" translation=\"-6 0 0\"/&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\"  /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"Plastic3\"&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" rotation=\"90 0 0\" translation=\"-12 0 0\"/&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\"  /&gt;\n        &lt;UniformMass totalMass=\"5\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\" method=\"large\" plasticYieldThreshold=\"0.005\" plasticMaxThreshold=\"0.5\" plasticCreep=\".1\"/&gt;\n        &lt;PlaneForceField normal=\"0 1 0\" d=\"-3\" stiffness=\"100000\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/torus.obj\" rotation=\"90 0 0\" translation=\"-12 0 0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"yellow\"/&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" rotation=\"90 0 0\" translation=\"-12 0 0\"/&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\"  /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"Elastic\"&gt;\n    &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" rotation=\"90 0 0\" translation=\"6 0 0\" /&gt;\n    &lt;MeshTopology src=\"@loader\" /&gt;\n    &lt;MechanicalObject src=\"@loader\"  /&gt;\n    &lt;UniformMass totalMass=\"5\" /&gt;\n    &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n    &lt;PlaneForceField normal=\"0 1 0\" d=\"-3\" stiffness=\"100000\" /&gt;\n    &lt;Node name=\"Visu\"&gt;\n    &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus.obj\" rotation=\"90 0 0\" translation=\"6 0 0\" handleSeams=\"1\" /&gt;\n    &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"green\"/&gt;\n    &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n    &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" rotation=\"90 0 0\" translation=\"6 0 0\"/&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\"  /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showForceFields\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('NewProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n\n    Plastic1 = root.addChild('Plastic1')\n    Plastic1.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\", rotation=\"90 0 0\")\n    Plastic1.addObject('MeshTopology', src=\"@loader\")\n    Plastic1.addObject('MechanicalObject', src=\"@loader\")\n    Plastic1.addObject('UniformMass', totalMass=\"5\")\n    Plastic1.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"large\", plasticYieldThreshold=\"0.01\", plasticMaxThreshold=\"0.025\", plasticCreep=\"1\")\n    Plastic1.addObject('PlaneForceField', normal=\"0 1 0\", d=\"-3\", stiffness=\"100000\")\n\n    Visu = Plastic1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus.obj\", rotation=\"90 0 0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"red\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = Plastic1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\", rotation=\"90 0 0\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    Plastic2 = root.addChild('Plastic2')\n    Plastic2.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\", rotation=\"90 0 0\", translation=\"-6 0 0\")\n    Plastic2.addObject('MeshTopology', src=\"@loader\")\n    Plastic2.addObject('MechanicalObject', src=\"@loader\")\n    Plastic2.addObject('UniformMass', totalMass=\"5\")\n    Plastic2.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"large\", plasticYieldThreshold=\"0.005\", plasticMaxThreshold=\"0.5\", plasticCreep=\"1\")\n    Plastic2.addObject('PlaneForceField', normal=\"0 1 0\", d=\"-3\", stiffness=\"100000\")\n\n    Visu = Plastic2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", rotation=\"90 0 0\", translation=\"-6 0 0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"blue\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = Plastic2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\", rotation=\"90 0 0\", translation=\"-6 0 0\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    Plastic3 = root.addChild('Plastic3')\n    Plastic3.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\", rotation=\"90 0 0\", translation=\"-12 0 0\")\n    Plastic3.addObject('MeshTopology', src=\"@loader\")\n    Plastic3.addObject('MechanicalObject', src=\"@loader\")\n    Plastic3.addObject('UniformMass', totalMass=\"5\")\n    Plastic3.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"large\", plasticYieldThreshold=\"0.005\", plasticMaxThreshold=\"0.5\", plasticCreep=\".1\")\n    Plastic3.addObject('PlaneForceField', normal=\"0 1 0\", d=\"-3\", stiffness=\"100000\")\n\n    Visu = Plastic3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/torus.obj\", rotation=\"90 0 0\", translation=\"-12 0 0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = Plastic3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\", rotation=\"90 0 0\", translation=\"-12 0 0\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    Elastic = root.addChild('Elastic')\n    Elastic.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\", rotation=\"90 0 0\", translation=\"6 0 0\")\n    Elastic.addObject('MeshTopology', src=\"@loader\")\n    Elastic.addObject('MechanicalObject', src=\"@loader\")\n    Elastic.addObject('UniformMass', totalMass=\"5\")\n    Elastic.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"large\")\n    Elastic.addObject('PlaneForceField', normal=\"0 1 0\", d=\"-3\", stiffness=\"100000\")\n\n    Visu = Elastic.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus.obj\", rotation=\"90 0 0\", translation=\"6 0 0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = Elastic.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\", rotation=\"90 0 0\", translation=\"6 0 0\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n</code></pre> <p>Component/SolidMechanics/FEM/TetrahedronFEMForceField_Chain.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase name=\"N2\" /&gt;\n    &lt;BVHNarrowPhase /&gt;\n    &lt;NewProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"ChainFEM\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM_LARGE\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"red\" dx=\"2.5\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM_POLAR\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"5\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"blue\" dx=\"5\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"5\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM_SVD\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\" method=\"svd\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"yellow\" dx=\"7.5\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase', name=\"N2\")\n    root.addObject('BVHNarrowPhase')\n    root.addObject('NewProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n    root.addObject('DefaultAnimationLoop')\n\n    ChainFEM = root.addChild('ChainFEM')\n\n    TorusFixed = ChainFEM.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"gray\")\n\n    TorusFEM_LARGE = ChainFEM.addChild('TorusFEM_LARGE')\n    TorusFEM_LARGE.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TorusFEM_LARGE.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusFEM_LARGE.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusFEM_LARGE.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM_LARGE.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\")\n    TorusFEM_LARGE.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM_LARGE.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"large\")\n\n    Visu = TorusFEM_LARGE.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"red\", dx=\"2.5\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM_LARGE.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFEM_POLAR = ChainFEM.addChild('TorusFEM_POLAR')\n    TorusFEM_POLAR.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    TorusFEM_POLAR.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusFEM_POLAR.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusFEM_POLAR.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM_POLAR.addObject('MechanicalObject', src=\"@loader\", dx=\"5\")\n    TorusFEM_POLAR.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM_POLAR.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM_POLAR.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"blue\", dx=\"5\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM_POLAR.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFEM_SVD = ChainFEM.addChild('TorusFEM_SVD')\n    TorusFEM_SVD.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    TorusFEM_SVD.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusFEM_SVD.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusFEM_SVD.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM_SVD.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\")\n    TorusFEM_SVD.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM_SVD.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"svd\")\n\n    Visu = TorusFEM_SVD.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"yellow\", dx=\"7.5\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM_SVD.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TriangleFEMForceField/","title":"TriangleFEMForceField","text":"<p>Triangular finite elements for static topology</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 initialPoints  Initial Position  method  large: large displacements, small: small displacements  large poissonRatio  Poisson ratio in Hooke's law  0.3 youngModulus  Young modulus in Hooke's law  1000 thickness  Thickness of the elements  1 planeStrain  Plane strain or plane stress assumption  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TriangleFEMForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/TriangleFEMForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!-- Mechanical MassSpring Group Basic Example --&gt;\n&lt;Node name=\"root\" gravity=\"0 0 1\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangleFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showCollisionModels showMappings showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"M1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"0.1\" /&gt;\n        &lt;RegularGridTopology nx=\"3\" ny=\"3\" nz=\"1\" xmin=\"10\" xmax=\"19\" ymin=\"0\" ymax=\"9\" zmin=\"4\" zmax=\"5\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 8\" /&gt;\n        &lt;TriangleFEMForceField name=\"FEM1\" youngModulus=\"5000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"green\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"M2\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"0.1\" /&gt;\n        &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"1\" xmin=\"20\" xmax=\"29\" ymin=\"0\" ymax=\"9\" zmin=\"8\" zmax=\"9\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 15\" /&gt;\n        &lt;TriangleFEMForceField name=\"FEM2\" youngModulus=\"5000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"blue\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"M3\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"0.1\" /&gt;\n        &lt;RegularGridTopology nx=\"10\" ny=\"10\" nz=\"1\" xmin=\"30\" xmax=\"39\" ymin=\"0\" ymax=\"9\" zmin=\"12\" zmax=\"13\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 9 99\" /&gt;\n        &lt;TriangleFEMForceField name=\"FEM3\" youngModulus=\"50000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 1\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showCollisionModels showMappings showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    M1 = root.addChild('M1')\n    M1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M1.addObject('MechanicalObject')\n    M1.addObject('UniformMass', vertexMass=\"0.1\")\n    M1.addObject('RegularGridTopology', nx=\"3\", ny=\"3\", nz=\"1\", xmin=\"10\", xmax=\"19\", ymin=\"0\", ymax=\"9\", zmin=\"4\", zmax=\"5\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"0 8\")\n    M1.addObject('TriangleFEMForceField', name=\"FEM1\", youngModulus=\"5000\", poissonRatio=\"0.3\", method=\"large\")\n    M1.addObject('TriangleCollisionModel')\n\n    Visu = M1.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"green\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    M2 = root.addChild('M2')\n    M2.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    M2.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M2.addObject('MechanicalObject')\n    M2.addObject('UniformMass', vertexMass=\"0.1\")\n    M2.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"1\", xmin=\"20\", xmax=\"29\", ymin=\"0\", ymax=\"9\", zmin=\"8\", zmax=\"9\")\n    M2.addObject('FixedProjectiveConstraint', indices=\"0 15\")\n    M2.addObject('TriangleFEMForceField', name=\"FEM2\", youngModulus=\"5000\", poissonRatio=\"0.3\", method=\"large\")\n    M2.addObject('TriangleCollisionModel')\n\n    Visu = M2.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"blue\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    M3 = root.addChild('M3')\n    M3.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    M3.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M3.addObject('MechanicalObject')\n    M3.addObject('UniformMass', vertexMass=\"0.1\")\n    M3.addObject('RegularGridTopology', nx=\"10\", ny=\"10\", nz=\"1\", xmin=\"30\", xmax=\"39\", ymin=\"0\", ymax=\"9\", zmin=\"12\", zmax=\"13\")\n    M3.addObject('FixedProjectiveConstraint', indices=\"0 9 99\")\n    M3.addObject('TriangleFEMForceField', name=\"FEM3\", youngModulus=\"50000\", poissonRatio=\"0.3\", method=\"large\")\n    M3.addObject('TriangleCollisionModel')\n\n    Visu = M3.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre> <p>Benchmark/Accuracy/TriangleFEMForceField_compare.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 10 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangleFEMForceField TriangularFEMForceField TriangularFEMForceFieldOptim] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Quad2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n\n    &lt;RegularGridTopology name=\"grid\" n=\"40 1 40\" min=\"0 0 0\" max=\"10 0 10\" /&gt;\n\n    &lt;Node name=\"TriangularFEMForceField\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;QuadSetTopologyContainer name=\"Quad_topo\" src=\"@../grid\" /&gt;\n        &lt;QuadSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;QuadSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n\n        &lt;MechanicalObject name=\"TriangularFEMForceField_dof\" /&gt;\n        &lt;DiagonalMass totalMass=\"1.0\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 39\" /&gt;\n\n        &lt;Node name=\"T\"&gt;\n            &lt;TriangleSetTopologyContainer name=\"Triangle_topo\" /&gt;\n            &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n\n            &lt;Quad2TriangleTopologicalMapping name=\"TriangularFEMForceField_mapTopo\" input=\"@../Quad_topo\" output=\"@Triangle_topo\" /&gt;\n            &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"TriangularFEMForceField_visu\" color=\"red\" /&gt;\n                &lt;IdentityMapping name=\"TriangularFEMForceField_mapping\" input=\"@../..\" output=\"@.\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"TriangularFEMForceFieldOptim\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;QuadSetTopologyContainer name=\"Quad_topo\" src=\"@../grid\" /&gt;\n        &lt;QuadSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;QuadSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n\n        &lt;MechanicalObject name=\"TriangularFEMForceFieldOptim_dof\" /&gt;\n        &lt;DiagonalMass totalMass=\"1.0\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 39\" /&gt;\n\n        &lt;Node name=\"T\"&gt;\n            &lt;TriangleSetTopologyContainer name=\"Triangle_topo\" /&gt;\n            &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n\n            &lt;Quad2TriangleTopologicalMapping name=\"TriangularFEMForceFieldOptim_mapTopo\" input=\"@../Quad_topo\" output=\"@Triangle_topo\" /&gt;\n            &lt;TriangularFEMForceFieldOptim name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"TriangularFEMForceFieldOptim_visu\" color=\"blue\" /&gt;\n                &lt;IdentityMapping name=\"TriangularFEMForceFieldOptim_mapping\" input=\"@../..\" output=\"@.\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"TriangleFEMForceField\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;QuadSetTopologyContainer name=\"Quad_topo\" src=\"@../grid\" /&gt;\n        &lt;QuadSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;QuadSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n\n        &lt;MechanicalObject name=\"TriangleFEMForceField_dof\" /&gt;\n        &lt;DiagonalMass totalMass=\"1.0\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 39\" /&gt;\n\n        &lt;Node name=\"T\"&gt;\n            &lt;TriangleSetTopologyContainer name=\"Triangle_topo\" /&gt;\n            &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n\n            &lt;Quad2TriangleTopologicalMapping name=\"TriangleFEMForceField_mapTopo\" input=\"@../Quad_topo\" output=\"@Triangle_topo\" /&gt;\n            &lt;TriangleFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"TriangleFEMForceField_visu\" color=\"green\" /&gt;\n                &lt;IdentityMapping name=\"TriangleFEMForceField_mapping\" input=\"@../..\" output=\"@.\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 10 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('RegularGridTopology', name=\"grid\", n=\"40 1 40\", min=\"0 0 0\", max=\"10 0 10\")\n\n    TriangularFEMForceField = root.addChild('TriangularFEMForceField')\n    TriangularFEMForceField.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TriangularFEMForceField.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TriangularFEMForceField.addObject('QuadSetTopologyContainer', name=\"Quad_topo\", src=\"@../grid\")\n    TriangularFEMForceField.addObject('QuadSetTopologyModifier', name=\"Modifier\")\n    TriangularFEMForceField.addObject('QuadSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    TriangularFEMForceField.addObject('MechanicalObject', name=\"TriangularFEMForceField_dof\")\n    TriangularFEMForceField.addObject('DiagonalMass', totalMass=\"1.0\")\n    TriangularFEMForceField.addObject('FixedProjectiveConstraint', indices=\"0 39\")\n\n    T = TriangularFEMForceField.addChild('T')\n    T.addObject('TriangleSetTopologyContainer', name=\"Triangle_topo\")\n    T.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    T.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    T.addObject('Quad2TriangleTopologicalMapping', name=\"TriangularFEMForceField_mapTopo\", input=\"@../Quad_topo\", output=\"@Triangle_topo\")\n    T.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", method=\"large\")\n\n    Visu = T.addChild('Visu')\n    Visu.addObject('OglModel', name=\"TriangularFEMForceField_visu\", color=\"red\")\n    Visu.addObject('IdentityMapping', name=\"TriangularFEMForceField_mapping\", input=\"@../..\", output=\"@.\")\n\n    TriangularFEMForceFieldOptim = root.addChild('TriangularFEMForceFieldOptim')\n    TriangularFEMForceFieldOptim.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TriangularFEMForceFieldOptim.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TriangularFEMForceFieldOptim.addObject('QuadSetTopologyContainer', name=\"Quad_topo\", src=\"@../grid\")\n    TriangularFEMForceFieldOptim.addObject('QuadSetTopologyModifier', name=\"Modifier\")\n    TriangularFEMForceFieldOptim.addObject('QuadSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    TriangularFEMForceFieldOptim.addObject('MechanicalObject', name=\"TriangularFEMForceFieldOptim_dof\")\n    TriangularFEMForceFieldOptim.addObject('DiagonalMass', totalMass=\"1.0\")\n    TriangularFEMForceFieldOptim.addObject('FixedProjectiveConstraint', indices=\"0 39\")\n\n    T = TriangularFEMForceFieldOptim.addChild('T')\n    T.addObject('TriangleSetTopologyContainer', name=\"Triangle_topo\")\n    T.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    T.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    T.addObject('Quad2TriangleTopologicalMapping', name=\"TriangularFEMForceFieldOptim_mapTopo\", input=\"@../Quad_topo\", output=\"@Triangle_topo\")\n    T.addObject('TriangularFEMForceFieldOptim', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", method=\"large\")\n\n    Visu = T.addChild('Visu')\n    Visu.addObject('OglModel', name=\"TriangularFEMForceFieldOptim_visu\", color=\"blue\")\n    Visu.addObject('IdentityMapping', name=\"TriangularFEMForceFieldOptim_mapping\", input=\"@../..\", output=\"@.\")\n\n    TriangleFEMForceField = root.addChild('TriangleFEMForceField')\n    TriangleFEMForceField.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TriangleFEMForceField.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TriangleFEMForceField.addObject('QuadSetTopologyContainer', name=\"Quad_topo\", src=\"@../grid\")\n    TriangleFEMForceField.addObject('QuadSetTopologyModifier', name=\"Modifier\")\n    TriangleFEMForceField.addObject('QuadSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    TriangleFEMForceField.addObject('MechanicalObject', name=\"TriangleFEMForceField_dof\")\n    TriangleFEMForceField.addObject('DiagonalMass', totalMass=\"1.0\")\n    TriangleFEMForceField.addObject('FixedProjectiveConstraint', indices=\"0 39\")\n\n    T = TriangleFEMForceField.addChild('T')\n    T.addObject('TriangleSetTopologyContainer', name=\"Triangle_topo\")\n    T.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    T.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    T.addObject('Quad2TriangleTopologicalMapping', name=\"TriangleFEMForceField_mapTopo\", input=\"@../Quad_topo\", output=\"@Triangle_topo\")\n    T.addObject('TriangleFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", method=\"large\")\n\n    Visu = T.addChild('Visu')\n    Visu.addObject('OglModel', name=\"TriangleFEMForceField_visu\", color=\"green\")\n    Visu.addObject('IdentityMapping', name=\"TriangleFEMForceField_mapping\", input=\"@../..\", output=\"@.\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TriangularAnisotropicFEMForceField/","title":"TriangularAnisotropicFEMForceField","text":"<p>Triangular finite element model using anisotropic material</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>TriangularFEMForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 triangleInfo  Internal triangle data  vertexInfo  Internal point data  method  large: large displacements, small: small displacements  large poissonRatio  Poisson ratio in Hooke's law (vector)  0.3 youngModulus  Young modulus in Hooke's law (vector)  1000 rotatedInitialElements  Flag activating rendering of stress directions within each triangle  initialTransformation  Flag activating rendering of stress directions within each triangle  hosfordExponant  Exponant in the Hosford yield criteria  1 criteriaValue  Fracturable threshold used to draw fracturable triangles  1e+15 computePrincipalStress  Compute principal stress for each triangle  0 transverseYoungModulus  transverseYoungModulus  1000 fiberAngle  Fiber angle in global reference frame (in degrees)  0 fiberCenter  Concentric fiber center in global reference frame  localFiberDirection  Computed fibers direction within each triangle  Visualization showStressValue  Flag activating rendering of stress values as a color in each triangle  1 showStressVector  Flag activating rendering of stress directions within each triangle  0 showFracturableTriangles  Flag activating rendering of triangles to fracture  0 showFiber  Flag activating rendering of fiber directions within each triangle  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TriangularFEMForceField/","title":"TriangularFEMForceField","text":"<p>Corotational Triangular finite elements for dynamic topology</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 triangleInfo  Internal triangle data  vertexInfo  Internal point data  method  large: large displacements, small: small displacements  large poissonRatio  Poisson ratio in Hooke's law (vector)  0.3 youngModulus  Young modulus in Hooke's law (vector)  1000 rotatedInitialElements  Flag activating rendering of stress directions within each triangle  initialTransformation  Flag activating rendering of stress directions within each triangle  hosfordExponant  Exponant in the Hosford yield criteria  1 criteriaValue  Fracturable threshold used to draw fracturable triangles  1e+15 computePrincipalStress  Compute principal stress for each triangle  0 Visualization showStressValue  Flag activating rendering of stress values as a color in each triangle  1 showStressVector  Flag activating rendering of stress directions within each triangle  0 showFracturableTriangles  Flag activating rendering of triangles to fracture  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TriangularFEMForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/TriangularFEMForceFieldOptim.scn</p> XMLPython <pre><code>&lt;!-- Mechanical TriangularFEMForceFieldOptim Example --&gt;\n&lt;Node name=\"root\" dt=\"0.05\" gravity=\"0 10 10\" showBoundingTree=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceFieldOptim] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields showWireframe\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;!-- Activate this loader to use a square mesh with only two triangles (useful to debug base equations) --&gt;\n    &lt;!--&lt;MeshGmshLoader name=\"loaderSquare\" triangles=\"0 1 3  1 2 3\" position=\"0 0 0  1 0 0  1 1 0  0 1 0\" /&gt;--&gt;\n    &lt;!-- Activate this loader to load a square mesh with many triangles --&gt;\n    &lt;MeshGmshLoader filename=\"mesh/square3.msh\" name=\"loaderSquare\" /&gt;\n    &lt;Node name=\"SquareGravity1\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver1\" printLog=\"0\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver verbose=\"0\" printLog=\"0\" iterations=\"25\" name=\"linearsolver1\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"Container\" src=\"@../loaderSquare\" /&gt;\n        &lt;MechanicalObject name=\"DOFs\" src=\"@../loaderSquare\" scale=\"100\"  /&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.005\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2\" /&gt;\n        &lt;TriangularFEMForceFieldOptim name=\"FEM\" youngModulus=\"600\" poissonRatio=\"0.3\" method=\"large\" printLog=\"1\"/&gt;\n        &lt;Node name=\"VisuA\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping name=\"visualMapping\" input=\"@../DOFs\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;!-- Activate this version to compare computed stiffness matrix (addKToMatrix) with addDForce --&gt;\n    &lt;!--&lt;Node name=\"SquareGravityTestMatrixConstruction\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver2\" printLog=\"0\" /&gt;\n        &lt;CGLinearSolver template=\"SparseMatrix\" verbose=\"0\" printLog=\"1\" iterations=\"25\" name=\"linearsolver2\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"Container\" src=\"@../loaderSquare\" /&gt;\n        &lt;MechanicalObject name=\"DOFs\" src=\"@../loaderSquare\" scale=\"100\"  /&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.005\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2\" /&gt;\n        &lt;TriangularFEMForceFieldOptim name=\"FEM\" youngModulus=\"600\" poissonRatio=\"0.3\" method=\"large\" printLog=\"1\"/&gt;\n        &lt;Node name=\"VisuA\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping name=\"visualMapping\" input=\"@../DOFs\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;--&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", gravity=\"0 10 10\", showBoundingTree=\"0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields showWireframe\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshGmshLoader', filename=\"mesh/square3.msh\", name=\"loaderSquare\")\n\n    SquareGravity1 = root.addChild('SquareGravity1')\n    SquareGravity1.addObject('EulerImplicitSolver', name=\"odesolver1\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity1.addObject('CGLinearSolver', verbose=\"0\", printLog=\"0\", iterations=\"25\", name=\"linearsolver1\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareGravity1.addObject('TriangleSetTopologyContainer', name=\"Container\", src=\"@../loaderSquare\")\n    SquareGravity1.addObject('MechanicalObject', name=\"DOFs\", src=\"@../loaderSquare\", scale=\"100\")\n    SquareGravity1.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity1.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    SquareGravity1.addObject('DiagonalMass', massDensity=\"0.005\")\n    SquareGravity1.addObject('FixedProjectiveConstraint', indices=\"0 1 2\")\n    SquareGravity1.addObject('TriangularFEMForceFieldOptim', name=\"FEM\", youngModulus=\"600\", poissonRatio=\"0.3\", method=\"large\", printLog=\"1\")\n\n    VisuA = SquareGravity1.addChild('VisuA')\n    VisuA.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    VisuA.addObject('IdentityMapping', name=\"visualMapping\", input=\"@../DOFs\", output=\"@Visual\")\n</code></pre> <p>Component/SolidMechanics/FEM/TriangularFEMForceField.scn</p> XMLPython <pre><code>&lt;!-- Mechanical TriangularFEMForceField Example --&gt;\n&lt;Node name=\"root\" dt=\"0.05\" gravity=\"0 -9.8 10\" showBoundingTree=\"0\"&gt;\n\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;/Node&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader filename=\"mesh/square3.msh\" name=\"loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"DOFs\" scale3d=\"100 100 0\" /&gt;\n        &lt;TriangleSetTopologyContainer src=\"@loader\" name=\"Container\" /&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.005\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2\" /&gt;\n        &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"600\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;Node name=\"VisuA\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping template=\"Vec3,Vec3\" name=\"visualMapping\" input=\"@../DOFs\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", gravity=\"0 -9.8 10\", showBoundingTree=\"0\")\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareGravity.addObject('MeshGmshLoader', filename=\"mesh/square3.msh\", name=\"loader\")\n    SquareGravity.addObject('MechanicalObject', src=\"@loader\", name=\"DOFs\", scale3d=\"100 100 0\")\n    SquareGravity.addObject('TriangleSetTopologyContainer', src=\"@loader\", name=\"Container\")\n    SquareGravity.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    SquareGravity.addObject('DiagonalMass', massDensity=\"0.005\")\n    SquareGravity.addObject('FixedProjectiveConstraint', indices=\"0 1 2\")\n    SquareGravity.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"600\", poissonRatio=\"0.3\", method=\"large\")\n\n    VisuA = SquareGravity.addChild('VisuA')\n    VisuA.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    VisuA.addObject('IdentityMapping', template=\"Vec3,Vec3\", name=\"visualMapping\", input=\"@../DOFs\", output=\"@Visual\")\n</code></pre> <p>Benchmark/TopologicalChanges/TriangularFEMForceField_RemovingMeshTest.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!-- Automatic Triangle removal on a simple Triangle topology with FEM: Element removed are define in: ./RemovingTrianglesProcess.txt --&gt;\n&lt;Node name=\"root\" gravity=\"0 -9 0\" dt=\"0.01\"  bbox=\"-1 -1 -1 1 1 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Utility\"/&gt; &lt;!-- Needed to use components [TopologicalChangeProcessor] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase name=\"N2\" /&gt;\n    &lt;BVHNarrowPhase /&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\" name=\"linear solver\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"true\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" src=\"@loader\" template=\"Vec3\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"Triangle_topo\" src=\"@loader\"/&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass template=\"Vec3,Vec3\" name=\"mass\" massDensity=\"1.0\" /&gt;\n\n        &lt;TriangularFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"60\" /&gt;\n\n        &lt;TopologicalChangeProcessor listening=\"1\" filename=\"RemovingTrianglesProcess_constraint.txt\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9 0\", dt=\"0.01\", bbox=\"-1 -1 -1 1 1 1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Utility\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase', name=\"N2\")\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\", name=\"linear solver\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', name=\"dofs\", src=\"@loader\", template=\"Vec3\")\n    SquareGravity.addObject('TriangleSetTopologyContainer', name=\"Triangle_topo\", src=\"@loader\")\n    SquareGravity.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    SquareGravity.addObject('DiagonalMass', template=\"Vec3,Vec3\", name=\"mass\", massDensity=\"1.0\")\n    SquareGravity.addObject('TriangularFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"60\")\n    SquareGravity.addObject('TopologicalChangeProcessor', listening=\"1\", filename=\"RemovingTrianglesProcess_constraint.txt\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TriangularFEMForceFieldOptim/","title":"TriangularFEMForceFieldOptim","text":"<p>Corotational Triangular finite elements Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.Elastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 triangleInfo  Internal triangle data (persistent)  triangleState  Internal triangle data (time-dependent)  poissonRatio  Poisson ratio in Hooke's law  0.3 youngModulus  Young modulus in Hooke's law  1000 damping  Ratio damping/stiffness  0 restScale  Scale factor applied to rest positions (to simulate pre-stretched materials)  1 computePrincipalStress  Compute principal stress for each triangle  0 stressMaxValue  Max stress value computed over the triangulation  0 Visualization showStressVector  Flag activating rendering of stress directions within each triangle  0 showStressThreshold  Threshold value to render only stress vectors higher to this threshold  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/Elastic/TriangularFEMForceFieldOptim/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/TriangularFEMForceFieldOptim.scn</p> XMLPython <pre><code>&lt;!-- Mechanical TriangularFEMForceFieldOptim Example --&gt;\n&lt;Node name=\"root\" dt=\"0.05\" gravity=\"0 10 10\" showBoundingTree=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceFieldOptim] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields showWireframe\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;!-- Activate this loader to use a square mesh with only two triangles (useful to debug base equations) --&gt;\n    &lt;!--&lt;MeshGmshLoader name=\"loaderSquare\" triangles=\"0 1 3  1 2 3\" position=\"0 0 0  1 0 0  1 1 0  0 1 0\" /&gt;--&gt;\n    &lt;!-- Activate this loader to load a square mesh with many triangles --&gt;\n    &lt;MeshGmshLoader filename=\"mesh/square3.msh\" name=\"loaderSquare\" /&gt;\n    &lt;Node name=\"SquareGravity1\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver1\" printLog=\"0\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver verbose=\"0\" printLog=\"0\" iterations=\"25\" name=\"linearsolver1\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"Container\" src=\"@../loaderSquare\" /&gt;\n        &lt;MechanicalObject name=\"DOFs\" src=\"@../loaderSquare\" scale=\"100\"  /&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.005\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2\" /&gt;\n        &lt;TriangularFEMForceFieldOptim name=\"FEM\" youngModulus=\"600\" poissonRatio=\"0.3\" method=\"large\" printLog=\"1\"/&gt;\n        &lt;Node name=\"VisuA\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping name=\"visualMapping\" input=\"@../DOFs\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;!-- Activate this version to compare computed stiffness matrix (addKToMatrix) with addDForce --&gt;\n    &lt;!--&lt;Node name=\"SquareGravityTestMatrixConstruction\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver2\" printLog=\"0\" /&gt;\n        &lt;CGLinearSolver template=\"SparseMatrix\" verbose=\"0\" printLog=\"1\" iterations=\"25\" name=\"linearsolver2\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"Container\" src=\"@../loaderSquare\" /&gt;\n        &lt;MechanicalObject name=\"DOFs\" src=\"@../loaderSquare\" scale=\"100\"  /&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.005\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2\" /&gt;\n        &lt;TriangularFEMForceFieldOptim name=\"FEM\" youngModulus=\"600\" poissonRatio=\"0.3\" method=\"large\" printLog=\"1\"/&gt;\n        &lt;Node name=\"VisuA\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping name=\"visualMapping\" input=\"@../DOFs\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;--&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", gravity=\"0 10 10\", showBoundingTree=\"0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields showWireframe\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshGmshLoader', filename=\"mesh/square3.msh\", name=\"loaderSquare\")\n\n    SquareGravity1 = root.addChild('SquareGravity1')\n    SquareGravity1.addObject('EulerImplicitSolver', name=\"odesolver1\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity1.addObject('CGLinearSolver', verbose=\"0\", printLog=\"0\", iterations=\"25\", name=\"linearsolver1\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareGravity1.addObject('TriangleSetTopologyContainer', name=\"Container\", src=\"@../loaderSquare\")\n    SquareGravity1.addObject('MechanicalObject', name=\"DOFs\", src=\"@../loaderSquare\", scale=\"100\")\n    SquareGravity1.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity1.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    SquareGravity1.addObject('DiagonalMass', massDensity=\"0.005\")\n    SquareGravity1.addObject('FixedProjectiveConstraint', indices=\"0 1 2\")\n    SquareGravity1.addObject('TriangularFEMForceFieldOptim', name=\"FEM\", youngModulus=\"600\", poissonRatio=\"0.3\", method=\"large\", printLog=\"1\")\n\n    VisuA = SquareGravity1.addChild('VisuA')\n    VisuA.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    VisuA.addObject('IdentityMapping', name=\"visualMapping\", input=\"@../DOFs\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/HyperElastic/PlasticMaterial/","title":"PlasticMaterial","text":"<p>Plastic material</p> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.HyperElastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::hyperelastic::material</code></p> <p>parents: </p> <ul> <li><code>BaseMaterial</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 poissonRatio  Poisson ratio in Hooke's law  0.45 youngModulus  Young modulus in Hooke's law  3000 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/30_SolidMechanics/10_FEM/HyperElastic/StandardTetrahedralFEMForceField/","title":"StandardTetrahedralFEMForceField","text":"<p>Generic Tetrahedral finite elements Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.HyperElastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::hyperelastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 materialName  the name of the material to be used  ArrudaBoyce ParameterSet  The global parameters specifying the material  AnisotropyDirections  The global directions of anisotropy of the material  ParameterFile  the name of the file describing the material parameters for all tetrahedra  myFile.param tetrahedronInfo  Internal tetrahedron data  edgeInfo  Internal edge data  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/HyperElastic/StandardTetrahedralFEMForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/StandardTetrahedralFEMForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.005\" showBoundingTree=\"0\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.HyperElastic\"/&gt; &lt;!-- Needed to use components [StandardTetrahedralFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [Visual3DText VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showForceFields showBehaviorModels\" /&gt;\n\n    &lt;Node name=\"Corrotational\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\" min=\"0 0 0\" max=\"1 1 2.7\" n=\"3 3 8\" p0=\"0 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\"/&gt;\n        &lt;UniformMass/&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" /&gt;\n\n        &lt;BoxROI drawBoxes=\"0\" box=\"0 0 0 1 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n        &lt;Visual3DText text=\"Corrotational\" position=\"1 0 -0.5\" scale=\"0.2\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"ArrudaBoyce\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\" min=\"0 0 0\" max=\"1 1 2.7\" n=\"3 3 8\" p0=\"2 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\"/&gt;\n        &lt;UniformMass/&gt;\n\n        &lt;Node name=\"tetras\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../\" output=\"@Container\" printLog=\"0\" /&gt;\n\n            &lt;StandardTetrahedralFEMForceField name=\"FEM\" ParameterSet=\"3448.2759 31034.483\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;BoxROI drawBoxes=\"1\" box=\"2 0 0 3 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n        &lt;Visual3DText text=\"ArrudaBoyce\" position=\"3 0 -0.5\" scale=\"0.2\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"StVenantKirchhoff\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\" min=\"0 0 0\" max=\"1 1 2.7\" n=\"3 3 8\" p0=\"4 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\"/&gt;\n        &lt;UniformMass/&gt;\n\n        &lt;Node name=\"tetras\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../\" output=\"@Container\" printLog=\"0\" /&gt;\n\n            &lt;StandardTetrahedralFEMForceField name=\"FEM\" ParameterSet=\"3448.2759 31034.483\" materialName=\"StVenantKirchhoff\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;BoxROI drawBoxes=\"1\" box=\"4 0 0 5 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n        &lt;Visual3DText text=\"StVenantKirchhoff\" position=\"5 0 -0.5\" scale=\"0.2\" /&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"NeoHookean\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\" min=\"0 0 0\" max=\"1 1 2.7\" n=\"3 3 8\" p0=\"6 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\"/&gt;\n        &lt;UniformMass/&gt;\n\n        &lt;Node name=\"tetras\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../\" output=\"@Container\" printLog=\"0\" /&gt;\n\n            &lt;StandardTetrahedralFEMForceField name=\"FEM\" ParameterSet=\"3448.2759 31034.483\" materialName=\"NeoHookean\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;BoxROI drawBoxes=\"1\" box=\"6 0 0 7 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n        &lt;Visual3DText text=\"NeoHookean\" position=\"7 0 -0.5\" scale=\"0.2\" /&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"MooneyRivlin\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\" min=\"0 0 0\" max=\"1 1 2.7\" n=\"3 3 8\" p0=\"8 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\"/&gt;\n        &lt;UniformMass/&gt;\n\n        &lt;Node name=\"tetras\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../\" output=\"@Container\" printLog=\"0\" /&gt;\n\n            &lt;StandardTetrahedralFEMForceField name=\"FEM\" ParameterSet=\"5000 7000 10\" materialName=\"MooneyRivlin\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;BoxROI drawBoxes=\"1\" box=\"8 0 0 9 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n        &lt;Visual3DText text=\"MooneyRivlin\" position=\"9 0 -0.5\" scale=\"0.2\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", showBoundingTree=\"0\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.HyperElastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showForceFields showBehaviorModels\")\n\n    Corrotational = root.addChild('Corrotational')\n    Corrotational.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    Corrotational.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Corrotational.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"3 3 8\", p0=\"0 0 0\")\n    Corrotational.addObject('MechanicalObject', name=\"mechObj\")\n    Corrotational.addObject('UniformMass')\n    Corrotational.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\")\n    Corrotational.addObject('BoxROI', drawBoxes=\"0\", box=\"0 0 0 1 1 0.05\", name=\"box\")\n    Corrotational.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    Corrotational.addObject('Visual3DText', text=\"Corrotational\", position=\"1 0 -0.5\", scale=\"0.2\")\n\n    ArrudaBoyce = root.addChild('ArrudaBoyce')\n    ArrudaBoyce.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    ArrudaBoyce.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    ArrudaBoyce.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"3 3 8\", p0=\"2 0 0\")\n    ArrudaBoyce.addObject('MechanicalObject', name=\"mechObj\")\n    ArrudaBoyce.addObject('UniformMass')\n\n    tetras = ArrudaBoyce.addChild('tetras')\n    tetras.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    tetras.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    tetras.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    tetras.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../\", output=\"@Container\", printLog=\"0\")\n    tetras.addObject('StandardTetrahedralFEMForceField', name=\"FEM\", ParameterSet=\"3448.2759 31034.483\")\n    ArrudaBoyce.addObject('BoxROI', drawBoxes=\"1\", box=\"2 0 0 3 1 0.05\", name=\"box\")\n    ArrudaBoyce.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    ArrudaBoyce.addObject('Visual3DText', text=\"ArrudaBoyce\", position=\"3 0 -0.5\", scale=\"0.2\")\n\n    StVenantKirchhoff = root.addChild('StVenantKirchhoff')\n    StVenantKirchhoff.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    StVenantKirchhoff.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    StVenantKirchhoff.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"3 3 8\", p0=\"4 0 0\")\n    StVenantKirchhoff.addObject('MechanicalObject', name=\"mechObj\")\n    StVenantKirchhoff.addObject('UniformMass')\n\n    tetras = StVenantKirchhoff.addChild('tetras')\n    tetras.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    tetras.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    tetras.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    tetras.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../\", output=\"@Container\", printLog=\"0\")\n    tetras.addObject('StandardTetrahedralFEMForceField', name=\"FEM\", ParameterSet=\"3448.2759 31034.483\", materialName=\"StVenantKirchhoff\")\n    StVenantKirchhoff.addObject('BoxROI', drawBoxes=\"1\", box=\"4 0 0 5 1 0.05\", name=\"box\")\n    StVenantKirchhoff.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    StVenantKirchhoff.addObject('Visual3DText', text=\"StVenantKirchhoff\", position=\"5 0 -0.5\", scale=\"0.2\")\n\n    NeoHookean = root.addChild('NeoHookean')\n    NeoHookean.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    NeoHookean.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    NeoHookean.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"3 3 8\", p0=\"6 0 0\")\n    NeoHookean.addObject('MechanicalObject', name=\"mechObj\")\n    NeoHookean.addObject('UniformMass')\n\n    tetras = NeoHookean.addChild('tetras')\n    tetras.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    tetras.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    tetras.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    tetras.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../\", output=\"@Container\", printLog=\"0\")\n    tetras.addObject('StandardTetrahedralFEMForceField', name=\"FEM\", ParameterSet=\"3448.2759 31034.483\", materialName=\"NeoHookean\")\n    NeoHookean.addObject('BoxROI', drawBoxes=\"1\", box=\"6 0 0 7 1 0.05\", name=\"box\")\n    NeoHookean.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    NeoHookean.addObject('Visual3DText', text=\"NeoHookean\", position=\"7 0 -0.5\", scale=\"0.2\")\n\n    MooneyRivlin = root.addChild('MooneyRivlin')\n    MooneyRivlin.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    MooneyRivlin.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    MooneyRivlin.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"3 3 8\", p0=\"8 0 0\")\n    MooneyRivlin.addObject('MechanicalObject', name=\"mechObj\")\n    MooneyRivlin.addObject('UniformMass')\n\n    tetras = MooneyRivlin.addChild('tetras')\n    tetras.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    tetras.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    tetras.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    tetras.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../\", output=\"@Container\", printLog=\"0\")\n    tetras.addObject('StandardTetrahedralFEMForceField', name=\"FEM\", ParameterSet=\"5000 7000 10\", materialName=\"MooneyRivlin\")\n    MooneyRivlin.addObject('BoxROI', drawBoxes=\"1\", box=\"8 0 0 9 1 0.05\", name=\"box\")\n    MooneyRivlin.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    MooneyRivlin.addObject('Visual3DText', text=\"MooneyRivlin\", position=\"9 0 -0.5\", scale=\"0.2\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/HyperElastic/TetrahedronHyperelasticityFEMForceField/","title":"TetrahedronHyperelasticityFEMForceField","text":"<p>Generic Tetrahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.HyperElastic</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::hyperelastic</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 matrixRegularization  Regularization of the Stiffness Matrix (between true or false)  0 materialName  the name of the material to be used  ArrudaBoyce ParameterSet  The global parameters specifying the material  AnisotropyDirections  The global directions of anisotropy of the material  tetrahedronInfo  Internal tetrahedron data  edgeInfo  Internal edge data  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/HyperElastic/TetrahedronHyperelasticityFEMForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/TetrahedronHyperelasticityFEMForceField_invertedTets.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.00005\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [SparseLDLSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSystem\"/&gt; &lt;!-- Needed to use components [ConstantSparsityPatternSystem] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.HyperElastic\"/&gt; &lt;!-- Needed to use components [TetrahedronHyperelasticityFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;/Node&gt;\n\n    &lt;VisualStyle displayFlags=\"showForceFields showBehaviorModels\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"StableNeoHookean\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver\"/&gt;\n        &lt;ConstantSparsityPatternSystem template=\"CompressedRowSparseMatrixd\" name=\"A\"/&gt;\n        &lt;SparseLDLSolver template=\"CompressedRowSparseMatrixd\"/&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\"     min=\"0 0 0\" max=\"1 1 2.7\" n=\"6 6 16\" p0=\"0 0 0\"/&gt;\n        &lt;RegularGridTopology name=\"hexaGridRest\" min=\"0 0 0\" max=\"1 1 -2.7\"   n=\"6 6 16\" p0=\"0 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\" rest_position=\"@hexaGrid.position\" position=\"@hexaGridRest.position\"/&gt;\n        &lt;MeshMatrixMass totalMass=\"1.0\"/&gt;\n\n        &lt;Node name=\"tetras\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../hexaGrid\" output=\"@Container\" printLog=\"0\" /&gt;\n\n            &lt;TetrahedronHyperelasticityFEMForceField name=\"FEM\" ParameterSet=\"1644295.30201342 33557.0469798658\" materialName=\"StableNeoHookean\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;BoxROI drawBoxes=\"1\" box=\"0 0 0 1 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.00005\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSystem\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.HyperElastic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showForceFields showBehaviorModels\")\n    root.addObject('DefaultAnimationLoop')\n\n    StableNeoHookean = root.addChild('StableNeoHookean')\n    StableNeoHookean.addObject('EulerImplicitSolver', name=\"odesolver\")\n    StableNeoHookean.addObject('ConstantSparsityPatternSystem', template=\"CompressedRowSparseMatrixd\", name=\"A\")\n    StableNeoHookean.addObject('SparseLDLSolver', template=\"CompressedRowSparseMatrixd\")\n    StableNeoHookean.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"6 6 16\", p0=\"0 0 0\")\n    StableNeoHookean.addObject('RegularGridTopology', name=\"hexaGridRest\", min=\"0 0 0\", max=\"1 1 -2.7\", n=\"6 6 16\", p0=\"0 0 0\")\n    StableNeoHookean.addObject('MechanicalObject', name=\"mechObj\", rest_position=\"@hexaGrid.position\", position=\"@hexaGridRest.position\")\n    StableNeoHookean.addObject('MeshMatrixMass', totalMass=\"1.0\")\n\n    tetras = StableNeoHookean.addChild('tetras')\n    tetras.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    tetras.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    tetras.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    tetras.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../hexaGrid\", output=\"@Container\", printLog=\"0\")\n    tetras.addObject('TetrahedronHyperelasticityFEMForceField', name=\"FEM\", ParameterSet=\"1644295.30201342 33557.0469798658\", materialName=\"StableNeoHookean\")\n    StableNeoHookean.addObject('BoxROI', drawBoxes=\"1\", box=\"0 0 0 1 1 0.05\", name=\"box\")\n    StableNeoHookean.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n</code></pre> <p>Component/SolidMechanics/FEM/TetrahedronHyperelasticityFEMForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.005\" showBoundingTree=\"0\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.HyperElastic\"/&gt; &lt;!-- Needed to use components [TetrahedronHyperelasticityFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [Visual3DText VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showForceFields showBehaviorModels\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Corrotational\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\" min=\"0 0 0\" max=\"1 1 2.7\" n=\"3 3 8\" p0=\"0 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\"/&gt;\n        &lt;MeshMatrixMass totalMass=\"1.0\"/&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" /&gt;\n\n        &lt;BoxROI drawBoxes=\"0\" box=\"0 0 0 1 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n        &lt;Visual3DText text=\"Corrotational\" position=\"1 0 -0.5\" scale=\"0.2\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"ArrudaBoyce\"&gt;       \n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\" min=\"0 0 0\" max=\"1 1 2.7\" n=\"3 3 8\" p0=\"2 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\"/&gt;\n        &lt;MeshMatrixMass totalMass=\"1.0\"/&gt;\n\n        &lt;Node name=\"tetras\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../\" output=\"@Container\" printLog=\"0\" /&gt;\n\n            &lt;TetrahedronHyperelasticityFEMForceField name=\"FEM\" ParameterSet=\"3448.2759 31034.483\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;BoxROI drawBoxes=\"1\" box=\"2 0 0 3 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n        &lt;Visual3DText text=\"ArrudaBoyce\" position=\"3 0 -0.5\" scale=\"0.2\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"StVenantKirchhoff\"&gt;     \n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\" min=\"0 0 0\" max=\"1 1 2.7\" n=\"3 3 8\" p0=\"4 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\"/&gt;\n        &lt;MeshMatrixMass totalMass=\"1.0\"/&gt;\n\n        &lt;Node name=\"tetras\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../\" output=\"@Container\" printLog=\"0\" /&gt;\n\n            &lt;TetrahedronHyperelasticityFEMForceField name=\"FEM\" ParameterSet=\"3448.2759 31034.483\" materialName=\"StVenantKirchhoff\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;BoxROI drawBoxes=\"1\" box=\"4 0 0 5 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n        &lt;Visual3DText text=\"StVenantKirchhoff\" position=\"5 0 -0.5\" scale=\"0.2\" /&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"NeoHookean\"&gt;        \n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\" min=\"0 0 0\" max=\"1 1 2.7\" n=\"3 3 8\" p0=\"6 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\"/&gt;\n        &lt;MeshMatrixMass totalMass=\"1.0\"/&gt;\n\n        &lt;Node name=\"tetras\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../\" output=\"@Container\" printLog=\"0\" /&gt;\n\n            &lt;TetrahedronHyperelasticityFEMForceField name=\"FEM\" ParameterSet=\"3448.2759 31034.483\" materialName=\"NeoHookean\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;BoxROI drawBoxes=\"1\" box=\"6 0 0 7 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n        &lt;Visual3DText text=\"NeoHookean\" position=\"7 0 -0.5\" scale=\"0.2\" /&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"MooneyRivlin\"&gt;      \n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;RegularGridTopology name=\"hexaGrid\" min=\"0 0 0\" max=\"1 1 2.7\" n=\"3 3 8\" p0=\"8 0 0\"/&gt;\n\n        &lt;MechanicalObject name=\"mechObj\"/&gt;\n        &lt;MeshMatrixMass totalMass=\"1.0\"/&gt;\n\n        &lt;Node name=\"tetras\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../\" output=\"@Container\" printLog=\"0\" /&gt;\n\n            &lt;TetrahedronHyperelasticityFEMForceField name=\"FEM\" ParameterSet=\"5000 7000 10\" materialName=\"MooneyRivlin\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;BoxROI drawBoxes=\"1\" box=\"8 0 0 9 1 0.05\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\"/&gt;\n        &lt;Visual3DText text=\"MooneyRivlin\" position=\"9 0 -0.5\" scale=\"0.2\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", showBoundingTree=\"0\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.HyperElastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showForceFields showBehaviorModels\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    Corrotational = root.addChild('Corrotational')\n    Corrotational.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    Corrotational.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Corrotational.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"3 3 8\", p0=\"0 0 0\")\n    Corrotational.addObject('MechanicalObject', name=\"mechObj\")\n    Corrotational.addObject('MeshMatrixMass', totalMass=\"1.0\")\n    Corrotational.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\")\n    Corrotational.addObject('BoxROI', drawBoxes=\"0\", box=\"0 0 0 1 1 0.05\", name=\"box\")\n    Corrotational.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    Corrotational.addObject('Visual3DText', text=\"Corrotational\", position=\"1 0 -0.5\", scale=\"0.2\")\n\n    ArrudaBoyce = root.addChild('ArrudaBoyce')\n    ArrudaBoyce.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    ArrudaBoyce.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    ArrudaBoyce.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"3 3 8\", p0=\"2 0 0\")\n    ArrudaBoyce.addObject('MechanicalObject', name=\"mechObj\")\n    ArrudaBoyce.addObject('MeshMatrixMass', totalMass=\"1.0\")\n\n    tetras = ArrudaBoyce.addChild('tetras')\n    tetras.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    tetras.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    tetras.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    tetras.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../\", output=\"@Container\", printLog=\"0\")\n    tetras.addObject('TetrahedronHyperelasticityFEMForceField', name=\"FEM\", ParameterSet=\"3448.2759 31034.483\")\n    ArrudaBoyce.addObject('BoxROI', drawBoxes=\"1\", box=\"2 0 0 3 1 0.05\", name=\"box\")\n    ArrudaBoyce.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    ArrudaBoyce.addObject('Visual3DText', text=\"ArrudaBoyce\", position=\"3 0 -0.5\", scale=\"0.2\")\n\n    StVenantKirchhoff = root.addChild('StVenantKirchhoff')\n    StVenantKirchhoff.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    StVenantKirchhoff.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    StVenantKirchhoff.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"3 3 8\", p0=\"4 0 0\")\n    StVenantKirchhoff.addObject('MechanicalObject', name=\"mechObj\")\n    StVenantKirchhoff.addObject('MeshMatrixMass', totalMass=\"1.0\")\n\n    tetras = StVenantKirchhoff.addChild('tetras')\n    tetras.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    tetras.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    tetras.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    tetras.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../\", output=\"@Container\", printLog=\"0\")\n    tetras.addObject('TetrahedronHyperelasticityFEMForceField', name=\"FEM\", ParameterSet=\"3448.2759 31034.483\", materialName=\"StVenantKirchhoff\")\n    StVenantKirchhoff.addObject('BoxROI', drawBoxes=\"1\", box=\"4 0 0 5 1 0.05\", name=\"box\")\n    StVenantKirchhoff.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    StVenantKirchhoff.addObject('Visual3DText', text=\"StVenantKirchhoff\", position=\"5 0 -0.5\", scale=\"0.2\")\n\n    NeoHookean = root.addChild('NeoHookean')\n    NeoHookean.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    NeoHookean.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    NeoHookean.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"3 3 8\", p0=\"6 0 0\")\n    NeoHookean.addObject('MechanicalObject', name=\"mechObj\")\n    NeoHookean.addObject('MeshMatrixMass', totalMass=\"1.0\")\n\n    tetras = NeoHookean.addChild('tetras')\n    tetras.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    tetras.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    tetras.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    tetras.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../\", output=\"@Container\", printLog=\"0\")\n    tetras.addObject('TetrahedronHyperelasticityFEMForceField', name=\"FEM\", ParameterSet=\"3448.2759 31034.483\", materialName=\"NeoHookean\")\n    NeoHookean.addObject('BoxROI', drawBoxes=\"1\", box=\"6 0 0 7 1 0.05\", name=\"box\")\n    NeoHookean.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    NeoHookean.addObject('Visual3DText', text=\"NeoHookean\", position=\"7 0 -0.5\", scale=\"0.2\")\n\n    MooneyRivlin = root.addChild('MooneyRivlin')\n    MooneyRivlin.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    MooneyRivlin.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    MooneyRivlin.addObject('RegularGridTopology', name=\"hexaGrid\", min=\"0 0 0\", max=\"1 1 2.7\", n=\"3 3 8\", p0=\"8 0 0\")\n    MooneyRivlin.addObject('MechanicalObject', name=\"mechObj\")\n    MooneyRivlin.addObject('MeshMatrixMass', totalMass=\"1.0\")\n\n    tetras = MooneyRivlin.addChild('tetras')\n    tetras.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    tetras.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    tetras.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    tetras.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../\", output=\"@Container\", printLog=\"0\")\n    tetras.addObject('TetrahedronHyperelasticityFEMForceField', name=\"FEM\", ParameterSet=\"5000 7000 10\", materialName=\"MooneyRivlin\")\n    MooneyRivlin.addObject('BoxROI', drawBoxes=\"1\", box=\"8 0 0 9 1 0.05\", name=\"box\")\n    MooneyRivlin.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    MooneyRivlin.addObject('Visual3DText', text=\"MooneyRivlin\", position=\"9 0 -0.5\", scale=\"0.2\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/NonUniform/HexahedronCompositeFEMForceFieldAndMass/","title":"HexahedronCompositeFEMForceFieldAndMass","text":"<p>Non uniform Hexahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.NonUniform</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::nonuniform</code></p> <p>parents: </p> <ul> <li><code>NonUniformHexahedronFEMForceFieldAndMass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 method  \"large\" or \"polar\" or \"small\" displacements  large poissonRatio  FEM Poisson Ratio in Hooke's law [0,0.5[  0.45 youngModulus  FEM Young's modulus in Hooke's law  5000 updateStiffnessMatrix 0 gatherPt  number of dof accumulated per threads during the gather operation (Only use in GPU version)  gatherBsize  number of dof accumulated per threads during the gather operation (Only use in GPU version)  stiffnessMatrices  Stiffness matrices per element (K_i)  initialPoints  Initial Position  massMatrices  Mass matrices per element (M_i)  density  density == volumetric mass in english (kg.m-3)  1 lumpedMass  Does it use lumped masses?  0 nbVirtualFinerLevels  use virtual finer levels, in order to compte non-uniform stiffness  0 useMass  Using this ForceField like a Mass? (rather than using a separated Mass)  1 totalMass 0 finestToCoarse  Does the homogenization is done directly from the finest level to the coarse one?  0 homogenizationMethod  0-&gt;static, 1-&gt;constrained static, 2-&gt;modal analysis  0 completeInterpolation  Is the non-linear, complete interpolation used?  0 useRamification  If SparseGridRamification, are ramifications taken into account?  1 Visualization drawing  draw the forcefield if true  1 drawPercentageOffset  size of the hexa  0.15 drawType 0 drawColor 0 drawSize -1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/NonUniform/HexahedronCompositeFEMForceFieldAndMass/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/HexahedronCompositeFEMForceFieldAndMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" gravity=\"0 -700 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.NonUniform\"/&gt; &lt;!-- Needed to use components [HexahedronCompositeFEMForceFieldAndMass HexahedronCompositeFEMMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridMultipleTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;!-- A soft gelatin object contains 2 bead, one stiff and one soft. Even using large embedding mesh, the\n      HexahedronCompositeFEM permits to well simulate the global behavior, and the HexahedronCompositeFEMMapping\n      permits to have a good interpolation of the inside bead behaviors.--&gt;\n      &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showForceFields\" /&gt;\n    &lt;Node name=\"plane\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/plane_loop_2.obj\" scale=\".2\" handleSeams=\"1\" /&gt;\n        &lt;OglModel name=\"plan\" src=\"@meshLoader_0\" rx=\"90\" rz=\"90\" dy=\"-2.01\" material=\"Default Diffuse 1 1 0.4 0.4 1 Ambient 1 0.8 0.8 0.8 1 Specular 0 1 1 1 1 Emissive 0 1 1 1 1 Shininess 0 45\" /&gt;\n    &lt;/Node&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.3\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"Composite elements with 3 differents material stiffnesses\"&gt;\n        &lt;SparseGridMultipleTopology n=\"6 3 3\" fileTopology=\"mesh/bubille_out.obj\" fileTopologies=\"mesh/bubille_out.obj mesh/bubille_in1.obj mesh/bubille_in2.obj\" nbVirtualFinerLevels=\"3\" finestConnectivity=\"false\" stiffnessCoefs=\"1 0.0001 50\" massCoefs=\"1 1 1\" /&gt;\n        &lt;EulerImplicitSolver vdamping=\"0\" rayleighMass=\"0\" rayleighStiffness=\"0\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n&lt;!--         &lt;SparseLDLSolver printLog=\"false\"/&gt;\n --&gt;        &lt;MechanicalObject /&gt;\n        &lt;HexahedronCompositeFEMForceFieldAndMass drawType=\"0\" lumpedMass=\"false\" nbVirtualFinerLevels=\"2\" youngModulus=\"600\" poissonRatio=\"0.3\" method=\"polar\" density=\".1\" updateStiffnessMatrix=\"false\" printLog=\"0\" /&gt;\n        &lt;BoxConstraint box=\"-5 -2.1 -10    10 -1.9 10\" /&gt;\n        &lt;Node name=\"Collinonunif\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/bubille_out.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;HexahedronCompositeFEMMapping /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;Node name=\"Soft gelatin\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/bubille_out.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"VisualBody\" src=\"@meshLoader_2\" normals=\"0\" color=\"0.1 .8 .3 .6\" /&gt;\n                &lt;IdentityMapping input=\"@..\" output=\"@VisualBody\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"soft bead\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/bubille_in1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualBody1\" src=\"@meshLoader_1\" normals=\"0\" color=\"1 0 0 1\" /&gt;\n            &lt;HexahedronCompositeFEMMapping input=\"@..\" output=\"@VisualBody1\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"stiff bead\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/bubille_in2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualBody2\" src=\"@meshLoader_3\" normals=\"0\" color=\"0 0 1 1\" /&gt;\n            &lt;HexahedronCompositeFEMMapping input=\"@..\" output=\"@VisualBody2\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -700 0\", dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.NonUniform\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showVisual showForceFields\")\n\n    plane = root.addChild('plane')\n    plane.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/plane_loop_2.obj\", scale=\".2\", handleSeams=\"1\")\n    plane.addObject('OglModel', name=\"plan\", src=\"@meshLoader_0\", rx=\"90\", rz=\"90\", dy=\"-2.01\", material=\"Default Diffuse 1 1 0.4 0.4 1 Ambient 1 0.8 0.8 0.8 1 Specular 0 1 1 1 1 Emissive 0 1 1 1 1 Shininess 0 45\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.3\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    Composite elements with 3 differents material stiffnesses = root.addChild('Composite elements with 3 differents material stiffnesses')\n    Composite elements with 3 differents material stiffnesses.addObject('SparseGridMultipleTopology', n=\"6 3 3\", fileTopology=\"mesh/bubille_out.obj\", fileTopologies=\"mesh/bubille_out.obj mesh/bubille_in1.obj mesh/bubille_in2.obj\", nbVirtualFinerLevels=\"3\", finestConnectivity=\"false\", stiffnessCoefs=\"1 0.0001 50\", massCoefs=\"1 1 1\")\n    Composite elements with 3 differents material stiffnesses.addObject('EulerImplicitSolver', vdamping=\"0\", rayleighMass=\"0\", rayleighStiffness=\"0\")\n    Composite elements with 3 differents material stiffnesses.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Composite elements with 3 differents material stiffnesses.addObject('MechanicalObject')\n    Composite elements with 3 differents material stiffnesses.addObject('HexahedronCompositeFEMForceFieldAndMass', drawType=\"0\", lumpedMass=\"false\", nbVirtualFinerLevels=\"2\", youngModulus=\"600\", poissonRatio=\"0.3\", method=\"polar\", density=\".1\", updateStiffnessMatrix=\"false\", printLog=\"0\")\n    Composite elements with 3 differents material stiffnesses.addObject('BoxConstraint', box=\"-5 -2.1 -10    10 -1.9 10\")\n\n    Collinonunif = Composite elements with 3 differents material stiffnesses.addChild('Collinonunif')\n    Collinonunif.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/bubille_out.obj\")\n    Collinonunif.addObject('MeshTopology', src=\"@loader\")\n    Collinonunif.addObject('MechanicalObject', src=\"@loader\")\n    Collinonunif.addObject('HexahedronCompositeFEMMapping')\n    Collinonunif.addObject('TriangleCollisionModel')\n\n    Soft gelatin = Collinonunif.addChild('Soft gelatin')\n    Soft gelatin.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/bubille_out.obj\", handleSeams=\"1\")\n    Soft gelatin.addObject('OglModel', name=\"VisualBody\", src=\"@meshLoader_2\", normals=\"0\", color=\"0.1 .8 .3 .6\")\n    Soft gelatin.addObject('IdentityMapping', input=\"@..\", output=\"@VisualBody\")\n\n    soft bead = Composite elements with 3 differents material stiffnesses.addChild('soft bead')\n    soft bead.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/bubille_in1.obj\", handleSeams=\"1\")\n    soft bead.addObject('OglModel', name=\"VisualBody1\", src=\"@meshLoader_1\", normals=\"0\", color=\"1 0 0 1\")\n    soft bead.addObject('HexahedronCompositeFEMMapping', input=\"@..\", output=\"@VisualBody1\")\n\n    stiff bead = Composite elements with 3 differents material stiffnesses.addChild('stiff bead')\n    stiff bead.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/bubille_in2.obj\", handleSeams=\"1\")\n    stiff bead.addObject('OglModel', name=\"VisualBody2\", src=\"@meshLoader_3\", normals=\"0\", color=\"0 0 1 1\")\n    stiff bead.addObject('HexahedronCompositeFEMMapping', input=\"@..\", output=\"@VisualBody2\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/NonUniform/HexahedronCompositeFEMMapping/","title":"HexahedronCompositeFEMMapping","text":"<p>Set the point to the center of mass of the DOFs it is attached to</p> <p>Templates:</p> <ul> <li><code>Mapping&lt;StdVectorTypes&lt;Vec&lt;3u,double&gt;,Vec&lt;3u,double&gt;,double&gt;,StdVectorTypes&lt;Vec&lt;3u,double&gt;,Vec&lt;3u,double&gt;,double&gt;&gt;</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.NonUniform</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::nonuniform</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/30_SolidMechanics/10_FEM/NonUniform/HexahedronCompositeFEMMapping/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/HexahedronCompositeFEMMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" gravity=\"0 0 0\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.NonUniform\"/&gt; &lt;!-- Needed to use components [HexahedronCompositeFEMForceFieldAndMass HexahedronCompositeFEMMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridMultipleTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;!-- A soft grape containing a very stiff seed is deformed by using only one element. By using the HexahedronCompositeFEMMapping, the seed does not deform.  --&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/plane_loop_2.obj\" scale=\"1\" handleSeams=\"1\" /&gt;\n    &lt;OglModel name=\"plan\" src=\"@meshLoader_2\" rx=\"90\" rz=\"90\" dy=\"-10.2\" material=\"Default Diffuse 1 1 0.4 0.4 1 Ambient 1 0.8 0.8 0.8 1 Specular 0 1 1 1 1 Emissive 0 1 1 1 1 Shininess 0 45\"/&gt;\n    &lt;Node name=\"HexahedronCompositeFEMMapping\"&gt;\n        &lt;SparseGridMultipleTopology n=\"2 2 2\" fileTopology=\"mesh/grape_out.obj\" fileTopologies=\"mesh/grape_out.obj mesh/grape_in.obj\" stiffnessCoefs=\"1 1000000\" massCoefs=\"1 1\" nbVirtualFinerLevels=\"4\" finestConnectivity=\"false\" /&gt;\n        &lt;EulerImplicitSolver rayleighMass=\"0\" rayleighStiffness=\"0\" /&gt;\n        &lt;CGLinearSolver iterations=\"2000\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject dx=\"15\" /&gt;\n        &lt;HexahedronCompositeFEMForceFieldAndMass completeInterpolation=\"false\" nbVirtualFinerLevels=\"3\" youngModulus=\"100\" poissonRatio=\"0.35\" method=\"large\" density=\"2\" updateStiffnessMatrix=\"false\" printLog=\"0\" useMass=\"false\" totalMass=\"1\" drawSize=\".5\" /&gt;\n        &lt;BoxConstraint box=\"-30 -11 -30   100 -9 30\" drawSize=\"0.75\" /&gt;\n        &lt;Node name=\"Collinonunif\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/grape_out.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;HexahedronCompositeFEMMapping/&gt;\n            &lt;Node name=\"f1\"&gt;\n                &lt;ConstantForceField indices=\"340\" forces=\"1000 8000 0\" showArrowSize=\".001\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Visu2\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/grape_out.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"VisualEyes\" src=\"@meshLoader_3\" normals=\"0\" color=\"0.1 .8 .3 .5\" /&gt;\n                &lt;IdentityMapping input=\"@..\" output=\"@VisualEyes\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Visu1\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/grape_in.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualBody\" src=\"@meshLoader_0\" normals=\"0\" color=\"0 0 .6 1\" /&gt;\n            &lt;HexahedronCompositeFEMMapping input=\"@..\" output=\"@VisualBody\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"BarycentricMapping\"&gt;\n        &lt;SparseGridMultipleTopology n=\"2 2 2\" fileTopology=\"mesh/grape_out.obj\" fileTopologies=\"mesh/grape_out.obj mesh/grape_in.obj\" stiffnessCoefs=\"1 1000000\" massCoefs=\"1 1\" nbVirtualFinerLevels=\"4\" finestConnectivity=\"false\" /&gt;\n        &lt;EulerImplicitSolver rayleighMass=\"0\" rayleighStiffness=\"0\" /&gt;\n        &lt;CGLinearSolver iterations=\"2000\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject dx=\"-15\" /&gt;\n        &lt;HexahedronCompositeFEMForceFieldAndMass completeInterpolation=\"true\" nbVirtualFinerLevels=\"3\" youngModulus=\"100\" poissonRatio=\"0.35\" method=\"large\" density=\"2\" updateStiffnessMatrix=\"false\" printLog=\"0\" useMass=\"false\" totalMass=\"1\" drawSize=\".5\" /&gt;\n        &lt;BoxConstraint box=\"-100 -11 -30   30 -9 30\" drawSize=\"0.75\"/&gt;\n        &lt;Node name=\"Collinonunif\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/grape_out.obj\"/&gt;\n            &lt;MeshTopology src=\"@loader\"/&gt;\n            &lt;MechanicalObject src=\"@loader\"/&gt;\n            &lt;BarycentricMapping/&gt;\n            &lt;Node name=\"f2\"&gt;\n                &lt;ConstantForceField indices=\"340\" forces=\"1000 8000 0\" showArrowSize=\".001\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Visu2\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_4\" filename=\"mesh/grape_out.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"VisualEyes\" src=\"@meshLoader_4\" normals=\"0\" color=\"0.1 .8 .3 .5\" /&gt;\n                &lt;IdentityMapping input=\"@..\" output=\"@VisualEyes\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Visu1\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/grape_in.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualBody\" src=\"@meshLoader_1\" normals=\"0\" color=\"0 0 .6 1\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualBody\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 0\", dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.NonUniform\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/plane_loop_2.obj\", scale=\"1\", handleSeams=\"1\")\n    root.addObject('OglModel', name=\"plan\", src=\"@meshLoader_2\", rx=\"90\", rz=\"90\", dy=\"-10.2\", material=\"Default Diffuse 1 1 0.4 0.4 1 Ambient 1 0.8 0.8 0.8 1 Specular 0 1 1 1 1 Emissive 0 1 1 1 1 Shininess 0 45\")\n\n    HexahedronCompositeFEMMapping = root.addChild('HexahedronCompositeFEMMapping')\n    HexahedronCompositeFEMMapping.addObject('SparseGridMultipleTopology', n=\"2 2 2\", fileTopology=\"mesh/grape_out.obj\", fileTopologies=\"mesh/grape_out.obj mesh/grape_in.obj\", stiffnessCoefs=\"1 1000000\", massCoefs=\"1 1\", nbVirtualFinerLevels=\"4\", finestConnectivity=\"false\")\n    HexahedronCompositeFEMMapping.addObject('EulerImplicitSolver', rayleighMass=\"0\", rayleighStiffness=\"0\")\n    HexahedronCompositeFEMMapping.addObject('CGLinearSolver', iterations=\"2000\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    HexahedronCompositeFEMMapping.addObject('MechanicalObject', dx=\"15\")\n    HexahedronCompositeFEMMapping.addObject('HexahedronCompositeFEMForceFieldAndMass', completeInterpolation=\"false\", nbVirtualFinerLevels=\"3\", youngModulus=\"100\", poissonRatio=\"0.35\", method=\"large\", density=\"2\", updateStiffnessMatrix=\"false\", printLog=\"0\", useMass=\"false\", totalMass=\"1\", drawSize=\".5\")\n    HexahedronCompositeFEMMapping.addObject('BoxConstraint', box=\"-30 -11 -30   100 -9 30\", drawSize=\"0.75\")\n\n    Collinonunif = HexahedronCompositeFEMMapping.addChild('Collinonunif')\n    Collinonunif.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/grape_out.obj\")\n    Collinonunif.addObject('MeshTopology', src=\"@loader\")\n    Collinonunif.addObject('MechanicalObject', src=\"@loader\")\n    Collinonunif.addObject('HexahedronCompositeFEMMapping')\n\n    f1 = Collinonunif.addChild('f1')\n    f1.addObject('ConstantForceField', indices=\"340\", forces=\"1000 8000 0\", showArrowSize=\".001\")\n\n    Visu2 = Collinonunif.addChild('Visu2')\n    Visu2.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/grape_out.obj\", handleSeams=\"1\")\n    Visu2.addObject('OglModel', name=\"VisualEyes\", src=\"@meshLoader_3\", normals=\"0\", color=\"0.1 .8 .3 .5\")\n    Visu2.addObject('IdentityMapping', input=\"@..\", output=\"@VisualEyes\")\n\n    Visu1 = HexahedronCompositeFEMMapping.addChild('Visu1')\n    Visu1.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/grape_in.obj\", handleSeams=\"1\")\n    Visu1.addObject('OglModel', name=\"VisualBody\", src=\"@meshLoader_0\", normals=\"0\", color=\"0 0 .6 1\")\n    Visu1.addObject('HexahedronCompositeFEMMapping', input=\"@..\", output=\"@VisualBody\")\n\n    BarycentricMapping = root.addChild('BarycentricMapping')\n    BarycentricMapping.addObject('SparseGridMultipleTopology', n=\"2 2 2\", fileTopology=\"mesh/grape_out.obj\", fileTopologies=\"mesh/grape_out.obj mesh/grape_in.obj\", stiffnessCoefs=\"1 1000000\", massCoefs=\"1 1\", nbVirtualFinerLevels=\"4\", finestConnectivity=\"false\")\n    BarycentricMapping.addObject('EulerImplicitSolver', rayleighMass=\"0\", rayleighStiffness=\"0\")\n    BarycentricMapping.addObject('CGLinearSolver', iterations=\"2000\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    BarycentricMapping.addObject('MechanicalObject', dx=\"-15\")\n    BarycentricMapping.addObject('HexahedronCompositeFEMForceFieldAndMass', completeInterpolation=\"true\", nbVirtualFinerLevels=\"3\", youngModulus=\"100\", poissonRatio=\"0.35\", method=\"large\", density=\"2\", updateStiffnessMatrix=\"false\", printLog=\"0\", useMass=\"false\", totalMass=\"1\", drawSize=\".5\")\n    BarycentricMapping.addObject('BoxConstraint', box=\"-100 -11 -30   30 -9 30\", drawSize=\"0.75\")\n\n    Collinonunif = BarycentricMapping.addChild('Collinonunif')\n    Collinonunif.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/grape_out.obj\")\n    Collinonunif.addObject('MeshTopology', src=\"@loader\")\n    Collinonunif.addObject('MechanicalObject', src=\"@loader\")\n    Collinonunif.addObject('BarycentricMapping')\n\n    f2 = Collinonunif.addChild('f2')\n    f2.addObject('ConstantForceField', indices=\"340\", forces=\"1000 8000 0\", showArrowSize=\".001\")\n\n    Visu2 = Collinonunif.addChild('Visu2')\n    Visu2.addObject('MeshOBJLoader', name=\"meshLoader_4\", filename=\"mesh/grape_out.obj\", handleSeams=\"1\")\n    Visu2.addObject('OglModel', name=\"VisualEyes\", src=\"@meshLoader_4\", normals=\"0\", color=\"0.1 .8 .3 .5\")\n    Visu2.addObject('IdentityMapping', input=\"@..\", output=\"@VisualEyes\")\n\n    Visu1 = BarycentricMapping.addChild('Visu1')\n    Visu1.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/grape_in.obj\", handleSeams=\"1\")\n    Visu1.addObject('OglModel', name=\"VisualBody\", src=\"@meshLoader_1\", normals=\"0\", color=\"0 0 .6 1\")\n    Visu1.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualBody\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/10_FEM/NonUniform/NonUniformHexahedralFEMForceFieldAndMass/","title":"NonUniformHexahedralFEMForceFieldAndMass","text":"<p>Non uniform Hexahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.NonUniform</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::nonuniform</code></p> <p>parents: </p> <ul> <li><code>HexahedralFEMForceFieldAndMass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 method  \"large\" or \"polar\" displacements  large poissonRatio 0.45 youngModulus 5000 hexahedronInfo  Internal hexahedron data  density  density == volumetric mass in english (kg.m-3)  1 lumpedMass  Does it use lumped masses?  0 massMatrices  Mass matrices per element (M_i)  totalMass  Total mass per element  particleMasses  Mass per particle  lumpedMasses  Lumped masses  recursive  Use recursive matrix computation  0 useMBK  compute MBK and use it in addMBKdx, instead of using addDForce and addMDx.  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/30_SolidMechanics/10_FEM/NonUniform/NonUniformHexahedronFEMForceFieldAndMass/","title":"NonUniformHexahedronFEMForceFieldAndMass","text":"<p>Non uniform Hexahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.FEM.NonUniform</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::nonuniform</code></p> <p>parents: </p> <ul> <li><code>HexahedronFEMForceFieldAndMass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 method  \"large\" or \"polar\" or \"small\" displacements  large poissonRatio  FEM Poisson Ratio in Hooke's law [0,0.5[  0.45 youngModulus  FEM Young's modulus in Hooke's law  5000 updateStiffnessMatrix 0 gatherPt  number of dof accumulated per threads during the gather operation (Only use in GPU version)  gatherBsize  number of dof accumulated per threads during the gather operation (Only use in GPU version)  stiffnessMatrices  Stiffness matrices per element (K_i)  initialPoints  Initial Position  massMatrices  Mass matrices per element (M_i)  density  density == volumetric mass in english (kg.m-3)  1 lumpedMass  Does it use lumped masses?  0 nbVirtualFinerLevels  use virtual finer levels, in order to compte non-uniform stiffness  0 useMass  Using this ForceField like a Mass? (rather than using a separated Mass)  1 totalMass 0 Visualization drawing  draw the forcefield if true  1 drawPercentageOffset  size of the hexa  0.15 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/10_FEM/NonUniform/NonUniformHexahedronFEMForceFieldAndMass/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/NonUniformHexahedronFEMForceFieldAndMass.scn</p> XMLPython <pre><code>&lt;Node name=\"SandBox\" animate=\"0\" dt=\"0.06\" gravity=\"0 0 -9.81\" multiThreadSimulation=\"0\" time=\"0.0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceFieldAndMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.NonUniform\"/&gt; &lt;!-- Needed to use components [NonUniformHexahedronFEMForceFieldAndMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;include name=\"Salad Bowl 1\" href=\"Objects/SaladBowl.xml\" contactStiffness=\"10000\" dy=\"-10\" dz=\"-20\" scale=\"100\" /&gt;\n    &lt;include name=\"Salad Bowl 2\" href=\"Objects/SaladBowl.xml\" contactStiffness=\"10000\" dx=\"70\" dy=\"-10\" dz=\"-20\" scale=\"100\" /&gt;\n    &lt;Node name=\"uniform\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;SparseGridTopology n=\"8 6 7\" fileTopology=\"mesh/Armadillo_verysimplified.obj\" /&gt;\n        &lt;MechanicalObject dx=\"70\" ry=\"25\" /&gt;\n        &lt;HexahedronFEMForceFieldAndMass youngModulus=\"20000\" poissonRatio=\"0.3\" method=\"large\" density=\"10\" updateStiffnessMatrix=\"false\" printLog=\"0\" /&gt;\n        &lt;Node name=\"Visuunif\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/Armadillo_simplified.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"1 .4 0 1\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Colliunif\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/Armadillo_verysimplified.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel contactStiffness=\"1\" /&gt;\n            &lt;LineCollisionModel contactStiffness=\"1\" /&gt;\n            &lt;PointCollisionModel contactStiffness=\"1\" /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"non uniform\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;SparseGridTopology n=\"8 6 7\" fileTopology=\"mesh/Armadillo_verysimplified.obj\" nbVirtualFinerLevels=\"2\" /&gt;\n        &lt;MechanicalObject ry=\"25\" /&gt;\n        &lt;NonUniformHexahedronFEMForceFieldAndMass nbVirtualFinerLevels=\"2\" youngModulus=\"20000\" poissonRatio=\"0.3\" method=\"large\" density=\"10\" updateStiffnessMatrix=\"false\" printLog=\"0\" /&gt;\n        &lt;Node name=\"Visunonunif\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/Armadillo_simplified.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"0.4 0.6 1.0\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Collinonunif\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/Armadillo_verysimplified.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel contactStiffness=\"1\" /&gt;\n            &lt;LineCollisionModel contactStiffness=\"1\" /&gt;\n            &lt;PointCollisionModel contactStiffness=\"1\" /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    SandBox = rootNode.addChild('SandBox', animate=\"0\", dt=\"0.06\", gravity=\"0 0 -9.81\", multiThreadSimulation=\"0\", time=\"0.0\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.NonUniform\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    SandBox.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    SandBox.addObject('DefaultAnimationLoop')\n    SandBox.addObject('VisualStyle', displayFlags=\"showVisual\")\n    SandBox.addObject('CollisionPipeline', verbose=\"0\", draw=\"0\")\n    SandBox.addObject('BruteForceBroadPhase')\n    SandBox.addObject('BVHNarrowPhase')\n    SandBox.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    SandBox.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n    SandBox.addObject('include', name=\"Salad Bowl 1\", href=\"Objects/SaladBowl.xml\", contactStiffness=\"10000\", dy=\"-10\", dz=\"-20\", scale=\"100\")\n    SandBox.addObject('include', name=\"Salad Bowl 2\", href=\"Objects/SaladBowl.xml\", contactStiffness=\"10000\", dx=\"70\", dy=\"-10\", dz=\"-20\", scale=\"100\")\n\n    uniform = SandBox.addChild('uniform')\n    uniform.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    uniform.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    uniform.addObject('SparseGridTopology', n=\"8 6 7\", fileTopology=\"mesh/Armadillo_verysimplified.obj\")\n    uniform.addObject('MechanicalObject', dx=\"70\", ry=\"25\")\n    uniform.addObject('HexahedronFEMForceFieldAndMass', youngModulus=\"20000\", poissonRatio=\"0.3\", method=\"large\", density=\"10\", updateStiffnessMatrix=\"false\", printLog=\"0\")\n\n    Visuunif = uniform.addChild('Visuunif')\n    Visuunif.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/Armadillo_simplified.obj\", handleSeams=\"1\")\n    Visuunif.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"1 .4 0 1\")\n    Visuunif.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Colliunif = uniform.addChild('Colliunif')\n    Colliunif.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/Armadillo_verysimplified.obj\")\n    Colliunif.addObject('MeshTopology', src=\"@loader\")\n    Colliunif.addObject('MechanicalObject', src=\"@loader\")\n    Colliunif.addObject('TriangleCollisionModel', contactStiffness=\"1\")\n    Colliunif.addObject('LineCollisionModel', contactStiffness=\"1\")\n    Colliunif.addObject('PointCollisionModel', contactStiffness=\"1\")\n    Colliunif.addObject('BarycentricMapping')\n\n    non uniform = SandBox.addChild('non uniform')\n    non uniform.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    non uniform.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    non uniform.addObject('SparseGridTopology', n=\"8 6 7\", fileTopology=\"mesh/Armadillo_verysimplified.obj\", nbVirtualFinerLevels=\"2\")\n    non uniform.addObject('MechanicalObject', ry=\"25\")\n    non uniform.addObject('NonUniformHexahedronFEMForceFieldAndMass', nbVirtualFinerLevels=\"2\", youngModulus=\"20000\", poissonRatio=\"0.3\", method=\"large\", density=\"10\", updateStiffnessMatrix=\"false\", printLog=\"0\")\n\n    Visunonunif = non uniform.addChild('Visunonunif')\n    Visunonunif.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/Armadillo_simplified.obj\", handleSeams=\"1\")\n    Visunonunif.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"0.4 0.6 1.0\")\n    Visunonunif.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Collinonunif = non uniform.addChild('Collinonunif')\n    Collinonunif.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/Armadillo_verysimplified.obj\")\n    Collinonunif.addObject('MeshTopology', src=\"@loader\")\n    Collinonunif.addObject('MechanicalObject', src=\"@loader\")\n    Collinonunif.addObject('TriangleCollisionModel', contactStiffness=\"1\")\n    Collinonunif.addObject('LineCollisionModel', contactStiffness=\"1\")\n    Collinonunif.addObject('PointCollisionModel', contactStiffness=\"1\")\n    Collinonunif.addObject('BarycentricMapping')\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/80_PolynomialSpringsForceField/","title":"PolynomialSpringsForceField","text":"<p>This component belongs to the category of ForceField. This component allows to simulate springs with Polynomial stress strain behavior. If we note:</p> <ul> <li> the spring force</li> <li> the cross section (always 1.0)</li> <li> the stress-strain non-linear function</li> <li> the original length and  the current length of the spring</li> <li> the point displacement</li> </ul> <p>the generic non-linear force can thus be written:   where  is polynom as follows:  and </p> <p>The dedication of jacobian matrix for PolynomialSpringForceField is given below:</p> <p></p> <p>Note that a RestShapePolynomialSpringsForceField does exist. It will compute the same non-linear force with regards to the rest shape of one single object. To avoid Nan problems when a spring has a zero length, an exponential addition to the denominator has been added. As a result, the stress simulation is shifted compared with polynomial values, but it keeps its nonlinearity:</p> <p></p> <p>More details were given in the pull-request #1342.</p>"},{"location":"30_Components/30_SolidMechanics/20_Spring/80_PolynomialSpringsForceField/#data","title":"Data","text":"<p>The polynomial parameters are set as two arrays:</p> <ul> <li>polynomialDegree: describing the set of polynomial degrees for every spring</li> <li>polynomialStiffness: describing the set of polynomial coefficients sequentially combined in one vector.</li> </ul> <p>The coefficients are put from smaller degree to bigger one, and the free coefficient is always zero (since for no strain we have no stress). For examples the coefficients for polynomials [3,2,4] will be put as [a1,a2,a3,b1,b2,c1,c2,c3,c4].</p> <ul> <li>firstObjectPoints corresponding to the indices of the points related to the first object</li> <li>secondObjectPoints corresponding to the indices of the points related to the second object</li> <li>compressible: indicating if object compresses without reaction force</li> </ul>"},{"location":"30_Components/30_SolidMechanics/20_Spring/80_PolynomialSpringsForceField/#usage","title":"Usage","text":"<p>The PolynomialSpringsForceField requires two different objects to link, which means two MechanicalObjects on which the non-linear spring will act. On the other hand, RestShapePolynomialSpringsForceField will act on one single body, i.e. one MechanicalObject.</p>"},{"location":"30_Components/30_SolidMechanics/20_Spring/80_PolynomialSpringsForceField/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;DiagonalMass massDensity=\"1000\" /&gt;\n</code></pre> <p>or using Python:</p> <pre><code>node.createObject('DiagonalMass', massDensity='1000')\n</code></pre> <p>An example scene involving a PolynomialSpringsForceField is available in examples/Component/SolidMechanics/Spring/PolynomialSpringsForceField.scn</p> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>PairInteractionForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 firstObjectPoints  points related to the first object  secondObjectPoints  points related to the second object  polynomialStiffness  coefficients for all spring polynomials  polynomialDegree  vector of values that show polynomials degrees  computeZeroLength  flag to compute initial length for springs  1 zeroLength  initial length for springs  recompute_indices  Recompute indices (should be false for BBOX)  0 compressible  Indicates if object compresses without reactio force  0 springColor  spring color  0 1 0 1 Visualization drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 showArrowSize  size of the axis  0.01 showIndicesScale  Scale for indices display. (default=0.02)  0.02 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/30_SolidMechanics/20_Spring/80_PolynomialSpringsForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/PolynomialSpringsForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"lroot\" gravity=\"0 0 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [PolynomialSpringsForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showInteractionForceFields\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;MeshOBJLoader name=\"LiverSurface\" filename=\"mesh/liver-smooth.obj\" /&gt;\n\n    &lt;Node name=\"Liver\" &gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\"   rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver name=\"linear solver\" iterations=\"25\" tolerance=\"1e-09\" threshold=\"1e-09\" /&gt;\n        &lt;MeshGmshLoader name=\"meshLoader\" filename=\"mesh/liver.msh\" /&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"topo\" src=\"@meshLoader\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" src=\"@meshLoader\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass  name=\"computed using mass density\" massDensity=\"1\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"3000\" computeGlobalMatrix=\"0\" /&gt;\n        &lt;FixedProjectiveConstraint  name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n        &lt;Node name=\"Visu\" tags=\"Visual\" gravity=\"0 -9.81 0\"&gt;\n            &lt;OglModel  name=\"VisualModel\" src=\"@../../LiverSurface\" /&gt;\n            &lt;BarycentricMapping name=\"visual mapping\" input=\"@../dofs\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"Weight\" &gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"myParticle\" rest_position=\"0 0 0\" position=\"0 0 0\" /&gt;\n            &lt;UniformMass totalMass=\"30\" /&gt;\n            &lt;PolynomialSpringsForceField polynomialDegree=\"3\" polynomialStiffness=\"20 10 50\" object1='@.' firstObjectPoints='0' object2='@../dofs' secondObjectPoints='15' drawMode='0' showIndicesScale=\"1\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    lroot = rootNode.addChild('lroot', gravity=\"0 0 0\", dt=\"0.02\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    lroot.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    lroot.addObject('VisualStyle', displayFlags=\"showInteractionForceFields\")\n    lroot.addObject('DefaultAnimationLoop')\n    lroot.addObject('MeshOBJLoader', name=\"LiverSurface\", filename=\"mesh/liver-smooth.obj\")\n\n    Liver = lroot.addChild('Liver')\n    Liver.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Liver.addObject('CGLinearSolver', name=\"linear solver\", iterations=\"25\", tolerance=\"1e-09\", threshold=\"1e-09\")\n    Liver.addObject('MeshGmshLoader', name=\"meshLoader\", filename=\"mesh/liver.msh\")\n    Liver.addObject('TetrahedronSetTopologyContainer', name=\"topo\", src=\"@meshLoader\")\n    Liver.addObject('MechanicalObject', name=\"dofs\", src=\"@meshLoader\")\n    Liver.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Liver.addObject('DiagonalMass', name=\"computed using mass density\", massDensity=\"1\")\n    Liver.addObject('TetrahedralCorotationalFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"3000\", computeGlobalMatrix=\"0\")\n    Liver.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n\n    Visu = Liver.addChild('Visu', tags=\"Visual\", gravity=\"0 -9.81 0\")\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@../../LiverSurface\")\n    Visu.addObject('BarycentricMapping', name=\"visual mapping\", input=\"@../dofs\", output=\"@VisualModel\")\n\n    Weight = Liver.addChild('Weight')\n    Weight.addObject('MechanicalObject', template=\"Vec3\", name=\"myParticle\", rest_position=\"0 0 0\", position=\"0 0 0\")\n    Weight.addObject('UniformMass', totalMass=\"30\")\n    Weight.addObject('PolynomialSpringsForceField', polynomialDegree=\"3\", polynomialStiffness=\"20 10 50\", object1=\"@.\", firstObjectPoints=\"0\", object2=\"@../dofs\", secondObjectPoints=\"15\", drawMode=\"0\", showIndicesScale=\"1\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/AngularSpringForceField/","title":"AngularSpringForceField","text":"<p>Angular springs applied to rotational degrees of freedom of a rigid body or frame</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 indices  index of nodes controlled by the angular springs  angularStiffness  angular stiffness for the controlled nodes  limit  angular limit (max; min) values where the force applies  springColor  spring color  0 1 0 1 Visualization drawSpring  draw Spring  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/30_SolidMechanics/20_Spring/FastTriangularBendingSprings/","title":"FastTriangularBendingSprings","text":"<p>Springs added to a triangular mesh to prevent bending</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 bendingStiffness  bending stiffness of the material  1 minDistValidity  Distance under which a spring is not valid  1e-06 edgeInfo  Internal edge data  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/20_Spring/FastTriangularBendingSprings/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/FastTriangularBendingSprings.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 0 -1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceFieldOptim] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [FastTriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehavior hideCollision hideVisual \" /&gt;\n    &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n    &lt;Node name=\"Thin shell\"&gt;\n        &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/triangleGrid_10_10.obj\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;EdgeSetGeometryAlgorithms /&gt;\n        &lt;MechanicalObject name=\"defoDOF\" template=\"Vec3\"  src=\"@loader\" showObject=\"1\"/&gt;\n        &lt;BoxROI name=\"box1\" box=\"-0.5 -0.5 -0.5  100.5 0.005 0.005  \" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box1.indices\"/&gt;\n        &lt;TriangularFEMForceFieldOptim name=\"FEM1\" youngModulus=\"20000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;FastTriangularBendingSprings bendingStiffness=\"10000\" /&gt;\n        &lt;UniformMass totalMass=\"2500\" printLog=\"0\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 0 -1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehavior hideCollision hideVisual \")\n    root.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n\n    Thin shell = root.addChild('Thin shell')\n    Thin shell.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/triangleGrid_10_10.obj\")\n    Thin shell.addObject('MeshTopology', src=\"@loader\")\n    Thin shell.addObject('EdgeSetGeometryAlgorithms')\n    Thin shell.addObject('MechanicalObject', name=\"defoDOF\", template=\"Vec3\", src=\"@loader\", showObject=\"1\")\n    Thin shell.addObject('BoxROI', name=\"box1\", box=\"-0.5 -0.5 -0.5  100.5 0.005 0.005  \")\n    Thin shell.addObject('FixedProjectiveConstraint', indices=\"@box1.indices\")\n    Thin shell.addObject('TriangularFEMForceFieldOptim', name=\"FEM1\", youngModulus=\"20000\", poissonRatio=\"0.3\", method=\"large\")\n    Thin shell.addObject('FastTriangularBendingSprings', bendingStiffness=\"10000\")\n    Thin shell.addObject('UniformMass', totalMass=\"2500\", printLog=\"0\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/FrameSpringForceField/","title":"FrameSpringForceField","text":"<p>Springs for Flexibles</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>PairInteractionForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 spring  pairs of indices, stiffness, damping, rest length  Visualization show lawful Torsion  dislpay the lawful part of the joint rotation  0 show illicit Torsion  dislpay the illicit part of the joint rotation  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/30_SolidMechanics/20_Spring/GearSpringForceField/","title":"GearSpringForceField","text":"<p>Gear springs for Rigids</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>PairInteractionForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 spring  pairs of indices, stiffness, damping  filename  output file name  period  period between outputs  0 reinit  flag enabling reinitialization of the output file at each timestep  0 Visualization showFactorSize  modify the size of the debug information of a given factor  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/30_SolidMechanics/20_Spring/GearSpringForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/GearSpringForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 0 0\" dt=\"0.01\" time=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [GearSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual\" /&gt;\n    &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"0\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver name=\"linear solver\" iterations=\"50\" tolerance=\"1e-009\" threshold=\"1e-009\" /&gt;\n    &lt;MechanicalObject template=\"Rigid3\" name=\"DOFs\" rest_position=\"0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1\" position=\"-1.161 0 1.706 0 0.194787 0 0.980846 &amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;-6.7 4 1.706 0 0 0.707107 0.707107 &amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;1.790 0 -5.503 0 0.229019 0 0.973422&amp;#x09;&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;-6.7 5.2 -3.5 0 0 0.707107 0.707107&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;0 0 0 0 0 0 1\" restScale=\"1\" /&gt;\n    &lt;UniformMass name=\"mass\" vertexMass=\"50 50 [1 0 0,0 1 0,0 0 1]\" showAxisSizeFactor=\"2\" /&gt;\n    &lt;FixedProjectiveConstraint template=\"Rigid3\" name=\"fixOrigin\" indices=\"4\" /&gt;\n    &lt;!--    SELF SUPPORT     --&gt;\n    &lt;!--\n        &lt;GearSpringForceField template=\"Rigid3\" name=\"gear1\"  showFactorSize='5' spring=\"BEGIN_SPRING  0 0 2 2 AXIS 1 1 KS_T 2000000  KS_R 2000000 2000000 KD 1 RATIO 2 END_SPRING\" /&gt;\n        &lt;GearSpringForceField template=\"Rigid3\" name=\"gear2\"  showFactorSize='5' spring=\"BEGIN_SPRING  0 0 1 1 AXIS 1 1 KS_T 2000000  KS_R 2000000 2000000 KD 1 RATIO -1.5385 END_SPRING\" /&gt;\n        &lt;GearSpringForceField template=\"Rigid3\" name=\"gear3\"  showFactorSize='5' spring=\"BEGIN_SPRING  1 1 3 3 AXIS 1 1 KS_T 2000000  KS_R 2000000 2000000 KD 1 RATIO 2.166667 END_SPRING\" /&gt;\n --&gt;\n    &lt;!--    EXTERNAL SUPPORT --&gt;\n    &lt;Node name=\"Gear\"&gt;\n        &lt;MechanicalObject template=\"Rigid3\" name=\"attaches\" rest_position=\"0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 -1.161 0 1.706 0 0.194787 0 0.980846 -6.7 4 1.706 0 0 0.707107 0.707107 1.790 0 -5.503 0 0.229019 0 0.973422 -6.7 5.2 -3.5 0 0 0.707107 0.707107\" restScale=\"1\" /&gt;\n        &lt;RigidMapping template=\"Rigid3,Rigid3\" input=\"@..\" output=\"@.\" rigidIndexPerPoint=\"1 1 1 1 4\" /&gt;\n        &lt;GearSpringForceField template=\"Rigid3\" name=\"springs\" showFactorSize=\"5\" spring=\"BEGIN_SPRING  4 0 6 2 AXIS 1 1 KS_T 2000000  KS_R 2000000 2000000 KD 1 RATIO 2 END_SPRING&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  BEGIN_SPRING  4 0 5 1 AXIS 1 1 KS_T 2000000  KS_R 2000000 2000000 KD 1 RATIO -1.5385 END_SPRING&amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;  BEGIN_SPRING  5 1 7 3 AXIS 1 1 KS_T 2000000  KS_R 2000000 2000000 KD 1 RATIO 2.166667 END_SPRING\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"0\"&gt;\n        &lt;MeshOBJLoader name=\"MeshLoader\" filename=\"mesh/gear0.obj\" /&gt;\n        &lt;MeshTopology src=\"@MeshLoader\" /&gt;\n        &lt;MechanicalObject name=\"PointSet\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;RigidMapping template=\"Rigid3,Vec3\" index=\"0\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/gear0.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel template=\"Vec3\" name=\"Visual\" src=\"@meshLoader_1\" /&gt;\n            &lt;IdentityMapping template=\"Vec3,Vec3\" input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"1\"&gt;\n        &lt;MeshOBJLoader name=\"MeshLoader\" filename=\"mesh/gear1.obj\" /&gt;\n        &lt;MeshTopology src=\"@MeshLoader\" /&gt;\n        &lt;MechanicalObject name=\"PointSet\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;RigidMapping template=\"Rigid3,Vec3\" index=\"1\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/gear1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel template=\"Vec3\" name=\"Visual\" src=\"@meshLoader_3\" /&gt;\n            &lt;IdentityMapping template=\"Vec3,Vec3\" input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"2\"&gt;\n        &lt;MeshOBJLoader name=\"MeshLoader\" filename=\"mesh/gear2.obj\" /&gt;\n        &lt;MeshTopology src=\"@MeshLoader\" /&gt;\n        &lt;MechanicalObject name=\"PointSet\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;RigidMapping template=\"Rigid3,Vec3\" index=\"2\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/gear2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel template=\"Vec3\" name=\"Visual\" src=\"@meshLoader_0\" /&gt;\n            &lt;IdentityMapping template=\"Vec3,Vec3\" input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"3\"&gt;\n        &lt;MeshOBJLoader name=\"MeshLoader\" filename=\"mesh/gear3.obj\" /&gt;\n        &lt;MeshTopology src=\"@MeshLoader\" /&gt;\n        &lt;MechanicalObject name=\"PointSet\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;RigidMapping template=\"Rigid3,Vec3\" index=\"3\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/gear3.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel template=\"Vec3\" name=\"Visual\" src=\"@meshLoader_2\" /&gt;\n            &lt;IdentityMapping template=\"Vec3,Vec3\" input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"support\"&gt;\n        &lt;MeshOBJLoader name=\"MeshLoader\" filename=\"mesh/gearsupport.obj\" /&gt;\n        &lt;MeshTopology src=\"@MeshLoader\" /&gt;\n        &lt;MechanicalObject name=\"PointSet\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;RigidMapping template=\"Rigid3,Vec3\" index=\"4\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_4\" filename=\"mesh/gearsupport.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel template=\"Vec3\" name=\"Visual\" src=\"@meshLoader_4\" material=\"Default Diffuse 1 1 1 0.8 1 Ambient 1 0.2 0.2 0.2 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n            &lt;IdentityMapping template=\"Vec3,Vec3\" input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 0\", dt=\"0.01\", time=\"0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showVisual\")\n    root.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', name=\"linear solver\", iterations=\"50\", tolerance=\"1e-009\", threshold=\"1e-009\")\n    root.addObject('MechanicalObject', template=\"Rigid3\", name=\"DOFs\", rest_position=\"0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1\", position=\"-1.161 0 1.706 0 0.194787 0 0.980846 \n                                                                                                                                        -6.7 4 1.706 0 0 0.707107 0.707107 \n                                                                                                                                        1.790 0 -5.503 0 0.229019 0 0.973422    \n                                                                                                                                        -6.7 5.2 -3.5 0 0 0.707107 0.707107\n                                                                                                                                        0 0 0 0 0 0 1\", restScale=\"1\")\n    root.addObject('UniformMass', name=\"mass\", vertexMass=\"50 50 [1 0 0,0 1 0,0 0 1]\", showAxisSizeFactor=\"2\")\n    root.addObject('FixedProjectiveConstraint', template=\"Rigid3\", name=\"fixOrigin\", indices=\"4\")\n\n    Gear = root.addChild('Gear')\n    Gear.addObject('MechanicalObject', template=\"Rigid3\", name=\"attaches\", rest_position=\"0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 -1.161 0 1.706 0 0.194787 0 0.980846 -6.7 4 1.706 0 0 0.707107 0.707107 1.790 0 -5.503 0 0.229019 0 0.973422 -6.7 5.2 -3.5 0 0 0.707107 0.707107\", restScale=\"1\")\n    Gear.addObject('RigidMapping', template=\"Rigid3,Rigid3\", input=\"@..\", output=\"@.\", rigidIndexPerPoint=\"1 1 1 1 4\")\n    Gear.addObject('GearSpringForceField', template=\"Rigid3\", name=\"springs\", showFactorSize=\"5\", spring=\"BEGIN_SPRING  4 0 6 2 AXIS 1 1 KS_T 2000000  KS_R 2000000 2000000 KD 1 RATIO 2 END_SPRING\n                                                                                          BEGIN_SPRING  4 0 5 1 AXIS 1 1 KS_T 2000000  KS_R 2000000 2000000 KD 1 RATIO -1.5385 END_SPRING\n                                                                                          BEGIN_SPRING  5 1 7 3 AXIS 1 1 KS_T 2000000  KS_R 2000000 2000000 KD 1 RATIO 2.166667 END_SPRING\")\n\n    0 = root.addChild('0')\n    0.addObject('MeshOBJLoader', name=\"MeshLoader\", filename=\"mesh/gear0.obj\")\n    0.addObject('MeshTopology', src=\"@MeshLoader\")\n    0.addObject('MechanicalObject', name=\"PointSet\")\n    0.addObject('TriangleCollisionModel')\n    0.addObject('RigidMapping', template=\"Rigid3,Vec3\", index=\"0\")\n\n    Visu = 0.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/gear0.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", src=\"@meshLoader_1\")\n    Visu.addObject('IdentityMapping', template=\"Vec3,Vec3\", input=\"@..\", output=\"@Visual\")\n\n    1 = root.addChild('1')\n    1.addObject('MeshOBJLoader', name=\"MeshLoader\", filename=\"mesh/gear1.obj\")\n    1.addObject('MeshTopology', src=\"@MeshLoader\")\n    1.addObject('MechanicalObject', name=\"PointSet\")\n    1.addObject('TriangleCollisionModel')\n    1.addObject('RigidMapping', template=\"Rigid3,Vec3\", index=\"1\")\n\n    Visu = 1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/gear1.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", src=\"@meshLoader_3\")\n    Visu.addObject('IdentityMapping', template=\"Vec3,Vec3\", input=\"@..\", output=\"@Visual\")\n\n    2 = root.addChild('2')\n    2.addObject('MeshOBJLoader', name=\"MeshLoader\", filename=\"mesh/gear2.obj\")\n    2.addObject('MeshTopology', src=\"@MeshLoader\")\n    2.addObject('MechanicalObject', name=\"PointSet\")\n    2.addObject('TriangleCollisionModel')\n    2.addObject('RigidMapping', template=\"Rigid3,Vec3\", index=\"2\")\n\n    Visu = 2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/gear2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", src=\"@meshLoader_0\")\n    Visu.addObject('IdentityMapping', template=\"Vec3,Vec3\", input=\"@..\", output=\"@Visual\")\n\n    3 = root.addChild('3')\n    3.addObject('MeshOBJLoader', name=\"MeshLoader\", filename=\"mesh/gear3.obj\")\n    3.addObject('MeshTopology', src=\"@MeshLoader\")\n    3.addObject('MechanicalObject', name=\"PointSet\")\n    3.addObject('TriangleCollisionModel')\n    3.addObject('RigidMapping', template=\"Rigid3,Vec3\", index=\"3\")\n\n    Visu = 3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/gear3.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", src=\"@meshLoader_2\")\n    Visu.addObject('IdentityMapping', template=\"Vec3,Vec3\", input=\"@..\", output=\"@Visual\")\n\n    support = root.addChild('support')\n    support.addObject('MeshOBJLoader', name=\"MeshLoader\", filename=\"mesh/gearsupport.obj\")\n    support.addObject('MeshTopology', src=\"@MeshLoader\")\n    support.addObject('MechanicalObject', name=\"PointSet\")\n    support.addObject('TriangleCollisionModel')\n    support.addObject('RigidMapping', template=\"Rigid3,Vec3\", index=\"4\")\n\n    Visu = support.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_4\", filename=\"mesh/gearsupport.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", src=\"@meshLoader_4\", material=\"Default Diffuse 1 1 1 0.8 1 Ambient 1 0.2 0.2 0.2 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visu.addObject('IdentityMapping', template=\"Vec3,Vec3\", input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/JointSpringForceField/","title":"JointSpringForceField","text":"<p>Springs for Rigids</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>PairInteractionForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 outfile  output file name  infile  input file containing constant joint force  period  period between outputs  0 reinit  flag enabling reinitialization of the output file at each timestep  0 spring  pairs of indices, stiffness, damping, rest length  Visualization showLawfulTorsion  display the lawful part of the joint rotation  0 showExtraTorsion  display the illicit part of the joint rotation  0 showFactorSize  modify the size of the debug information of a given factor  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/30_SolidMechanics/20_Spring/JointSpringForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/JointSpringForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [JointSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields showCollisionModels showMechanicalMappings\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default41\" response=\"PenalityContactForceField\" /&gt;\n    &lt;CollisionPipeline name=\"default42\" /&gt;\n    &lt;MinProximityIntersection name=\"default43\" alarmDistance=\"1\" contactDistance=\"0.5\"/&gt;\n    &lt;Node name=\"default44\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"0\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver\" iterations=\"25\" tolerance=\"1e-009\" threshold=\"1e-009\" /&gt;\n        &lt;MechanicalObject template=\"Rigid3\" name=\"DOFs\" position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\" velocity=\"0 0 0 0 0 0\" force=\"0 0 0 0 0 0\" externalForce=\"0 0 0 0 0 0\" derivX=\"0 0 0 0 0 0\" restScale=\"1\" /&gt;\n        &lt;UniformMass name=\"mass\" vertexMass=\"1 1 [1 0 0,0 1 0,0 0 1]\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Rigid3\" name=\"fixOrigin\" indices=\"0\" /&gt;\n        &lt;Node name=\"default45\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MechanicalObject template=\"Rigid3\" name=\"attaches\" position=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\" velocity=\"0 0 0 0 0 0\" force=\"0 0 0 0 0 0\" externalForce=\"0 0 0 0 0 0\" derivX=\"0 0 0 0 0 0\" restScale=\"1\" /&gt;\n            &lt;RigidMapping template=\"Rigid3,Rigid3\" name=\"default46\" input=\"@..\" output=\"@.\" rigidIndexPerPoint=\"1 2 2 2 2\" /&gt;\n            &lt;JointSpringForceField template=\"Rigid3\" name=\"joint springs\" spring=\"BEGIN_SPRING  0 1  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  2 3  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  4 5  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  6 7  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A;\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Visu\" gravity=\"0 -9.81 0\"&gt;\n            &lt;OglModel template=\"Vec3\" name=\"Visual\" position=\"-1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5\" vertices=\"-1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5\" triangles=\"3 1 0  3 2 1  3 6 2  3 7 6  7 5 6  7 4 5  4 1 5  4 0 1  5 1 2  2 6 5  4 7 3  4 3 0  11 9 8  11 10 9  11 14 10  11 15 14  15 13 14  15 12 13  12 9 13  12 8 9  13 9 10  10 14 13  12 15 11  12 11 8  19 17 16  19 18 17  19 22 18  19 23 22  23 21 22  23 20 21  20 17 21  20 16 17  21 17 18  18 22 21  20 23 19  20 19 16  27 25 24  27 26 25  27 30 26  27 31 30  31 29 30  31 28 29  28 25 29  28 24 25  29 25 26  26 30 29  28 31 27  28 27 24 \" /&gt;\n            &lt;RigidMapping template=\"Rigid3,Vec3\" name=\"default60\" mapForces=\"0\" mapConstraints=\"0\" mapMasses=\"0\" input=\"@..\" output=\"@Visual\" rigidIndexPerPoint=\"0 8 8 8 8\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>```python def createScene(rootNode):</p> <pre><code>root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\nroot.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\nroot.addObject('DefaultAnimationLoop')\nroot.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields showCollisionModels showMechanicalMappings\")\nroot.addObject('BruteForceBroadPhase')\nroot.addObject('BVHNarrowPhase')\nroot.addObject('CollisionResponse', name=\"default41\", response=\"PenalityContactForceField\")\nroot.addObject('CollisionPipeline', name=\"default42\")\nroot.addObject('MinProximityIntersection', name=\"default43\", alarmDistance=\"1\", contactDistance=\"0.5\")\n\ndefault44 = root.addChild('default44', gravity=\"0 -9.81 0\")\ndefault44.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\ndefault44.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver\", iterations=\"25\", tolerance=\"1e-009\", threshold=\"1e-009\")\ndefault44.addObject('MechanicalObject', template=\"Rigid3\", name=\"DOFs\", position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\", velocity=\"0 0 0 0 0 0\", force=\"0 0 0 0 0 0\", externalForce=\"0 0 0 0 0 0\", derivX=\"0 0 0 0 0 0\", restScale=\"1\")\ndefault44.addObject('UniformMass', name=\"mass\", vertexMass=\"1 1 [1 0 0,0 1 0,0 0 1]\")\ndefault44.addObject('FixedProjectiveConstraint', template=\"Rigid3\", name=\"fixOrigin\", indices=\"0\")\n\ndefault45 = default44.addChild('default45', gravity=\"0 -9.81 0\")\ndefault45.addObject('MechanicalObject', template=\"Rigid3\", name=\"attaches\", position=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\", velocity=\"0 0 0 0 0 0\", force=\"0 0 0 0 0 0\", externalForce=\"0 0 0 0 0 0\", derivX=\"0 0 0 0 0 0\", restScale=\"1\")\ndefault45.addObject('RigidMapping', template=\"Rigid3,Rigid3\", name=\"default46\", input=\"@..\", output=\"@.\", rigidIndexPerPoint=\"1 2 2 2 2\")\ndefault45.addObject('JointSpringForceField', template=\"Rigid3\", name=\"joint springs\", spring=\"BEGIN_SPRING  0 1  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING\n</code></pre> <p>BEGIN_SPRING  2 3  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING  BEGIN_SPRING  4 5  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING  BEGIN_SPRING  6 7  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING \")</p> <pre><code>    Visu = default44.addChild('Visu', gravity=\"0 -9.81 0\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", position=\"-1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5\", vertices=\"-1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5 -1 -0.5 -0.5 -1 0.5 -0.5 -1 0.5 0.5 -1 -0.5 0.5 1 -0.5 -0.5 1 0.5 -0.5 1 0.5 0.5 1 -0.5 0.5\", triangles=\"3 1 0  3 2 1  3 6 2  3 7 6  7 5 6  7 4 5  4 1 5  4 0 1  5 1 2  2 6 5  4 7 3  4 3 0  11 9 8  11 10 9  11 14 10  11 15 14  15 13 14  15 12 13  12 9 13  12 8 9  13 9 10  10 14 13  12 15 11  12 11 8  19 17 16  19 18 17  19 22 18  19 23 22  23 21 22  23 20 21  20 17 21  20 16 17  21 17 18  18 22 21  20 23 19  20 19 16  27 25 24  27 26 25  27 30 26  27 31 30  31 29 30  31 28 29  28 25 29  28 24 25  29 25 26  26 30 29  28 31 27  28 27 24 \")\n    Visu.addObject('RigidMapping', template=\"Rigid3,Vec3\", name=\"default60\", mapForces=\"0\", mapConstraints=\"0\", mapMasses=\"0\", input=\"@..\", output=\"@Visual\", rigidIndexPerPoint=\"0 8 8 8 8\")\n```\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/MeshSpringForceField/","title":"MeshSpringForceField","text":"<p>Spring force field acting along the edges of a mesh Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>StiffSpringForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100 damping  uniform damping for the all springs  5 spring  pairs of indices, stiffness, damping, rest length  springsIndices1  List of indices in springs from the first mstate  springsIndices2  List of indices in springs from the second mstate  indices1  Indices of the source points on the first model  indices2  Indices of the fixed points on the second model  lengths  List of lengths to create the springs. Must have the same than indices1 &amp; indices2, or if only one element, it will be applied to all springs. If empty, 0 will be applied everywhere  linesStiffness  Stiffness for the Lines  0 linesDamping  Damping for the Lines  0 trianglesStiffness  Stiffness for the Triangles  0 trianglesDamping  Damping for the Triangles  0 quadsStiffness  Stiffness for the Quads  0 quadsDamping  Damping for the Quads  0 tetrahedraStiffness  Stiffness for the Tetrahedra  0 tetrahedraDamping  Damping for the Tetrahedra  0 cubesStiffness  Stiffness for the Cubes  0 cubesDamping  Damping for the Cubes  0 noCompression  Only consider elongation  0 localRange  optional range of local DOF indices. Any computation involving only indices outside of this range are discarded (useful for parallelization using mesh partitionning)  4294967295 4294967295 Visualization showArrowSize  size of the axis  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 drawMinElongationRange  Min range of elongation (red eongation - blue neutral - green compression)  8 drawMaxElongationRange  Max range of elongation (red eongation - blue neutral - green compression)  15 drawSpringSize  Size of drawed lines  8 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/20_Spring/MeshSpringForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/MeshSpringForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;NewProximityIntersection name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"ChainSpring\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring1\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" translation=\"2.5 0 0\"/&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"1000\" tetrasDamping=\"0\" /&gt;\n            &lt;Node name=\"Visu1\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" translation=\"2.5 0 0\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"green\"/&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf1\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" translation=\"2.5 0 0\"/&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring2\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" translation=\"5 0 0\"/&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"200\" tetrasDamping=\"0\" /&gt;\n            &lt;Node name=\"Visu2\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus2.obj\" translation=\"5 0 0\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"blue\"/&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" translation=\"5 0 0\"/&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\"  /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring3\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" translation=\"7.5 0 0\"/&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;UniformMass totalMass=\"0.5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"0\" /&gt;\n            &lt;Node name=\"Visu3\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus.obj\" translation=\"7.5 0 0\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"green\"/&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf3\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" translation=\"7.5 0 0\"/&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\"  /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring4\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" translation=\"10 0 0\"/&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\"  /&gt;\n            &lt;UniformMass totalMass=\"0.5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"0\" /&gt;\n            &lt;Node name=\"Visu4\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_4\" filename=\"mesh/torus2.obj\" translation=\"10 0 0\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_4\" color=\"red\"/&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf4\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" translation=\"10 0 0\"/&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\"  /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('NewProximityIntersection', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    ChainSpring = root.addChild('ChainSpring')\n\n    TorusFixed = ChainSpring.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"gray\")\n\n    TorusSpring1 = ChainSpring.addChild('TorusSpring1')\n    TorusSpring1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TorusSpring1.addObject('CGLinearSolver', iterations=\"100\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusSpring1.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\", translation=\"2.5 0 0\")\n    TorusSpring1.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring1.addObject('MechanicalObject', src=\"@loader\")\n    TorusSpring1.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring1.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"1000\", tetrasDamping=\"0\")\n\n    Visu1 = TorusSpring1.addChild('Visu1')\n    Visu1.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", translation=\"2.5 0 0\", handleSeams=\"1\")\n    Visu1.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"green\")\n    Visu1.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf1 = TorusSpring1.addChild('Surf1')\n    Surf1.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\", translation=\"2.5 0 0\")\n    Surf1.addObject('MeshTopology', src=\"@loader\")\n    Surf1.addObject('MechanicalObject', src=\"@loader\")\n    Surf1.addObject('TriangleCollisionModel')\n    Surf1.addObject('BarycentricMapping')\n\n    TorusSpring2 = ChainSpring.addChild('TorusSpring2')\n    TorusSpring2.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    TorusSpring2.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusSpring2.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\", translation=\"5 0 0\")\n    TorusSpring2.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring2.addObject('MechanicalObject', src=\"@loader\")\n    TorusSpring2.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring2.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"200\", tetrasDamping=\"0\")\n\n    Visu2 = TorusSpring2.addChild('Visu2')\n    Visu2.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus2.obj\", translation=\"5 0 0\", handleSeams=\"1\")\n    Visu2.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"blue\")\n    Visu2.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\", translation=\"5 0 0\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusSpring3 = ChainSpring.addChild('TorusSpring3')\n    TorusSpring3.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    TorusSpring3.addObject('CGLinearSolver', iterations=\"100\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusSpring3.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\", translation=\"7.5 0 0\")\n    TorusSpring3.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring3.addObject('MechanicalObject', src=\"@loader\")\n    TorusSpring3.addObject('UniformMass', totalMass=\"0.5\")\n    TorusSpring3.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"0\")\n\n    Visu3 = TorusSpring3.addChild('Visu3')\n    Visu3.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus.obj\", translation=\"7.5 0 0\", handleSeams=\"1\")\n    Visu3.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"green\")\n    Visu3.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf3 = TorusSpring3.addChild('Surf3')\n    Surf3.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\", translation=\"7.5 0 0\")\n    Surf3.addObject('MeshTopology', src=\"@loader\")\n    Surf3.addObject('MechanicalObject', src=\"@loader\")\n    Surf3.addObject('TriangleCollisionModel')\n    Surf3.addObject('BarycentricMapping')\n\n    TorusSpring4 = ChainSpring.addChild('TorusSpring4')\n    TorusSpring4.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    TorusSpring4.addObject('CGLinearSolver', iterations=\"100\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusSpring4.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\", translation=\"10 0 0\")\n    TorusSpring4.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring4.addObject('MechanicalObject', src=\"@loader\")\n    TorusSpring4.addObject('UniformMass', totalMass=\"0.5\")\n    TorusSpring4.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"0\")\n\n    Visu4 = TorusSpring4.addChild('Visu4')\n    Visu4.addObject('MeshOBJLoader', name=\"meshLoader_4\", filename=\"mesh/torus2.obj\", translation=\"10 0 0\", handleSeams=\"1\")\n    Visu4.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_4\", color=\"red\")\n    Visu4.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf4 = TorusSpring4.addChild('Surf4')\n    Surf4.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\", translation=\"10 0 0\")\n    Surf4.addObject('MeshTopology', src=\"@loader\")\n    Surf4.addObject('MechanicalObject', src=\"@loader\")\n    Surf4.addObject('TriangleCollisionModel')\n    Surf4.addObject('BarycentricMapping')\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/PolynomialRestShapeSpringsForceField/","title":"PolynomialRestShapeSpringsForceField","text":"<p>Simple elastic springs applied to given degrees of freedom between their current and rest shape position</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 points  points controlled by the rest shape springs  external_points  points from the external Mechancial State that define the rest shape springs  polynomialStiffness  coefficients for all spring polynomials  polynomialDegree  vector of values that show polynomials degrees  recompute_indices  Recompute indices (should be false for BBOX)  0 springColor  spring color  0 1 0 1 initialLength  initial virtual length of the spring  smoothShift  denominator correction adding shift value  0 smoothScale  denominator correction adding scale  1 Visualization drawSpring  draw Spring  0 showIndicesScale  Scale for indices display. (default=0.02)  0.02 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component external_rest_shape rest_shape can be defined by the position of an external Mechanical State"},{"location":"30_Components/30_SolidMechanics/20_Spring/PolynomialRestShapeSpringsForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/PolynomialRestShapeSpringsForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [PolynomialRestShapeSpringsForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showForceFields\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Particle\" bbox=\"-10 -10 -10 20 20 20\" &gt;\n        &lt;EulerImplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"200\" tolerance=\"1e-09\" threshold=\"1e-09\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"myParticle\" rest_position=\"0 0 0\" position=\"1.1 0 0\" showObject=\"1\" showObjectScale=\"10\" /&gt;\n        &lt;UniformMass totalMass=\"1\" /&gt;\n        &lt;PolynomialRestShapeSpringsForceField polynomialStiffness=\"10 10\" polynomialDegree=\"2\" points='0' smoothShift=\"0.0001\" smoothScale='10000000' drawSpring='1' /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n\n    Particle = root.addChild('Particle', bbox=\"-10 -10 -10 20 20 20\")\n    Particle.addObject('EulerImplicitSolver')\n    Particle.addObject('CGLinearSolver', iterations=\"200\", tolerance=\"1e-09\", threshold=\"1e-09\")\n    Particle.addObject('MechanicalObject', template=\"Vec3\", name=\"myParticle\", rest_position=\"0 0 0\", position=\"1.1 0 0\", showObject=\"1\", showObjectScale=\"10\")\n    Particle.addObject('UniformMass', totalMass=\"1\")\n    Particle.addObject('PolynomialRestShapeSpringsForceField', polynomialStiffness=\"10 10\", polynomialDegree=\"2\", points=\"0\", smoothShift=\"0.0001\", smoothScale=\"10000000\", drawSpring=\"1\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/QuadBendingSprings/","title":"QuadBendingSprings","text":"<p>Springs added to a quad mesh to prevent bending Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>StiffSpringForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100 damping  uniform damping for the all springs  5 spring  pairs of indices, stiffness, damping, rest length  springsIndices1  List of indices in springs from the first mstate  springsIndices2  List of indices in springs from the second mstate  indices1  Indices of the source points on the first model  indices2  Indices of the fixed points on the second model  lengths  List of lengths to create the springs. Must have the same than indices1 &amp; indices2, or if only one element, it will be applied to all springs. If empty, 0 will be applied everywhere  localRange  optional range of local DOF indices. Any computation involving only indices outside of this range are discarded (useful for parallelization using mesh partitionning)  -1 -1 Visualization showArrowSize  size of the axis  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/20_Spring/QuadBendingSprings/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/QuadBendingSprings.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" gravity=\"0.0 -2.0 0.0\" dt=\"0.04\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField QuadBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"Response\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;NewProximityIntersection alarmDistance=\"0.002\" contactDistance=\"0.001\" /&gt;\n    &lt;Node name=\"SquareCloth1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;RegularGridTopology nx=\"20\" ny=\"1\" nz=\"20\" xmin=\"12\" xmax=\"-12\" ymin=\"7\" ymax=\"7\" zmin=\"-12\" zmax=\"12\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass totalMass=\"100\" /&gt;\n        &lt;MeshSpringForceField name=\"Springs\" stiffness=\"1000\" damping=\"0\" /&gt;\n        &lt;QuadBendingSprings name=\"Bend\" stiffness=\"2000\" damping=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"0 19\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"green\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;RegularGridTopology nx=\"20\" ny=\"1\" nz=\"20\" xmin=\"12\" xmax=\"-12\" ymin=\"7\" ymax=\"7\" zmin=\"-12\" zmax=\"12\" /&gt;\n            &lt;IdentityMapping /&gt;\n            &lt;TriangleCollisionModel /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0.0 -2.0 0.0\", dt=\"0.04\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"Response\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('NewProximityIntersection', alarmDistance=\"0.002\", contactDistance=\"0.001\")\n\n    SquareCloth1 = root.addChild('SquareCloth1')\n    SquareCloth1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareCloth1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareCloth1.addObject('RegularGridTopology', nx=\"20\", ny=\"1\", nz=\"20\", xmin=\"12\", xmax=\"-12\", ymin=\"7\", ymax=\"7\", zmin=\"-12\", zmax=\"12\")\n    SquareCloth1.addObject('MechanicalObject')\n    SquareCloth1.addObject('UniformMass', totalMass=\"100\")\n    SquareCloth1.addObject('MeshSpringForceField', name=\"Springs\", stiffness=\"1000\", damping=\"0\")\n    SquareCloth1.addObject('QuadBendingSprings', name=\"Bend\", stiffness=\"2000\", damping=\"1\")\n    SquareCloth1.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"0 19\")\n\n    Visu = SquareCloth1.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"green\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf = SquareCloth1.addChild('Surf')\n    Surf.addObject('MechanicalObject')\n    Surf.addObject('RegularGridTopology', nx=\"20\", ny=\"1\", nz=\"20\", xmin=\"12\", xmax=\"-12\", ymin=\"7\", ymax=\"7\", zmin=\"-12\", zmax=\"12\")\n    Surf.addObject('IdentityMapping')\n    Surf.addObject('TriangleCollisionModel')\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/QuadularBendingSprings/","title":"QuadularBendingSprings","text":"<p>Springs added to a quad mesh to prevent bending</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100000 damping  uniform damping for the all springs  1 edgeInfo  Internal edge data  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/20_Spring/QuadularBendingSprings/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/QuadularBendingSprings.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.005\" showBoundingTree=\"0\" gravity=\"0 -9.81 0\"&gt;\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [EigenSimplicialLDLT] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [QuadularBendingSprings] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [QuadSetTopologyContainer TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Quad2TriangleTopologicalMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;/Node&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n    &lt;Node name=\"QuadularSprings\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;EigenSimplicialLDLT name=\"linearSolver\" template=\"CompressedRowSparseMatrixMat3x3\"/&gt;\n        &lt;RegularGridTopology min=\"0 0 0\" max=\"1 0 1\" nx=\"20\" ny=\"1\" nz=\"20\" name=\"grid\" /&gt;\n        &lt;MechanicalObject name=\"Quads\" /&gt;\n        &lt;QuadSetTopologyContainer name=\"Container\" quads=\"@grid.quads\"/&gt;\n        &lt;QuadularBendingSprings name=\"FEM-Bend\" stiffness=\"3000\" damping=\"1.0\" topology=\"@Container\" draw=\"true\"/&gt;\n        &lt;DiagonalMass massDensity=\"1.5\" /&gt;\n        &lt;BoxROI box=\"-0.0001 -0.0001 -0.0001 0.0001 0.0001 0.0001  0.999 -0.0001 -0.0001 1.0001 0.0001 0.0001\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\" /&gt;\n        &lt;Node name=\"Surf\"&gt;\n            &lt;TriangleSetTopologyContainer name=\"Container\"/&gt;\n            &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;Quad2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping input=\"@../Quads\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", showBoundingTree=\"0\", gravity=\"0 -9.81 0\")\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n\n    QuadularSprings = root.addChild('QuadularSprings')\n    QuadularSprings.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    QuadularSprings.addObject('EigenSimplicialLDLT', name=\"linearSolver\", template=\"CompressedRowSparseMatrixMat3x3\")\n    QuadularSprings.addObject('RegularGridTopology', min=\"0 0 0\", max=\"1 0 1\", nx=\"20\", ny=\"1\", nz=\"20\", name=\"grid\")\n    QuadularSprings.addObject('MechanicalObject', name=\"Quads\")\n    QuadularSprings.addObject('QuadSetTopologyContainer', name=\"Container\", quads=\"@grid.quads\")\n    QuadularSprings.addObject('QuadularBendingSprings', name=\"FEM-Bend\", stiffness=\"3000\", damping=\"1.0\", topology=\"@Container\", draw=\"true\")\n    QuadularSprings.addObject('DiagonalMass', massDensity=\"1.5\")\n    QuadularSprings.addObject('BoxROI', box=\"-0.0001 -0.0001 -0.0001 0.0001 0.0001 0.0001  0.999 -0.0001 -0.0001 1.0001 0.0001 0.0001\", name=\"box\")\n    QuadularSprings.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n\n    Surf = QuadularSprings.addChild('Surf')\n    Surf.addObject('TriangleSetTopologyContainer', name=\"Container\")\n    Surf.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Surf.addObject('Quad2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n    Surf.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", method=\"large\")\n\n    Visu = QuadularSprings.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    Visu.addObject('IdentityMapping', input=\"@../Quads\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/RegularGridSpringForceField/","title":"RegularGridSpringForceField","text":"<p>Spring acting on the edges and faces of a regular grid</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>StiffSpringForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100 damping  uniform damping for the all springs  5 spring  pairs of indices, stiffness, damping, rest length  springsIndices1  List of indices in springs from the first mstate  springsIndices2  List of indices in springs from the second mstate  indices1  Indices of the source points on the first model  indices2  Indices of the fixed points on the second model  lengths  List of lengths to create the springs. Must have the same than indices1 &amp; indices2, or if only one element, it will be applied to all springs. If empty, 0 will be applied everywhere  linesStiffness  Lines Stiffness  100 linesDamping  Lines Damping  5 quadsStiffness  Quads Stiffness  100 quadsDamping  Quads Damping  5 cubesStiffness  Cubes Stiffness  100 cubesDamping  Cubes Damping  5 Visualization showArrowSize  size of the axis  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/30_SolidMechanics/20_Spring/RegularGridSpringForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/RegularGridSpringForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RegularGridSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;NewProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Chain\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD1\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MechanicalObject translation=\"2.5 0 0\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"2\" nz=\"5\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-0.5\" ymax=\"0.5\" zmin=\"-2\" zmax=\"2\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_4\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_4\" dx=\"2.5\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" translation=\"2.5 0 0\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD2\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MechanicalObject dx=\"5\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"5\" nz=\"2\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-2\" ymax=\"2\" zmin=\"-0.5\" zmax=\"0.5\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" dx=\"5\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"5\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD3\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MechanicalObject dx=\"7.5\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"2\" nz=\"5\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-0.5\" ymax=\"0.5\" zmin=\"-2\" zmax=\"2\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" dx=\"7.5\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD4\"&gt;\n            &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n            &lt;MechanicalObject dx=\"10\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"5\" nz=\"2\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-2\" ymax=\"2\" zmin=\"-0.5\" zmax=\"0.5\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" dx=\"10\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"10\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('NewProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n    root.addObject('DefaultAnimationLoop')\n\n    Chain = root.addChild('Chain')\n\n    TorusFixed = Chain.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"gray\")\n\n    TorusFFD1 = Chain.addChild('TorusFFD1')\n    TorusFFD1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TorusFFD1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusFFD1.addObject('MechanicalObject', translation=\"2.5 0 0\")\n    TorusFFD1.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD1.addObject('RegularGridTopology', nx=\"6\", ny=\"2\", nz=\"5\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-0.5\", ymax=\"0.5\", zmin=\"-2\", zmax=\"2\")\n    TorusFFD1.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_4\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_4\", dx=\"2.5\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", translation=\"2.5 0 0\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD2 = Chain.addChild('TorusFFD2')\n    TorusFFD2.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    TorusFFD2.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusFFD2.addObject('MechanicalObject', dx=\"5\")\n    TorusFFD2.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD2.addObject('RegularGridTopology', nx=\"6\", ny=\"5\", nz=\"2\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-2\", ymax=\"2\", zmin=\"-0.5\", zmax=\"0.5\")\n    TorusFFD2.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", dx=\"5\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD3 = Chain.addChild('TorusFFD3')\n    TorusFFD3.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    TorusFFD3.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusFFD3.addObject('MechanicalObject', dx=\"7.5\")\n    TorusFFD3.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD3.addObject('RegularGridTopology', nx=\"6\", ny=\"2\", nz=\"5\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-0.5\", ymax=\"0.5\", zmin=\"-2\", zmax=\"2\")\n    TorusFFD3.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", dx=\"7.5\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD4 = Chain.addChild('TorusFFD4')\n    TorusFFD4.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    TorusFFD4.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusFFD4.addObject('MechanicalObject', dx=\"10\")\n    TorusFFD4.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD4.addObject('RegularGridTopology', nx=\"6\", ny=\"5\", nz=\"2\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-2\", ymax=\"2\", zmin=\"-0.5\", zmax=\"0.5\")\n    TorusFFD4.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", dx=\"10\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"10\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/RepulsiveSpringForceField/","title":"RepulsiveSpringForceField","text":"<p>Springs which only repell</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>StiffSpringForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100 damping  uniform damping for the all springs  5 spring  pairs of indices, stiffness, damping, rest length  springsIndices1  List of indices in springs from the first mstate  springsIndices2  List of indices in springs from the second mstate  indices1  Indices of the source points on the first model  indices2  Indices of the fixed points on the second model  lengths  List of lengths to create the springs. Must have the same than indices1 &amp; indices2, or if only one element, it will be applied to all springs. If empty, 0 will be applied everywhere  Visualization showArrowSize  size of the axis  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/30_SolidMechanics/20_Spring/RestShapeSpringsForceField/","title":"RestShapeSpringsForceField","text":"<p>Elastic springs generating forces on degrees of freedom between their current and rest shape position Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 points  points controlled by the rest shape springs  stiffness  stiffness values between the actual position and the rest shape position  angularStiffness  angularStiffness assigned when controlling the rotation of the points  pivot_points  global pivot points used when translations instead of the rigid mass centers  external_points  points from the external Mechancial State that define the rest shape springs  recompute_indices  Recompute indices (should be false for BBOX)  1 springColor  spring color. (default=[0.0,1.0,0.0,1.0])  0 1 0 1 activeDirections  Directions in which the spring is active (default=[1,1,1,1,1,1,1])  1 1 1 1 1 1 1 Visualization drawSpring  draw Spring  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component external_rest_shape rest_shape can be defined by the position of an external Mechanical State topology Link to be set to the topology container in the component graph <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 points  points controlled by the rest shape springs  stiffness  stiffness values between the actual position and the rest shape position  angularStiffness  angularStiffness assigned when controlling the rotation of the points  pivot_points  global pivot points used when translations instead of the rigid mass centers  external_points  points from the external Mechancial State that define the rest shape springs  recompute_indices  Recompute indices (should be false for BBOX)  1 springColor  spring color. (default=[0.0,1.0,0.0,1.0])  0 1 0 1 activeDirections  Directions in which the spring is active (default=[1,1,1])  1 1 1 Visualization drawSpring  draw Spring  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component external_rest_shape rest_shape can be defined by the position of an external Mechanical State topology Link to be set to the topology container in the component graph <p>Templates:</p> <ul> <li><code>Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 points  points controlled by the rest shape springs  stiffness  stiffness values between the actual position and the rest shape position  angularStiffness  angularStiffness assigned when controlling the rotation of the points  pivot_points  global pivot points used when translations instead of the rigid mass centers  external_points  points from the external Mechancial State that define the rest shape springs  recompute_indices  Recompute indices (should be false for BBOX)  1 springColor  spring color. (default=[0.0,1.0,0.0,1.0])  0 1 0 1 activeDirections  Directions in which the spring is active (default=[1])  1 Visualization drawSpring  draw Spring  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component external_rest_shape rest_shape can be defined by the position of an external Mechanical State topology Link to be set to the topology container in the component graph"},{"location":"30_Components/30_SolidMechanics/20_Spring/RestShapeSpringsForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/FEM/RestShapeSpringsForceField3.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n\n&lt;Node name=\"root\" dt=\"2.0e-3\" gravity=\"0 0 0\" &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [EigenSparseLU] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RestShapeSpringsForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\" showCollisionModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Object1\"&gt;\n        &lt;MechanicalObject name=\"object1MO\" template=\"Rigid3d\" position=\"0 0 0 0 0 0 1\" showObject=\"true\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"Object2\"&gt;\n        &lt;EulerImplicitSolver rayleighMass=\"0\" rayleighStiffness=\"0\"/&gt;\n        &lt;EigenSparseLU name=\"LULinearSolver\" template=\"CompressedRowSparseMatrixMat3x3d\"/&gt;\n        &lt;MechanicalObject name=\"object2MO\" template=\"Rigid3d\" position=\"0.5 0.5 0 0.2705980500730985 0.2705980500730985 0 0.9238795325112867\" showObject=\"true\"/&gt;\n        &lt;RestShapeSpringsForceField stiffness=\"11\" angularStiffness=\"12\"\n                                    external_rest_shape=\"@../Object1/object1MO\"\n                                    points=\"0\" external_points=\"0\"\n                                    drawSpring=\"true\" springColor=\"1 1 1 1\"\n                                    activeDirections=\"1 0 1 1 0 1\"/&gt;\n        &lt;UniformMass totalMass=\"0.01\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"2.0e-3\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\" showCollisionModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n\n    Object1 = root.addChild('Object1')\n    Object1.addObject('MechanicalObject', name=\"object1MO\", template=\"Rigid3d\", position=\"0 0 0 0 0 0 1\", showObject=\"true\")\n\n    Object2 = root.addChild('Object2')\n    Object2.addObject('EulerImplicitSolver', rayleighMass=\"0\", rayleighStiffness=\"0\")\n    Object2.addObject('EigenSparseLU', name=\"LULinearSolver\", template=\"CompressedRowSparseMatrixMat3x3d\")\n    Object2.addObject('MechanicalObject', name=\"object2MO\", template=\"Rigid3d\", position=\"0.5 0.5 0 0.2705980500730985 0.2705980500730985 0 0.9238795325112867\", showObject=\"true\")\n    Object2.addObject('RestShapeSpringsForceField', stiffness=\"11\", angularStiffness=\"12\", external_rest_shape=\"@../Object1/object1MO\", points=\"0\", external_points=\"0\", drawSpring=\"true\", springColor=\"1 1 1 1\", activeDirections=\"1 0 1 1 0 1\")\n    Object2.addObject('UniformMass', totalMass=\"0.01\")\n</code></pre> <p>Component/SolidMechanics/Spring/RestShapeSpringsForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RestShapeSpringsForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"Dragon\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"30\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;SparseGridTopology n=\"10 5 10\" fileTopology=\"mesh/dragon.obj\" /&gt;\n        &lt;MechanicalObject dx=\"-12.0\" /&gt;\n        &lt;UniformMass vertexMass=\"1.0\" /&gt;\n        &lt;RestShapeSpringsForceField name=\"Springs\" stiffness=\"50\"/&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/dragon.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"0.5 1.0 0.5 1.0\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"TriangleSurf\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/dragon.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\"/&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel group=\"1\" /&gt;\n            &lt;LineCollisionModel group=\"1\" /&gt;\n            &lt;PointCollisionModel group=\"1\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@.\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Dragon with Damping\"&gt;\n        &lt;EulerImplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"30\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;SparseGridTopology n=\"10 5 10\" fileTopology=\"mesh/dragon.obj\" /&gt;\n        &lt;MechanicalObject dx=\"12.0\" /&gt;\n        &lt;UniformMass vertexMass=\"1.0\" /&gt;\n        &lt;RestShapeSpringsForceField name=\"Springs\" stiffness=\"50\"/&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/dragon.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"1.0 0.5 0.5 1.0\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"TriangleSurf\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/dragon.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\"/&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel group=\"1\" /&gt;\n            &lt;LineCollisionModel group=\"1\" /&gt;\n            &lt;PointCollisionModel group=\"1\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@.\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"CUBE\"&gt;\n        &lt;EulerImplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"30\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" dx=\"-12.0\" dy=\"-20\" rx=\"10\" /&gt;\n        &lt;UniformMass totalMass=\"1.0\" /&gt;\n        &lt;RestShapeSpringsForceField name=\"Springs\" stiffness=\"50\" angularStiffness=\"50\"/&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/smCube27.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"0.5 1.0 0.5 1.0\" /&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/smCube27.obj\" triangulate=\"true\" /&gt;\n            &lt;MeshTopology src=\"@loader\"/&gt;\n            &lt;MechanicalObject src=\"@loader\"/&gt;\n            &lt;TriangleCollisionModel group=\"1\"/&gt;\n            &lt;LineCollisionModel group=\"1\"/&gt;\n            &lt;PointCollisionModel group=\"1\"/&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@.\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"CUBE with Damping\"&gt;\n        &lt;EulerImplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"30\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" dx=\"12.0\" dy=\"-20\" rx=\"10\" /&gt;\n        &lt;UniformMass totalMass=\"1.0\" /&gt;\n        &lt;RestShapeSpringsForceField name=\"Springs\" stiffness=\"50\" angularStiffness=\"50\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/smCube27.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"1.0 0.5 0.5 1.0\" /&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/smCube27.obj\" triangulate=\"true\" /&gt;\n            &lt;MeshTopology src=\"@loader\"/&gt;\n            &lt;MechanicalObject src=\"@loader\"/&gt;\n            &lt;TriangleCollisionModel group=\"1\"/&gt;\n            &lt;LineCollisionModel group=\"1\"/&gt;\n            &lt;PointCollisionModel group=\"1\"/&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@.\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n\n    Dragon = root.addChild('Dragon')\n    Dragon.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Dragon.addObject('CGLinearSolver', iterations=\"30\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Dragon.addObject('SparseGridTopology', n=\"10 5 10\", fileTopology=\"mesh/dragon.obj\")\n    Dragon.addObject('MechanicalObject', dx=\"-12.0\")\n    Dragon.addObject('UniformMass', vertexMass=\"1.0\")\n    Dragon.addObject('RestShapeSpringsForceField', name=\"Springs\", stiffness=\"50\")\n\n    Visu = Dragon.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/dragon.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"0.5 1.0 0.5 1.0\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    TriangleSurf = Dragon.addChild('TriangleSurf')\n    TriangleSurf.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/dragon.obj\")\n    TriangleSurf.addObject('MeshTopology', src=\"@loader\")\n    TriangleSurf.addObject('MechanicalObject', src=\"@loader\")\n    TriangleSurf.addObject('TriangleCollisionModel', group=\"1\")\n    TriangleSurf.addObject('LineCollisionModel', group=\"1\")\n    TriangleSurf.addObject('PointCollisionModel', group=\"1\")\n    TriangleSurf.addObject('BarycentricMapping', input=\"@..\", output=\"@.\")\n\n    Dragon with Damping = root.addChild('Dragon with Damping')\n    Dragon with Damping.addObject('EulerImplicitSolver')\n    Dragon with Damping.addObject('CGLinearSolver', iterations=\"30\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Dragon with Damping.addObject('SparseGridTopology', n=\"10 5 10\", fileTopology=\"mesh/dragon.obj\")\n    Dragon with Damping.addObject('MechanicalObject', dx=\"12.0\")\n    Dragon with Damping.addObject('UniformMass', vertexMass=\"1.0\")\n    Dragon with Damping.addObject('RestShapeSpringsForceField', name=\"Springs\", stiffness=\"50\")\n\n    Visu = Dragon with Damping.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/dragon.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"1.0 0.5 0.5 1.0\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    TriangleSurf = Dragon with Damping.addChild('TriangleSurf')\n    TriangleSurf.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/dragon.obj\")\n    TriangleSurf.addObject('MeshTopology', src=\"@loader\")\n    TriangleSurf.addObject('MechanicalObject', src=\"@loader\")\n    TriangleSurf.addObject('TriangleCollisionModel', group=\"1\")\n    TriangleSurf.addObject('LineCollisionModel', group=\"1\")\n    TriangleSurf.addObject('PointCollisionModel', group=\"1\")\n    TriangleSurf.addObject('BarycentricMapping', input=\"@..\", output=\"@.\")\n\n    CUBE = root.addChild('CUBE')\n    CUBE.addObject('EulerImplicitSolver')\n    CUBE.addObject('CGLinearSolver', iterations=\"30\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    CUBE.addObject('MechanicalObject', template=\"Rigid3\", dx=\"-12.0\", dy=\"-20\", rx=\"10\")\n    CUBE.addObject('UniformMass', totalMass=\"1.0\")\n    CUBE.addObject('RestShapeSpringsForceField', name=\"Springs\", stiffness=\"50\", angularStiffness=\"50\")\n\n    Visu = CUBE.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/smCube27.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"0.5 1.0 0.5 1.0\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = CUBE.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/smCube27.obj\", triangulate=\"true\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel', group=\"1\")\n    Surf2.addObject('LineCollisionModel', group=\"1\")\n    Surf2.addObject('PointCollisionModel', group=\"1\")\n    Surf2.addObject('RigidMapping', input=\"@..\", output=\"@.\")\n\n    CUBE with Damping = root.addChild('CUBE with Damping')\n    CUBE with Damping.addObject('EulerImplicitSolver')\n    CUBE with Damping.addObject('CGLinearSolver', iterations=\"30\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    CUBE with Damping.addObject('MechanicalObject', template=\"Rigid3\", dx=\"12.0\", dy=\"-20\", rx=\"10\")\n    CUBE with Damping.addObject('UniformMass', totalMass=\"1.0\")\n    CUBE with Damping.addObject('RestShapeSpringsForceField', name=\"Springs\", stiffness=\"50\", angularStiffness=\"50\")\n\n    Visu = CUBE with Damping.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/smCube27.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"1.0 0.5 0.5 1.0\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = CUBE with Damping.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/smCube27.obj\", triangulate=\"true\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel', group=\"1\")\n    Surf2.addObject('LineCollisionModel', group=\"1\")\n    Surf2.addObject('PointCollisionModel', group=\"1\")\n    Surf2.addObject('RigidMapping', input=\"@..\", output=\"@.\")\n</code></pre> <p>Component/SolidMechanics/Spring/RestShapeSpringsForceField2.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 0 0\" &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.AnimationLoop\"/&gt; &lt;!-- Needed to use components [FreeMotionAnimationLoop] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Correction\"/&gt; &lt;!-- Needed to use components [LinearSolverConstraintCorrection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Solver\"/&gt; &lt;!-- Needed to use components [GenericConstraintSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [EigenSparseLU] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RestShapeSpringsForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\" showCollisionModels showForceFields\" /&gt;\n\n    &lt;FreeMotionAnimationLoop /&gt;\n    &lt;GenericConstraintSolver maxIt=\"1000\" tolerance=\"1e-10\" printLog=\"false\" /&gt;\n\n    &lt;Node name=\"Object1\"&gt;\n        &lt;MechanicalObject name=\"ms\" template=\"Rigid3\" position=\"0 0 0 0 0 0 0 1\" showObject=\"false\"/&gt;\n        &lt;SphereCollisionModel radius=\"0.01\" color=\"0 1 0 1\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"Object2\"&gt;\n        &lt;EulerImplicitSolver rayleighMass=\"0\" rayleighStiffness=\"0\"/&gt;\n        &lt;EigenSparseLU template=\"CompressedRowSparseMatrix\" name=\"LULinearSolver\"/&gt;\n        &lt;MechanicalObject name=\"mstate\" template=\"Rigid3\" position=\"0.1 0 0  0  0 0 0 1\" /&gt;\n        &lt;SphereCollisionModel color=\"1 0 0 1\" radius=\"0.01\" /&gt;\n        &lt;RestShapeSpringsForceField stiffness=\"11\" angularStiffness=\"11\" external_rest_shape=\"@../Object1/ms\" points=\"0\" external_points=\"0\" drawSpring=\"true\" springColor=\"1 1 1 1\"/&gt;\n        &lt;UniformMass totalMass=\"0.01\" /&gt;\n        &lt;SphereCollisionModel radius=\"0.0005\" color=\"1 0 0  1\" /&gt;\n\n        &lt;LinearSolverConstraintCorrection linearSolver=\"@LULinearSolver\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.AnimationLoop\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Correction\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Solver\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\" showCollisionModels showForceFields\")\n    root.addObject('FreeMotionAnimationLoop')\n    root.addObject('GenericConstraintSolver', maxIt=\"1000\", tolerance=\"1e-10\", printLog=\"false\")\n\n    Object1 = root.addChild('Object1')\n    Object1.addObject('MechanicalObject', name=\"ms\", template=\"Rigid3\", position=\"0 0 0 0 0 0 0 1\", showObject=\"false\")\n    Object1.addObject('SphereCollisionModel', radius=\"0.01\", color=\"0 1 0 1\")\n\n    Object2 = root.addChild('Object2')\n    Object2.addObject('EulerImplicitSolver', rayleighMass=\"0\", rayleighStiffness=\"0\")\n    Object2.addObject('EigenSparseLU', template=\"CompressedRowSparseMatrix\", name=\"LULinearSolver\")\n    Object2.addObject('MechanicalObject', name=\"mstate\", template=\"Rigid3\", position=\"0.1 0 0  0  0 0 0 1\")\n    Object2.addObject('SphereCollisionModel', color=\"1 0 0 1\", radius=\"0.01\")\n    Object2.addObject('RestShapeSpringsForceField', stiffness=\"11\", angularStiffness=\"11\", external_rest_shape=\"@../Object1/ms\", points=\"0\", external_points=\"0\", drawSpring=\"true\", springColor=\"1 1 1 1\")\n    Object2.addObject('UniformMass', totalMass=\"0.01\")\n    Object2.addObject('SphereCollisionModel', radius=\"0.0005\", color=\"1 0 0  1\")\n    Object2.addObject('LinearSolverConstraintCorrection', linearSolver=\"@LULinearSolver\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/SpringForceField/","title":"SpringForceField","text":"<p>Springs</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>PairInteractionForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100 damping  uniform damping for the all springs  5 spring  pairs of indices, stiffness, damping, rest length  springsIndices1  List of indices in springs from the first mstate  springsIndices2  List of indices in springs from the second mstate  Visualization showArrowSize  size of the axis  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/30_SolidMechanics/20_Spring/StiffSpringForceField/","title":"StiffSpringForceField","text":"<p>Stiff springs for implicit integration Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>SpringForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100 damping  uniform damping for the all springs  5 spring  pairs of indices, stiffness, damping, rest length  springsIndices1  List of indices in springs from the first mstate  springsIndices2  List of indices in springs from the second mstate  indices1  Indices of the source points on the first model  indices2  Indices of the fixed points on the second model  lengths  List of lengths to create the springs. Must have the same than indices1 &amp; indices2, or if only one element, it will be applied to all springs. If empty, 0 will be applied everywhere  Visualization showArrowSize  size of the axis  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/30_SolidMechanics/20_Spring/StiffSpringForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/StiffSpringForceField_simple.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.005\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [SparseLDLSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [StiffSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showCollision showInteractionForceFields showForceFields\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;DefaultVisualManagerLoop/&gt;\n\n    &lt;EulerImplicitSolver name=\"odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;SparseLDLSolver template=\"CompressedRowSparseMatrixMat3x3\"/&gt;\n\n    &lt;Node name=\"fix\"&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"dofs\" position=\"0 0 0\" showObject=\"true\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"0\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"sphere1\"&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"dofs\" position=\"1 0 0\" showObject=\"true\"/&gt;\n        &lt;UniformMass/&gt;\n        &lt;SphereCollisionModel listRadius=\"0.25\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"sphere2\"&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"dofs\" position=\"2 0 0\" showObject=\"true\"/&gt;\n        &lt;UniformMass/&gt;\n        &lt;SphereCollisionModel listRadius=\"0.25\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"sphere3-4\"&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"dofs\" position=\"3 0 0 4 0 0\" showObject=\"true\"/&gt;\n        &lt;UniformMass/&gt;\n        &lt;SphereCollisionModel listRadius=\"0.25 0.25\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"sphere5-6\"&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"dofs\" position=\"5 0 0 6 0 0\" showObject=\"true\"/&gt;\n        &lt;UniformMass/&gt;\n        &lt;SphereCollisionModel listRadius=\"0.25 0.25\"/&gt;\n        &lt;StiffSpringForceField template=\"Vec3\" name=\"spring\" spring=\"0 1 50 1 1\" showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n    &lt;/Node&gt;\n\n    &lt;StiffSpringForceField template=\"Vec3\" name=\"spring1\" object1=\"@fix/dofs\"       object2=\"@sphere1/dofs\"   spring=\"0 0 50 1 1\"             showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n    &lt;StiffSpringForceField template=\"Vec3\" name=\"spring2\" object1=\"@sphere1/dofs\"   object2=\"@sphere2/dofs\"   spring=\"0 0 50 1 1\"             showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n    &lt;StiffSpringForceField template=\"Vec3\" name=\"spring3\" object1=\"@sphere2/dofs\"   object2=\"@sphere3-4/dofs\" spring=\"0 0 50 1 1  0 1 50 1 1\" showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n    &lt;StiffSpringForceField template=\"Vec3\" name=\"spring5\" object1=\"@sphere3-4/dofs\" object2=\"@sphere3-4/dofs\" spring=\"0 1 50 1 1\"             showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n    &lt;StiffSpringForceField template=\"Vec3\" name=\"spring6\" object1=\"@sphere3-4/dofs\" object2=\"@sphere5-6/dofs\" spring=\"0 0 50 1 1  1 1 50 1 1\" showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showCollision showInteractionForceFields showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('DefaultVisualManagerLoop')\n    root.addObject('EulerImplicitSolver', name=\"odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('SparseLDLSolver', template=\"CompressedRowSparseMatrixMat3x3\")\n\n    fix = root.addChild('fix')\n    fix.addObject('MechanicalObject', template=\"Vec3\", name=\"dofs\", position=\"0 0 0\", showObject=\"true\")\n    fix.addObject('FixedProjectiveConstraint', indices=\"0\")\n\n    sphere1 = root.addChild('sphere1')\n    sphere1.addObject('MechanicalObject', template=\"Vec3\", name=\"dofs\", position=\"1 0 0\", showObject=\"true\")\n    sphere1.addObject('UniformMass')\n    sphere1.addObject('SphereCollisionModel', listRadius=\"0.25\")\n\n    sphere2 = root.addChild('sphere2')\n    sphere2.addObject('MechanicalObject', template=\"Vec3\", name=\"dofs\", position=\"2 0 0\", showObject=\"true\")\n    sphere2.addObject('UniformMass')\n    sphere2.addObject('SphereCollisionModel', listRadius=\"0.25\")\n\n    sphere3-4 = root.addChild('sphere3-4')\n    sphere3-4.addObject('MechanicalObject', template=\"Vec3\", name=\"dofs\", position=\"3 0 0 4 0 0\", showObject=\"true\")\n    sphere3-4.addObject('UniformMass')\n    sphere3-4.addObject('SphereCollisionModel', listRadius=\"0.25 0.25\")\n\n    sphere5-6 = root.addChild('sphere5-6')\n    sphere5-6.addObject('MechanicalObject', template=\"Vec3\", name=\"dofs\", position=\"5 0 0 6 0 0\", showObject=\"true\")\n    sphere5-6.addObject('UniformMass')\n    sphere5-6.addObject('SphereCollisionModel', listRadius=\"0.25 0.25\")\n    sphere5-6.addObject('StiffSpringForceField', template=\"Vec3\", name=\"spring\", spring=\"0 1 50 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n    root.addObject('StiffSpringForceField', template=\"Vec3\", name=\"spring1\", object1=\"@fix/dofs\", object2=\"@sphere1/dofs\", spring=\"0 0 50 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n    root.addObject('StiffSpringForceField', template=\"Vec3\", name=\"spring2\", object1=\"@sphere1/dofs\", object2=\"@sphere2/dofs\", spring=\"0 0 50 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n    root.addObject('StiffSpringForceField', template=\"Vec3\", name=\"spring3\", object1=\"@sphere2/dofs\", object2=\"@sphere3-4/dofs\", spring=\"0 0 50 1 1  0 1 50 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n    root.addObject('StiffSpringForceField', template=\"Vec3\", name=\"spring5\", object1=\"@sphere3-4/dofs\", object2=\"@sphere3-4/dofs\", spring=\"0 1 50 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n    root.addObject('StiffSpringForceField', template=\"Vec3\", name=\"spring6\", object1=\"@sphere3-4/dofs\", object2=\"@sphere5-6/dofs\", spring=\"0 0 50 1 1  1 1 50 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n</code></pre> <p>Component/SolidMechanics/Spring/StiffSpringForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node    name=\"root\"  dt=\"0.005\"  &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [StiffSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle name=\"visualStyle1\"  displayFlags=\"showBehaviorModels showForceFields showCollisionModels showMappings\" /&gt;\n    &lt;Node    name=\"Poutre1\"  &gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\"  printLog=\"0\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver\"  iterations=\"25\"  tolerance=\"1e-09\"  threshold=\"1e-09\" /&gt;\n        &lt;Node    name=\"M1\"  &gt;\n            &lt;MeshGmshLoader name=\"loader\"  filename=\"mesh/smCube27.msh\" /&gt;\n            &lt;MechanicalObject template=\"Vec3\" showObject=\"1\" name=\"mObject1\"  position=\"@loader.position\"  velocity=\"0 0 0\"  force=\"0 0 0\"  externalForce=\"0 0 0\"  derivX=\"0 0 0\"  restScale=\"1\" /&gt;\n            &lt;UniformMass name=\"uniformMass1\"  vertexMass=\"0.1\" /&gt;\n            &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"fixedProjectiveConstraint1\"  indices=\"0 3 6 9 12 15 18 21 24\" /&gt;\n            &lt;StiffSpringForceField template=\"Vec3\" name=\"InternalSprings1\"  spring=\"0 9 100 5 3.5\n 1 10 500 5 3.5\n 2 11 500 5 3.5\n 3 12 500 5 3.5\n 4 13 500 5 3.5\n 5 14 500 5 3.5\n 6 15 500 5 3.5\n 7 16 500 5 3.5\n 8 17 500 5 3.5\n 9 18 500 5 3.5\n 10 19 500 5 3.5\n 11 20 500 5 3.5\n 12 21 500 5 3.5\n 13 22 500 5 3.5\n 14 23 500 5 3.5\n 15 24 500 5 3.5\n 16 25 500 5 3.5\n 17 26 500 5 3.5\n 0 3 500 5 3.5\n 1 4 500 5 3.5\n 2 5 500 5 3.5\n 3 6 500 5 3.5\n 4 7 500 5 3.5\n 5 8 500 5 3.5\n 9 12 500 5 3.5\n 10 13 500 5 3.5\n 11 14 500 5 3.5\n 12 15 500 5 3.5\n 13 16 500 5 3.5\n 14 17 500 5 3.5\n 18 21 500 5 3.5\n 19 22 500 5 3.5\n 20 23 500 5 3.5\n 21 24 500 5 3.5\n 22 25 500 5 3.5\n 23 26 500 5 3.5\n 0 1 500 5 3.5\n 1 2 500 5 3.5\n 3 4 500 5 3.5\n 4 5 500 5 3.5\n 6 7 500 5 3.5\n 7 8 500 5 3.5\n 9 10 500 5 3.5\n 10 11 500 5 3.5\n 12 13 500 5 3.5\n 13 14 500 5 3.5\n 15 16 500 5 3.5\n 16 17 500 5 3.5\n 18 19 500 5 3.5\n 19 20 500 5 3.5\n 21 22 500 5 3.5\n 22 23 500 5 3.5\n 24 25 500 5 3.5\n 25 26 100 5 3.5\n 0 13 500 5 6.06218\n 1 14 500 5 6.06218\n 3 16 500 5 6.06218\n 4 17 500 5 6.06218\n 9 22 500 5 6.06218\n 10 23 500 5 6.06218\n 12 25 500 5 6.06218\n 13 26 500 5 6.06218\n 9 4 500 5 6.06218\n 10 5 500 5 6.06218\n 12 7 500 5 6.06218\n 13 8 500 5 6.06218\n 18 13 500 5 6.06218\n 19 14 500 5 6.06218\n 21 16 500 5 6.06218\n 22 17 500 5 6.06218\n 3 10 500 5 6.06218\n 4 11 500 5 6.06218\n 6 13 500 5 6.06218\n 7 14 500 5 6.06218\n 12 19 500 5 6.06218\n 13 20 500 5 6.06218\n 15 22 500 5 6.06218\n 16 23 500 5 6.06218\n 12 1 500 5 6.06218\n 13 2 500 5 6.06218\n 15 4 500 5 6.06218\n 16 5 500 5 6.06218\n 21 10 500 5 6.06218\n 22 11 500 5 6.06218\n 24 13 500 5 6.06218\n 25 14 500 5 6.06218\n 0 12 500 5 4.94975\n 1 13 500 5 4.94975\n 2 14 500 5 4.94975\n 3 15 500 5 4.94975\n 4 16 500 5 4.94975\n 5 17 500 5 4.94975\n 9 21 500 5 4.94975\n 10 22 500 5 4.94975\n 11 23 500 5 4.94975\n 12 24 500 5 4.94975\n 13 25 500 5 4.94975\n 14 26 500 5 4.94975\n 3 9 500 5 4.94975\n 4 10 500 5 4.94975\n 5 11 500 5 4.94975\n 6 12 500 5 4.94975\n 7 13 500 5 4.94975\n 8 14 500 5 4.94975\n 12 18 500 5 4.94975\n 13 19 500 5 4.94975\n 14 20 500 5 4.94975\n 15 21 500 5 4.94975\n 16 22 500 5 4.94975\n 17 23 500 5 4.94975\n 0 10 500 5 4.94975\n 1 11 500 5 4.94975\n 3 13 500 5 4.94975\n 4 14 500 5 4.94975\n 6 16 500 5 4.94975\n 7 17 500 5 4.94975\n 9 19 500 5 4.94975\n 10 20 500 5 4.94975\n 12 22 500 5 4.94975\n 13 23 500 5 4.94975\n 15 25 500 5 4.94975\n 16 26 500 5 4.94975\n 9 1 500 5 4.94975\n 10 2 500 5 4.94975\n 12 4 500 5 4.94975\n 13 5 500 5 4.94975\n 15 7 500 5 4.94975\n 16 8 500 5 4.94975\n 18 10 500 5 4.94975\n 19 11 500 5 4.94975\n 21 13 500 5 4.94975\n 22 14 500 5 4.94975\n 24 16 500 5 4.94975\n 25 17 500 5 4.94975\n 0 4 500 5 4.94975\n 1 5 500 5 4.94975\n 3 7 500 5 4.94975\n 4 8 500 5 4.94975\n 9 13 500 5 4.94975\n 10 14 500 5 4.94975\n 12 16 500 5 4.94975\n 13 17 500 5 4.94975\n 18 22 500 5 4.94975\n 19 23 500 5 4.94975\n 21 25 500 5 4.94975\n 22 26 500 5 4.94975\n 3 1 500 5 4.94975\n 4 2 500 5 4.94975\n 6 4 500 5 4.94975\n 7 5 500 5 4.94975\n 12 10 500 5 4.94975\n 13 11 500 5 4.94975\n 15 13 500 5 4.94975\n 16 14 500 5 4.94975\n 21 19 500 5 4.94975\n 22 20 500 5 4.94975\n 24 22 500 5 4.94975\n 25 23 500 5 4.94975\n\"  /&gt;\n        &lt;/Node&gt;\n        &lt;Node    name=\"M5\"  &gt;\n            &lt;MeshGmshLoader name=\"loader\"  filename=\"mesh/smCube27.msh\" /&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"mObject5\" showObject=\"1\" position=\"@loader.position\"  velocity=\"0 0 0\"  force=\"0 0 0\"  externalForce=\"0 0 0\"  derivX=\"0 0 0\"  restScale=\"1\"  translation=\"0 0 42\" /&gt;\n            &lt;UniformMass name=\"uniformMass5\"  vertexMass=\"0.1\" /&gt;\n            &lt;StiffSpringForceField template=\"Vec3\" name=\"InternalSprings5\"  spring=\"0 9 100 5 3.5\n 1 10 500 5 3.5\n 2 11 500 5 3.5\n 3 12 500 5 3.5\n 4 13 500 5 3.5\n 5 14 500 5 3.5\n 6 15 500 5 3.5\n 7 16 500 5 3.5\n 8 17 500 5 3.5\n 9 18 500 5 3.5\n 10 19 500 5 3.5\n 11 20 500 5 3.5\n 12 21 500 5 3.5\n 13 22 500 5 3.5\n 14 23 500 5 3.5\n 15 24 500 5 3.5\n 16 25 500 5 3.5\n 17 26 500 5 3.5\n 0 3 500 5 3.5\n 1 4 500 5 3.5\n 2 5 500 5 3.5\n 3 6 500 5 3.5\n 4 7 500 5 3.5\n 5 8 500 5 3.5\n 9 12 500 5 3.5\n 10 13 500 5 3.5\n 11 14 500 5 3.5\n 12 15 500 5 3.5\n 13 16 500 5 3.5\n 14 17 500 5 3.5\n 18 21 500 5 3.5\n 19 22 500 5 3.5\n 20 23 500 5 3.5\n 21 24 500 5 3.5\n 22 25 500 5 3.5\n 23 26 500 5 3.5\n 0 1 500 5 3.5\n 1 2 500 5 3.5\n 3 4 500 5 3.5\n 4 5 500 5 3.5\n 6 7 500 5 3.5\n 7 8 500 5 3.5\n 9 10 500 5 3.5\n 10 11 500 5 3.5\n 12 13 500 5 3.5\n 13 14 500 5 3.5\n 15 16 500 5 3.5\n 16 17 500 5 3.5\n 18 19 500 5 3.5\n 19 20 500 5 3.5\n 21 22 500 5 3.5\n 22 23 500 5 3.5\n 24 25 500 5 3.5\n 25 26 100 5 3.5\n 0 13 500 5 6.06218\n 1 14 500 5 6.06218\n 3 16 500 5 6.06218\n 4 17 500 5 6.06218\n 9 22 500 5 6.06218\n 10 23 500 5 6.06218\n 12 25 500 5 6.06218\n 13 26 500 5 6.06218\n 9 4 500 5 6.06218\n 10 5 500 5 6.06218\n 12 7 500 5 6.06218\n 13 8 500 5 6.06218\n 18 13 500 5 6.06218\n 19 14 500 5 6.06218\n 21 16 500 5 6.06218\n 22 17 500 5 6.06218\n 3 10 500 5 6.06218\n 4 11 500 5 6.06218\n 6 13 500 5 6.06218\n 7 14 500 5 6.06218\n 12 19 500 5 6.06218\n 13 20 500 5 6.06218\n 15 22 500 5 6.06218\n 16 23 500 5 6.06218\n 12 1 500 5 6.06218\n 13 2 500 5 6.06218\n 15 4 500 5 6.06218\n 16 5 500 5 6.06218\n 21 10 500 5 6.06218\n 22 11 500 5 6.06218\n 24 13 500 5 6.06218\n 25 14 500 5 6.06218\n 0 12 500 5 4.94975\n 1 13 500 5 4.94975\n 2 14 500 5 4.94975\n 3 15 500 5 4.94975\n 4 16 500 5 4.94975\n 5 17 500 5 4.94975\n 9 21 500 5 4.94975\n 10 22 500 5 4.94975\n 11 23 500 5 4.94975\n 12 24 500 5 4.94975\n 13 25 500 5 4.94975\n 14 26 500 5 4.94975\n 3 9 500 5 4.94975\n 4 10 500 5 4.94975\n 5 11 500 5 4.94975\n 6 12 500 5 4.94975\n 7 13 500 5 4.94975\n 8 14 500 5 4.94975\n 12 18 500 5 4.94975\n 13 19 500 5 4.94975\n 14 20 500 5 4.94975\n 15 21 500 5 4.94975\n 16 22 500 5 4.94975\n 17 23 500 5 4.94975\n 0 10 500 5 4.94975\n 1 11 500 5 4.94975\n 3 13 500 5 4.94975\n 4 14 500 5 4.94975\n 6 16 500 5 4.94975\n 7 17 500 5 4.94975\n 9 19 500 5 4.94975\n 10 20 500 5 4.94975\n 12 22 500 5 4.94975\n 13 23 500 5 4.94975\n 15 25 500 5 4.94975\n 16 26 500 5 4.94975\n 9 1 500 5 4.94975\n 10 2 500 5 4.94975\n 12 4 500 5 4.94975\n 13 5 500 5 4.94975\n 15 7 500 5 4.94975\n 16 8 500 5 4.94975\n 18 10 500 5 4.94975\n 19 11 500 5 4.94975\n 21 13 500 5 4.94975\n 22 14 500 5 4.94975\n 24 16 500 5 4.94975\n 25 17 500 5 4.94975\n 0 4 500 5 4.94975\n 1 5 500 5 4.94975\n 3 7 500 5 4.94975\n 4 8 500 5 4.94975\n 9 13 500 5 4.94975\n 10 14 500 5 4.94975\n 12 16 500 5 4.94975\n 13 17 500 5 4.94975\n 18 22 500 5 4.94975\n 19 23 500 5 4.94975\n 21 25 500 5 4.94975\n 22 26 500 5 4.94975\n 3 1 500 5 4.94975\n 4 2 500 5 4.94975\n 6 4 500 5 4.94975\n 7 5 500 5 4.94975\n 12 10 500 5 4.94975\n 13 11 500 5 4.94975\n 15 13 500 5 4.94975\n 16 14 500 5 4.94975\n 21 19 500 5 4.94975\n 22 20 500 5 4.94975\n 24 22 500 5 4.94975\n 25 23 500 5 4.94975\n\"   /&gt;\n        &lt;/Node&gt;\n        &lt;Node    name=\"M4\"  &gt;\n            &lt;MeshGmshLoader name=\"loader\"  filename=\"mesh/smCube27.msh\" /&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"mObject4\" showObject=\"1\" position=\"@loader.position\"  velocity=\"0 0 0\"  force=\"0 0 0\"  externalForce=\"0 0 0\"  derivX=\"0 0 0\"  restScale=\"1\"  translation=\"0 0 31.5\" /&gt;\n            &lt;UniformMass name=\"uniformMass4\"  vertexMass=\"0.1\" /&gt;\n            &lt;StiffSpringForceField template=\"Vec3\" name=\"InternalSprings4\"  spring=\"0 9 100 5 3.5\n 1 10 500 5 3.5\n 2 11 500 5 3.5\n 3 12 500 5 3.5\n 4 13 500 5 3.5\n 5 14 500 5 3.5\n 6 15 500 5 3.5\n 7 16 500 5 3.5\n 8 17 500 5 3.5\n 9 18 500 5 3.5\n 10 19 500 5 3.5\n 11 20 500 5 3.5\n 12 21 500 5 3.5\n 13 22 500 5 3.5\n 14 23 500 5 3.5\n 15 24 500 5 3.5\n 16 25 500 5 3.5\n 17 26 500 5 3.5\n 0 3 500 5 3.5\n 1 4 500 5 3.5\n 2 5 500 5 3.5\n 3 6 500 5 3.5\n 4 7 500 5 3.5\n 5 8 500 5 3.5\n 9 12 500 5 3.5\n 10 13 500 5 3.5\n 11 14 500 5 3.5\n 12 15 500 5 3.5\n 13 16 500 5 3.5\n 14 17 500 5 3.5\n 18 21 500 5 3.5\n 19 22 500 5 3.5\n 20 23 500 5 3.5\n 21 24 500 5 3.5\n 22 25 500 5 3.5\n 23 26 500 5 3.5\n 0 1 500 5 3.5\n 1 2 500 5 3.5\n 3 4 500 5 3.5\n 4 5 500 5 3.5\n 6 7 500 5 3.5\n 7 8 500 5 3.5\n 9 10 500 5 3.5\n 10 11 500 5 3.5\n 12 13 500 5 3.5\n 13 14 500 5 3.5\n 15 16 500 5 3.5\n 16 17 500 5 3.5\n 18 19 500 5 3.5\n 19 20 500 5 3.5\n 21 22 500 5 3.5\n 22 23 500 5 3.5\n 24 25 500 5 3.5\n 25 26 100 5 3.5\n 0 13 500 5 6.06218\n 1 14 500 5 6.06218\n 3 16 500 5 6.06218\n 4 17 500 5 6.06218\n 9 22 500 5 6.06218\n 10 23 500 5 6.06218\n 12 25 500 5 6.06218\n 13 26 500 5 6.06218\n 9 4 500 5 6.06218\n 10 5 500 5 6.06218\n 12 7 500 5 6.06218\n 13 8 500 5 6.06218\n 18 13 500 5 6.06218\n 19 14 500 5 6.06218\n 21 16 500 5 6.06218\n 22 17 500 5 6.06218\n 3 10 500 5 6.06218\n 4 11 500 5 6.06218\n 6 13 500 5 6.06218\n 7 14 500 5 6.06218\n 12 19 500 5 6.06218\n 13 20 500 5 6.06218\n 15 22 500 5 6.06218\n 16 23 500 5 6.06218\n 12 1 500 5 6.06218\n 13 2 500 5 6.06218\n 15 4 500 5 6.06218\n 16 5 500 5 6.06218\n 21 10 500 5 6.06218\n 22 11 500 5 6.06218\n 24 13 500 5 6.06218\n 25 14 500 5 6.06218\n 0 12 500 5 4.94975\n 1 13 500 5 4.94975\n 2 14 500 5 4.94975\n 3 15 500 5 4.94975\n 4 16 500 5 4.94975\n 5 17 500 5 4.94975\n 9 21 500 5 4.94975\n 10 22 500 5 4.94975\n 11 23 500 5 4.94975\n 12 24 500 5 4.94975\n 13 25 500 5 4.94975\n 14 26 500 5 4.94975\n 3 9 500 5 4.94975\n 4 10 500 5 4.94975\n 5 11 500 5 4.94975\n 6 12 500 5 4.94975\n 7 13 500 5 4.94975\n 8 14 500 5 4.94975\n 12 18 500 5 4.94975\n 13 19 500 5 4.94975\n 14 20 500 5 4.94975\n 15 21 500 5 4.94975\n 16 22 500 5 4.94975\n 17 23 500 5 4.94975\n 0 10 500 5 4.94975\n 1 11 500 5 4.94975\n 3 13 500 5 4.94975\n 4 14 500 5 4.94975\n 6 16 500 5 4.94975\n 7 17 500 5 4.94975\n 9 19 500 5 4.94975\n 10 20 500 5 4.94975\n 12 22 500 5 4.94975\n 13 23 500 5 4.94975\n 15 25 500 5 4.94975\n 16 26 500 5 4.94975\n 9 1 500 5 4.94975\n 10 2 500 5 4.94975\n 12 4 500 5 4.94975\n 13 5 500 5 4.94975\n 15 7 500 5 4.94975\n 16 8 500 5 4.94975\n 18 10 500 5 4.94975\n 19 11 500 5 4.94975\n 21 13 500 5 4.94975\n 22 14 500 5 4.94975\n 24 16 500 5 4.94975\n 25 17 500 5 4.94975\n 0 4 500 5 4.94975\n 1 5 500 5 4.94975\n 3 7 500 5 4.94975\n 4 8 500 5 4.94975\n 9 13 500 5 4.94975\n 10 14 500 5 4.94975\n 12 16 500 5 4.94975\n 13 17 500 5 4.94975\n 18 22 500 5 4.94975\n 19 23 500 5 4.94975\n 21 25 500 5 4.94975\n 22 26 500 5 4.94975\n 3 1 500 5 4.94975\n 4 2 500 5 4.94975\n 6 4 500 5 4.94975\n 7 5 500 5 4.94975\n 12 10 500 5 4.94975\n 13 11 500 5 4.94975\n 15 13 500 5 4.94975\n 16 14 500 5 4.94975\n 21 19 500 5 4.94975\n 22 20 500 5 4.94975\n 24 22 500 5 4.94975\n 25 23 500 5 4.94975\n\"   /&gt;\n        &lt;/Node&gt;\n        &lt;Node    name=\"M3\"  &gt;\n            &lt;MeshGmshLoader name=\"loader\"  filename=\"mesh/smCube27.msh\" /&gt;\n            &lt;MechanicalObject template=\"Vec3\" showObject=\"1\" name=\"mObject3\"  position=\"@loader.position\"  velocity=\"0 0 0\"  force=\"0 0 0\"  externalForce=\"0 0 0\"  derivX=\"0 0 0\"  restScale=\"1\"  translation=\"0 0 21\" /&gt;\n            &lt;UniformMass name=\"uniformMass3\"  vertexMass=\"0.1\" /&gt;\n            &lt;StiffSpringForceField template=\"Vec3\" name=\"InternalSprings3\"  spring=\"0 9 100 5 3.5\n 1 10 500 5 3.5\n 2 11 500 5 3.5\n 3 12 500 5 3.5\n 4 13 500 5 3.5\n 5 14 500 5 3.5\n 6 15 500 5 3.5\n 7 16 500 5 3.5\n 8 17 500 5 3.5\n 9 18 500 5 3.5\n 10 19 500 5 3.5\n 11 20 500 5 3.5\n 12 21 500 5 3.5\n 13 22 500 5 3.5\n 14 23 500 5 3.5\n 15 24 500 5 3.5\n 16 25 500 5 3.5\n 17 26 500 5 3.5\n 0 3 500 5 3.5\n 1 4 500 5 3.5\n 2 5 500 5 3.5\n 3 6 500 5 3.5\n 4 7 500 5 3.5\n 5 8 500 5 3.5\n 9 12 500 5 3.5\n 10 13 500 5 3.5\n 11 14 500 5 3.5\n 12 15 500 5 3.5\n 13 16 500 5 3.5\n 14 17 500 5 3.5\n 18 21 500 5 3.5\n 19 22 500 5 3.5\n 20 23 500 5 3.5\n 21 24 500 5 3.5\n 22 25 500 5 3.5\n 23 26 500 5 3.5\n 0 1 500 5 3.5\n 1 2 500 5 3.5\n 3 4 500 5 3.5\n 4 5 500 5 3.5\n 6 7 500 5 3.5\n 7 8 500 5 3.5\n 9 10 500 5 3.5\n 10 11 500 5 3.5\n 12 13 500 5 3.5\n 13 14 500 5 3.5\n 15 16 500 5 3.5\n 16 17 500 5 3.5\n 18 19 500 5 3.5\n 19 20 500 5 3.5\n 21 22 500 5 3.5\n 22 23 500 5 3.5\n 24 25 500 5 3.5\n 25 26 100 5 3.5\n 0 13 500 5 6.06218\n 1 14 500 5 6.06218\n 3 16 500 5 6.06218\n 4 17 500 5 6.06218\n 9 22 500 5 6.06218\n 10 23 500 5 6.06218\n 12 25 500 5 6.06218\n 13 26 500 5 6.06218\n 9 4 500 5 6.06218\n 10 5 500 5 6.06218\n 12 7 500 5 6.06218\n 13 8 500 5 6.06218\n 18 13 500 5 6.06218\n 19 14 500 5 6.06218\n 21 16 500 5 6.06218\n 22 17 500 5 6.06218\n 3 10 500 5 6.06218\n 4 11 500 5 6.06218\n 6 13 500 5 6.06218\n 7 14 500 5 6.06218\n 12 19 500 5 6.06218\n 13 20 500 5 6.06218\n 15 22 500 5 6.06218\n 16 23 500 5 6.06218\n 12 1 500 5 6.06218\n 13 2 500 5 6.06218\n 15 4 500 5 6.06218\n 16 5 500 5 6.06218\n 21 10 500 5 6.06218\n 22 11 500 5 6.06218\n 24 13 500 5 6.06218\n 25 14 500 5 6.06218\n 0 12 500 5 4.94975\n 1 13 500 5 4.94975\n 2 14 500 5 4.94975\n 3 15 500 5 4.94975\n 4 16 500 5 4.94975\n 5 17 500 5 4.94975\n 9 21 500 5 4.94975\n 10 22 500 5 4.94975\n 11 23 500 5 4.94975\n 12 24 500 5 4.94975\n 13 25 500 5 4.94975\n 14 26 500 5 4.94975\n 3 9 500 5 4.94975\n 4 10 500 5 4.94975\n 5 11 500 5 4.94975\n 6 12 500 5 4.94975\n 7 13 500 5 4.94975\n 8 14 500 5 4.94975\n 12 18 500 5 4.94975\n 13 19 500 5 4.94975\n 14 20 500 5 4.94975\n 15 21 500 5 4.94975\n 16 22 500 5 4.94975\n 17 23 500 5 4.94975\n 0 10 500 5 4.94975\n 1 11 500 5 4.94975\n 3 13 500 5 4.94975\n 4 14 500 5 4.94975\n 6 16 500 5 4.94975\n 7 17 500 5 4.94975\n 9 19 500 5 4.94975\n 10 20 500 5 4.94975\n 12 22 500 5 4.94975\n 13 23 500 5 4.94975\n 15 25 500 5 4.94975\n 16 26 500 5 4.94975\n 9 1 500 5 4.94975\n 10 2 500 5 4.94975\n 12 4 500 5 4.94975\n 13 5 500 5 4.94975\n 15 7 500 5 4.94975\n 16 8 500 5 4.94975\n 18 10 500 5 4.94975\n 19 11 500 5 4.94975\n 21 13 500 5 4.94975\n 22 14 500 5 4.94975\n 24 16 500 5 4.94975\n 25 17 500 5 4.94975\n 0 4 500 5 4.94975\n 1 5 500 5 4.94975\n 3 7 500 5 4.94975\n 4 8 500 5 4.94975\n 9 13 500 5 4.94975\n 10 14 500 5 4.94975\n 12 16 500 5 4.94975\n 13 17 500 5 4.94975\n 18 22 500 5 4.94975\n 19 23 500 5 4.94975\n 21 25 500 5 4.94975\n 22 26 500 5 4.94975\n 3 1 500 5 4.94975\n 4 2 500 5 4.94975\n 6 4 500 5 4.94975\n 7 5 500 5 4.94975\n 12 10 500 5 4.94975\n 13 11 500 5 4.94975\n 15 13 500 5 4.94975\n 16 14 500 5 4.94975\n 21 19 500 5 4.94975\n 22 20 500 5 4.94975\n 24 22 500 5 4.94975\n 25 23 500 5 4.94975\n\"  /&gt;\n        &lt;/Node&gt;\n        &lt;Node    name=\"M2\"  &gt;\n            &lt;MeshGmshLoader name=\"loader\"  filename=\"mesh/smCube27.msh\" /&gt;\n            &lt;MechanicalObject template=\"Vec3\" showObject=\"1\" name=\"mObject2\"  position=\"@loader.position\"  velocity=\"0 0 0\"  force=\"0 0 0\"  externalForce=\"0 0 0\"  derivX=\"0 0 0\"  restScale=\"1\"  translation=\"0 0 10.5\" /&gt;\n            &lt;UniformMass name=\"uniformMass2\"  vertexMass=\"0.1\" /&gt;\n            &lt;StiffSpringForceField template=\"Vec3\" name=\"InternalSprings2\"  spring=\"0 9 100 5 3.5\n 1 10 500 5 3.5\n 2 11 500 5 3.5\n 3 12 500 5 3.5\n 4 13 500 5 3.5\n 5 14 500 5 3.5\n 6 15 500 5 3.5\n 7 16 500 5 3.5\n 8 17 500 5 3.5\n 9 18 500 5 3.5\n 10 19 500 5 3.5\n 11 20 500 5 3.5\n 12 21 500 5 3.5\n 13 22 500 5 3.5\n 14 23 500 5 3.5\n 15 24 500 5 3.5\n 16 25 500 5 3.5\n 17 26 500 5 3.5\n 0 3 500 5 3.5\n 1 4 500 5 3.5\n 2 5 500 5 3.5\n 3 6 500 5 3.5\n 4 7 500 5 3.5\n 5 8 500 5 3.5\n 9 12 500 5 3.5\n 10 13 500 5 3.5\n 11 14 500 5 3.5\n 12 15 500 5 3.5\n 13 16 500 5 3.5\n 14 17 500 5 3.5\n 18 21 500 5 3.5\n 19 22 500 5 3.5\n 20 23 500 5 3.5\n 21 24 500 5 3.5\n 22 25 500 5 3.5\n 23 26 500 5 3.5\n 0 1 500 5 3.5\n 1 2 500 5 3.5\n 3 4 500 5 3.5\n 4 5 500 5 3.5\n 6 7 500 5 3.5\n 7 8 500 5 3.5\n 9 10 500 5 3.5\n 10 11 500 5 3.5\n 12 13 500 5 3.5\n 13 14 500 5 3.5\n 15 16 500 5 3.5\n 16 17 500 5 3.5\n 18 19 500 5 3.5\n 19 20 500 5 3.5\n 21 22 500 5 3.5\n 22 23 500 5 3.5\n 24 25 500 5 3.5\n 25 26 100 5 3.5\n 0 13 500 5 6.06218\n 1 14 500 5 6.06218\n 3 16 500 5 6.06218\n 4 17 500 5 6.06218\n 9 22 500 5 6.06218\n 10 23 500 5 6.06218\n 12 25 500 5 6.06218\n 13 26 500 5 6.06218\n 9 4 500 5 6.06218\n 10 5 500 5 6.06218\n 12 7 500 5 6.06218\n 13 8 500 5 6.06218\n 18 13 500 5 6.06218\n 19 14 500 5 6.06218\n 21 16 500 5 6.06218\n 22 17 500 5 6.06218\n 3 10 500 5 6.06218\n 4 11 500 5 6.06218\n 6 13 500 5 6.06218\n 7 14 500 5 6.06218\n 12 19 500 5 6.06218\n 13 20 500 5 6.06218\n 15 22 500 5 6.06218\n 16 23 500 5 6.06218\n 12 1 500 5 6.06218\n 13 2 500 5 6.06218\n 15 4 500 5 6.06218\n 16 5 500 5 6.06218\n 21 10 500 5 6.06218\n 22 11 500 5 6.06218\n 24 13 500 5 6.06218\n 25 14 500 5 6.06218\n 0 12 500 5 4.94975\n 1 13 500 5 4.94975\n 2 14 500 5 4.94975\n 3 15 500 5 4.94975\n 4 16 500 5 4.94975\n 5 17 500 5 4.94975\n 9 21 500 5 4.94975\n 10 22 500 5 4.94975\n 11 23 500 5 4.94975\n 12 24 500 5 4.94975\n 13 25 500 5 4.94975\n 14 26 500 5 4.94975\n 3 9 500 5 4.94975\n 4 10 500 5 4.94975\n 5 11 500 5 4.94975\n 6 12 500 5 4.94975\n 7 13 500 5 4.94975\n 8 14 500 5 4.94975\n 12 18 500 5 4.94975\n 13 19 500 5 4.94975\n 14 20 500 5 4.94975\n 15 21 500 5 4.94975\n 16 22 500 5 4.94975\n 17 23 500 5 4.94975\n 0 10 500 5 4.94975\n 1 11 500 5 4.94975\n 3 13 500 5 4.94975\n 4 14 500 5 4.94975\n 6 16 500 5 4.94975\n 7 17 500 5 4.94975\n 9 19 500 5 4.94975\n 10 20 500 5 4.94975\n 12 22 500 5 4.94975\n 13 23 500 5 4.94975\n 15 25 500 5 4.94975\n 16 26 500 5 4.94975\n 9 1 500 5 4.94975\n 10 2 500 5 4.94975\n 12 4 500 5 4.94975\n 13 5 500 5 4.94975\n 15 7 500 5 4.94975\n 16 8 500 5 4.94975\n 18 10 500 5 4.94975\n 19 11 500 5 4.94975\n 21 13 500 5 4.94975\n 22 14 500 5 4.94975\n 24 16 500 5 4.94975\n 25 17 500 5 4.94975\n 0 4 500 5 4.94975\n 1 5 500 5 4.94975\n 3 7 500 5 4.94975\n 4 8 500 5 4.94975\n 9 13 500 5 4.94975\n 10 14 500 5 4.94975\n 12 16 500 5 4.94975\n 13 17 500 5 4.94975\n 18 22 500 5 4.94975\n 19 23 500 5 4.94975\n 21 25 500 5 4.94975\n 22 26 500 5 4.94975\n 3 1 500 5 4.94975\n 4 2 500 5 4.94975\n 6 4 500 5 4.94975\n 7 5 500 5 4.94975\n 12 10 500 5 4.94975\n 13 11 500 5 4.94975\n 15 13 500 5 4.94975\n 16 14 500 5 4.94975\n 21 19 500 5 4.94975\n 22 20 500 5 4.94975\n 24 22 500 5 4.94975\n 25 23 500 5 4.94975\n\"  /&gt;\n        &lt;/Node&gt;\n        &lt;StiffSpringForceField template=\"Vec3\" name=\"ExternalSprings1\"  spring=\"2 0 500 5 3.5\n 5 3 500 5 3.5\n 8 6 500 5 3.5\n 11 9 500 5 3.5\n 14 12 500 5 3.5\n 17 15 500 5 3.5\n 20 18 500 5 3.5\n 23 21 500 5 3.5\n 26 24 500 5 3.5\n 14 0 500 5 6.06218\n 17 3 500 5 6.06218\n 23 9 500 5 6.06218\n 26 12 500 5 6.06218\n 5 9 500 5 6.06218\n 8 12 500 5 6.06218\n 14 18 500 5 6.06218\n 17 21 500 5 6.06218\n 11 3 500 5 6.06218\n 14 6 500 5 6.06218\n 20 12 500 5 6.06218\n 23 15 500 5 6.06218\n 2 12 500 5 6.06218\n 5 15 500 5 6.06218\n 11 21 500 5 6.06218\n 14 24 500 5 6.06218\n 11 0 500 5 4.94975\n 14 3 500 5 4.94975\n 17 6 500 5 4.94975\n 20 9 500 5 4.94975\n 23 12 500 5 4.94975\n 26 15 500 5 4.94975\n 2 9 500 5 4.94975\n 5 12 500 5 4.94975\n 8 15 500 5 4.94975\n 11 18 500 5 4.94975\n 14 21 500 5 4.94975\n 17 24 500 5 4.94975\n 5 0 500 5 4.94975\n 8 3 500 5 4.94975\n 14 9 500 5 4.94975\n 17 12 500 5 4.94975\n 23 18 500 5 4.94975\n 26 21 500 5 4.94975\n 2 3 500 5 4.94975\n 5 6 500 5 4.94975\n 11 12 500 5 4.94975\n 14 15 500 5 4.94975\n 20 21 500 5 4.94975\n 23 24 500 5 4.94975\n\"  object1=\"@M1/mObject1\"  object2=\"@M2/mObject2\" /&gt;\n        &lt;StiffSpringForceField template=\"Vec3\" name=\"ExternalSprings2\"  spring=\"2 0 500 5 3.5\n 5 3 500 5 3.5\n 8 6 500 5 3.5\n 11 9 500 5 3.5\n 14 12 500 5 3.5\n 17 15 500 5 3.5\n 20 18 500 5 3.5\n 23 21 500 5 3.5\n 26 24 500 5 3.5\n 14 0 500 5 6.06218\n 17 3 500 5 6.06218\n 23 9 500 5 6.06218\n 26 12 500 5 6.06218\n 5 9 500 5 6.06218\n 8 12 500 5 6.06218\n 14 18 500 5 6.06218\n 17 21 500 5 6.06218\n 11 3 500 5 6.06218\n 14 6 500 5 6.06218\n 20 12 500 5 6.06218\n 23 15 500 5 6.06218\n 2 12 500 5 6.06218\n 5 15 500 5 6.06218\n 11 21 500 5 6.06218\n 14 24 500 5 6.06218\n 11 0 500 5 4.94975\n 14 3 500 5 4.94975\n 17 6 500 5 4.94975\n 20 9 500 5 4.94975\n 23 12 500 5 4.94975\n 26 15 500 5 4.94975\n 2 9 500 5 4.94975\n 5 12 500 5 4.94975\n 8 15 500 5 4.94975\n 11 18 500 5 4.94975\n 14 21 500 5 4.94975\n 17 24 500 5 4.94975\n 5 0 500 5 4.94975\n 8 3 500 5 4.94975\n 14 9 500 5 4.94975\n 17 12 500 5 4.94975\n 23 18 500 5 4.94975\n 26 21 500 5 4.94975\n 2 3 500 5 4.94975\n 5 6 500 5 4.94975\n 11 12 500 5 4.94975\n 14 15 500 5 4.94975\n 20 21 500 5 4.94975\n 23 24 500 5 4.94975\n\"  object1=\"@M2/mObject2\"  object2=\"@M3/mObject3\" /&gt;\n        &lt;StiffSpringForceField template=\"Vec3\" name=\"ExternalSprings3\"  spring=\"2 0 500 5 3.5\n 5 3 500 5 3.5\n 8 6 500 5 3.5\n 11 9 500 5 3.5\n 14 12 500 5 3.5\n 17 15 500 5 3.5\n 20 18 500 5 3.5\n 23 21 500 5 3.5\n 26 24 500 5 3.5\n 14 0 500 5 6.06218\n 17 3 500 5 6.06218\n 23 9 500 5 6.06218\n 26 12 500 5 6.06218\n 5 9 500 5 6.06218\n 8 12 500 5 6.06218\n 14 18 500 5 6.06218\n 17 21 500 5 6.06218\n 11 3 500 5 6.06218\n 14 6 500 5 6.06218\n 20 12 500 5 6.06218\n 23 15 500 5 6.06218\n 2 12 500 5 6.06218\n 5 15 500 5 6.06218\n 11 21 500 5 6.06218\n 14 24 500 5 6.06218\n 11 0 500 5 4.94975\n 14 3 500 5 4.94975\n 17 6 500 5 4.94975\n 20 9 500 5 4.94975\n 23 12 500 5 4.94975\n 26 15 500 5 4.94975\n 2 9 500 5 4.94975\n 5 12 500 5 4.94975\n 8 15 500 5 4.94975\n 11 18 500 5 4.94975\n 14 21 500 5 4.94975\n 17 24 500 5 4.94975\n 5 0 500 5 4.94975\n 8 3 500 5 4.94975\n 14 9 500 5 4.94975\n 17 12 500 5 4.94975\n 23 18 500 5 4.94975\n 26 21 500 5 4.94975\n 2 3 500 5 4.94975\n 5 6 500 5 4.94975\n 11 12 500 5 4.94975\n 14 15 500 5 4.94975\n 20 21 500 5 4.94975\n 23 24 500 5 4.94975\n\"  object1=\"@M3/mObject3\"  object2=\"@M4/mObject4\" /&gt;\n        &lt;StiffSpringForceField template=\"Vec3\" name=\"ExternalSprings4\"  spring=\"2 0 500 5 3.5\n 5 3 500 5 3.5\n 8 6 500 5 3.5\n 11 9 500 5 3.5\n 14 12 500 5 3.5\n 17 15 500 5 3.5\n 20 18 500 5 3.5\n 23 21 500 5 3.5\n 26 24 500 5 3.5\n 14 0 500 5 6.06218\n 17 3 500 5 6.06218\n 23 9 500 5 6.06218\n 26 12 500 5 6.06218\n 5 9 500 5 6.06218\n 8 12 500 5 6.06218\n 14 18 500 5 6.06218\n 17 21 500 5 6.06218\n 11 3 500 5 6.06218\n 14 6 500 5 6.06218\n 20 12 500 5 6.06218\n 23 15 500 5 6.06218\n 2 12 500 5 6.06218\n 5 15 500 5 6.06218\n 11 21 500 5 6.06218\n 14 24 500 5 6.06218\n 11 0 500 5 4.94975\n 14 3 500 5 4.94975\n 17 6 500 5 4.94975\n 20 9 500 5 4.94975\n 23 12 500 5 4.94975\n 26 15 500 5 4.94975\n 2 9 500 5 4.94975\n 5 12 500 5 4.94975\n 8 15 500 5 4.94975\n 11 18 500 5 4.94975\n 14 21 500 5 4.94975\n 17 24 500 5 4.94975\n 5 0 500 5 4.94975\n 8 3 500 5 4.94975\n 14 9 500 5 4.94975\n 17 12 500 5 4.94975\n 23 18 500 5 4.94975\n 26 21 500 5 4.94975\n 2 3 500 5 4.94975\n 5 6 500 5 4.94975\n 11 12 500 5 4.94975\n 14 15 500 5 4.94975\n 20 21 500 5 4.94975\n 23 24 500 5 4.94975\n\"  object1=\"@M4/mObject4\"  object2=\"@M5/mObject5\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>```python def createScene(rootNode):</p> <pre><code>root = rootNode.addChild('root', dt=\"0.005\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\nroot.addObject('DefaultAnimationLoop')\nroot.addObject('VisualStyle', name=\"visualStyle1\", displayFlags=\"showBehaviorModels showForceFields showCollisionModels showMappings\")\n\nPoutre1 = root.addChild('Poutre1')\nPoutre1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\nPoutre1.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver\", iterations=\"25\", tolerance=\"1e-09\", threshold=\"1e-09\")\n\nM1 = Poutre1.addChild('M1')\nM1.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\")\nM1.addObject('MechanicalObject', template=\"Vec3\", showObject=\"1\", name=\"mObject1\", position=\"@loader.position\", velocity=\"0 0 0\", force=\"0 0 0\", externalForce=\"0 0 0\", derivX=\"0 0 0\", restScale=\"1\")\nM1.addObject('UniformMass', name=\"uniformMass1\", vertexMass=\"0.1\")\nM1.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"fixedProjectiveConstraint1\", indices=\"0 3 6 9 12 15 18 21 24\")\nM1.addObject('StiffSpringForceField', template=\"Vec3\", name=\"InternalSprings1\", spring=\"0 9 100 5 3.5\n</code></pre> <p>1 10 500 5 3.5  2 11 500 5 3.5  3 12 500 5 3.5  4 13 500 5 3.5  5 14 500 5 3.5  6 15 500 5 3.5  7 16 500 5 3.5  8 17 500 5 3.5  9 18 500 5 3.5  10 19 500 5 3.5  11 20 500 5 3.5  12 21 500 5 3.5  13 22 500 5 3.5  14 23 500 5 3.5  15 24 500 5 3.5  16 25 500 5 3.5  17 26 500 5 3.5  0 3 500 5 3.5  1 4 500 5 3.5  2 5 500 5 3.5  3 6 500 5 3.5  4 7 500 5 3.5  5 8 500 5 3.5  9 12 500 5 3.5  10 13 500 5 3.5  11 14 500 5 3.5  12 15 500 5 3.5  13 16 500 5 3.5  14 17 500 5 3.5  18 21 500 5 3.5  19 22 500 5 3.5  20 23 500 5 3.5  21 24 500 5 3.5  22 25 500 5 3.5  23 26 500 5 3.5  0 1 500 5 3.5  1 2 500 5 3.5  3 4 500 5 3.5  4 5 500 5 3.5  6 7 500 5 3.5  7 8 500 5 3.5  9 10 500 5 3.5  10 11 500 5 3.5  12 13 500 5 3.5  13 14 500 5 3.5  15 16 500 5 3.5  16 17 500 5 3.5  18 19 500 5 3.5  19 20 500 5 3.5  21 22 500 5 3.5  22 23 500 5 3.5  24 25 500 5 3.5  25 26 100 5 3.5  0 13 500 5 6.06218  1 14 500 5 6.06218  3 16 500 5 6.06218  4 17 500 5 6.06218  9 22 500 5 6.06218  10 23 500 5 6.06218  12 25 500 5 6.06218  13 26 500 5 6.06218  9 4 500 5 6.06218  10 5 500 5 6.06218  12 7 500 5 6.06218  13 8 500 5 6.06218  18 13 500 5 6.06218  19 14 500 5 6.06218  21 16 500 5 6.06218  22 17 500 5 6.06218  3 10 500 5 6.06218  4 11 500 5 6.06218  6 13 500 5 6.06218  7 14 500 5 6.06218  12 19 500 5 6.06218  13 20 500 5 6.06218  15 22 500 5 6.06218  16 23 500 5 6.06218  12 1 500 5 6.06218  13 2 500 5 6.06218  15 4 500 5 6.06218  16 5 500 5 6.06218  21 10 500 5 6.06218  22 11 500 5 6.06218  24 13 500 5 6.06218  25 14 500 5 6.06218  0 12 500 5 4.94975  1 13 500 5 4.94975  2 14 500 5 4.94975  3 15 500 5 4.94975  4 16 500 5 4.94975  5 17 500 5 4.94975  9 21 500 5 4.94975  10 22 500 5 4.94975  11 23 500 5 4.94975  12 24 500 5 4.94975  13 25 500 5 4.94975  14 26 500 5 4.94975  3 9 500 5 4.94975  4 10 500 5 4.94975  5 11 500 5 4.94975  6 12 500 5 4.94975  7 13 500 5 4.94975  8 14 500 5 4.94975  12 18 500 5 4.94975  13 19 500 5 4.94975  14 20 500 5 4.94975  15 21 500 5 4.94975  16 22 500 5 4.94975  17 23 500 5 4.94975  0 10 500 5 4.94975  1 11 500 5 4.94975  3 13 500 5 4.94975  4 14 500 5 4.94975  6 16 500 5 4.94975  7 17 500 5 4.94975  9 19 500 5 4.94975  10 20 500 5 4.94975  12 22 500 5 4.94975  13 23 500 5 4.94975  15 25 500 5 4.94975  16 26 500 5 4.94975  9 1 500 5 4.94975  10 2 500 5 4.94975  12 4 500 5 4.94975  13 5 500 5 4.94975  15 7 500 5 4.94975  16 8 500 5 4.94975  18 10 500 5 4.94975  19 11 500 5 4.94975  21 13 500 5 4.94975  22 14 500 5 4.94975  24 16 500 5 4.94975  25 17 500 5 4.94975  0 4 500 5 4.94975  1 5 500 5 4.94975  3 7 500 5 4.94975  4 8 500 5 4.94975  9 13 500 5 4.94975  10 14 500 5 4.94975  12 16 500 5 4.94975  13 17 500 5 4.94975  18 22 500 5 4.94975  19 23 500 5 4.94975  21 25 500 5 4.94975  22 26 500 5 4.94975  3 1 500 5 4.94975  4 2 500 5 4.94975  6 4 500 5 4.94975  7 5 500 5 4.94975  12 10 500 5 4.94975  13 11 500 5 4.94975  15 13 500 5 4.94975  16 14 500 5 4.94975  21 19 500 5 4.94975  22 20 500 5 4.94975  24 22 500 5 4.94975  25 23 500 5 4.94975 \")</p> <pre><code>    M5 = Poutre1.addChild('M5')\n    M5.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\")\n    M5.addObject('MechanicalObject', template=\"Vec3\", name=\"mObject5\", showObject=\"1\", position=\"@loader.position\", velocity=\"0 0 0\", force=\"0 0 0\", externalForce=\"0 0 0\", derivX=\"0 0 0\", restScale=\"1\", translation=\"0 0 42\")\n    M5.addObject('UniformMass', name=\"uniformMass5\", vertexMass=\"0.1\")\n    M5.addObject('StiffSpringForceField', template=\"Vec3\", name=\"InternalSprings5\", spring=\"0 9 100 5 3.5\n</code></pre> <p>1 10 500 5 3.5  2 11 500 5 3.5  3 12 500 5 3.5  4 13 500 5 3.5  5 14 500 5 3.5  6 15 500 5 3.5  7 16 500 5 3.5  8 17 500 5 3.5  9 18 500 5 3.5  10 19 500 5 3.5  11 20 500 5 3.5  12 21 500 5 3.5  13 22 500 5 3.5  14 23 500 5 3.5  15 24 500 5 3.5  16 25 500 5 3.5  17 26 500 5 3.5  0 3 500 5 3.5  1 4 500 5 3.5  2 5 500 5 3.5  3 6 500 5 3.5  4 7 500 5 3.5  5 8 500 5 3.5  9 12 500 5 3.5  10 13 500 5 3.5  11 14 500 5 3.5  12 15 500 5 3.5  13 16 500 5 3.5  14 17 500 5 3.5  18 21 500 5 3.5  19 22 500 5 3.5  20 23 500 5 3.5  21 24 500 5 3.5  22 25 500 5 3.5  23 26 500 5 3.5  0 1 500 5 3.5  1 2 500 5 3.5  3 4 500 5 3.5  4 5 500 5 3.5  6 7 500 5 3.5  7 8 500 5 3.5  9 10 500 5 3.5  10 11 500 5 3.5  12 13 500 5 3.5  13 14 500 5 3.5  15 16 500 5 3.5  16 17 500 5 3.5  18 19 500 5 3.5  19 20 500 5 3.5  21 22 500 5 3.5  22 23 500 5 3.5  24 25 500 5 3.5  25 26 100 5 3.5  0 13 500 5 6.06218  1 14 500 5 6.06218  3 16 500 5 6.06218  4 17 500 5 6.06218  9 22 500 5 6.06218  10 23 500 5 6.06218  12 25 500 5 6.06218  13 26 500 5 6.06218  9 4 500 5 6.06218  10 5 500 5 6.06218  12 7 500 5 6.06218  13 8 500 5 6.06218  18 13 500 5 6.06218  19 14 500 5 6.06218  21 16 500 5 6.06218  22 17 500 5 6.06218  3 10 500 5 6.06218  4 11 500 5 6.06218  6 13 500 5 6.06218  7 14 500 5 6.06218  12 19 500 5 6.06218  13 20 500 5 6.06218  15 22 500 5 6.06218  16 23 500 5 6.06218  12 1 500 5 6.06218  13 2 500 5 6.06218  15 4 500 5 6.06218  16 5 500 5 6.06218  21 10 500 5 6.06218  22 11 500 5 6.06218  24 13 500 5 6.06218  25 14 500 5 6.06218  0 12 500 5 4.94975  1 13 500 5 4.94975  2 14 500 5 4.94975  3 15 500 5 4.94975  4 16 500 5 4.94975  5 17 500 5 4.94975  9 21 500 5 4.94975  10 22 500 5 4.94975  11 23 500 5 4.94975  12 24 500 5 4.94975  13 25 500 5 4.94975  14 26 500 5 4.94975  3 9 500 5 4.94975  4 10 500 5 4.94975  5 11 500 5 4.94975  6 12 500 5 4.94975  7 13 500 5 4.94975  8 14 500 5 4.94975  12 18 500 5 4.94975  13 19 500 5 4.94975  14 20 500 5 4.94975  15 21 500 5 4.94975  16 22 500 5 4.94975  17 23 500 5 4.94975  0 10 500 5 4.94975  1 11 500 5 4.94975  3 13 500 5 4.94975  4 14 500 5 4.94975  6 16 500 5 4.94975  7 17 500 5 4.94975  9 19 500 5 4.94975  10 20 500 5 4.94975  12 22 500 5 4.94975  13 23 500 5 4.94975  15 25 500 5 4.94975  16 26 500 5 4.94975  9 1 500 5 4.94975  10 2 500 5 4.94975  12 4 500 5 4.94975  13 5 500 5 4.94975  15 7 500 5 4.94975  16 8 500 5 4.94975  18 10 500 5 4.94975  19 11 500 5 4.94975  21 13 500 5 4.94975  22 14 500 5 4.94975  24 16 500 5 4.94975  25 17 500 5 4.94975  0 4 500 5 4.94975  1 5 500 5 4.94975  3 7 500 5 4.94975  4 8 500 5 4.94975  9 13 500 5 4.94975  10 14 500 5 4.94975  12 16 500 5 4.94975  13 17 500 5 4.94975  18 22 500 5 4.94975  19 23 500 5 4.94975  21 25 500 5 4.94975  22 26 500 5 4.94975  3 1 500 5 4.94975  4 2 500 5 4.94975  6 4 500 5 4.94975  7 5 500 5 4.94975  12 10 500 5 4.94975  13 11 500 5 4.94975  15 13 500 5 4.94975  16 14 500 5 4.94975  21 19 500 5 4.94975  22 20 500 5 4.94975  24 22 500 5 4.94975  25 23 500 5 4.94975 \")</p> <pre><code>    M4 = Poutre1.addChild('M4')\n    M4.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\")\n    M4.addObject('MechanicalObject', template=\"Vec3\", name=\"mObject4\", showObject=\"1\", position=\"@loader.position\", velocity=\"0 0 0\", force=\"0 0 0\", externalForce=\"0 0 0\", derivX=\"0 0 0\", restScale=\"1\", translation=\"0 0 31.5\")\n    M4.addObject('UniformMass', name=\"uniformMass4\", vertexMass=\"0.1\")\n    M4.addObject('StiffSpringForceField', template=\"Vec3\", name=\"InternalSprings4\", spring=\"0 9 100 5 3.5\n</code></pre> <p>1 10 500 5 3.5  2 11 500 5 3.5  3 12 500 5 3.5  4 13 500 5 3.5  5 14 500 5 3.5  6 15 500 5 3.5  7 16 500 5 3.5  8 17 500 5 3.5  9 18 500 5 3.5  10 19 500 5 3.5  11 20 500 5 3.5  12 21 500 5 3.5  13 22 500 5 3.5  14 23 500 5 3.5  15 24 500 5 3.5  16 25 500 5 3.5  17 26 500 5 3.5  0 3 500 5 3.5  1 4 500 5 3.5  2 5 500 5 3.5  3 6 500 5 3.5  4 7 500 5 3.5  5 8 500 5 3.5  9 12 500 5 3.5  10 13 500 5 3.5  11 14 500 5 3.5  12 15 500 5 3.5  13 16 500 5 3.5  14 17 500 5 3.5  18 21 500 5 3.5  19 22 500 5 3.5  20 23 500 5 3.5  21 24 500 5 3.5  22 25 500 5 3.5  23 26 500 5 3.5  0 1 500 5 3.5  1 2 500 5 3.5  3 4 500 5 3.5  4 5 500 5 3.5  6 7 500 5 3.5  7 8 500 5 3.5  9 10 500 5 3.5  10 11 500 5 3.5  12 13 500 5 3.5  13 14 500 5 3.5  15 16 500 5 3.5  16 17 500 5 3.5  18 19 500 5 3.5  19 20 500 5 3.5  21 22 500 5 3.5  22 23 500 5 3.5  24 25 500 5 3.5  25 26 100 5 3.5  0 13 500 5 6.06218  1 14 500 5 6.06218  3 16 500 5 6.06218  4 17 500 5 6.06218  9 22 500 5 6.06218  10 23 500 5 6.06218  12 25 500 5 6.06218  13 26 500 5 6.06218  9 4 500 5 6.06218  10 5 500 5 6.06218  12 7 500 5 6.06218  13 8 500 5 6.06218  18 13 500 5 6.06218  19 14 500 5 6.06218  21 16 500 5 6.06218  22 17 500 5 6.06218  3 10 500 5 6.06218  4 11 500 5 6.06218  6 13 500 5 6.06218  7 14 500 5 6.06218  12 19 500 5 6.06218  13 20 500 5 6.06218  15 22 500 5 6.06218  16 23 500 5 6.06218  12 1 500 5 6.06218  13 2 500 5 6.06218  15 4 500 5 6.06218  16 5 500 5 6.06218  21 10 500 5 6.06218  22 11 500 5 6.06218  24 13 500 5 6.06218  25 14 500 5 6.06218  0 12 500 5 4.94975  1 13 500 5 4.94975  2 14 500 5 4.94975  3 15 500 5 4.94975  4 16 500 5 4.94975  5 17 500 5 4.94975  9 21 500 5 4.94975  10 22 500 5 4.94975  11 23 500 5 4.94975  12 24 500 5 4.94975  13 25 500 5 4.94975  14 26 500 5 4.94975  3 9 500 5 4.94975  4 10 500 5 4.94975  5 11 500 5 4.94975  6 12 500 5 4.94975  7 13 500 5 4.94975  8 14 500 5 4.94975  12 18 500 5 4.94975  13 19 500 5 4.94975  14 20 500 5 4.94975  15 21 500 5 4.94975  16 22 500 5 4.94975  17 23 500 5 4.94975  0 10 500 5 4.94975  1 11 500 5 4.94975  3 13 500 5 4.94975  4 14 500 5 4.94975  6 16 500 5 4.94975  7 17 500 5 4.94975  9 19 500 5 4.94975  10 20 500 5 4.94975  12 22 500 5 4.94975  13 23 500 5 4.94975  15 25 500 5 4.94975  16 26 500 5 4.94975  9 1 500 5 4.94975  10 2 500 5 4.94975  12 4 500 5 4.94975  13 5 500 5 4.94975  15 7 500 5 4.94975  16 8 500 5 4.94975  18 10 500 5 4.94975  19 11 500 5 4.94975  21 13 500 5 4.94975  22 14 500 5 4.94975  24 16 500 5 4.94975  25 17 500 5 4.94975  0 4 500 5 4.94975  1 5 500 5 4.94975  3 7 500 5 4.94975  4 8 500 5 4.94975  9 13 500 5 4.94975  10 14 500 5 4.94975  12 16 500 5 4.94975  13 17 500 5 4.94975  18 22 500 5 4.94975  19 23 500 5 4.94975  21 25 500 5 4.94975  22 26 500 5 4.94975  3 1 500 5 4.94975  4 2 500 5 4.94975  6 4 500 5 4.94975  7 5 500 5 4.94975  12 10 500 5 4.94975  13 11 500 5 4.94975  15 13 500 5 4.94975  16 14 500 5 4.94975  21 19 500 5 4.94975  22 20 500 5 4.94975  24 22 500 5 4.94975  25 23 500 5 4.94975 \")</p> <pre><code>    M3 = Poutre1.addChild('M3')\n    M3.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\")\n    M3.addObject('MechanicalObject', template=\"Vec3\", showObject=\"1\", name=\"mObject3\", position=\"@loader.position\", velocity=\"0 0 0\", force=\"0 0 0\", externalForce=\"0 0 0\", derivX=\"0 0 0\", restScale=\"1\", translation=\"0 0 21\")\n    M3.addObject('UniformMass', name=\"uniformMass3\", vertexMass=\"0.1\")\n    M3.addObject('StiffSpringForceField', template=\"Vec3\", name=\"InternalSprings3\", spring=\"0 9 100 5 3.5\n</code></pre> <p>1 10 500 5 3.5  2 11 500 5 3.5  3 12 500 5 3.5  4 13 500 5 3.5  5 14 500 5 3.5  6 15 500 5 3.5  7 16 500 5 3.5  8 17 500 5 3.5  9 18 500 5 3.5  10 19 500 5 3.5  11 20 500 5 3.5  12 21 500 5 3.5  13 22 500 5 3.5  14 23 500 5 3.5  15 24 500 5 3.5  16 25 500 5 3.5  17 26 500 5 3.5  0 3 500 5 3.5  1 4 500 5 3.5  2 5 500 5 3.5  3 6 500 5 3.5  4 7 500 5 3.5  5 8 500 5 3.5  9 12 500 5 3.5  10 13 500 5 3.5  11 14 500 5 3.5  12 15 500 5 3.5  13 16 500 5 3.5  14 17 500 5 3.5  18 21 500 5 3.5  19 22 500 5 3.5  20 23 500 5 3.5  21 24 500 5 3.5  22 25 500 5 3.5  23 26 500 5 3.5  0 1 500 5 3.5  1 2 500 5 3.5  3 4 500 5 3.5  4 5 500 5 3.5  6 7 500 5 3.5  7 8 500 5 3.5  9 10 500 5 3.5  10 11 500 5 3.5  12 13 500 5 3.5  13 14 500 5 3.5  15 16 500 5 3.5  16 17 500 5 3.5  18 19 500 5 3.5  19 20 500 5 3.5  21 22 500 5 3.5  22 23 500 5 3.5  24 25 500 5 3.5  25 26 100 5 3.5  0 13 500 5 6.06218  1 14 500 5 6.06218  3 16 500 5 6.06218  4 17 500 5 6.06218  9 22 500 5 6.06218  10 23 500 5 6.06218  12 25 500 5 6.06218  13 26 500 5 6.06218  9 4 500 5 6.06218  10 5 500 5 6.06218  12 7 500 5 6.06218  13 8 500 5 6.06218  18 13 500 5 6.06218  19 14 500 5 6.06218  21 16 500 5 6.06218  22 17 500 5 6.06218  3 10 500 5 6.06218  4 11 500 5 6.06218  6 13 500 5 6.06218  7 14 500 5 6.06218  12 19 500 5 6.06218  13 20 500 5 6.06218  15 22 500 5 6.06218  16 23 500 5 6.06218  12 1 500 5 6.06218  13 2 500 5 6.06218  15 4 500 5 6.06218  16 5 500 5 6.06218  21 10 500 5 6.06218  22 11 500 5 6.06218  24 13 500 5 6.06218  25 14 500 5 6.06218  0 12 500 5 4.94975  1 13 500 5 4.94975  2 14 500 5 4.94975  3 15 500 5 4.94975  4 16 500 5 4.94975  5 17 500 5 4.94975  9 21 500 5 4.94975  10 22 500 5 4.94975  11 23 500 5 4.94975  12 24 500 5 4.94975  13 25 500 5 4.94975  14 26 500 5 4.94975  3 9 500 5 4.94975  4 10 500 5 4.94975  5 11 500 5 4.94975  6 12 500 5 4.94975  7 13 500 5 4.94975  8 14 500 5 4.94975  12 18 500 5 4.94975  13 19 500 5 4.94975  14 20 500 5 4.94975  15 21 500 5 4.94975  16 22 500 5 4.94975  17 23 500 5 4.94975  0 10 500 5 4.94975  1 11 500 5 4.94975  3 13 500 5 4.94975  4 14 500 5 4.94975  6 16 500 5 4.94975  7 17 500 5 4.94975  9 19 500 5 4.94975  10 20 500 5 4.94975  12 22 500 5 4.94975  13 23 500 5 4.94975  15 25 500 5 4.94975  16 26 500 5 4.94975  9 1 500 5 4.94975  10 2 500 5 4.94975  12 4 500 5 4.94975  13 5 500 5 4.94975  15 7 500 5 4.94975  16 8 500 5 4.94975  18 10 500 5 4.94975  19 11 500 5 4.94975  21 13 500 5 4.94975  22 14 500 5 4.94975  24 16 500 5 4.94975  25 17 500 5 4.94975  0 4 500 5 4.94975  1 5 500 5 4.94975  3 7 500 5 4.94975  4 8 500 5 4.94975  9 13 500 5 4.94975  10 14 500 5 4.94975  12 16 500 5 4.94975  13 17 500 5 4.94975  18 22 500 5 4.94975  19 23 500 5 4.94975  21 25 500 5 4.94975  22 26 500 5 4.94975  3 1 500 5 4.94975  4 2 500 5 4.94975  6 4 500 5 4.94975  7 5 500 5 4.94975  12 10 500 5 4.94975  13 11 500 5 4.94975  15 13 500 5 4.94975  16 14 500 5 4.94975  21 19 500 5 4.94975  22 20 500 5 4.94975  24 22 500 5 4.94975  25 23 500 5 4.94975 \")</p> <pre><code>    M2 = Poutre1.addChild('M2')\n    M2.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\")\n    M2.addObject('MechanicalObject', template=\"Vec3\", showObject=\"1\", name=\"mObject2\", position=\"@loader.position\", velocity=\"0 0 0\", force=\"0 0 0\", externalForce=\"0 0 0\", derivX=\"0 0 0\", restScale=\"1\", translation=\"0 0 10.5\")\n    M2.addObject('UniformMass', name=\"uniformMass2\", vertexMass=\"0.1\")\n    M2.addObject('StiffSpringForceField', template=\"Vec3\", name=\"InternalSprings2\", spring=\"0 9 100 5 3.5\n</code></pre> <p>1 10 500 5 3.5  2 11 500 5 3.5  3 12 500 5 3.5  4 13 500 5 3.5  5 14 500 5 3.5  6 15 500 5 3.5  7 16 500 5 3.5  8 17 500 5 3.5  9 18 500 5 3.5  10 19 500 5 3.5  11 20 500 5 3.5  12 21 500 5 3.5  13 22 500 5 3.5  14 23 500 5 3.5  15 24 500 5 3.5  16 25 500 5 3.5  17 26 500 5 3.5  0 3 500 5 3.5  1 4 500 5 3.5  2 5 500 5 3.5  3 6 500 5 3.5  4 7 500 5 3.5  5 8 500 5 3.5  9 12 500 5 3.5  10 13 500 5 3.5  11 14 500 5 3.5  12 15 500 5 3.5  13 16 500 5 3.5  14 17 500 5 3.5  18 21 500 5 3.5  19 22 500 5 3.5  20 23 500 5 3.5  21 24 500 5 3.5  22 25 500 5 3.5  23 26 500 5 3.5  0 1 500 5 3.5  1 2 500 5 3.5  3 4 500 5 3.5  4 5 500 5 3.5  6 7 500 5 3.5  7 8 500 5 3.5  9 10 500 5 3.5  10 11 500 5 3.5  12 13 500 5 3.5  13 14 500 5 3.5  15 16 500 5 3.5  16 17 500 5 3.5  18 19 500 5 3.5  19 20 500 5 3.5  21 22 500 5 3.5  22 23 500 5 3.5  24 25 500 5 3.5  25 26 100 5 3.5  0 13 500 5 6.06218  1 14 500 5 6.06218  3 16 500 5 6.06218  4 17 500 5 6.06218  9 22 500 5 6.06218  10 23 500 5 6.06218  12 25 500 5 6.06218  13 26 500 5 6.06218  9 4 500 5 6.06218  10 5 500 5 6.06218  12 7 500 5 6.06218  13 8 500 5 6.06218  18 13 500 5 6.06218  19 14 500 5 6.06218  21 16 500 5 6.06218  22 17 500 5 6.06218  3 10 500 5 6.06218  4 11 500 5 6.06218  6 13 500 5 6.06218  7 14 500 5 6.06218  12 19 500 5 6.06218  13 20 500 5 6.06218  15 22 500 5 6.06218  16 23 500 5 6.06218  12 1 500 5 6.06218  13 2 500 5 6.06218  15 4 500 5 6.06218  16 5 500 5 6.06218  21 10 500 5 6.06218  22 11 500 5 6.06218  24 13 500 5 6.06218  25 14 500 5 6.06218  0 12 500 5 4.94975  1 13 500 5 4.94975  2 14 500 5 4.94975  3 15 500 5 4.94975  4 16 500 5 4.94975  5 17 500 5 4.94975  9 21 500 5 4.94975  10 22 500 5 4.94975  11 23 500 5 4.94975  12 24 500 5 4.94975  13 25 500 5 4.94975  14 26 500 5 4.94975  3 9 500 5 4.94975  4 10 500 5 4.94975  5 11 500 5 4.94975  6 12 500 5 4.94975  7 13 500 5 4.94975  8 14 500 5 4.94975  12 18 500 5 4.94975  13 19 500 5 4.94975  14 20 500 5 4.94975  15 21 500 5 4.94975  16 22 500 5 4.94975  17 23 500 5 4.94975  0 10 500 5 4.94975  1 11 500 5 4.94975  3 13 500 5 4.94975  4 14 500 5 4.94975  6 16 500 5 4.94975  7 17 500 5 4.94975  9 19 500 5 4.94975  10 20 500 5 4.94975  12 22 500 5 4.94975  13 23 500 5 4.94975  15 25 500 5 4.94975  16 26 500 5 4.94975  9 1 500 5 4.94975  10 2 500 5 4.94975  12 4 500 5 4.94975  13 5 500 5 4.94975  15 7 500 5 4.94975  16 8 500 5 4.94975  18 10 500 5 4.94975  19 11 500 5 4.94975  21 13 500 5 4.94975  22 14 500 5 4.94975  24 16 500 5 4.94975  25 17 500 5 4.94975  0 4 500 5 4.94975  1 5 500 5 4.94975  3 7 500 5 4.94975  4 8 500 5 4.94975  9 13 500 5 4.94975  10 14 500 5 4.94975  12 16 500 5 4.94975  13 17 500 5 4.94975  18 22 500 5 4.94975  19 23 500 5 4.94975  21 25 500 5 4.94975  22 26 500 5 4.94975  3 1 500 5 4.94975  4 2 500 5 4.94975  6 4 500 5 4.94975  7 5 500 5 4.94975  12 10 500 5 4.94975  13 11 500 5 4.94975  15 13 500 5 4.94975  16 14 500 5 4.94975  21 19 500 5 4.94975  22 20 500 5 4.94975  24 22 500 5 4.94975  25 23 500 5 4.94975 \")         Poutre1.addObject('StiffSpringForceField', template=\"Vec3\", name=\"ExternalSprings1\", spring=\"2 0 500 5 3.5  5 3 500 5 3.5  8 6 500 5 3.5  11 9 500 5 3.5  14 12 500 5 3.5  17 15 500 5 3.5  20 18 500 5 3.5  23 21 500 5 3.5  26 24 500 5 3.5  14 0 500 5 6.06218  17 3 500 5 6.06218  23 9 500 5 6.06218  26 12 500 5 6.06218  5 9 500 5 6.06218  8 12 500 5 6.06218  14 18 500 5 6.06218  17 21 500 5 6.06218  11 3 500 5 6.06218  14 6 500 5 6.06218  20 12 500 5 6.06218  23 15 500 5 6.06218  2 12 500 5 6.06218  5 15 500 5 6.06218  11 21 500 5 6.06218  14 24 500 5 6.06218  11 0 500 5 4.94975  14 3 500 5 4.94975  17 6 500 5 4.94975  20 9 500 5 4.94975  23 12 500 5 4.94975  26 15 500 5 4.94975  2 9 500 5 4.94975  5 12 500 5 4.94975  8 15 500 5 4.94975  11 18 500 5 4.94975  14 21 500 5 4.94975  17 24 500 5 4.94975  5 0 500 5 4.94975  8 3 500 5 4.94975  14 9 500 5 4.94975  17 12 500 5 4.94975  23 18 500 5 4.94975  26 21 500 5 4.94975  2 3 500 5 4.94975  5 6 500 5 4.94975  11 12 500 5 4.94975  14 15 500 5 4.94975  20 21 500 5 4.94975  23 24 500 5 4.94975 \", object1=\"@M1/mObject1\", object2=\"@M2/mObject2\")         Poutre1.addObject('StiffSpringForceField', template=\"Vec3\", name=\"ExternalSprings2\", spring=\"2 0 500 5 3.5  5 3 500 5 3.5  8 6 500 5 3.5  11 9 500 5 3.5  14 12 500 5 3.5  17 15 500 5 3.5  20 18 500 5 3.5  23 21 500 5 3.5  26 24 500 5 3.5  14 0 500 5 6.06218  17 3 500 5 6.06218  23 9 500 5 6.06218  26 12 500 5 6.06218  5 9 500 5 6.06218  8 12 500 5 6.06218  14 18 500 5 6.06218  17 21 500 5 6.06218  11 3 500 5 6.06218  14 6 500 5 6.06218  20 12 500 5 6.06218  23 15 500 5 6.06218  2 12 500 5 6.06218  5 15 500 5 6.06218  11 21 500 5 6.06218  14 24 500 5 6.06218  11 0 500 5 4.94975  14 3 500 5 4.94975  17 6 500 5 4.94975  20 9 500 5 4.94975  23 12 500 5 4.94975  26 15 500 5 4.94975  2 9 500 5 4.94975  5 12 500 5 4.94975  8 15 500 5 4.94975  11 18 500 5 4.94975  14 21 500 5 4.94975  17 24 500 5 4.94975  5 0 500 5 4.94975  8 3 500 5 4.94975  14 9 500 5 4.94975  17 12 500 5 4.94975  23 18 500 5 4.94975  26 21 500 5 4.94975  2 3 500 5 4.94975  5 6 500 5 4.94975  11 12 500 5 4.94975  14 15 500 5 4.94975  20 21 500 5 4.94975  23 24 500 5 4.94975 \", object1=\"@M2/mObject2\", object2=\"@M3/mObject3\")         Poutre1.addObject('StiffSpringForceField', template=\"Vec3\", name=\"ExternalSprings3\", spring=\"2 0 500 5 3.5  5 3 500 5 3.5  8 6 500 5 3.5  11 9 500 5 3.5  14 12 500 5 3.5  17 15 500 5 3.5  20 18 500 5 3.5  23 21 500 5 3.5  26 24 500 5 3.5  14 0 500 5 6.06218  17 3 500 5 6.06218  23 9 500 5 6.06218  26 12 500 5 6.06218  5 9 500 5 6.06218  8 12 500 5 6.06218  14 18 500 5 6.06218  17 21 500 5 6.06218  11 3 500 5 6.06218  14 6 500 5 6.06218  20 12 500 5 6.06218  23 15 500 5 6.06218  2 12 500 5 6.06218  5 15 500 5 6.06218  11 21 500 5 6.06218  14 24 500 5 6.06218  11 0 500 5 4.94975  14 3 500 5 4.94975  17 6 500 5 4.94975  20 9 500 5 4.94975  23 12 500 5 4.94975  26 15 500 5 4.94975  2 9 500 5 4.94975  5 12 500 5 4.94975  8 15 500 5 4.94975  11 18 500 5 4.94975  14 21 500 5 4.94975  17 24 500 5 4.94975  5 0 500 5 4.94975  8 3 500 5 4.94975  14 9 500 5 4.94975  17 12 500 5 4.94975  23 18 500 5 4.94975  26 21 500 5 4.94975  2 3 500 5 4.94975  5 6 500 5 4.94975  11 12 500 5 4.94975  14 15 500 5 4.94975  20 21 500 5 4.94975  23 24 500 5 4.94975 \", object1=\"@M3/mObject3\", object2=\"@M4/mObject4\")         Poutre1.addObject('StiffSpringForceField', template=\"Vec3\", name=\"ExternalSprings4\", spring=\"2 0 500 5 3.5  5 3 500 5 3.5  8 6 500 5 3.5  11 9 500 5 3.5  14 12 500 5 3.5  17 15 500 5 3.5  20 18 500 5 3.5  23 21 500 5 3.5  26 24 500 5 3.5  14 0 500 5 6.06218  17 3 500 5 6.06218  23 9 500 5 6.06218  26 12 500 5 6.06218  5 9 500 5 6.06218  8 12 500 5 6.06218  14 18 500 5 6.06218  17 21 500 5 6.06218  11 3 500 5 6.06218  14 6 500 5 6.06218  20 12 500 5 6.06218  23 15 500 5 6.06218  2 12 500 5 6.06218  5 15 500 5 6.06218  11 21 500 5 6.06218  14 24 500 5 6.06218  11 0 500 5 4.94975  14 3 500 5 4.94975  17 6 500 5 4.94975  20 9 500 5 4.94975  23 12 500 5 4.94975  26 15 500 5 4.94975  2 9 500 5 4.94975  5 12 500 5 4.94975  8 15 500 5 4.94975  11 18 500 5 4.94975  14 21 500 5 4.94975  17 24 500 5 4.94975  5 0 500 5 4.94975  8 3 500 5 4.94975  14 9 500 5 4.94975  17 12 500 5 4.94975  23 18 500 5 4.94975  26 21 500 5 4.94975  2 3 500 5 4.94975  5 6 500 5 4.94975  11 12 500 5 4.94975  14 15 500 5 4.94975  20 21 500 5 4.94975  23 24 500 5 4.94975 \", object1=\"@M4/mObject4\", object2=\"@M5/mObject5\")     ```</p>"},{"location":"30_Components/30_SolidMechanics/20_Spring/TriangleBendingSprings/","title":"TriangleBendingSprings","text":"<p>Springs added to a traingular mesh to prevent bending Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>StiffSpringForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100 damping  uniform damping for the all springs  5 spring  pairs of indices, stiffness, damping, rest length  springsIndices1  List of indices in springs from the first mstate  springsIndices2  List of indices in springs from the second mstate  indices1  Indices of the source points on the first model  indices2  Indices of the fixed points on the second model  lengths  List of lengths to create the springs. Must have the same than indices1 &amp; indices2, or if only one element, it will be applied to all springs. If empty, 0 will be applied everywhere  Visualization showArrowSize  size of the axis  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/20_Spring/TriangleBendingSprings/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/TriangleBendingSprings.scn</p> XMLPython <pre><code>&lt;!-- Mechanical MassSpring Group Basic Example --&gt;\n&lt;Node name=\"root\" gravity=\"0 0 1\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangleFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangleBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showCollisionModels showMappings showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"M1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"0.1\" /&gt;\n        &lt;RegularGridTopology nx=\"3\" ny=\"3\" nz=\"1\" xmin=\"10\" xmax=\"19\" ymin=\"0\" ymax=\"9\" zmin=\"4\" zmax=\"5\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 8\" /&gt;\n        &lt;TriangleFEMForceField name=\"FEM1\" youngModulus=\"5000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleBendingSprings name=\"FEM-Bend\" stiffness=\"100\" damping=\"0.1\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"green\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"M2\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"0.1\" /&gt;\n        &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"1\" xmin=\"20\" xmax=\"29\" ymin=\"0\" ymax=\"9\" zmin=\"8\" zmax=\"9\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 15\" /&gt;\n        &lt;TriangleFEMForceField name=\"FEM2\" youngModulus=\"5000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleBendingSprings name=\"FEM-Bend\" stiffness=\"100\" damping=\"0.1\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"blue\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"M3\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"0.1\" /&gt;\n        &lt;RegularGridTopology nx=\"10\" ny=\"10\" nz=\"1\" xmin=\"30\" xmax=\"39\" ymin=\"0\" ymax=\"9\" zmin=\"12\" zmax=\"13\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 9 99\" /&gt;\n        &lt;TriangleFEMForceField name=\"FEM3\" youngModulus=\"5000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleBendingSprings name=\"FEM-Bend\" stiffness=\"100\" damping=\"0.1\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 1\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showCollisionModels showMappings showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    M1 = root.addChild('M1')\n    M1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M1.addObject('MechanicalObject')\n    M1.addObject('UniformMass', vertexMass=\"0.1\")\n    M1.addObject('RegularGridTopology', nx=\"3\", ny=\"3\", nz=\"1\", xmin=\"10\", xmax=\"19\", ymin=\"0\", ymax=\"9\", zmin=\"4\", zmax=\"5\")\n    M1.addObject('FixedProjectiveConstraint', indices=\"0 8\")\n    M1.addObject('TriangleFEMForceField', name=\"FEM1\", youngModulus=\"5000\", poissonRatio=\"0.3\", method=\"large\")\n    M1.addObject('TriangleBendingSprings', name=\"FEM-Bend\", stiffness=\"100\", damping=\"0.1\")\n    M1.addObject('TriangleCollisionModel')\n\n    Visu = M1.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"green\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    M2 = root.addChild('M2')\n    M2.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    M2.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M2.addObject('MechanicalObject')\n    M2.addObject('UniformMass', vertexMass=\"0.1\")\n    M2.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"1\", xmin=\"20\", xmax=\"29\", ymin=\"0\", ymax=\"9\", zmin=\"8\", zmax=\"9\")\n    M2.addObject('FixedProjectiveConstraint', indices=\"0 15\")\n    M2.addObject('TriangleFEMForceField', name=\"FEM2\", youngModulus=\"5000\", poissonRatio=\"0.3\", method=\"large\")\n    M2.addObject('TriangleBendingSprings', name=\"FEM-Bend\", stiffness=\"100\", damping=\"0.1\")\n    M2.addObject('TriangleCollisionModel')\n\n    Visu = M2.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"blue\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    M3 = root.addChild('M3')\n    M3.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\")\n    M3.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M3.addObject('MechanicalObject')\n    M3.addObject('UniformMass', vertexMass=\"0.1\")\n    M3.addObject('RegularGridTopology', nx=\"10\", ny=\"10\", nz=\"1\", xmin=\"30\", xmax=\"39\", ymin=\"0\", ymax=\"9\", zmin=\"12\", zmax=\"13\")\n    M3.addObject('FixedProjectiveConstraint', indices=\"0 9 99\")\n    M3.addObject('TriangleFEMForceField', name=\"FEM3\", youngModulus=\"5000\", poissonRatio=\"0.3\", method=\"large\")\n    M3.addObject('TriangleBendingSprings', name=\"FEM-Bend\", stiffness=\"100\", damping=\"0.1\")\n    M3.addObject('TriangleCollisionModel')\n\n    Visu = M3.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/TriangularBendingSprings/","title":"TriangularBendingSprings","text":"<p>Springs added to a triangular mesh to prevent bending</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100000 damping  uniform damping for the all springs  1 edgeInfo  Internal edge data  Visualization showSprings  option to draw springs  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/20_Spring/TriangularBendingSprings/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/TriangularBendingSprings.scn</p> XMLPython <pre><code>&lt;!-- Mechanical MassSpring Group Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.005\" showBoundingTree=\"0\" gravity=\"0 -90 10\"&gt;\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [AsyncSparseLDLSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [ShewchukPCGLinearSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetTopologyContainer] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;/Node&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;ShewchukPCGLinearSolver preconditioner=\"@preconditioner\"/&gt;\n        &lt;AsyncSparseLDLSolver name=\"preconditioner\" template=\"CompressedRowSparseMatrixMat3x3\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"true\"/&gt;\n        &lt;MechanicalObject src=\"@loader\" scale=\"10\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"Container\" triangles=\"@loader.triangles\"/&gt;\n        &lt;DiagonalMass massDensity=\"0.015\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1\" /&gt;\n        &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"60\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangularBendingSprings name=\"BS\" stiffness=\"300\" damping=\"1.0\" /&gt;\n        &lt;Node &gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", showBoundingTree=\"0\", gravity=\"0 -90 10\")\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('ShewchukPCGLinearSolver', preconditioner=\"@preconditioner\")\n    SquareGravity.addObject('AsyncSparseLDLSolver', name=\"preconditioner\", template=\"CompressedRowSparseMatrixMat3x3\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', src=\"@loader\", scale=\"10\")\n    SquareGravity.addObject('TriangleSetTopologyContainer', name=\"Container\", triangles=\"@loader.triangles\")\n    SquareGravity.addObject('DiagonalMass', massDensity=\"0.015\")\n    SquareGravity.addObject('FixedProjectiveConstraint', indices=\"0 1\")\n    SquareGravity.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"60\", poissonRatio=\"0.3\", method=\"large\")\n    SquareGravity.addObject('TriangularBendingSprings', name=\"BS\", stiffness=\"300\", damping=\"1.0\")\n\n    SquareGravity = SquareGravity.addChild('SquareGravity')\n    SquareGravity.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    SquareGravity.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre> <p>Benchmark/TopologicalChanges/TriangularBendingSprings_RemovingMeshTest.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!-- Automatic Triangle removal on a simple Triangle topology with FEM: Element removed are define in: ./RemovingTrianglesProcess.txt --&gt;\n&lt;Node name=\"root\" gravity=\"0 -9 0\" dt=\"0.01\" bbox=\"-1 -1 -1 1 1 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Utility\"/&gt; &lt;!-- Needed to use components [TopologicalChangeProcessor] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase name=\"N2\" /&gt;\n    &lt;BVHNarrowPhase /&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\" name=\"linear solver\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"true\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" src=\"@loader\" template=\"Vec3\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"Triangle_topo\" src=\"@loader\"/&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass template=\"Vec3,Vec3\" name=\"mass\" massDensity=\"1.0\" /&gt;\n\n        &lt;TriangularBendingSprings template=\"Vec3\" name=\"FEM-Bend\" stiffness=\"300\" damping=\"1\" /&gt;\n\n        &lt;TopologicalChangeProcessor listening=\"1\" filename=\"RemovingTrianglesProcess_constraint.txt\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9 0\", dt=\"0.01\", bbox=\"-1 -1 -1 1 1 1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Utility\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase', name=\"N2\")\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\", name=\"linear solver\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', name=\"dofs\", src=\"@loader\", template=\"Vec3\")\n    SquareGravity.addObject('TriangleSetTopologyContainer', name=\"Triangle_topo\", src=\"@loader\")\n    SquareGravity.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    SquareGravity.addObject('DiagonalMass', template=\"Vec3,Vec3\", name=\"mass\", massDensity=\"1.0\")\n    SquareGravity.addObject('TriangularBendingSprings', template=\"Vec3\", name=\"FEM-Bend\", stiffness=\"300\", damping=\"1\")\n    SquareGravity.addObject('TopologicalChangeProcessor', listening=\"1\", filename=\"RemovingTrianglesProcess_constraint.txt\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/TriangularBiquadraticSpringsForceField/","title":"TriangularBiquadraticSpringsForceField","text":"<p>Biquadratic Springs on a Triangular Mesh</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 triangleInfo  Internal triangle data  edgeInfo  Internal edge data  initialPoints  Initial Position  poissonRatio  Poisson ratio in Hooke's law  0.3 youngModulus  Young modulus in Hooke's law  1000 dampingRatio  Ratio damping/stiffness  0 useAngularSprings  If Angular Springs should be used or not  1 compressible  If additional energy penalizing compressibility should be used  1 matrixRegularization  Regularization of the Stiffnes Matrix (between 0 and 1)  0.4 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/20_Spring/TriangularBiquadraticSpringsForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/TriangularBiquadraticSpringsForceField.scn</p> XMLPython <pre><code>&lt;!-- TriangularBiquadraticSpringsForceField Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.005\" showBoundingTree=\"0\" gravity=\"0 -9 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBiquadraticSpringsForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"1\"/&gt;\n        &lt;MechanicalObject src=\"@loader\" scale=\"10\" /&gt;\n        &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.015\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1\" /&gt;\n        &lt;TriangularBiquadraticSpringsForceField name=\"BQS\" youngModulus=\"15\" poissonRatio=\"0.9\" useAngularSprings=\"1\" dampingRatio=\"0.00\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n\n        &lt;Node &gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", showBoundingTree=\"0\", gravity=\"0 -9 1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"1\")\n    SquareGravity.addObject('MechanicalObject', src=\"@loader\", scale=\"10\")\n    SquareGravity.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@loader\")\n    SquareGravity.addObject('DiagonalMass', massDensity=\"0.015\")\n    SquareGravity.addObject('FixedProjectiveConstraint', indices=\"0 1\")\n    SquareGravity.addObject('TriangularBiquadraticSpringsForceField', name=\"BQS\", youngModulus=\"15\", poissonRatio=\"0.9\", useAngularSprings=\"1\", dampingRatio=\"0.00\")\n    SquareGravity.addObject('TriangleCollisionModel')\n\n    SquareGravity = SquareGravity.addChild('SquareGravity')\n    SquareGravity.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    SquareGravity.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/TriangularQuadraticSpringsForceField/","title":"TriangularQuadraticSpringsForceField","text":"<p>Quadratic Springs on a Triangular Mesh</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 initialPoints  Initial Position  poissonRatio  Poisson ratio in Hooke's law  0.3 youngModulus  Young modulus in Hooke's law  1000 dampingRatio  Ratio damping/stiffness  0 useAngularSprings  If Angular Springs should be used or not  1 triangleInfo  Internal triangle data  edgeInfo  Internal edge data  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/20_Spring/TriangularQuadraticSpringsForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/Spring/TriangularQuadraticSpringsForceField.scn</p> XMLPython <pre><code>&lt;!-- TriangularQuadraticSpringsForceField Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.005\" showBoundingTree=\"0\" gravity=\"0 -9 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularQuadraticSpringsForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"true\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" scale=\"10\" /&gt;\n        &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.015\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1\" /&gt;\n        &lt;TriangularQuadraticSpringsForceField name=\"QS\" youngModulus=\"15\" poissonRatio=\"0.9\" useAngularSprings=\"1\" dampingRatio=\"0.00\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n\n        &lt;Node &gt;\n          &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n          &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", showBoundingTree=\"0\", gravity=\"0 -9 1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', src=\"@loader\", scale=\"10\")\n    SquareGravity.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@loader\")\n    SquareGravity.addObject('DiagonalMass', massDensity=\"0.015\")\n    SquareGravity.addObject('FixedProjectiveConstraint', indices=\"0 1\")\n    SquareGravity.addObject('TriangularQuadraticSpringsForceField', name=\"QS\", youngModulus=\"15\", poissonRatio=\"0.9\", useAngularSprings=\"1\", dampingRatio=\"0.00\")\n    SquareGravity.addObject('TriangleCollisionModel')\n\n    SquareGravity = SquareGravity.addChild('SquareGravity')\n    SquareGravity.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    SquareGravity.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/20_Spring/VectorSpringForceField/","title":"VectorSpringForceField","text":"<p>Spring force field acting along the edges of a mesh</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.Spring</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>PairInteractionForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 springs  springs data  filename  File name from which the spring informations are loaded  stiffness  Default edge stiffness used in absence of file information  1 viscosity  Default edge viscosity used in absence of file information  1 useTopology  Activate/Desactivate topology mode of the component (springs on each edge)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/TensorMass/TetrahedralTensorMassForceField/","title":"TetrahedralTensorMassForceField","text":"<p>Linear Elastic Tetrahedral Mesh Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.TensorMass</code></p> <p>namespace: <code>sofa::component::solidmechanics::tensormass</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 poissonRatio  Poisson ratio in Hooke's law  0.3 youngModulus  Young's modulus in Hooke's law  1000 edgeInfo  Internal edge data  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/TensorMass/TetrahedralTensorMassForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/TensorMass/TetrahedralTensorMassForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\"&gt;\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [EigenSimplicialLDLT] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.TensorMass\"/&gt; &lt;!-- Needed to use components [TetrahedralTensorMassForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2QuadTopologicalMapping Hexa2TetraTopologicalMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;/Node&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n\n    &lt;DefaultAnimationLoop name=\"animationLoop\"/&gt;\n    &lt;DefaultVisualManagerLoop name=\"visualLoop\"/&gt;\n\n    &lt;EulerImplicitSolver name=\"odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;EigenSimplicialLDLT template=\"CompressedRowSparseMatrixMat3x3\"/&gt;\n    &lt;MechanicalObject name=\"DoFs\" /&gt;\n    &lt;UniformMass name=\"mass\" totalMass=\"320\" /&gt;\n    &lt;RegularGridTopology name=\"grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-9\" xmax=\"-6\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"19\" /&gt;\n    &lt;BoxROI name=\"box\" box=\"-10 -1 -0.0001  -5 4 0.0001\"/&gt;\n    &lt;FixedProjectiveConstraint indices=\"@box.indices\" /&gt;\n\n    &lt;TetrahedronSetTopologyContainer name=\"Tetra_topo\"/&gt;\n    &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n    &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n    &lt;Hexa2TetraTopologicalMapping input=\"@grid\" output=\"@Tetra_topo\" /&gt;\n    &lt;TetrahedralTensorMassForceField name=\"deformable\" youngModulus=\"100000\" poissonRatio=\"0.4\" /&gt;\n\n    &lt;Node name=\"quads\"&gt;\n        &lt;QuadSetTopologyContainer  name=\"Container\" /&gt;\n        &lt;QuadSetTopologyModifier   name=\"Modifier\" /&gt;\n        &lt;QuadSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n        &lt;Hexa2QuadTopologicalMapping input=\"@../grid\" output=\"@Container\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n            &lt;IdentityMapping input=\"@../../DoFs\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root')\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.TensorMass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop', name=\"animationLoop\")\n    root.addObject('DefaultVisualManagerLoop', name=\"visualLoop\")\n    root.addObject('EulerImplicitSolver', name=\"odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('EigenSimplicialLDLT', template=\"CompressedRowSparseMatrixMat3x3\")\n    root.addObject('MechanicalObject', name=\"DoFs\")\n    root.addObject('UniformMass', name=\"mass\", totalMass=\"320\")\n    root.addObject('RegularGridTopology', name=\"grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-9\", xmax=\"-6\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"19\")\n    root.addObject('BoxROI', name=\"box\", box=\"-10 -1 -0.0001  -5 4 0.0001\")\n    root.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    root.addObject('TetrahedronSetTopologyContainer', name=\"Tetra_topo\")\n    root.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    root.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    root.addObject('Hexa2TetraTopologicalMapping', input=\"@grid\", output=\"@Tetra_topo\")\n    root.addObject('TetrahedralTensorMassForceField', name=\"deformable\", youngModulus=\"100000\", poissonRatio=\"0.4\")\n\n    quads = root.addChild('quads')\n    quads.addObject('QuadSetTopologyContainer', name=\"Container\")\n    quads.addObject('QuadSetTopologyModifier', name=\"Modifier\")\n    quads.addObject('QuadSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    quads.addObject('Hexa2QuadTopologicalMapping', input=\"@../grid\", output=\"@Container\")\n\n    Visu = quads.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    Visu.addObject('IdentityMapping', input=\"@../../DoFs\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/30_SolidMechanics/TensorMass/TriangularTensorMassForceField/","title":"TriangularTensorMassForceField","text":"<p>Linear Elastic Membrane on a Triangular Mesh</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.SolidMechanics.TensorMass</code></p> <p>namespace: <code>sofa::component::solidmechanics::tensormass</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 edgeInfo  Internal edge data  poissonRatio  Poisson ratio in Hooke's law  0.3 youngModulus  Young's modulus in Hooke's law  1000 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/30_SolidMechanics/TensorMass/TriangularTensorMassForceField/#examples","title":"Examples","text":"<p>Component/SolidMechanics/TensorMass/TriangularTensorMassForceField.scn</p> XMLPython <pre><code>&lt;!-- TriangularTensorMassForceField Group Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.005\" showBoundingTree=\"0\" gravity=\"0 -9 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.TensorMass\"/&gt; &lt;!-- Needed to use components [TriangularTensorMassForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"true\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" scale=\"10\" /&gt;\n        &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.015\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1\" /&gt;\n        &lt;TriangularTensorMassForceField name=\"TM\" youngModulus=\"15\" poissonRatio=\"0.9\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node &gt;\n          &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n          &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", showBoundingTree=\"0\", gravity=\"0 -9 1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.TensorMass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', src=\"@loader\", scale=\"10\")\n    SquareGravity.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@loader\")\n    SquareGravity.addObject('DiagonalMass', massDensity=\"0.015\")\n    SquareGravity.addObject('FixedProjectiveConstraint', indices=\"0 1\")\n    SquareGravity.addObject('TriangularTensorMassForceField', name=\"TM\", youngModulus=\"15\", poissonRatio=\"0.9\")\n    SquareGravity.addObject('TriangleCollisionModel')\n\n    SquareGravity = SquareGravity.addChild('SquareGravity')\n    SquareGravity.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    SquareGravity.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/10_ConicalForceField/","title":"ConicalForceField","text":"<p>Repulsion applied by a cone toward the exterior</p> <p>Templates: - Vec3d</p> <p>Target: Sofa.Component.MechanicalLoad</p> <p>namespace: sofa::component::mechanicalload</p> <p>parents:  - ForceField</p> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 coneCenter  cone center  coneHeight  cone height  coneAngle  cone angle  10 stiffness  force stiffness  500 damping  force damping  5 color  cone color. (default=0.0,0.0,0.0,1.0,1.0)  0 0 1 1"},{"location":"30_Components/35_MechanicalLoad/10_ConicalForceField/#examples","title":"Examples","text":"<pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -10 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConicalForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;Node name=\"Liver\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/liver.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"Liver\" /&gt;\n        &lt;UniformMass name=\"mass\" vertexMass=\"0.05\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"5000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n        &lt;ConicalForceField template=\"Vec3\" coneCenter=\"0.0 -10.0 0.0\" coneHeight=\"0 20 0\" coneAngle=\"40\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@meshLoader_0\" color=\"red\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n        &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 coneCenter  cone center  coneHeight  cone height  coneAngle  cone angle  10 stiffness  force stiffness  500 damping  force damping  5 color  cone color. (default=0.0,0.0,0.0,1.0,1.0)  0 0 1 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/35_MechanicalLoad/10_ConicalForceField/#examples_1","title":"Examples","text":"<p>Component/MechanicalLoad/ConicalForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -10 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConicalForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;Node name=\"Liver\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/liver.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"Liver\" /&gt;\n        &lt;UniformMass name=\"mass\" vertexMass=\"0.05\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"5000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n        &lt;ConicalForceField template=\"Vec3\" coneCenter=\"0.0 -10.0 0.0\" coneHeight=\"0 20 0\" coneAngle=\"40\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@meshLoader_0\" color=\"red\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n        &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 -10 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('DiscreteIntersection')\n\n    Liver = root.addChild('Liver')\n    Liver.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Liver.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Liver.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/liver.msh\")\n    Liver.addObject('MeshTopology', src=\"@loader\")\n    Liver.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"Liver\")\n    Liver.addObject('UniformMass', name=\"mass\", vertexMass=\"0.05\")\n    Liver.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"5000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"large\")\n    Liver.addObject('ConicalForceField', template=\"Vec3\", coneCenter=\"0.0 -10.0 0.0\", coneHeight=\"0 20 0\", coneAngle=\"40\")\n\n    Visu = Liver.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver-smooth.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@meshLoader_0\", color=\"red\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualModel\")\n\n    Surf = Liver.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Surf.addObject('MechanicalObject', position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', name=\"CollisionModel\", listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping')\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/20_ConstantForceField/","title":"ConstantForceField","text":"<p>This component belongs to the category of ForceField. The ConstantForceField is a simple force field applying the same constant force on each node. This force field is not integrated over the domain of our object, but simply distributed over the number of nodes.</p> <p></p>"},{"location":"30_Components/35_MechanicalLoad/20_ConstantForceField/#data","title":"Data","text":"<ul> <li>indices: list of node indices where the forces are applied and distributed</li> <li>force: single value corresponding to the constant force applied on each node</li> <li>totalForce: single value corresponding to total force for all points, i.e. the sum of the forces distributed uniformly over the nodes</li> <li>forces: vector containing the force amplitude applied at each node</li> </ul>"},{"location":"30_Components/35_MechanicalLoad/20_ConstantForceField/#usage","title":"Usage","text":"<p>As a Forcefield, the ConstantForceField requires a MechanicalObject and the associated solvers (integration scheme and linear solver), as well as a PointSetTopologyContainer.</p>"},{"location":"30_Components/35_MechanicalLoad/20_ConstantForceField/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;ConstantForceField indices=\"0 1 2\" forces=\"-1 -1 0   1 -1 0   1 1 0\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('ConstantForceField', indices=[0 1 2], forces=[[-1 -1 0] [1 -1 0] [1 1 0]])\n</code></pre> <p>With a description of each data</p> <p>An example scene involving a ConstantForceField is available in examples/Component/MechanicalLoad/ConstantForceField.scn</p> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 indices  indices where the forces are applied  indexFromEnd  Concerned DOFs indices are numbered from the end of the MState DOFs vector. (default=false)  0 Force info forces  applied forces at each point  totalForce  total force for all points, will be distributed uniformly over points  Visualization showArrowSize  Size of the drawn arrows (0-&gt;no arrows, sign-&gt;direction of drawing. (default=0)  0 showColor  Color for object display (default: [0.2,0.9,0.3,1.0])  0.2 0.9 0.3 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/35_MechanicalLoad/20_ConstantForceField/#examples","title":"Examples","text":"<p>Component/MechanicalLoad/ConstantForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.05\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangleFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [InteractiveCamera VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;!-- Constant force for a deformable --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop computeBoundingBox=\"false\"/&gt;\n    &lt;InteractiveCamera position=\"1.27 0.48 4.5\" orientation=\"0 0 0 1\"  distance=\"3.86\" fieldOfView=\"45\"/&gt;\n\n    &lt;Node name=\"BasicDeformableObject\" &gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject position=\"0 0 0  1 0 0  1 1 0  0 1 0\" velocity=\"0 0 0  0 0 0  0 0 0  0 0 0\" /&gt;\n        &lt;UniformMass vertexMass=\"0.1\" /&gt;\n        &lt;MeshTopology triangles=\"0 1 2  0 2 3\" /&gt;\n        &lt;!--        &lt;FixedProjectiveConstraint indices=\"2 3\"/&gt;--&gt;\n        &lt;TriangleFEMForceField name=\"FEM0\" youngModulus=\"100\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;ConstantForceField indices=\"0 1 2 3\" forces=\"-1 -1 0  1 -1 0  1 1 0  -1 1 0\" showArrowSize=\"0.5\" printLog=\"1\"/&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"TorusRigid\"&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" dx=\"2\" dy=\"0\" dz=\"0\" rx=\"0\" ry=\"0\" rz=\"0\" scale=\"1.0\" /&gt;\n        &lt;UniformMass /&gt;\n        &lt;!-- forces for a rigid is composed of two parts translation of the rigid dof [x y z] and a quaternion for the rotation [x y z w] --&gt;\n        &lt;ConstantForceField indices=\"0\" forces=\"0 0.10 0     0 1 0\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" scale=\"0.3\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"gray\" /&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop', computeBoundingBox=\"false\")\n    root.addObject('InteractiveCamera', position=\"1.27 0.48 4.5\", orientation=\"0 0 0 1\", distance=\"3.86\", fieldOfView=\"45\")\n\n    BasicDeformableObject = root.addChild('BasicDeformableObject')\n    BasicDeformableObject.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighMass=\"0.1\")\n    BasicDeformableObject.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    BasicDeformableObject.addObject('MechanicalObject', position=\"0 0 0  1 0 0  1 1 0  0 1 0\", velocity=\"0 0 0  0 0 0  0 0 0  0 0 0\")\n    BasicDeformableObject.addObject('UniformMass', vertexMass=\"0.1\")\n    BasicDeformableObject.addObject('MeshTopology', triangles=\"0 1 2  0 2 3\")\n    BasicDeformableObject.addObject('TriangleFEMForceField', name=\"FEM0\", youngModulus=\"100\", poissonRatio=\"0.3\", method=\"large\")\n    BasicDeformableObject.addObject('ConstantForceField', indices=\"0 1 2 3\", forces=\"-1 -1 0  1 -1 0  1 1 0  -1 1 0\", showArrowSize=\"0.5\", printLog=\"1\")\n\n    Visu = BasicDeformableObject.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"red\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    TorusRigid = root.addChild('TorusRigid')\n    TorusRigid.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusRigid.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid.addObject('MechanicalObject', template=\"Rigid3\", dx=\"2\", dy=\"0\", dz=\"0\", rx=\"0\", ry=\"0\", rz=\"0\", scale=\"1.0\")\n    TorusRigid.addObject('UniformMass')\n    TorusRigid.addObject('ConstantForceField', indices=\"0\", forces=\"0 0.10 0     0 1 0\")\n\n    Visu = TorusRigid.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", scale=\"0.3\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/DiagonalVelocityDampingForceField/","title":"DiagonalVelocityDampingForceField","text":"<p>Diagonal velocity damping</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 dampingCoefficient  velocity damping coefficients (by cinematic dof)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/35_MechanicalLoad/EdgePressureForceField/","title":"EdgePressureForceField","text":"<p>Apply a force on edges, distributed on the edge nodes</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 edgePressureMap  map between edge indices and their pressure  pressure  Pressure force per unit area  edgeIndices  Indices of edges separated with commas where a pressure is applied  edges  List of edges where a pressure is applied  normal  Normal direction for the plane selection of edges  dmin  Minimum distance from the origin along the normal direction  0 dmax  Maximum distance from the origin along the normal direction  0 arrowSizeCoef  Size of the drawn arrows (0-&gt;no arrows, sign-&gt;direction of drawing  0 p_intensity  pressure intensity on edge normal  binormal  Binormal of the 2D plane  Visualization showForces  draw arrows of edge pressures  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/35_MechanicalLoad/EdgePressureForceField/#examples","title":"Examples","text":"<p>Component/MechanicalLoad/EdgePressureForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node   name=\"root\" gravity=\"0 0 3\" dt=\"0.04\"  &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [EdgePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms EdgeSetTopologyContainer EdgeSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Triangle2EdgeTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;CollisionPipeline name=\"defaultPipeline1\"  verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"CollisionResponse1\"  response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\"  alarmDistance=\"0.8\"  contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareGravity\" &gt;\n        &lt;EulerImplicitSolver name=\"Euler Implicit\"  printLog=\"0\"  rayleighStiffness=\"0.1\"  rayleighMass=\"0.1\"  vdamping=\"0\"  /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"CG Solver\"  printLog=\"0\"  iterations=\"100\"  tolerance=\"1e-06\"  threshold=\"1e-10\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\"  filename=\"mesh/square3.msh\" createSubelements=\"true\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"mObject1\"  position=\"@loader.position\"  velocity=\"0 0 0\"  force=\"0 0 0\"  externalForce=\"0 0 0\"  derivX=\"0 0 0\"  restScale=\"1\"  translation=\"@loader.translation\"  rotation=\"@loader.rotation\"  scale3d=\"@loader.scale3d\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"Container\"  position=\"@loader.position\"  edges=\"@loader.edges\"  triangles=\"@loader.triangles\" /&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass name=\"diagonalMass1\"  massDensity=\"0.15\" /&gt;\n\n        &lt;TriangularFEMForceField template=\"Vec3\" name=\"FEM\"  method=\"large\"  poissonRatio=\"0.3\"  youngModulus=\"60\" /&gt;\n        &lt;TriangularBendingSprings template=\"Vec3\" name=\"FEM-Bend\"  stiffness=\"300\"  damping=\"1\" /&gt;\n        &lt;TriangleCollisionModel template=\"Vec3\" name=\"tTriangleModel1\" /&gt;\n\n        &lt;Node name=\"Visual\"&gt;\n            &lt;OglModel name=\"Visual\"  material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \" /&gt;\n            &lt;IdentityMapping name=\"identityMap1\"  mapForces=\"0\"  mapConstraints=\"0\"  mapMasses=\"0\"  input=\"@..\"  output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Edge Mesh\" &gt;\n            &lt;EdgeSetTopologyContainer name=\"Container\" /&gt;\n            &lt;EdgeSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;EdgeSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"  drawEdges=\"1\" /&gt;\n            &lt;Triangle2EdgeTopologicalMapping name=\"Mapping\"  input=\"@../Container\"  output=\"@Container\" /&gt;\n            &lt;EdgePressureForceField template=\"Vec3\" name=\"edgePressureFF0\"  edges=\"@Container.edges\" pressure=\"0 0 -0.1\" normal=\"0 0 1\"  p_intensity=\"1\" arrowSizeCoef=\"10\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 3\", dt=\"0.04\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', name=\"defaultPipeline1\", verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"CollisionResponse1\", response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"Euler Implicit\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\", vdamping=\"0\")\n    SquareGravity.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"CG Solver\", printLog=\"0\", iterations=\"100\", tolerance=\"1e-06\", threshold=\"1e-10\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', template=\"Vec3\", name=\"mObject1\", position=\"@loader.position\", velocity=\"0 0 0\", force=\"0 0 0\", externalForce=\"0 0 0\", derivX=\"0 0 0\", restScale=\"1\", translation=\"@loader.translation\", rotation=\"@loader.rotation\", scale3d=\"@loader.scale3d\")\n    SquareGravity.addObject('TriangleSetTopologyContainer', name=\"Container\", position=\"@loader.position\", edges=\"@loader.edges\", triangles=\"@loader.triangles\")\n    SquareGravity.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    SquareGravity.addObject('DiagonalMass', name=\"diagonalMass1\", massDensity=\"0.15\")\n    SquareGravity.addObject('TriangularFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"60\")\n    SquareGravity.addObject('TriangularBendingSprings', template=\"Vec3\", name=\"FEM-Bend\", stiffness=\"300\", damping=\"1\")\n    SquareGravity.addObject('TriangleCollisionModel', template=\"Vec3\", name=\"tTriangleModel1\")\n\n    Visual = SquareGravity.addChild('Visual')\n    Visual.addObject('OglModel', name=\"Visual\", material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \")\n    Visual.addObject('IdentityMapping', name=\"identityMap1\", mapForces=\"0\", mapConstraints=\"0\", mapMasses=\"0\", input=\"@..\", output=\"@Visual\")\n\n    Edge Mesh = SquareGravity.addChild('Edge Mesh')\n    Edge Mesh.addObject('EdgeSetTopologyContainer', name=\"Container\")\n    Edge Mesh.addObject('EdgeSetTopologyModifier', name=\"Modifier\")\n    Edge Mesh.addObject('EdgeSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\", drawEdges=\"1\")\n    Edge Mesh.addObject('Triangle2EdgeTopologicalMapping', name=\"Mapping\", input=\"@../Container\", output=\"@Container\")\n    Edge Mesh.addObject('EdgePressureForceField', template=\"Vec3\", name=\"edgePressureFF0\", edges=\"@Container.edges\", pressure=\"0 0 -0.1\", normal=\"0 0 1\", p_intensity=\"1\", arrowSizeCoef=\"10\")\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/EllipsoidForceField/","title":"EllipsoidForceField","text":"<p>Repulsion applied by an ellipsoid toward the exterior or the interior Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 contacts  Vector of contacts  center  ellipsoid center  vradius  ellipsoid radius  stiffness  force stiffness (positive to repulse outward, negative inward)  500 damping  force damping  5 color  ellipsoid color. (default=0,0.5,1.0,1.0)  0 0.5 1 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/35_MechanicalLoad/EllipsoidForceField/#examples","title":"Examples","text":"<p>Component/MechanicalLoad/EllipsoidForceField.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!-- Mechanical EllipsoidForceField Example --&gt;\n&lt;Node name=\"root\" gravity=\"0.0 -2.0 0.0\" dt=\"0.04\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Generate\"/&gt; &lt;!-- Needed to use components [MergeVectors] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping SubsetMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [EllipsoidForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField QuadBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showForceFields showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"Response\" /&gt;\n    &lt;NewProximityIntersection alarmDistance=\"0.002\" contactDistance=\"0.001\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareCloth1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass totalMass=\"100\" /&gt;\n        &lt;RegularGridTopology nx=\"20\" ny=\"1\" nz=\"20\" xmin=\"12\" xmax=\"-12\" ymin=\"7\" ymax=\"7\" zmin=\"-12\" zmax=\"12\" /&gt;\n        &lt;BoxROI name=\"box1\" box=\"-12 7 12 -10 7 12\" /&gt;\n        &lt;BoxROI name=\"box2\" box=\"10 7 12 12 7 12\" /&gt;\n        &lt;MergeVectors template=\"Data&lt;int&gt;\" name=\"mergedFixedIndices\" nbInputs=\"2\" input1=\"@box1.indices\" input2=\"@box2.indices\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"ProjectiveFixedProjectiveConstraint\" indices=\"@mergedFixedIndices.output\" /&gt;\n\n        &lt;MeshSpringForceField name=\"Springs\" stiffness=\"2000\" damping=\"0\" /&gt;\n        &lt;QuadBendingSprings name=\"Bend\" stiffness=\"20\" damping=\"0\" /&gt;\n        &lt;EllipsoidForceField stiffness=\"1000\" damping=\"1\" center=\"0 5 3\" vradius=\"6 2 6\" /&gt;\n        &lt;!--        &lt;EllipsoidForceField stiffness=\"-100\" damping=\"0.1\" center=\"0 10 3\" vradius=\"20 10 20\" color=\"1 0 0 1\" /&gt;\n        &lt;PlaneForceField stiffness=\"1000\" damping=\"20\" normal=\"0 1 0\" d=\"-3\" /&gt; --&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"green\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node&gt;\n            &lt;RegularGridTopology nx=\"4\" ny=\"1\" nz=\"4\" xmin=\"12\" xmax=\"-12\" ymin=\"7\" ymax=\"7\" zmin=\"-12\" zmax=\"12\" /&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;SphereCollisionModel radius=\"1.0\" contactStiffness=\"1\" /&gt;\n            &lt;SubsetMapping radius=\"0.8\"/&gt;\n        &lt;/Node&gt;\n        &lt;!--\n        &lt;Node name=\"Surf\"&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;RegularGridTopology\n                nx=\"100\" ny=\"1\" nz=\"100\"\n                xmin=\"12\" xmax=\"-12\"\n                ymin=\"7\" ymax=\"7\"\n                zmin=\"-12\" zmax=\"12\" /&gt;\n            &lt;IdentityMapping /&gt;\n            &lt;TriangleCollisionModel /&gt;\n        &lt;/Node&gt;\n        --&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0.0 -2.0 0.0\", dt=\"0.04\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Generate\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showForceFields showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"Response\")\n    root.addObject('NewProximityIntersection', alarmDistance=\"0.002\", contactDistance=\"0.001\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareCloth1 = root.addChild('SquareCloth1')\n    SquareCloth1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareCloth1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareCloth1.addObject('MechanicalObject')\n    SquareCloth1.addObject('UniformMass', totalMass=\"100\")\n    SquareCloth1.addObject('RegularGridTopology', nx=\"20\", ny=\"1\", nz=\"20\", xmin=\"12\", xmax=\"-12\", ymin=\"7\", ymax=\"7\", zmin=\"-12\", zmax=\"12\")\n    SquareCloth1.addObject('BoxROI', name=\"box1\", box=\"-12 7 12 -10 7 12\")\n    SquareCloth1.addObject('BoxROI', name=\"box2\", box=\"10 7 12 12 7 12\")\n    SquareCloth1.addObject('MergeVectors', template=\"Data&lt;int&gt;\", name=\"mergedFixedIndices\", nbInputs=\"2\", input1=\"@box1.indices\", input2=\"@box2.indices\")\n    SquareCloth1.addObject('FixedProjectiveConstraint', name=\"ProjectiveFixedProjectiveConstraint\", indices=\"@mergedFixedIndices.output\")\n    SquareCloth1.addObject('MeshSpringForceField', name=\"Springs\", stiffness=\"2000\", damping=\"0\")\n    SquareCloth1.addObject('QuadBendingSprings', name=\"Bend\", stiffness=\"20\", damping=\"0\")\n    SquareCloth1.addObject('EllipsoidForceField', stiffness=\"1000\", damping=\"1\", center=\"0 5 3\", vradius=\"6 2 6\")\n\n    Visu = SquareCloth1.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"green\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    SquareCloth1 = SquareCloth1.addChild('SquareCloth1')\n    SquareCloth1.addObject('RegularGridTopology', nx=\"4\", ny=\"1\", nz=\"4\", xmin=\"12\", xmax=\"-12\", ymin=\"7\", ymax=\"7\", zmin=\"-12\", zmax=\"12\")\n    SquareCloth1.addObject('MechanicalObject')\n    SquareCloth1.addObject('SphereCollisionModel', radius=\"1.0\", contactStiffness=\"1\")\n    SquareCloth1.addObject('SubsetMapping', radius=\"0.8\")\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/InteractionEllipsoidForceField/","title":"InteractionEllipsoidForceField","text":"<p>Repulsion applied by an ellipsoid toward the exterior or the interior</p> <p>Templates:</p> <ul> <li><code>Vec3d,Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>MixedInteractionForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 contacts  Contacts  center  ellipsoid center  vradius  ellipsoid radius  stiffness  force stiffness (positive to repulse outward, negative inward)  500 damping  force damping  5 color  ellipsoid color. (default=[0.0,0.5,1.0,1.0])  0 0.5 1 1 object2_dof_index  Dof index of object 2 where the forcefield is attached  0 object2_forces  enable/disable propagation of forces to object 2  1 object2_invert  inverse transform from object 2 (use when object 1 is in local coordinates within a frame defined by object 2)  0 Visualization draw  enable/disable drawing of the ellipsoid  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"30_Components/35_MechanicalLoad/InteractionEllipsoidForceField/#examples","title":"Examples","text":"<p>Component/MechanicalLoad/InteractionEllipsoidForceField.scn</p> XMLPython <pre><code>&lt;!-- Mechanical InteractionEllipsoidForceField Example --&gt;\n&lt;Node name=\"root\" gravity=\"0.0 -2.0 0.0\" dt=\"0.04\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint PartialFixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [InteractionEllipsoidForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Forward\"/&gt; &lt;!-- Needed to use components [EulerExplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField QuadBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showInteractionForceFields showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"Response\" /&gt;\n    &lt;NewProximityIntersection alarmDistance=\"0.002\" contactDistance=\"0.001\" /&gt;\n    &lt;Node name=\"RotatingObstacle\"&gt;\n        &lt;EulerExplicitSolver name=\"odesolver\" printLog=\"false\" /&gt;\n        &lt;MechanicalObject name=\"MS2\" template=\"Rigid3\" position=\"0 5 3 0 0 0 1\" velocity=\"0 0 0 -0.1 0 0\" /&gt;\n        &lt;UniformMass totalMass=\"1\" /&gt;\n        &lt;PartialFixedProjectiveConstraint indices=\"0\" fixedDirections=\"1 1 1 0 0 0\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"SquareCloth1\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject name=\"MS1\" /&gt;\n        &lt;UniformMass totalMass=\"100\" /&gt;\n        &lt;RegularGridTopology nx=\"20\" ny=\"1\" nz=\"20\" xmin=\"12\" xmax=\"-12\" ymin=\"7\" ymax=\"7\" zmin=\"-12\" zmax=\"12\" /&gt;\n        &lt;BoxROI name=\"box1\" box=\"-12 7 12 -10 7 12\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box1.indices\"/&gt;\n        &lt;BoxROI name=\"box2\" box=\"-12 7 12 -10 7 12\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box2.indices\"/&gt;\n        &lt;MeshSpringForceField name=\"Springs\" stiffness=\"2000\" damping=\"0\" /&gt;\n        &lt;QuadBendingSprings name=\"Bend\" stiffness=\"20\" damping=\"0\" /&gt;\n        &lt;InteractionEllipsoidForceField template=\"Vec3,Rigid3\" object1=\"@MS1\" object2=\"@../RotatingObstacle/MS2\" stiffness=\"1000\" damping=\"1\" center=\"0 0 0 0 -5 0\" vradius=\"6 2 4   2 4 2\" object2_forces=\"false\" object2_invert=\"false\" /&gt;\n        &lt;!--EllipsoidForceField stiffness=\"1000\" damping=\"1\" center=\"0 5 3\" vradius=\"6 2 6\" /--&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"green\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0.0 -2.0 0.0\", dt=\"0.04\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Forward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showInteractionForceFields showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"Response\")\n    root.addObject('NewProximityIntersection', alarmDistance=\"0.002\", contactDistance=\"0.001\")\n\n    RotatingObstacle = root.addChild('RotatingObstacle')\n    RotatingObstacle.addObject('EulerExplicitSolver', name=\"odesolver\", printLog=\"false\")\n    RotatingObstacle.addObject('MechanicalObject', name=\"MS2\", template=\"Rigid3\", position=\"0 5 3 0 0 0 1\", velocity=\"0 0 0 -0.1 0 0\")\n    RotatingObstacle.addObject('UniformMass', totalMass=\"1\")\n    RotatingObstacle.addObject('PartialFixedProjectiveConstraint', indices=\"0\", fixedDirections=\"1 1 1 0 0 0\")\n\n    SquareCloth1 = root.addChild('SquareCloth1')\n    SquareCloth1.addObject('EulerImplicitSolver', name=\"odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareCloth1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareCloth1.addObject('MechanicalObject', name=\"MS1\")\n    SquareCloth1.addObject('UniformMass', totalMass=\"100\")\n    SquareCloth1.addObject('RegularGridTopology', nx=\"20\", ny=\"1\", nz=\"20\", xmin=\"12\", xmax=\"-12\", ymin=\"7\", ymax=\"7\", zmin=\"-12\", zmax=\"12\")\n    SquareCloth1.addObject('BoxROI', name=\"box1\", box=\"-12 7 12 -10 7 12\")\n    SquareCloth1.addObject('FixedProjectiveConstraint', indices=\"@box1.indices\")\n    SquareCloth1.addObject('BoxROI', name=\"box2\", box=\"-12 7 12 -10 7 12\")\n    SquareCloth1.addObject('FixedProjectiveConstraint', indices=\"@box2.indices\")\n    SquareCloth1.addObject('MeshSpringForceField', name=\"Springs\", stiffness=\"2000\", damping=\"0\")\n    SquareCloth1.addObject('QuadBendingSprings', name=\"Bend\", stiffness=\"20\", damping=\"0\")\n    SquareCloth1.addObject('InteractionEllipsoidForceField', template=\"Vec3,Rigid3\", object1=\"@MS1\", object2=\"@../RotatingObstacle/MS2\", stiffness=\"1000\", damping=\"1\", center=\"0 0 0 0 -5 0\", vradius=\"6 2 4   2 4 2\", object2_forces=\"false\", object2_invert=\"false\")\n\n    Visu = SquareCloth1.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"green\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/LinearForceField/","title":"LinearForceField","text":"<p>Linearly interpolated force applied to given degrees of freedom Supports GPU-side computation using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 points  points where the force is applied  force  applied force to all points  1 times  key times for the interpolation  forces  forces corresponding to the key times  arrowSizeCoef  Size of the drawn arrows (0-&gt;no arrows, sign-&gt;direction of drawing  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/35_MechanicalLoad/LinearForceField/#examples","title":"Examples","text":"<p>Component/MechanicalLoad/LinearForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.005\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [LinearForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Forward\"/&gt; &lt;!-- Needed to use components [EulerExplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"TorusRigidX\"&gt;\n        &lt;EulerExplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"25\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" dx=\"2\" dy=\"0\" dz=\"0\" rx=\"0\" ry=\"0\" rz=\"0\" scale=\"1.0\" /&gt;\n        &lt;UniformMass /&gt;\n        &lt;!-- forces for a rigid is composed of two parts translation of the rigid dof [x y z] and a quaternion for the rotation [x y z w] --&gt;\n        &lt;LinearForceField points=\"0\" forces=\"0 0 0 0 0 0  1 0 0 0 0 0  -1 0 0 0 0 0  -1 0 0 0 0 0  0 0 0 0 0 0\" force=\"2.0\" times=\"0 4 8 10 12\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" scale=\"0.3\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"gray\" /&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"TorusRigidY\"&gt;\n        &lt;EulerExplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"25\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" dx=\"2\" dy=\"2\" dz=\"0\" rx=\"0\" ry=\"0\" rz=\"0\" scale=\"1.0\" /&gt;\n        &lt;UniformMass /&gt;\n        &lt;!-- forces for a rigid is composed of two parts translation of the rigid dof [x y z] and a quaternion for the rotation [x y z w] --&gt;\n        &lt;LinearForceField points=\"0\" forces=\"0 0 0 0 0 0  0 1 0 0 0 0  0 -1 0 0 0 0  0 -1 0 0 0 0  0 0 0 0 0 0\" force=\"2.0\" times=\"0 4 8 10 12\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus.obj\" scale=\"0.3\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"gray\" /&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Forward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n\n    TorusRigidX = root.addChild('TorusRigidX')\n    TorusRigidX.addObject('EulerExplicitSolver')\n    TorusRigidX.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigidX.addObject('MechanicalObject', template=\"Rigid3\", dx=\"2\", dy=\"0\", dz=\"0\", rx=\"0\", ry=\"0\", rz=\"0\", scale=\"1.0\")\n    TorusRigidX.addObject('UniformMass')\n    TorusRigidX.addObject('LinearForceField', points=\"0\", forces=\"0 0 0 0 0 0  1 0 0 0 0 0  -1 0 0 0 0 0  -1 0 0 0 0 0  0 0 0 0 0 0\", force=\"2.0\", times=\"0 4 8 10 12\")\n\n    Visu = TorusRigidX.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", scale=\"0.3\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    TorusRigidY = root.addChild('TorusRigidY')\n    TorusRigidY.addObject('EulerExplicitSolver')\n    TorusRigidY.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigidY.addObject('MechanicalObject', template=\"Rigid3\", dx=\"2\", dy=\"2\", dz=\"0\", rx=\"0\", ry=\"0\", rz=\"0\", scale=\"1.0\")\n    TorusRigidY.addObject('UniformMass')\n    TorusRigidY.addObject('LinearForceField', points=\"0\", forces=\"0 0 0 0 0 0  0 1 0 0 0 0  0 -1 0 0 0 0  0 -1 0 0 0 0  0 0 0 0 0 0\", force=\"2.0\", times=\"0 4 8 10 12\")\n\n    Visu = TorusRigidY.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus.obj\", scale=\"0.3\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/OscillatingTorsionPressureForceField/","title":"OscillatingTorsionPressureForceField","text":"<p>OscillatingTorsionPressure</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 trianglePressureMap  map between edge indices and their pressure  moment  Moment force applied on the entire surface  triangleList  Indices of triangles separated with commas where a pressure is applied  axis  Axis of rotation and normal direction for the plane selection of triangles  0 0 1 center  Center of rotation  penalty  Strength of the penalty force  1000 frequency  frequency of oscillation  1 dmin  Minimum distance from the origin along the normal direction  0 dmax  Maximum distance from the origin along the normal direction  0 Visualization showForces  draw triangles which have a given pressure  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/35_MechanicalLoad/PlaneForceField/","title":"PlaneForceField","text":"<p>Repulsion applied by a plane toward the exterior (half-space) Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 normal  plane normal. (default=[0,1,0])  d  plane d coef. (default=0)  0 stiffness  force stiffness. (default=500)  500 damping  force damping. (default=5)  5 maxForce  if non-null , the max force that can be applied to the object. (default=0)  0 bilateral  if true the plane force field is applied on both sides. (default=false)  0 localRange  optional range of local DOF indices. Any computation involving indices outside of this range are discarded (useful for parallelization using mesh partitionning)  -1 -1 planeColor  plane color. (default=[0.0,0.5,0.2,1.0])  0 0.5 0.2 1 Visualization showPlane  enable/disable drawing of plane. (default=false)  0 showPlaneSize  plane display size if draw is enabled. (default=10)  10 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/35_MechanicalLoad/PlaneForceField/#examples","title":"Examples","text":"<p>Component/MechanicalLoad/PlaneForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [PlaneForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RegularGridSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;NewProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"M1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass totalMass=\"10\" /&gt;\n        &lt;RegularGridTopology nx=\"2\" ny=\"2\" nz=\"2\" xmin=\"-3.5\" xmax=\"3.5\" ymin=\"-3.5\" ymax=\"3.5\" zmin=\"-3.5\" zmax=\"3.5\" /&gt;\n        &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"1000\" /&gt;\n        &lt;PlaneForceField normal=\"0 1 0\" d=\"-10\" stiffness=\"100000\" showPlane=\"1\" showPlaneSize=\"20\"/&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/smCube125.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"blue\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Collis\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/smCube125.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Collis\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('NewProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    M1 = root.addChild('M1')\n    M1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    M1.addObject('MechanicalObject')\n    M1.addObject('UniformMass', totalMass=\"10\")\n    M1.addObject('RegularGridTopology', nx=\"2\", ny=\"2\", nz=\"2\", xmin=\"-3.5\", xmax=\"3.5\", ymin=\"-3.5\", ymax=\"3.5\", zmin=\"-3.5\", zmax=\"3.5\")\n    M1.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"1000\")\n    M1.addObject('PlaneForceField', normal=\"0 1 0\", d=\"-10\", stiffness=\"100000\", showPlane=\"1\", showPlaneSize=\"20\")\n\n    Visu = M1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/smCube125.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"blue\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Collis = M1.addChild('Collis')\n    Collis.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/smCube125.obj\")\n    Collis.addObject('MeshTopology', src=\"@loader\")\n    Collis.addObject('MechanicalObject', src=\"@loader\")\n    Collis.addObject('TriangleCollisionModel')\n    Collis.addObject('BarycentricMapping', input=\"@..\", output=\"@Collis\")\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/QuadPressureForceField/","title":"QuadPressureForceField","text":"<p>QuadPressure</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 pressure  Pressure force per unit area  quadList  Indices of quads separated with commas where a pressure is applied  normal  Normal direction for the plane selection of quads  dmin  Minimum distance from the origin along the normal direction  0 dmax  Maximum distance from the origin along the normal direction  0 quadPressureMap  map between edge indices and their pressure  Visualization showForces  draw quads which have a given pressure  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/35_MechanicalLoad/SphereForceField/","title":"SphereForceField","text":"<p>Repulsion applied by a sphere toward the exterior Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 contacts  Contacts  center  sphere center  radius  sphere radius  1 stiffness  force stiffness  500 damping  force damping  5 color  sphere color. (default=[0,0,1,1])  0 0 1 1 localRange  optional range of local DOF indices. Any computation involving only indices outside of this range are discarded (useful for parallelization using mesh partitionning)  -1 -1 bilateral  if true the sphere force field is applied on both sides  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/35_MechanicalLoad/SphereForceField/#examples","title":"Examples","text":"<p>Component/MechanicalLoad/SphereForceField.scn</p> XMLPython <pre><code>&lt;!-- Mechanical SphereForceField Example --&gt;\n&lt;Node name=\"root\" gravity=\"0.0 -2.0 0.0\" dt=\"0.04\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [PlaneForceField SphereForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField QuadBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"hideBehaviorModels showForceFields hideCollisionModels hideVisualModels\" /&gt;\n\n    &lt;Node name=\"Floor\"&gt;\n        &lt;RegularGridTopology nx=\"2\" ny=\"1\" nz=\"2\" xmin=\"20\" xmax=\"-20\" ymin=\"-3.05\" ymax=\"-3.05\" zmin=\"-20\" zmax=\"20\" /&gt;\n        &lt;MechanicalObject /&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"SquareCloth1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;RegularGridTopology nx=\"20\" ny=\"1\" nz=\"20\" xmin=\"12\" xmax=\"-12\" ymin=\"7\" ymax=\"7\" zmin=\"-12\" zmax=\"12\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass totalMass=\"100\" /&gt;\n        &lt;BoxConstraint box=\"-12 7 12 -10 7 12    10 7 12 12 7 12\" /&gt;\n        &lt;MeshSpringForceField name=\"Springs\" stiffness=\"1000\" damping=\"0\" /&gt;\n        &lt;QuadBendingSprings name=\"Bend\" stiffness=\"2000\" damping=\"1\" /&gt;\n\n        &lt;!-- Two ForceFields mimicking collision : a sphere and plane model --&gt;\n        &lt;SphereForceField stiffness=\"1000\" damping=\"1\" center=\"0 1 3\" radius=\"4\"  /&gt;\n        &lt;PlaneForceField stiffness=\"1000\" damping=\"20\" normal=\"0 1 0\" d=\"-3\" /&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"green\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"Sphere\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/sphere.obj\" scale=\"3.95\" handleSeams=\"1\" /&gt;\n        &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" dx=\"0\" dy=\"1\" dz=\"3\" color=\"blue\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0.0 -2.0 0.0\", dt=\"0.04\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"hideBehaviorModels showForceFields hideCollisionModels hideVisualModels\")\n\n    Floor = root.addChild('Floor')\n    Floor.addObject('RegularGridTopology', nx=\"2\", ny=\"1\", nz=\"2\", xmin=\"20\", xmax=\"-20\", ymin=\"-3.05\", ymax=\"-3.05\", zmin=\"-20\", zmax=\"20\")\n    Floor.addObject('MechanicalObject')\n\n    Visu = Floor.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"red\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    SquareCloth1 = root.addChild('SquareCloth1')\n    SquareCloth1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareCloth1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareCloth1.addObject('RegularGridTopology', nx=\"20\", ny=\"1\", nz=\"20\", xmin=\"12\", xmax=\"-12\", ymin=\"7\", ymax=\"7\", zmin=\"-12\", zmax=\"12\")\n    SquareCloth1.addObject('MechanicalObject')\n    SquareCloth1.addObject('UniformMass', totalMass=\"100\")\n    SquareCloth1.addObject('BoxConstraint', box=\"-12 7 12 -10 7 12    10 7 12 12 7 12\")\n    SquareCloth1.addObject('MeshSpringForceField', name=\"Springs\", stiffness=\"1000\", damping=\"0\")\n    SquareCloth1.addObject('QuadBendingSprings', name=\"Bend\", stiffness=\"2000\", damping=\"1\")\n    SquareCloth1.addObject('SphereForceField', stiffness=\"1000\", damping=\"1\", center=\"0 1 3\", radius=\"4\")\n    SquareCloth1.addObject('PlaneForceField', stiffness=\"1000\", damping=\"20\", normal=\"0 1 0\", d=\"-3\")\n\n    Visu = SquareCloth1.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"green\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    Sphere = root.addChild('Sphere')\n    Sphere.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/sphere.obj\", scale=\"3.95\", handleSeams=\"1\")\n    Sphere.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", dx=\"0\", dy=\"1\", dz=\"3\", color=\"blue\")\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/SurfacePressureForceField/","title":"SurfacePressureForceField","text":"<p>SurfacePressure</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 pressure  Pressure force per unit area  0 min  Lower bond of the selection box  0 0 0 0 0 0 1 max  Upper bond of the selection box  0 0 0 0 0 0 1 triangleIndices  Indices of affected triangles  quadIndices  Indices of affected quads  pulseMode  Cyclic pressure application  0 pressureLowerBound  Pressure lower bound force per unit area (active in pulse mode)  0 pressureSpeed  Continuous pressure application in Pascal per second. Only active in pulse mode  0 volumeConservationMode  Pressure variation follow the inverse of the volume variation  0 useTangentStiffness  Whether (non-symmetric) stiffness matrix should be used  1 defaultVolume  Default Volume  -1 mainDirection  Main direction for pressure application  0 0 0 0 0 0 Visualization drawForceScale  DEBUG: scale used to render force vectors  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 pressure  Pressure force per unit area  0 min  Lower bond of the selection box  0 0 0 max  Upper bond of the selection box  0 0 0 triangleIndices  Indices of affected triangles  quadIndices  Indices of affected quads  pulseMode  Cyclic pressure application  0 pressureLowerBound  Pressure lower bound force per unit area (active in pulse mode)  0 pressureSpeed  Continuous pressure application in Pascal per second. Only active in pulse mode  0 volumeConservationMode  Pressure variation follow the inverse of the volume variation  0 useTangentStiffness  Whether (non-symmetric) stiffness matrix should be used  1 defaultVolume  Default Volume  -1 mainDirection  Main direction for pressure application  0 0 0 Visualization drawForceScale  DEBUG: scale used to render force vectors  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/35_MechanicalLoad/SurfacePressureForceField/#examples","title":"Examples","text":"<p>Component/MechanicalLoad/SurfacePressureForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [SurfacePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" usePointPoint=\"1\" alarmDistance=\"3.5\" contactDistance=\"1.5\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"Frog\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"30\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;SparseGridTopology n=\"10 5 10\" fileTopology=\"mesh/frog.obj\" /&gt;\n        &lt;MechanicalObject dx=\"-10.0\" /&gt;\n        &lt;UniformMass vertexMass=\"1.0\" /&gt;\n        &lt;BoxConstraint box=\"-18.0 2.0 -5.0 -2.0 3.0 5.0\" /&gt;\n        &lt;MeshSpringForceField name=\"Springs\" stiffness=\"50000\" damping=\"4\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/frog.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"0.5 1.0 0.5 1.0\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TriangleSurf\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/frog.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel group=\"1\" /&gt;\n            &lt;LineCollisionModel group=\"1\" /&gt;\n            &lt;PointCollisionModel group=\"1\" /&gt;\n            &lt;SurfacePressureForceField pressure=\"50000.0\" pulseMode=\"true\" pressureSpeed=\"20000.0\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@.\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Frog2\"&gt;\n        &lt;EulerImplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"30\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;SparseGridTopology n=\"10 5 10\" fileTopology=\"mesh/frog_quads.obj\" /&gt;\n        &lt;MechanicalObject dx=\"10.0\" /&gt;\n        &lt;UniformMass vertexMass=\"1.0\" /&gt;\n        &lt;BoxConstraint box=\"2.0 2.0 -5.0 18.0 3.0 5.0\" /&gt;\n        &lt;MeshSpringForceField name=\"Springs\" stiffness=\"50000\" damping=\"4\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/frog_quads.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"1.0 0.5 0.5 1.0\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"QuadSurf\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/frog_quads.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel group=\"1\" /&gt;\n            &lt;LineCollisionModel group=\"1\" /&gt;\n            &lt;PointCollisionModel group=\"1\" /&gt;\n            &lt;SurfacePressureForceField pressure=\"50000.0\" pulseMode=\"true\" pressureSpeed=\"20000.0\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@.\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", usePointPoint=\"1\", alarmDistance=\"3.5\", contactDistance=\"1.5\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    Frog = root.addChild('Frog')\n    Frog.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Frog.addObject('CGLinearSolver', iterations=\"30\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Frog.addObject('SparseGridTopology', n=\"10 5 10\", fileTopology=\"mesh/frog.obj\")\n    Frog.addObject('MechanicalObject', dx=\"-10.0\")\n    Frog.addObject('UniformMass', vertexMass=\"1.0\")\n    Frog.addObject('BoxConstraint', box=\"-18.0 2.0 -5.0 -2.0 3.0 5.0\")\n    Frog.addObject('MeshSpringForceField', name=\"Springs\", stiffness=\"50000\", damping=\"4\")\n\n    Visu = Frog.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/frog.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"0.5 1.0 0.5 1.0\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    TriangleSurf = Frog.addChild('TriangleSurf')\n    TriangleSurf.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/frog.obj\")\n    TriangleSurf.addObject('MeshTopology', src=\"@loader\")\n    TriangleSurf.addObject('MechanicalObject', src=\"@loader\")\n    TriangleSurf.addObject('TriangleCollisionModel', group=\"1\")\n    TriangleSurf.addObject('LineCollisionModel', group=\"1\")\n    TriangleSurf.addObject('PointCollisionModel', group=\"1\")\n    TriangleSurf.addObject('SurfacePressureForceField', pressure=\"50000.0\", pulseMode=\"true\", pressureSpeed=\"20000.0\")\n    TriangleSurf.addObject('BarycentricMapping', input=\"@..\", output=\"@.\")\n\n    Frog2 = root.addChild('Frog2')\n    Frog2.addObject('EulerImplicitSolver')\n    Frog2.addObject('CGLinearSolver', iterations=\"30\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Frog2.addObject('SparseGridTopology', n=\"10 5 10\", fileTopology=\"mesh/frog_quads.obj\")\n    Frog2.addObject('MechanicalObject', dx=\"10.0\")\n    Frog2.addObject('UniformMass', vertexMass=\"1.0\")\n    Frog2.addObject('BoxConstraint', box=\"2.0 2.0 -5.0 18.0 3.0 5.0\")\n    Frog2.addObject('MeshSpringForceField', name=\"Springs\", stiffness=\"50000\", damping=\"4\")\n\n    Visu = Frog2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/frog_quads.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"1.0 0.5 0.5 1.0\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    QuadSurf = Frog2.addChild('QuadSurf')\n    QuadSurf.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/frog_quads.obj\")\n    QuadSurf.addObject('MeshTopology', src=\"@loader\")\n    QuadSurf.addObject('MechanicalObject', src=\"@loader\")\n    QuadSurf.addObject('TriangleCollisionModel', group=\"1\")\n    QuadSurf.addObject('LineCollisionModel', group=\"1\")\n    QuadSurf.addObject('PointCollisionModel', group=\"1\")\n    QuadSurf.addObject('SurfacePressureForceField', pressure=\"50000.0\", pulseMode=\"true\", pressureSpeed=\"20000.0\")\n    QuadSurf.addObject('BarycentricMapping', input=\"@..\", output=\"@.\")\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/TaitSurfacePressureForceField/","title":"TaitSurfacePressureForceField","text":"<p>This component computes the volume enclosed by a surface mesh and apply a pressure force following Tait's equation: $P = P_0 - B((V/V_0)^\\gamma - 1)$. This ForceField can be used to apply :  * a constant pressure (set $B=0$ and use $P_0$)  * an ideal gas pressure (set $\\gamma=1$ and use $B$)  * a pressure from water (set $\\gamma=7$ and use $B$)</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 pressureTriangles  OUT: list of triangles where a pressure is applied (mesh triangles + tesselated quads)  Controls p0  IN: Rest pressure when V = V0  0 B  IN: Bulk modulus (resistance to uniform compression)  0 gamma  IN: Bulk modulus (resistance to uniform compression)  0 injectedVolume  IN: Injected (or extracted) volume since the start of the simulation  0 maxInjectionRate  IN: Maximum injection rate (volume per second)  1000 Results initialVolume  OUT: Initial volume, as computed from the surface rest position  0 currentInjectedVolume  OUT: Current injected (or extracted) volume (taking into account maxInjectionRate)  0 v0  OUT: Rest volume (as computed from initialVolume + injectedVolume)  0 currentVolume  OUT: Current volume, as computed from the last surface position  0 currentPressure  OUT: Current pressure, as computed from the last surface position  0 currentStiffness  OUT: dP/dV at current volume and pressure  0 volumeAfterTC  OUT: Volume after a topology change  surfaceAreaAfterTC  OUT: Surface area after a topology change  0 Stats initialSurfaceArea  OUT: Initial surface area, as computed from the surface rest position  0 currentSurfaceArea  OUT: Current surface area, as computed from the last surface position  0 Visualization drawForceScale  DEBUG: scale used to render force vectors  0.001 drawForceColor  DEBUG: color used to render force vectors  0 1 1 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/35_MechanicalLoad/TaitSurfacePressureForceField/#examples","title":"Examples","text":"<p>Component/MechanicalLoad/TaitSurfacePressureForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\" gravity = \"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TaitSurfacePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceFieldOptim] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [FastTriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;Node name=\"sphere\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" rayleighMass=\"0.1\" rayleighStiffness=\"0.2\" printLog=\"false\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/sphere_02b.obj\" scale=\"0.25 0.25 0.25\" rotation=\"-90 0 0\" triangulate=\"1\" /&gt;\n        &lt;TriangleSetTopologyContainer src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"DOFs\" /&gt;\n        &lt;TriangleSetTopologyModifier /&gt;\n        &lt;TriangleSetGeometryAlgorithms /&gt;\n        &lt;BoxConstraint box=\"-10 -10 -10  10 -5 10\" /&gt;\n        &lt;TriangularFEMForceFieldOptim name=\"FEM\" youngModulus=\"10000\" poissonRatio=\"0.4\" restScale=\"0.97\" method=\"large\" /&gt;\n        &lt;FastTriangularBendingSprings name=\"Bending\" bendingStiffness=\"100\" /&gt;\n        &lt;TaitSurfacePressureForceField name=\"Pressure\" gamma=\"5\" B=\"10000\" injectedVolume=\"100\" printLog=\"1\" /&gt;\n        &lt;DiagonalMass name=\"mass\" massDensity=\"1\" printLog=\"0\" /&gt;\n        &lt;TriangleCollisionModel name=\"CM\" /&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@../loader\" color=\"white\" /&gt;\n            &lt;IdentityMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('DiscreteIntersection')\n\n    sphere = root.addChild('sphere')\n    sphere.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighMass=\"0.1\", rayleighStiffness=\"0.2\", printLog=\"false\")\n    sphere.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    sphere.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/sphere_02b.obj\", scale=\"0.25 0.25 0.25\", rotation=\"-90 0 0\", triangulate=\"1\")\n    sphere.addObject('TriangleSetTopologyContainer', src=\"@loader\")\n    sphere.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"DOFs\")\n    sphere.addObject('TriangleSetTopologyModifier')\n    sphere.addObject('TriangleSetGeometryAlgorithms')\n    sphere.addObject('BoxConstraint', box=\"-10 -10 -10  10 -5 10\")\n    sphere.addObject('TriangularFEMForceFieldOptim', name=\"FEM\", youngModulus=\"10000\", poissonRatio=\"0.4\", restScale=\"0.97\", method=\"large\")\n    sphere.addObject('FastTriangularBendingSprings', name=\"Bending\", bendingStiffness=\"100\")\n    sphere.addObject('TaitSurfacePressureForceField', name=\"Pressure\", gamma=\"5\", B=\"10000\", injectedVolume=\"100\", printLog=\"1\")\n    sphere.addObject('DiagonalMass', name=\"mass\", massDensity=\"1\", printLog=\"0\")\n    sphere.addObject('TriangleCollisionModel', name=\"CM\")\n\n    Visu = sphere.addChild('Visu')\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@../loader\", color=\"white\")\n    Visu.addObject('IdentityMapping')\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/TorsionForceField/","title":"TorsionForceField","text":"<p>Applies a torque to specified points</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 indices  indices of the selected points  torque  torque to apply  axis  direction of the axis (will be normalized)  origin  origin of the axis  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/35_MechanicalLoad/TrianglePressureForceField/","title":"TrianglePressureForceField","text":"<p>TrianglePressure</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 pressure  Pressure force per unit area  cauchyStress  Cauchy Stress applied on the normal of each triangle  [ 0 0 0 , 0 0 0 , 0 0 0 ,] triangleList  Indices of triangles separated with commas where a pressure is applied  normal  Normal direction for the plane selection of triangles  dmin  Minimum distance from the origin along the normal direction  0 dmax  Maximum distance from the origin along the normal direction  0 useConstantForce  applied force is computed as the pressure vector times the area at rest  1 trianglePressureMap  map between edge indices and their pressure  Visualization showForces  draw triangles which have a given pressure  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/35_MechanicalLoad/TrianglePressureForceField/#examples","title":"Examples","text":"<p>Component/MechanicalLoad/TrianglePressureForceField.scn</p> XMLPython <pre><code>&lt;!-- TrianglePressureForceField example scene --&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedPlaneProjectiveConstraint FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TrianglePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"TT\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/cylinder.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"Volume\" /&gt;\n        &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.5\" /&gt;\n        &lt;FixedPlaneProjectiveConstraint direction=\"0 0 1\" dmin=\"-0.1\" dmax=\"0.1\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"60\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n        &lt;Node name=\"T\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@../Container\"/&gt;\n            &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;TrianglePressureForceField name=\"PFF\" normal=\"0 0 1\" dmin=\"0.9\" dmax=\"1.1\" pressure=\"1 0 0\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"Visual\" color=\"yellow\" /&gt;\n                &lt;IdentityMapping input=\"@../../Volume\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    TT = root.addChild('TT')\n    TT.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TT.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TT.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/cylinder.msh\")\n    TT.addObject('MechanicalObject', src=\"@loader\", name=\"Volume\")\n    TT.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\")\n    TT.addObject('DiagonalMass', massDensity=\"0.5\")\n    TT.addObject('FixedPlaneProjectiveConstraint', direction=\"0 0 1\", dmin=\"-0.1\", dmax=\"0.1\")\n    TT.addObject('FixedProjectiveConstraint', indices=\"0\")\n    TT.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"60\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"large\")\n\n    T = TT.addChild('T')\n    T.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@../Container\")\n    T.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n    T.addObject('TrianglePressureForceField', name=\"PFF\", normal=\"0 0 1\", dmin=\"0.9\", dmax=\"1.1\", pressure=\"1 0 0\")\n    T.addObject('TriangleCollisionModel')\n\n    Visu = T.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"yellow\")\n    Visu.addObject('IdentityMapping', input=\"@../../Volume\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/35_MechanicalLoad/UniformVelocityDampingForceField/","title":"UniformVelocityDampingForceField","text":"<p>Uniform velocity damping</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.MechanicalLoad</code></p> <p>namespace: <code>sofa::component::mechanicalload</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 dampingCoefficient  velocity damping coefficient  0.1 implicit  should it generate damping matrix df/dv? (explicit otherwise, i.e. only generating a force)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"30_Components/40_ODESolver/10_Forward/10_EulerExplicitSolver/","title":"EulerExplicitSolver","text":"<p>The EulerExplicitSolver component belongs to the category of integration schemes or ODE Solver. This scheme allows to solve dynamic systems explicitly: all forces will be computed based on the state information at the current time step .</p> <p>Looking at continuum mechanics, the linear system  arises from the dynamic equation. This dynamic is written as follows but other physics (like heat transfer) result in a similar equation:</p> <p></p> <p>where  is the degrees of freedom,  the mass matrix and  a function of  (and possibly its derivatives) acting on our system. In the case of the EulerExplicitSolver, this equation can be written: </p> <p></p> <p>since forces only depend on known state (at our current time step). These forces are computed by the ForceField in the <code>addForce()</code> function. The system matrix  is only equal to the mass matrix .</p> <p>Depending on whether the mass matrix is diagonal or not, SOFA supports two cases:</p> <p>1) The mass matrix is diagonal. It makes the resolution of the linear system trivial (best performances). In this case, the system matrix  equals a diagonal mass matrix  which is diagonal and it can be stored as a vector  . Moreover, its inverse can directly be obtained as: .    The solution  finally corresponds to a division operation of  by the mass. This computation is actually performed by the Mass component in the <code>accFromF()</code> function. Therefore, no LinearSolver is needed to compute directly or iteratively a solution. 2) The mass matrix is not diagonal. Solving the system requires a linear solver. </p>"},{"location":"30_Components/40_ODESolver/10_Forward/10_EulerExplicitSolver/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"30_Components/40_ODESolver/10_Forward/10_EulerExplicitSolver/#data","title":"Data","text":"<p>The data symplectic allows to modify the scheme to make it symplectic, i.e. velocities are updated before the positions. It allows to update the positions from the newly computed velocities, instead of velocities from the previous time step. This option makes the scheme more robust in time. EulerExplicitSolver is symplectic by default.</p>"},{"location":"30_Components/40_ODESolver/10_Forward/10_EulerExplicitSolver/#usage","title":"Usage","text":"<p>The EulerExplicitSolver requires a MechanicalObject to store the state vectors. However, as explained above, no LinearSolver is needed and the EulerExplicitSolver is only working using a UniformMass or DiagonalMass, which ensures to have a diagonal system matrix.</p>"},{"location":"30_Components/40_ODESolver/10_Forward/10_EulerExplicitSolver/#example","title":"Example","text":"<p>This component is used as follows in XML format:  </p> <pre><code>&lt;EulerExplicitSolver name=\"odeExplicitSolver\" /&gt;\n</code></pre> <p>or using SofaPython3:  </p> <pre><code>node.addObject('EulerExplicitSolver', name='odeExplicitSolver')\n</code></pre> <p>Examples of scenes involving a EulerExplicitSolver are available in examples/Component/ODESolver/Forward/EulerExplicitSolver:</p> <ul> <li>EulerExplicitSolver.scn: non-symplectic and non-diagonal mass matrix</li> <li>EulerExplicitSolver_diagonal.scn: non-symplectic and diagonal mass matrix</li> <li>EulerSymplecticSolver.scn: symplectic and non-diagonal mass matrix</li> <li>EulerSymplecticSolver_diagonal.scn: symplectic and diagonal mass matrix</li> </ul> <p>Target: <code>Sofa.Component.ODESolver.Forward</code></p> <p>namespace: <code>sofa::component::odesolver::forward</code></p> <p>parents: </p> <ul> <li><code>OdeSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 symplectic  If true, the velocities are updated before the positions and the method is symplectic (more robust). If false, the positions are updated before the velocities (standard Euler, less robust).  1 threadSafeVisitor  If true, do not use realloc and free visitors in fwdInteractionForceField.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSolver Linear solver used by this component"},{"location":"30_Components/40_ODESolver/10_Forward/10_EulerExplicitSolver/#examples","title":"Examples","text":"<p>Component/ODESolver/Forward/EulerExplicitSolver_diagonal.scn</p> XMLPython <pre><code>&lt;!--\nThis scene shows an example of a forward Euler integration scheme.\nThis is the variant of the component EulerExplicitSolver where the Data\n'symplectic' is set to false (true by default).\nIn this example, the mass is diagonal. Since it can be inverted\ntrivially, it does not require a linear solver.\n--&gt;\n\n&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.00001\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Forward\"/&gt; &lt;!-- Needed to use components [EulerExplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2QuadTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n\n    &lt;Node name=\"DeformableObject\"&gt;\n\n        &lt;!-- Matrix system is diagonal because integration is explicit and Mass is diagonal --&gt;\n        &lt;!-- No need for a LinearSolver --&gt;\n        &lt;EulerExplicitSolver name=\"odeExplicitSolver\" symplectic=\"false\"/&gt;\n\n        &lt;MechanicalObject name=\"dofs\"/&gt;\n\n        &lt;RegularGridTopology name=\"topology\" nx=\"4\" ny=\"4\" nz=\"11\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"10\" /&gt;\n        &lt;HexahedronSetGeometryAlgorithms/&gt;\n        &lt;UniformMass totalMass=\"15\"/&gt;\n\n        &lt;BoxROI box=\"-1.5 -1.5 0 1.5 1.5 0.0001\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\" /&gt;\n        &lt;MeshSpringForceField stiffness=\"3E2\"/&gt;\n\n        &lt;Node name=\"visual\"&gt;\n            &lt;QuadSetTopologyContainer  name=\"Container\" /&gt;\n            &lt;QuadSetTopologyModifier/&gt;\n            &lt;Hexa2QuadTopologicalMapping input=\"@../topology\" output=\"@Container\" /&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" quads=\"@Container.quads\" /&gt;\n            &lt;IdentityMapping input=\"@../dofs\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n\n    &lt;Node name=\"floor-visual\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader\" filename=\"mesh/floorFlat.obj\" scale3d=\"0.5 0.5 0.5\"/&gt;\n        &lt;OglModel src=\"@meshLoader\" dy=\"-8\" dz=\"10\"/&gt;\n        &lt;OglModel src=\"@meshLoader\" rx=\"90\" dy=\"2\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.00001\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Forward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n\n    DeformableObject = root.addChild('DeformableObject')\n    DeformableObject.addObject('EulerExplicitSolver', name=\"odeExplicitSolver\", symplectic=\"false\")\n    DeformableObject.addObject('MechanicalObject', name=\"dofs\")\n    DeformableObject.addObject('RegularGridTopology', name=\"topology\", nx=\"4\", ny=\"4\", nz=\"11\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"10\")\n    DeformableObject.addObject('HexahedronSetGeometryAlgorithms')\n    DeformableObject.addObject('UniformMass', totalMass=\"15\")\n    DeformableObject.addObject('BoxROI', box=\"-1.5 -1.5 0 1.5 1.5 0.0001\", name=\"box\")\n    DeformableObject.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    DeformableObject.addObject('MeshSpringForceField', stiffness=\"3E2\")\n\n    visual = DeformableObject.addChild('visual')\n    visual.addObject('QuadSetTopologyContainer', name=\"Container\")\n    visual.addObject('QuadSetTopologyModifier')\n    visual.addObject('Hexa2QuadTopologicalMapping', input=\"@../topology\", output=\"@Container\")\n    visual.addObject('OglModel', name=\"Visual\", color=\"yellow\", quads=\"@Container.quads\")\n    visual.addObject('IdentityMapping', input=\"@../dofs\", output=\"@Visual\")\n\n    floor-visual = root.addChild('floor-visual')\n    floor-visual.addObject('MeshOBJLoader', name=\"meshLoader\", filename=\"mesh/floorFlat.obj\", scale3d=\"0.5 0.5 0.5\")\n    floor-visual.addObject('OglModel', src=\"@meshLoader\", dy=\"-8\", dz=\"10\")\n    floor-visual.addObject('OglModel', src=\"@meshLoader\", rx=\"90\", dy=\"2\")\n</code></pre> <p>Component/ODESolver/Forward/EulerExplicitSolver.scn</p> XMLPython <pre><code>&lt;!--\nThis scene shows an example of a forward Euler integration scheme.\nThis is the variant of the component EulerExplicitSolver where the Data\n'symplectic' is set to false (true by default).\nIn this example, the mass is not diagonal. Since it cannot be inverted\ntrivially, it requires a linear solver, here SparseLDLSolver.\n--&gt;\n\n&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.00001\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [SparseLDLSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Forward\"/&gt; &lt;!-- Needed to use components [EulerExplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2QuadTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n\n    &lt;Node name=\"DeformableObject\"&gt;\n\n        &lt;EulerExplicitSolver name=\"odeExplicitSolver\" symplectic=\"false\"/&gt;\n        &lt;SparseLDLSolver /&gt;\n\n        &lt;MechanicalObject name=\"dofs\"/&gt;\n\n        &lt;RegularGridTopology name=\"topology\" nx=\"4\" ny=\"4\" nz=\"11\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"10\" /&gt;\n        &lt;HexahedronSetGeometryAlgorithms/&gt;\n        &lt;MeshMatrixMass totalMass=\"15\"/&gt;\n\n        &lt;BoxROI box=\"-1.5 -1.5 0 1.5 1.5 0.0001\" name=\"box\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box.indices\" /&gt;\n        &lt;MeshSpringForceField stiffness=\"3E2\"/&gt;\n\n        &lt;Node name=\"visual\"&gt;\n            &lt;QuadSetTopologyContainer  name=\"Container\" /&gt;\n            &lt;QuadSetTopologyModifier/&gt;\n            &lt;Hexa2QuadTopologicalMapping input=\"@../topology\" output=\"@Container\" /&gt;\n            &lt;OglModel name=\"Visual\" color=\"yellow\" quads=\"@Container.quads\" /&gt;\n            &lt;IdentityMapping input=\"@../dofs\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n\n    &lt;Node name=\"floor-visual\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader\" filename=\"mesh/floorFlat.obj\" scale3d=\"0.5 0.5 0.5\"/&gt;\n        &lt;OglModel src=\"@meshLoader\" dy=\"-8\" dz=\"10\"/&gt;\n        &lt;OglModel src=\"@meshLoader\" rx=\"90\" dy=\"2\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.00001\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Forward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n\n    DeformableObject = root.addChild('DeformableObject')\n    DeformableObject.addObject('EulerExplicitSolver', name=\"odeExplicitSolver\", symplectic=\"false\")\n    DeformableObject.addObject('SparseLDLSolver')\n    DeformableObject.addObject('MechanicalObject', name=\"dofs\")\n    DeformableObject.addObject('RegularGridTopology', name=\"topology\", nx=\"4\", ny=\"4\", nz=\"11\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"10\")\n    DeformableObject.addObject('HexahedronSetGeometryAlgorithms')\n    DeformableObject.addObject('MeshMatrixMass', totalMass=\"15\")\n    DeformableObject.addObject('BoxROI', box=\"-1.5 -1.5 0 1.5 1.5 0.0001\", name=\"box\")\n    DeformableObject.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    DeformableObject.addObject('MeshSpringForceField', stiffness=\"3E2\")\n\n    visual = DeformableObject.addChild('visual')\n    visual.addObject('QuadSetTopologyContainer', name=\"Container\")\n    visual.addObject('QuadSetTopologyModifier')\n    visual.addObject('Hexa2QuadTopologicalMapping', input=\"@../topology\", output=\"@Container\")\n    visual.addObject('OglModel', name=\"Visual\", color=\"yellow\", quads=\"@Container.quads\")\n    visual.addObject('IdentityMapping', input=\"@../dofs\", output=\"@Visual\")\n\n    floor-visual = root.addChild('floor-visual')\n    floor-visual.addObject('MeshOBJLoader', name=\"meshLoader\", filename=\"mesh/floorFlat.obj\", scale3d=\"0.5 0.5 0.5\")\n    floor-visual.addObject('OglModel', src=\"@meshLoader\", dy=\"-8\", dz=\"10\")\n    floor-visual.addObject('OglModel', src=\"@meshLoader\", rx=\"90\", dy=\"2\")\n</code></pre>"},{"location":"30_Components/40_ODESolver/10_Forward/50_StaticSolver/","title":"StaticSolver","text":"<p>This component belongs to the category of integration schemes or ODE Solver.  </p> <p>In the field of mechanics, statics consists in finding the equilibrium taking into account the loads (internal forces, external forces and torques) acting on the physical system, that do not experience an acceleration (  ). Finding a static equilibrium means finding a solution to:  where  is the sum of all loads, one of which might be unknown.  </p> <p>In a static analysis, the inertia and damping effects are ignored, i.e. the dynamic effect of the mass is ignored. It can thus be written: . In the same way, when running a static simulation, time is not elapsing and time steps should rather be considered as convergence steps.  </p> <p>In a static simulation involving elasticity, the linear system that we solve corresponds to  where  is the stiffness matrix (derivative of elastic forces),  is a vector describing the total increment of displacement and  are all explicit forces. We realize here that the static solver is in fact an implicit scheme, since the  matrix is present in the left-hand side of the equation. The solution  is obtained iteratively. At each iteration i, the displacement is incremented , thus resulting in the following system to solve: .  </p> <p>In case of non-linear elasticity,  is a linearization which must be updated with regards to the increment of displacement . In such cases, several iterations of Newton Raphson are required to find an appropriate approximate solution. In one step of the StaticSolver, the number of Newton Raphson iterations is ruled by the data field newton_iterations.</p> <p>Reminder: the Newton Raphson method is an iterative algorithm aiming at finding the solution of the system  where  is non-linear. At each iteration of Newton Raphson algorithm, we find a new approximate solution:</p> <p> where </p> <p>In our elasticity case, the system to solve is . At each iteration of Newton Raphson algorithm  at simulation step , we therefore find:</p> <p></p>"},{"location":"30_Components/40_ODESolver/10_Forward/50_StaticSolver/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"30_Components/40_ODESolver/10_Forward/50_StaticSolver/#data","title":"Data","text":"<p>The solver is ruled by several breaking (converging or diverging) conditions:  </p> <ul> <li>correction_tolerance_threshold is the value of  under which the Newton Raphson stops and considers the iteration as having converged. This data is homogeneous to the DOFs of the simulation.</li> <li>residual_tolerance_threshold is the value of  under which the Newton Raphson stops and considers the iteration as having converged. This data is homogeneous to loads/forces. Note that this residual tolerance threshold must be strictly positive.</li> </ul> <p>Two other data fields are availabe:</p> <ul> <li>should_diverge_when_residual_is_growing is an option (bool) stopping the simulation - considered as diverging - as soon as the residual  is growing</li> <li>newton_iterations limits the number of Newton Raphson iterations, as stated above.</li> </ul>"},{"location":"30_Components/40_ODESolver/10_Forward/50_StaticSolver/#usage","title":"Usage","text":"<p>At each simulation step and each Newton Raphson iteration, the StaticSolver requires:</p> <ul> <li>a LinearSolver to solve the linear system</li> <li>and a MechanicalObject to store the state vectors.</li> </ul> <p>A StaticSolver must be used in simulations where the dynamics has no or a negligible effect on the system. A StaticSolver would also be relevant for systems with low mass. In such case, we fall into the quasi-static analysis.</p> <p>In some loading configuration, applying the full forces and torques might not lead to any converging simulation. It is then relevant to go for an incremental loading, i.e. loads are applied incrementally at each simulation step  . This incremental loading has to be done in the associated ForceField. If you want to use this solver with Newton Raphson iterations, it is in the user's hand to make sure the external forces used in the scene (pressure, traction, etc.) only get incremented at each time step, and not at each calls to addForce (which is currently the case for most force fields).</p>"},{"location":"30_Components/40_ODESolver/10_Forward/50_StaticSolver/#example","title":"Example","text":"<p>This component is used as follows in XML format:  </p> <pre><code>&lt;StaticSolver newton_iterations=\"10\" correction_tolerance_threshold=\"1e-4\" residual_tolerance_threshold=\"1e-2\" should_diverge_when_residual_is_growing=\"0\" /&gt;  \n</code></pre> <p>or using SofaPython3:  </p> <pre><code>node.addObject('StaticSolver', newton_iterations='10', correction_tolerance_threshold='1e-4', residual_tolerance_threshold='1e-2', should_diverge_when_residual_is_growing='0')  \n</code></pre> <p>An example scene involving a StaticSolver is available in examples/Component/ODESolver/Backward/StaticSolver.scn</p>"},{"location":"30_Components/40_ODESolver/10_Forward/CentralDifferenceSolver/","title":"CentralDifferenceSolver","text":"<p>Explicit time integrator using central difference (also known as Verlet of Leap-frog)</p> <p>Target: <code>Sofa.Component.ODESolver.Forward</code></p> <p>namespace: <code>sofa::component::odesolver::forward</code></p> <p>parents: </p> <ul> <li><code>OdeSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 rayleighMass  Rayleigh damping coefficient related to mass  0 threadSafeVisitor  If true, do not use realloc and free visitors in fwdInteractionForceField.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/40_ODESolver/10_Forward/DampVelocitySolver/","title":"DampVelocitySolver","text":"<p>Reduce the velocities</p> <p>Target: <code>Sofa.Component.ODESolver.Forward</code></p> <p>namespace: <code>sofa::component::odesolver::forward</code></p> <p>parents: </p> <ul> <li><code>OdeSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 rate  Factor used to reduce the velocities. Typically between 0 and 1.  0.99 threshold  Threshold under which the velocities are canceled.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/40_ODESolver/10_Forward/DampVelocitySolver/#examples","title":"Examples","text":"<p>Component/ODESolver/Forward/DampVelocitySolver.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 0 0\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Forward\"/&gt; &lt;!-- Needed to use components [DampVelocitySolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangleFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"M0\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-10\"/&gt;\n        &lt;DampVelocitySolver rate=\"0.9\" threshold=\"0.01\" printLog=\"0\" name=\"damp\" /&gt;\n        &lt;MechanicalObject position=\"0 0 0  1 0 0  1 1 0  0 1 0\" velocity=\"1 0 0  1 0 0  1 0 0  1 0 0\" /&gt;\n        &lt;UniformMass vertexMass=\"0.1\" /&gt;\n        &lt;MeshTopology triangles=\"0 1 2  0 2 3\" /&gt;\n        &lt;TriangleFEMForceField name=\"FEM0\" youngModulus=\"100\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 0\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Forward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n\n    M0 = root.addChild('M0')\n    M0.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    M0.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-10\")\n    M0.addObject('DampVelocitySolver', rate=\"0.9\", threshold=\"0.01\", printLog=\"0\", name=\"damp\")\n    M0.addObject('MechanicalObject', position=\"0 0 0  1 0 0  1 1 0  0 1 0\", velocity=\"1 0 0  1 0 0  1 0 0  1 0 0\")\n    M0.addObject('UniformMass', vertexMass=\"0.1\")\n    M0.addObject('MeshTopology', triangles=\"0 1 2  0 2 3\")\n    M0.addObject('TriangleFEMForceField', name=\"FEM0\", youngModulus=\"100\", poissonRatio=\"0.3\", method=\"large\")\n\n    Visu = M0.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"red\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/40_ODESolver/10_Forward/RungeKutta2Solver/","title":"RungeKutta2Solver","text":"<p>A popular explicit time integrator</p> <p>Target: <code>Sofa.Component.ODESolver.Forward</code></p> <p>namespace: <code>sofa::component::odesolver::forward</code></p> <p>parents: </p> <ul> <li><code>OdeSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/40_ODESolver/10_Forward/RungeKutta4Solver/","title":"RungeKutta4Solver","text":"<p>A popular explicit time integrator</p> <p>Target: <code>Sofa.Component.ODESolver.Forward</code></p> <p>namespace: <code>sofa::component::odesolver::forward</code></p> <p>parents: </p> <ul> <li><code>OdeSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/40_ODESolver/10_Forward/RungeKutta4Solver/#examples","title":"Examples","text":"<p>Component/ODESolver/Forward/RungeKutta4Solver.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" gravity=\"-1.8 0 100\" dt=\"0.001\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Forward\"/&gt; &lt;!-- Needed to use components [RungeKutta4Solver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"DeformableObject\"&gt;\n        &lt;RungeKutta4Solver name=\"odeExplicitSolver\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 &amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;11 12 13 14 15 16 17 18 19 20 &amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 &amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.45\" method=\"large\" /&gt;\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"m_Visual\" src=\"@meshLoader_0\" color=\"red\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@m_Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"-1.8 0 100\", dt=\"0.001\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Forward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n\n    DeformableObject = root.addChild('DeformableObject')\n    DeformableObject.addObject('RungeKutta4Solver', name=\"odeExplicitSolver\")\n    DeformableObject.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    DeformableObject.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    DeformableObject.addObject('MeshTopology', src=\"@loader\")\n    DeformableObject.addObject('MechanicalObject', src=\"@loader\")\n    DeformableObject.addObject('UniformMass', totalMass=\"15\")\n    DeformableObject.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 \n                        11 12 13 14 15 16 17 18 19 20 \n                        21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \n                        41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    DeformableObject.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.45\", method=\"large\")\n\n    DeformableObject = DeformableObject.addChild('DeformableObject')\n    DeformableObject.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    DeformableObject.addObject('OglModel', name=\"m_Visual\", src=\"@meshLoader_0\", color=\"red\")\n    DeformableObject.addObject('BarycentricMapping', input=\"@..\", output=\"@m_Visual\")\n</code></pre>"},{"location":"30_Components/40_ODESolver/20_Backward/20_EulerImplicitSolver/","title":"EulerImplicitSolver","text":"<p>This component belongs to the category of integration schemes or ODE Solver. This scheme builds the system following an implicit scheme: forces are considered based on the state information at the next time step , unknown at the current time step.</p> <p>Looking at continuum mechanics, the linear system  arises from the dynamic equation. This dynamic is written as follows but other physics (like heat transfer) result in a similar equation:</p> <p></p> <p>where  is the degrees of freedom,  the mass matrix and  a function of  (and possibly its derivatives) acting on our system. In the case of the EulerImplicitSolver, this equation can be written: </p> <p></p> <p>by using a Taylor expansion, we get:</p> <p></p> <p>since we have: , then:</p> <p></p> <p>Finally, gathering the unknown (depending on ) in the left hand side, we have:</p> <p></p> <p>We can notice the appearance of the stiffness matrix : . The stiffness matrix  is a symmetric matrix, can either be linear or non-linear regarding .</p> <p></p> <p>The computation of the right hand side is done by the ForceFields. Just like in the explicit case (see EulerExplicitSolver), the explicit contribution  is implemented in the same function <code>addForce()</code>. The second part  is computed by the function <code>addDForce()</code>.</p> <p>It is important to note that, depending on the choice of LinearSolver (direct or iterative), the API functions called to build the left hand side system matrix  will not be the same:</p> <ul> <li> <p>if a direct solver is used, the mass  is computed in the <code>addMToMatrix()</code> and the stiffness part  is computed in the function <code>addKToMatrix()</code> in ForceFields</p> </li> <li> <p>if an iterative solver is used, the mass is iteratively multiplied by the unknown  within the <code>addMDx()</code>, as the stiffness part  within the function <code>addDForce()</code> in ForceFields.</p> </li> </ul>"},{"location":"30_Components/40_ODESolver/20_Backward/20_EulerImplicitSolver/#considering-viscosity","title":"Considering viscosity","text":"<p>As you might have notice, the Taylor expansion detailed above does not take into account a possible dependency of the force   on the velocity. By considering it, the effect of velocity will result in a viscosity effect through the damping matrix .</p> <p>Let's apply the Taylor expansion taking into account the velocity and we get:</p> <p></p> <p></p> <p></p> <p>Depending on the choice of LinearSolver (direct or iterative), the API functions called to build the  damping matrix on the left hand side will not be the same:</p> <ul> <li> <p>if a direct solver is used, the damping matrix  is computed in the <code>addBToMatrix()</code> in ForceFields</p> </li> <li> <p>if an iterative solver is used, the damping is iteratively multiplied by the unknown  within the <code>addDForce()</code> just as the stiffness part in the function <code>addDForce()</code> in ForceFields.</p> </li> </ul>"},{"location":"30_Components/40_ODESolver/20_Backward/20_EulerImplicitSolver/#dissipation","title":"Dissipation","text":"<p>SOFA is a framework aiming at interactive simulations. For this purpose, dissipative schemes are very appropriate. The Euler scheme is an order 1 integration scheme (in time, since only using the current state  and no older one like ). It is known to be a dissipative scheme. Moreover, only one Newton step is performed in the EulerImplicit, which might harm the energy conservation.</p> <p>Activating the trapezoidalScheme option of the Euler implicit scheme will make the scheme less dissipative. This is due to the fact that the trapezoidal rule increases the order of the time integration. Moreover, higher order schemes are known to be less dissipative.</p>"},{"location":"30_Components/40_ODESolver/20_Backward/20_EulerImplicitSolver/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"30_Components/40_ODESolver/20_Backward/20_EulerImplicitSolver/#data","title":"Data","text":"<p>The data trapezoidalScheme modifies the EulerImplicitSolver scheme and implements the trapezoidal rule:</p> <p></p> <p>This results in the following linear system:</p> <p></p> <p>The use of the trapezoidal rule is known to increase robustness and stability to the time integration due to the order 2 in time of this trapezoidal scheme.</p> <p>The option is given to the user to add numerical Rayleigh damping using the data rayleighStiffness and rayleighMass. The description of the meaning and effect of these Rayleigh damping coefficients is given in ODESolver.</p> <p>The data firstOrder enables to use the EulerImplicitSolver at the order 1, which means that only the first derivative of the DOFs (state) x appears in the equation. Higher derivatives are absent. This option is for instance well suited for heat diffusion equation using only the first derivative of the temperature field:</p> <p>.</p>"},{"location":"30_Components/40_ODESolver/20_Backward/20_EulerImplicitSolver/#usage","title":"Usage","text":"<p>The EulerImplicitSolver requires:</p> <ul> <li>a LinearSolver to solve the linear system</li> <li>and a MechanicalObject to store the state vectors.</li> </ul>"},{"location":"30_Components/40_ODESolver/20_Backward/20_EulerImplicitSolver/#example","title":"Example","text":"<p>This component is used as follows in XML format:  </p> <pre><code>&lt;EulerImplicitSolver name=\"ODEsolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n</code></pre> <p>or using SofaPython3:  </p> <pre><code>node.addObject('EulerImplicitSolver', name='ODEsolver', rayleighStiffness='0.1' rayleighMass='0.1')  \n</code></pre> <p>An example scene involving a StaticSolver is available in examples/Component/ODESolver/Backward/EulerImplicitSolver.scn</p> <p>Target: <code>Sofa.Component.ODESolver.Backward</code></p> <p>namespace: <code>sofa::component::odesolver::backward</code></p> <p>parents: </p> <ul> <li><code>OdeSolver</code></li> <li><code>LinearSolverAccessor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 rayleighStiffness  Rayleigh damping coefficient related to stiffness, &gt; 0  0 rayleighMass  Rayleigh damping coefficient related to mass, &gt; 0  0 vdamping  Velocity decay coefficient (no decay if null)  0 firstOrder  Use backward Euler scheme for first order ode system.  0 trapezoidalScheme  Optional: use the trapezoidal scheme instead of the implicit Euler scheme and get second order accuracy in time  0 solveConstraint  Apply ConstraintSolver (requires a ConstraintSolver in the same node as this solver, disabled by by default for now)  0 threadSafeVisitor  If true, do not use realloc and free visitors in fwdInteractionForceField.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSolver Linear solver used by this component"},{"location":"30_Components/40_ODESolver/20_Backward/20_EulerImplicitSolver/#examples","title":"Examples","text":"<p>Component/ODESolver/Backward/EulerImplicitSolver-comparison.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" gravity=\"-1.8 0 100\" dt=\"0.1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Reference\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/truthcylinder1-bent.obj\" scale=\"0.95\" handleSeams=\"1\" /&gt;\n        &lt;OglModel src=\"@meshLoader_3\" dx=\"0\" dy=\"-1\" dz=\"0\" color=\"green\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Springs\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"15\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;MeshSpringForceField name=\"Spring\" tetrasStiffness=\"1870\" tetrasDamping=\"0\" /&gt;\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"yellow\" dx=\"15\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"CoFEM\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"30\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.49\" method=\"polar\" /&gt;\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_4\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_4\" color=\"cyan\" dx=\"30\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"CoFEM_firstOrder\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" firstOrder=\"1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"45\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.49\" method=\"polar\" /&gt;\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"blue\" dx=\"45\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"LinearFEM\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"60\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.49\" method=\"small\" /&gt;\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"red\" dx=\"60\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"-1.8 0 100\", dt=\"0.1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n\n    Reference = root.addChild('Reference')\n    Reference.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/truthcylinder1-bent.obj\", scale=\"0.95\", handleSeams=\"1\")\n    Reference.addObject('OglModel', src=\"@meshLoader_3\", dx=\"0\", dy=\"-1\", dz=\"0\", color=\"green\")\n\n    Springs = root.addChild('Springs')\n    Springs.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Springs.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Springs.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    Springs.addObject('MeshTopology', src=\"@loader\")\n    Springs.addObject('MechanicalObject', src=\"@loader\", dx=\"15\")\n    Springs.addObject('UniformMass', totalMass=\"15\")\n    Springs.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    Springs.addObject('MeshSpringForceField', name=\"Spring\", tetrasStiffness=\"1870\", tetrasDamping=\"0\")\n\n    Springs = Springs.addChild('Springs')\n    Springs.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    Springs.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"yellow\", dx=\"15\")\n    Springs.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    CoFEM = root.addChild('CoFEM')\n    CoFEM.addObject('EulerImplicitSolver', name=\"cg_odesolver\")\n    CoFEM.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    CoFEM.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    CoFEM.addObject('MeshTopology', src=\"@loader\")\n    CoFEM.addObject('MechanicalObject', src=\"@loader\", dx=\"30\")\n    CoFEM.addObject('UniformMass', totalMass=\"15\")\n    CoFEM.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    CoFEM.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.49\", method=\"polar\")\n\n    CoFEM = CoFEM.addChild('CoFEM')\n    CoFEM.addObject('MeshOBJLoader', name=\"meshLoader_4\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    CoFEM.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_4\", color=\"cyan\", dx=\"30\")\n    CoFEM.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    CoFEM_firstOrder = root.addChild('CoFEM_firstOrder')\n    CoFEM_firstOrder.addObject('EulerImplicitSolver', name=\"cg_odesolver\", firstOrder=\"1\")\n    CoFEM_firstOrder.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    CoFEM_firstOrder.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    CoFEM_firstOrder.addObject('MeshTopology', src=\"@loader\")\n    CoFEM_firstOrder.addObject('MechanicalObject', src=\"@loader\", dx=\"45\")\n    CoFEM_firstOrder.addObject('UniformMass', totalMass=\"15\")\n    CoFEM_firstOrder.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    CoFEM_firstOrder.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.49\", method=\"polar\")\n\n    CoFEM_firstOrder = CoFEM_firstOrder.addChild('CoFEM_firstOrder')\n    CoFEM_firstOrder.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    CoFEM_firstOrder.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"blue\", dx=\"45\")\n    CoFEM_firstOrder.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    LinearFEM = root.addChild('LinearFEM')\n    LinearFEM.addObject('EulerImplicitSolver', name=\"cg_odesolver\")\n    LinearFEM.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    LinearFEM.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    LinearFEM.addObject('MeshTopology', src=\"@loader\")\n    LinearFEM.addObject('MechanicalObject', src=\"@loader\", dx=\"60\")\n    LinearFEM.addObject('UniformMass', totalMass=\"15\")\n    LinearFEM.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    LinearFEM.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.49\", method=\"small\")\n\n    LinearFEM = LinearFEM.addChild('LinearFEM')\n    LinearFEM.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    LinearFEM.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"red\", dx=\"60\")\n    LinearFEM.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n</code></pre> <p>Component/ODESolver/Backward/EulerImplicitSolver.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"-1.8 0 100\" dt=\"0.0001\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"DeformableObject\"&gt;\n\n        &lt;EulerImplicitSolver name=\"odeImplicitSolver\" /&gt;\n        &lt;CGLinearSolver iterations=\"1000\" tolerance=\"1e-9\" threshold=\"1e-9\"/&gt;\n\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\" /&gt;\n        &lt;TetrahedronSetTopologyContainer src=\"@loader\" name=\"topologyContainer\"/&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"geomAlgo\"/&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"60\" /&gt;\n        &lt;MeshMatrixMass totalMass=\"15\" topology=\"@topologyContainer\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 &amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;11 12 13 14 15 16 17 18 19 20 &amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 &amp;#x0A;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;&amp;#x09;41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.49\" method=\"small\" /&gt;\n\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"red\" dx=\"60\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"-1.8 0 100\", dt=\"0.0001\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n\n    DeformableObject = root.addChild('DeformableObject')\n    DeformableObject.addObject('EulerImplicitSolver', name=\"odeImplicitSolver\")\n    DeformableObject.addObject('CGLinearSolver', iterations=\"1000\", tolerance=\"1e-9\", threshold=\"1e-9\")\n    DeformableObject.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    DeformableObject.addObject('TetrahedronSetTopologyContainer', src=\"@loader\", name=\"topologyContainer\")\n    DeformableObject.addObject('TetrahedronSetGeometryAlgorithms', name=\"geomAlgo\")\n    DeformableObject.addObject('MechanicalObject', src=\"@loader\", dx=\"60\")\n    DeformableObject.addObject('MeshMatrixMass', totalMass=\"15\", topology=\"@topologyContainer\")\n    DeformableObject.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 \n                        11 12 13 14 15 16 17 18 19 20 \n                        21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 \n                        41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    DeformableObject.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.49\", method=\"small\")\n\n    DeformableObject = DeformableObject.addChild('DeformableObject')\n    DeformableObject.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    DeformableObject.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"red\", dx=\"60\")\n    DeformableObject.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/40_ODESolver/20_Backward/60_NewmarkImplicitSolver/","title":"NewmarkImplicitSolver","text":"<p>This component belongs to the category of integration schemes or ODE Solver.  </p> <p>This scheme is an implicit time integrator for dynamic system using the Newmark scheme. To compute the new position or new velocity, the NewmarkImplicitSolver is based on the following equations:</p> <p></p> <p></p> <p>Applied to a mechanical system where , we need to solve the following system:</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"30_Components/40_ODESolver/20_Backward/60_NewmarkImplicitSolver/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"30_Components/40_ODESolver/20_Backward/60_NewmarkImplicitSolver/#data","title":"Data","text":"<p>The solver is ruled by several breaking (converging or diverging) conditions:  </p> <ul> <li>gamma is the Newmark scheme gamma coefficient</li> <li>beta is the Newmark scheme beta coefficient</li> </ul>"},{"location":"30_Components/40_ODESolver/20_Backward/60_NewmarkImplicitSolver/#usage","title":"Usage","text":"<p>At each simulation step and each Newton Raphson iteration, the NewmarkImplicitSolver requires:</p> <ul> <li>a LinearSolver to solve the linear system</li> <li>and a MechanicalObject to store the state vectors.</li> </ul>"},{"location":"30_Components/40_ODESolver/20_Backward/60_NewmarkImplicitSolver/#example","title":"Example","text":"<p>This component is used as follows in XML format:  </p> <pre><code>&lt;NewmarkImplicitSolver rayleighMass=\"0.01\" rayleighStiffness=\"0.01\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('NewmarkImplicitSolver', rayleighMass='0.01', rayleighStiffness='0.01')  \n</code></pre> <p>An example scene involving a NewmarkImplicitSolver is available in examples/Component/ODESolver/Backward/NewmarkImplicitSolver.scn</p> <p>Target: <code>Sofa.Component.ODESolver.Backward</code></p> <p>namespace: <code>sofa::component::odesolver::backward</code></p> <p>parents: </p> <ul> <li><code>OdeSolver</code></li> <li><code>LinearSolverAccessor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 rayleighStiffness  Rayleigh damping coefficient related to stiffness  0 rayleighMass  Rayleigh damping coefficient related to mass  0 vdamping  Velocity decay coefficient (no decay if null)  0 gamma  Newmark scheme gamma coefficient  0.5 beta  Newmark scheme beta coefficient  0.25 threadSafeVisitor  If true, do not use realloc and free visitors in fwdInteractionForceField.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSolver Linear solver used by this component"},{"location":"30_Components/40_ODESolver/20_Backward/60_NewmarkImplicitSolver/#examples","title":"Examples","text":"<p>Component/ODESolver/Backward/NewmarkImplicitSolver.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"-1.8 0 100\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [SparseLDLSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [NewmarkImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Reference\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/truthcylinder1-bent.obj\" scale=\"0.95\" handleSeams=\"1\" /&gt;\n        &lt;OglModel src=\"@meshLoader_0\" dx=\"0\" dy=\"-1\" dz=\"0\" color=\"green\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Springs\"&gt;\n        &lt;NewmarkImplicitSolver rayleighMass=\"0\" rayleighStiffness=\"0.1\" /&gt;\n        &lt;SparseLDLSolver/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"15\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;MeshSpringForceField name=\"Spring\" tetrasStiffness=\"1870\" tetrasDamping=\"0\" /&gt;\n\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"yellow\" dx=\"15\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"CoFEM\"&gt;\n        &lt;NewmarkImplicitSolver rayleighMass=\"0\" rayleighStiffness=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\"/&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"30\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.49\" method=\"polar\" /&gt;\n\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"cyan\" dx=\"30\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"LinearFEM\"&gt;\n        &lt;NewmarkImplicitSolver rayleighMass=\"0\" rayleighStiffness=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\"/&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"45\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.49\" method=\"small\" /&gt;\n\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"red\" dx=\"45\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"-1.8 0 100\", dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n\n    Reference = root.addChild('Reference')\n    Reference.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/truthcylinder1-bent.obj\", scale=\"0.95\", handleSeams=\"1\")\n    Reference.addObject('OglModel', src=\"@meshLoader_0\", dx=\"0\", dy=\"-1\", dz=\"0\", color=\"green\")\n\n    Springs = root.addChild('Springs')\n    Springs.addObject('NewmarkImplicitSolver', rayleighMass=\"0\", rayleighStiffness=\"0.1\")\n    Springs.addObject('SparseLDLSolver')\n    Springs.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    Springs.addObject('MeshTopology', src=\"@loader\")\n    Springs.addObject('MechanicalObject', src=\"@loader\", dx=\"15\")\n    Springs.addObject('UniformMass', totalMass=\"15\")\n    Springs.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    Springs.addObject('MeshSpringForceField', name=\"Spring\", tetrasStiffness=\"1870\", tetrasDamping=\"0\")\n\n    Springs = Springs.addChild('Springs')\n    Springs.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    Springs.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"yellow\", dx=\"15\")\n    Springs.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    CoFEM = root.addChild('CoFEM')\n    CoFEM.addObject('NewmarkImplicitSolver', rayleighMass=\"0\", rayleighStiffness=\"0.1\")\n    CoFEM.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    CoFEM.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    CoFEM.addObject('MeshTopology', src=\"@loader\")\n    CoFEM.addObject('MechanicalObject', src=\"@loader\", dx=\"30\")\n    CoFEM.addObject('UniformMass', totalMass=\"15\")\n    CoFEM.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    CoFEM.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.49\", method=\"polar\")\n\n    CoFEM = CoFEM.addChild('CoFEM')\n    CoFEM.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    CoFEM.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"cyan\", dx=\"30\")\n    CoFEM.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    LinearFEM = root.addChild('LinearFEM')\n    LinearFEM.addObject('NewmarkImplicitSolver', rayleighMass=\"0\", rayleighStiffness=\"0.1\")\n    LinearFEM.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    LinearFEM.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    LinearFEM.addObject('MeshTopology', src=\"@loader\")\n    LinearFEM.addObject('MechanicalObject', src=\"@loader\", dx=\"45\")\n    LinearFEM.addObject('UniformMass', totalMass=\"15\")\n    LinearFEM.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    LinearFEM.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.49\", method=\"small\")\n\n    LinearFEM = LinearFEM.addChild('LinearFEM')\n    LinearFEM.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    LinearFEM.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"red\", dx=\"45\")\n    LinearFEM.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/40_ODESolver/20_Backward/StaticSolver/","title":"StaticSolver","text":"<p>Static ODE Solver</p> <p>Target: <code>Sofa.Component.ODESolver.Backward</code></p> <p>namespace: <code>sofa::component::odesolver::backward</code></p> <p>parents: </p> <ul> <li><code>OdeSolver</code></li> <li><code>LinearSolverAccessor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 newton_iterations  Number of newton iterations between each load increments (normally, one load increment per simulation time-step.  1 absolute_correction_tolerance_threshold  Convergence criterion: The newton iterations will stop when the norm |du| is smaller than this threshold.  1e-05 relative_correction_tolerance_threshold  Convergence criterion: The newton iterations will stop when the ratio |du| / |U| is smaller than this threshold.  1e-05 absolute_residual_tolerance_threshold  Convergence criterion: The newton iterations will stop when the norm |R| is smaller than this threshold. Use a negative value to disable this criterion.  1e-05 relative_residual_tolerance_threshold  Convergence criterion: The newton iterations will stop when the ratio |R|/|R0| is smaller than this threshold. Use a negative value to disable this criterion.  1e-05 should_diverge_when_residual_is_growing  Divergence criterion: The newton iterations will stop when the residual is greater than the one from the previous iteration.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSolver Linear solver used by this component"},{"location":"30_Components/40_ODESolver/20_Backward/StaticSolver/#examples","title":"Examples","text":"<p>Component/ODESolver/Backward/StaticSolver.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"-1.8 0 100\"  dt=\"1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [StaticSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;VisualStyle displayFlags=\"hideBehaviorModels hideCollisionModels hideMappings hideForceFields\" /&gt;\n    &lt;Node name=\"Reference\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/truthcylinder1-bent.obj\" scale=\"0.95\" handleSeams=\"1\" /&gt;\n        &lt;OglModel src=\"@meshLoader_1\" dx=\"0\" dy=\"-1\" dz=\"0\" color=\"green\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"Springs\"&gt;\n\n        &lt;StaticSolver  /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"15\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;MeshSpringForceField name=\"Spring\" tetrasStiffness=\"1870\" tetrasDamping=\"0\" /&gt;\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"yellow\" dx=\"15\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"CoFEM\"&gt;\n        &lt;StaticSolver  /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\"/&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"30\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.49\" method=\"polar\" /&gt;\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"cyan\" dx=\"30\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"LinearFEM\"&gt;\n        &lt;StaticSolver  /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/truthcylinder1.msh\"/&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" dx=\"45\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.49\" method=\"small\" /&gt;\n        &lt;Node&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/truthcylinder1.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"red\" dx=\"45\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"-1.8 0 100\", dt=\"1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"hideBehaviorModels hideCollisionModels hideMappings hideForceFields\")\n\n    Reference = root.addChild('Reference')\n    Reference.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/truthcylinder1-bent.obj\", scale=\"0.95\", handleSeams=\"1\")\n    Reference.addObject('OglModel', src=\"@meshLoader_1\", dx=\"0\", dy=\"-1\", dz=\"0\", color=\"green\")\n\n    Springs = root.addChild('Springs')\n    Springs.addObject('StaticSolver')\n    Springs.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    Springs.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    Springs.addObject('MeshTopology', src=\"@loader\")\n    Springs.addObject('MechanicalObject', src=\"@loader\", dx=\"15\")\n    Springs.addObject('UniformMass', totalMass=\"15\")\n    Springs.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    Springs.addObject('MeshSpringForceField', name=\"Spring\", tetrasStiffness=\"1870\", tetrasDamping=\"0\")\n\n    Springs = Springs.addChild('Springs')\n    Springs.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    Springs.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"yellow\", dx=\"15\")\n    Springs.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    CoFEM = root.addChild('CoFEM')\n    CoFEM.addObject('StaticSolver')\n    CoFEM.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    CoFEM.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    CoFEM.addObject('MeshTopology', src=\"@loader\")\n    CoFEM.addObject('MechanicalObject', src=\"@loader\", dx=\"30\")\n    CoFEM.addObject('UniformMass', totalMass=\"15\")\n    CoFEM.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    CoFEM.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.49\", method=\"polar\")\n\n    CoFEM = CoFEM.addChild('CoFEM')\n    CoFEM.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    CoFEM.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"cyan\", dx=\"30\")\n    CoFEM.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    LinearFEM = root.addChild('LinearFEM')\n    LinearFEM.addObject('StaticSolver')\n    LinearFEM.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    LinearFEM.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/truthcylinder1.msh\")\n    LinearFEM.addObject('MeshTopology', src=\"@loader\")\n    LinearFEM.addObject('MechanicalObject', src=\"@loader\", dx=\"45\")\n    LinearFEM.addObject('UniformMass', totalMass=\"15\")\n    LinearFEM.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 268 269 270 271 343 345\")\n    LinearFEM.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.49\", method=\"small\")\n\n    LinearFEM = LinearFEM.addChild('LinearFEM')\n    LinearFEM.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/truthcylinder1.obj\", handleSeams=\"1\")\n    LinearFEM.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"red\", dx=\"45\")\n    LinearFEM.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/40_ODESolver/20_Backward/VariationalSymplecticSolver/","title":"VariationalSymplecticSolver","text":"<p>Implicit time integrator which conserves linear momentum and mechanical energy</p> <p>Target: <code>Sofa.Component.ODESolver.Backward</code></p> <p>namespace: <code>sofa::component::odesolver::backward</code></p> <p>parents: </p> <ul> <li><code>OdeSolver</code></li> <li><code>LinearSolverAccessor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 newtonError  Error tolerance for Newton iterations  0.01 steps  Maximum number of Newton steps  5 rayleighStiffness  Rayleigh damping coefficient related to stiffness, &gt; 0  0 rayleighMass  Rayleigh damping coefficient related to mass, &gt; 0  0 saveEnergyInFile  If kinetic and potential energies should be dumped in a CSV file at each iteration  0 explicitIntegration  Use explicit integration scheme  0 file  File name where kinetic and potential energies are saved in a CSV file  computeHamiltonian  Compute hamiltonian  1 hamiltonianEnergy  hamiltonian energy  0 useIncrementalPotentialEnergy  use real potential energy, if false use approximate potential energy  1 threadSafeVisitor  If true, do not use realloc and free visitors in fwdInteractionForceField.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSolver Linear solver used by this component"},{"location":"30_Components/40_ODESolver/20_Backward/VariationalSymplecticSolver/#examples","title":"Examples","text":"<p>Component/ODESolver/Backward/VariationalSymplecticSolver.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [VariationalSymplecticSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;Node name=\"Single\"&gt;\n    &lt;VariationalSymplecticSolver name=\"default0\"  tags=\"meca\" rayleighStiffness=\"0\" rayleighMass=\"0\" newtonError=\"1e-12\" steps=\"4\" file=\"energy.txt\" saveEnergyInFile =\"true\"/&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"cGLinearSolver1\" iterations=\"300\"  tolerance=\"1e-09\"  threshold=\"1e-9\"/&gt;\n        &lt;Node name=\"M1\"&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;UniformMass vertexMass=\"1\" /&gt;\n            &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"28\" xmin=\"-9\" xmax=\"-6\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"27\" /&gt;\n            &lt;BoxConstraint box=\"-9.1 -0.1 -0.1 -5.9 3.1 0.1\" /&gt;\n            &lt;!--&lt;BoxConstraint box=\"-9.1 -0.1 26.9 -5.9 3.1 27.1\" /&gt;--&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"100000\" poissonRatio=\"0.3\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n\n    Single = root.addChild('Single')\n    Single.addObject('VariationalSymplecticSolver', name=\"default0\", tags=\"meca\", rayleighStiffness=\"0\", rayleighMass=\"0\", newtonError=\"1e-12\", steps=\"4\", file=\"energy.txt\", saveEnergyInFile=\"true\")\n    Single.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"cGLinearSolver1\", iterations=\"300\", tolerance=\"1e-09\", threshold=\"1e-9\")\n\n    M1 = Single.addChild('M1')\n    M1.addObject('MechanicalObject')\n    M1.addObject('UniformMass', vertexMass=\"1\")\n    M1.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"28\", xmin=\"-9\", xmax=\"-6\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"27\")\n    M1.addObject('BoxConstraint', box=\"-9.1 -0.1 -0.1 -5.9 3.1 0.1\")\n    M1.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"100000\", poissonRatio=\"0.3\")\n</code></pre>"},{"location":"30_Components/45_LinearSolver/10_Iterative/10_CGLinearSolver/","title":"CGLinearSolver","text":"<p>This component belongs to the category of LinearSolver. The role of the CGLinearSolver is to solve the linear system  without any a priori on this system.</p> <p>In SOFA, the CGLinearSolver follows the well-known conjugate gradient method, which consists in iteratively solving  where r is known as the residual. This residual will be used to compute mutually conjugate vectors p (see the sequence diagram below) which will be used as a basis to find a new approximated solution .</p> <p>Note: the CGLinearSolver in SOFA assumes that the right hand side (RHS) vector b is already computed. The computation of b is usually called in the integration scheme through the function <code>computeForce()</code>.</p>"},{"location":"30_Components/45_LinearSolver/10_Iterative/10_CGLinearSolver/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"30_Components/45_LinearSolver/10_Iterative/10_CGLinearSolver/#data","title":"Data","text":"<p>This LinearSolver is ruled by several breaking conditions:  </p> <ul> <li>iterations: specified the maximum number of iterations after which the iterative descent of the CGLinearSolver must stop</li> <li>tolerance: defines the desired accuracy of the Conjugate Gradient solution (ratio of current residual norm over initial residual norm)\"</li> <li>threshold: defines the minimum value of the denominator in the conjugate Gradient solution</li> <li>warmStart: this option allows to use the previous solution as initial solution, which improves the initial guess if your system is evolving smoothly</li> </ul>"},{"location":"30_Components/45_LinearSolver/10_Iterative/10_CGLinearSolver/#usage","title":"Usage","text":"<p>The CGLinearSolver requires the use (above in the scene graph) of an integration scheme, and (below in the scene graph) of a MechanicalObject storing the state information that the CGLinearSolver will access.</p> <p>When using a CGLinearSolver, make sure you carefully chose the value of the free data field iterations, tolerance and threshold. Both tolerance and threshold data must be chosen in accordance with the dimension of the degrees of freedom (DOFs). Usually, the value of these two data is close to the square of the expected error on the DOFs.</p> <p>Remember that when using an iterative linear solver like the CGLinearSolver, no exact solution can be found. The accuracy of your solution will always depend on the conditioning of your system and your input data (iterations, tolerance and threshold).</p>"},{"location":"30_Components/45_LinearSolver/10_Iterative/10_CGLinearSolver/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('CGLinearSolver', iterations='100', tolerance='1e-5', threshold='1e-5')\n</code></pre> <p>A lot of scene examples are available in SOFA involving a CGLinearSolver. One is available in examples/Demos/liver.scn</p> <p>Target: <code>Sofa.Component.LinearSolver.Iterative</code></p> <p>namespace: <code>sofa::component::linearsolver::iterative</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 iterations  Maximum number of iterations of the Conjugate Gradient solution  25 tolerance  Desired accuracy of the Conjugate Gradient solution evaluating: |r|\u00b2/|b|\u00b2 (ratio of current residual norm over initial residual norm)  1e-05 threshold  Minimum value of the denominator (pT A p)^ in the conjugate Gradient solution  1e-05 warmStart  Use previous solution as initial solution  0 graph  Graph of residuals at each iteration  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve"},{"location":"30_Components/45_LinearSolver/10_Iterative/10_CGLinearSolver/#examples","title":"Examples","text":"<p>Component/LinearSolver/Iterative/CGLinearSolver.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 -10 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node&gt;\n        &lt;EulerImplicitSolver name=\"eulerimplicit_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-20\" threshold=\"1e-20\" warmStart=\"1\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"1\" /&gt;\n        &lt;RegularGridTopology nx=\"4\" ny=\"4\" nz=\"4\" xmin=\"-9\" xmax=\"-6\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"3\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\" /&gt;\n        &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"4000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 -10 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n\n    root = root.addChild('root')\n    root.addObject('EulerImplicitSolver', name=\"eulerimplicit_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-20\", threshold=\"1e-20\", warmStart=\"1\")\n    root.addObject('MechanicalObject')\n    root.addObject('UniformMass', vertexMass=\"1\")\n    root.addObject('RegularGridTopology', nx=\"4\", ny=\"4\", nz=\"4\", xmin=\"-9\", xmax=\"-6\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"3\")\n    root.addObject('FixedProjectiveConstraint', indices=\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\")\n    root.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"4000\", poissonRatio=\"0.3\", method=\"large\")\n</code></pre>"},{"location":"30_Components/45_LinearSolver/10_Iterative/80_Preconditioned_CG/","title":"ShewchukPCGLinearSolver","text":"<p>This component belongs to the category of LinearSolver, it therefore aims at solving the linear system . The ShewchukPCGLinearSolver is an iterative solver using the conjugate gradient method as implemented in the CGLinearSolver in SOFA but it adds the possibility to define a preconditioner. It must be reminded that the ShewchukPCGLinearSolver relies on the conjugate gradient method, meaning that as all iterative approaches, no exact solution can be found. The accuracy of your solution will always depend on the conditioning of your system and your input data (iterations, tolerance and threshold).</p> <p>Preconditioners are used in cases where the convergence of the system is slow, which is usually due to a ill-conditioned system (high condition number). In order to preserve accuracy, while improving performance, preconditioning methods aims at projecting a matrix  (preconditioner) on the linear system , in order to get closer to the solution. The efficiency of the preconditioner will depend on the choice of the preconditioner .</p> <p>The ShewchukPCGLinearSolver allows to choose the preconditioner of our choice based on an external direct linear solver: LULinearSolver, SparseLDLSolver, etc. These solvers will allow to compute  and use it to compute at each iteration k of the conjugate gradient:</p> <p></p> <p>Using an appropriate preconditioner  of a matrix  means that  has a smaller condition number than .</p>"},{"location":"30_Components/45_LinearSolver/10_Iterative/80_Preconditioned_CG/#data","title":"Data","text":"<p>This LinearSolver is ruled by several breaking conditions:  </p> <ul> <li>iterations: specified the maximum number of iterations after which the iterative descent of the conjugate gradient must stop</li> <li>tolerance: defines the desired accuracy of the Conjugate Gradient solution (ratio of current residual norm over initial residual norm)\"</li> <li>preconditioners: name of the linear solvers to be used as preconditioner</li> <li>update_step: number of steps before the next refresh of precondtioners</li> <li>build_precond: if false build the preconditioner only at the initial step, else building the preconditioner every update_step</li> </ul>"},{"location":"30_Components/45_LinearSolver/10_Iterative/80_Preconditioned_CG/#usage","title":"Usage","text":"<p>The ShewchukPCGLinearSolver requires:</p> <ul> <li>the use (above in the scene graph) of an integration scheme</li> <li>(below in the scene graph) of a MechanicalObject storing the state information that the ShewchukPCGLinearSolver will access</li> <li>and, if a preconditioning is desired, a linear solver to compute the </li> </ul> <p>As for the CGLinearSolver, when using a ShewchukPCGLinearSolver, make sure you carefully chose the value of the free data field iterations, tolerance and threshold. Both tolerance and threshold data must be chosen in accordance with the dimension of the degrees of freedom (DOFs). Usually, the value of these two data is close to the square of the expected error on the DOFs.</p>"},{"location":"30_Components/45_LinearSolver/10_Iterative/80_Preconditioned_CG/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;ShewchukPCGLinearSolver iterations=\"1000\" tolerance=\"1e-9\" preconditioners=\"LUSolver\" build_precond=\"1\" update_step=\"1000\"/&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('ShewchukPCGLinearSolver', iterations='1000', tolerance='1e-9', preconditioners='LUSolver'. build_precond='1', update_step='1000')\n</code></pre> <p>An example scene involving a ShewchukPCGLinearSolver without preconditioner is available in examples/Component/LinearSolver/Iterative/FEMBAR_ShewchukPCGLinearSolver.scn. The example files in examples/Component/LinearSolver/Preconditioner show how to use ShewchukPCGLinearSolver with different preconditioners.</p>"},{"location":"30_Components/45_LinearSolver/10_Iterative/MatrixFreeSystem/","title":"MatrixFreeSystem","text":"<p>Matrix-free linear system</p> <p>Templates:</p> <ul> <li><code>GraphScattered</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Iterative</code></p> <p>namespace: <code>sofa::component::linearsystem</code></p> <p>parents: </p> <ul> <li><code>TypedMatrixLinearSystem</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 matrixSize  Size of the global matrix  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/45_LinearSolver/10_Iterative/MinResLinearSolver/","title":"MinResLinearSolver","text":"<p>Linear system solver using the MINRES iterative algorithm</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixMat2x2d</code></li> <li><code>CompressedRowSparseMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixMat4x4d</code></li> <li><code>CompressedRowSparseMatrixMat6x6d</code></li> <li><code>CompressedRowSparseMatrixMat8x8d</code></li> <li><code>CompressedRowSparseMatrixd</code></li> <li><code>FullMatrix</code></li> <li><code>GraphScattered</code></li> <li><code>SparseMatrix</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Iterative</code></p> <p>namespace: <code>sofa::component::linearsolver::iterative</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 iterations  maximum number of iterations of the Conjugate Gradient solution  25 tolerance  desired precision of the Conjugate Gradient Solution (ratio of current residual norm over initial residual norm)  1e-05 graph  Graph of residuals at each iteration  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve"},{"location":"30_Components/45_LinearSolver/10_Iterative/ShewchukPCGLinearSolver/","title":"ShewchukPCGLinearSolver","text":"<p>Linear system solver using the conjugate gradient iterative algorithm</p> <p>Templates:</p> <ul> <li><code>GraphScattered</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Iterative</code></p> <p>namespace: <code>sofa::component::linearsolver::iterative</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 iterations  maximum number of iterations of the Conjugate Gradient solution  25 tolerance  desired precision of the Conjugate Gradient Solution (ratio of current residual norm over initial residual norm)  1e-05 use_precond  Use preconditioner  1 update_step  Number of steps before the next refresh of precondtioners  1 build_precond  Build the preconditioners, if false build the preconditioner only at the initial step  1 graph  Graph of residuals at each iteration  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve preconditioner Link towards the linear solver used to precondition the conjugate gradient"},{"location":"30_Components/45_LinearSolver/20_Direct/40_SparseCholeskySolver/","title":"SparseCholeskySolver","text":"<p>This component belongs to the category of LinearSolver. The role of the SparseLUSolver is to solve the linear system  assuming that the matrix  is symmetric and sparse.</p> <p>The Cholesky decomposition (https://en.wikipedia.org/wiki/Cholesky_decomposition) is a numerical method that solves a linear system  by factorizing the matrix of the system as . By doing so, we only need to solve two triangular systems to compute the solution. It is only applyable on symetric matrices but is roughtly twice as efficient as the LU solver. The  decomposition is heavily related to the Cholesky decomposition.</p>   Sequence diagram ----------------    The SparseCholeskySolver **requires** the use (above in the scene graph) of an integration scheme, and (below in the scene graph) of a MechanicalObject storing the state information that the SparseCholeskySolver will access.   Data   ---- There is one data that change the behaviour of the solver, **permutation**, that allows three choices : **-None**, no permutation, nor on the rows nor on the columns, is applied **-SuiteSparse**, use the SuiteSparse library as intended for a symmetric matrix and apply a fill reducing permutation on both the columns and the rows (those two permutations are the inverse of each other), **-METIS**, use the METIS library to compute a fill reducing permutation and apply it on both the lines and the columns.  It is not currently possible to change the type of permutation applied during a simulation.  Applying a fill reducing permutation aims at minimizing the number of non-null values in the decomposition, which would reduce the time spent on solving the triangular systems.  As the impact of the use of fill reducing permutations on the performances is highly influenced by the repartition of the nodes used to model an object, we advise the users to test which type of permutation is the best suited for their simulations.   Example -------  This component is used as follows in XML format:  <pre><code>&lt;SparseCholeskySolver  /&gt;\n</code></pre>  or using SofaPython3:  <pre><code>node.addObject('SparseCholeskySolver')\n</code></pre>  An example scene involving a SparseCholzskySolver is available in [*applications/plugins/CSparseSolvers/examples/FEMBAR_SparseCholeskySolver.scn*](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/CSparseSolvers/examples/FEMBAR_SparseCholeskySolver.scn)"},{"location":"30_Components/45_LinearSolver/20_Direct/50_SparseLDLSolver/","title":"SparseLDLSolver","text":"<p>This component belongs to the category of LinearSolver. The role of the SparseLDLSolver is to solve the linear system  assuming that the matrix  is symmetric and sparse.</p> <p>To do so, the SparseLDLSolver relies on the method of LDL decomposition. The system matrix will be decomposed , where  is a lower triangular matrix  and  is a diagonal matrix. This decomposition is an extension of the Cholesky decomposition which reduces its numerical inaccuracy.</p> <p>As a direct solver, the SparseLDLSolver computes at each simulation time step an exact solution as follows:</p> <p></p> <p>Using a block forward substitution, we successively solve two triangular systems. Between those two resolutions, we need to inverse , which is trivial as it is a diagonal matrix that has no null value on its diagonal.</p>  It is important to note that this decomposition considers that the system matrix  is symmetric.     Sequence diagram ----------------       Data   ----  There are two boolean Data to change the behavior of this solver:  - **useSymbolicDecomposition**: by default useSymbolicDecomposition is set to true. The solver will use a symbolic decomposition, meaning that it will store the shape of  on the first step, or when its shape changes, and then it will only update its coefficients. When the shape of the matrix changes, a new factorization is computed. By setting this data to false, the solver will compute the entire decomposition at each step.  - **applyPermutation**:  by default it is set to true. It will apply fill reducing permutation on the rows and the columns of  in order to minimize the number of non null values in  . Instead of solving , we will solve . Moreover,  is symmetric, so we will use the same permutation on the rows and on the columns with . We will factorize  and then we will solve     As the impact of the use of fill reducing permutations on the performances is highly influenced by the repartition of the nodes used to model an object, we advise the users to test which type of permutation is the best suited for their simulations.  Usage -----  The SparseLDLSolver **requires** the use (above in the scene graph) of an integration scheme, and (below in the scene graph) of a MechanicalObject storing the state information that the SparseLDLSolver will access.  As a direct solver, the SparseLDLSolver might be extremely time consuming for large system. However, it will always give you an exact solution, **making the assumption that the system matrix  is symmetric**.     Example -------  This component is used as follows in XML format:  <pre><code>&lt;SparseLDLSolver  /&gt;\n</code></pre>  or using SofaPython3:  <pre><code>node.addObject('SparseLDLSolver')\n</code></pre>  An example scene involving a SparseLDLSolver is available in [*examples/Component/LinearSolver/Direct/FEMBAR_SparseLDLSolver.scn*](https://github.com/sofa-framework/sofa/blob/master/examples/Component/LinearSolver/Direct/FEMBAR_SparseLDLSolver.scn)  __Target__: `Sofa.Component.LinearSolver.Direct`  __namespace__: `#!c++ sofa::component::linearsolver::direct`  __parents__:   - `#!c++ SparseLDLSolverImpl`  Data:    Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 precomputeSymbolicDecomposition  If true the solver will reuse the precomputed symbolic decomposition. Otherwise it will recompute it at each step.  1 L_nnz  Number of non-zero values in the lower triangular matrix of the factorization. The lower, the faster the system is solved.  0   Links:   | Name | Description | | ---- | ----------- | |context|Graph Node containing this object (or BaseContext::getDefault() if no graph is used)| |slaves|Sub-objects used internally by this object| |master|nullptr for regular objects, or master object for which this object is one sub-objects| |linearSystem|The linear system to solve| |orderingMethod|Ordering method used by this component|"},{"location":"30_Components/45_LinearSolver/20_Direct/55_AsyncSparseLDLSolver/","title":"\ufeffAsyncSparseLDLSolver","text":"<p>(since SOFA v22.06)</p> <p>AsyncSparseLDLSolver is based on SparseLDLSolver. It follows some ideas presented in:</p> <p>Courtecuisse, Hadrien, et al. \"Asynchronous preconditioners for efficient solving of non-linear deformations.\" VRIPHYS-Virtual Reality Interaction and Physical Simulation. Eurographics Association, 2010. https://hal.inria.fr/hal-00688865/document</p>"},{"location":"30_Components/45_LinearSolver/20_Direct/55_AsyncSparseLDLSolver/#asynchronous-factorization","title":"Asynchronous Factorization","text":"<p>The difference compared to SparseLDLSolver resides in the fact that the factorization of the matrix is performed in a different thread in order to speed up the simulation.</p> <p>The synchronous version performs the following operations (synchronously): 1) Build the matrix 2) Factorize the matrix 3) Solve the system based on the factorization</p> <p>In the asynchronous version, the factorization is performed asynchronously. A consequence is that the solving process uses a factorization which may not be up to date. In practice, the factorization is at least one time step old, but it can be an older factorization depending on the duration of the asynchronous factorization step. Because of this, the solver computes an approximation of the solution, based on an old factorization. It is therefore important to understand that using AsyncSparseLDLSolver changes the behavior of your simulation compared to a synchronous version. It may also introduce instabilities.</p>"},{"location":"30_Components/45_LinearSolver/20_Direct/55_AsyncSparseLDLSolver/#a-preconditioner","title":"A Preconditioner","text":"<p>AsyncSparseLDLSolver can be used as a preconditioner of ShewchukPCGLinearSolver.</p>"},{"location":"30_Components/45_LinearSolver/20_Direct/55_AsyncSparseLDLSolver/#performances","title":"Performances","text":"<p>The idea to have the factorization of the matrix in a different thread is to reduce the time taken to solve a linear system. However, building the matrix and solving a system based on a factorization will not be reduced. Since the factorization of a matrix is a time-consuming step of the simulation, this strategy greatly improves the performances. This speed up is at the price of an approximation of the solution, because solving the linear system relies on a factorization of a matrix from a previous time step.</p>"},{"location":"30_Components/45_LinearSolver/20_Direct/55_AsyncSparseLDLSolver/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;AsyncSparseLDLSolver /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('AsyncSparseLDLSolver')\n</code></pre> <ul> <li>An example where AsyncSparseLDLSolver is used as a standalone linear solver is available in examples/Component/LinearSolver/Direct/FEMBAR_AsyncSparseLDLSolver.scn.</li> <li>The example in examples/Component/LinearSolver/Preconditioner/FEMBAR_PCG_AsyncSparseLDLSolver.scn shows how to use AsyncSparseLDLSolver as a preconditioner of ShewchukPCGLinearSolver.</li> <li>Finally, the example in examples/Component/LinearSolver/Preconditioner/FEMBAR_PCG_WarpedAsyncSparseLDLSolver.scn shows how the factorization in AsyncSparseLDLSolver can be warped using a WarpPreconditioner.</li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Direct</code></p> <p>namespace: <code>sofa::component::linearsolver::direct</code></p> <p>parents: </p> <ul> <li><code>SparseLDLSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 precomputeSymbolicDecomposition  If true the solver will reuse the precomputed symbolic decomposition. Otherwise it will recompute it at each step.  1 L_nnz  Number of non-zero values in the lower triangular matrix of the factorization. The lower, the faster the system is solved.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve orderingMethod Ordering method used by this component"},{"location":"30_Components/45_LinearSolver/20_Direct/60_SparseLUSolver/","title":"SparseLUSolver","text":"<p>This component belongs to the category of LinearSolver. The role of the SparseLUSolver is to solve the linear system  assuming that the matrix  is invertible and sparse.</p> <p>In order to solve this system, this solver will factorize the matrix  into the product  where  is a lower triangular matrix with ones on its diagonal and  is an upper triangonal matrix (https://en.wikipedia.org/wiki/LU_decomposition).</p> <p>As this method relies on the Gaussian elimination, a partial pivot is applied on the lines of  hence its factorization will be written as  . The LU solver is a direct solver which will compute the exact solution of the linear system by successively solving two triangular systems.</p>   Data   ---- The SparseLUSolver has only one data **permutation** that allows three choices :   **-None**, no permutation, nor on the rows nor on the columns, is applied   **-SuiteSparse**, use the SuiteSparse library as intended for a the LU decomposition and apply a fill reducing permutation on the columns only leaving the permutation on the lines available for the partial pivot   **-METIS**, use the METIS library to compute a fill reducing permutation and apply it on both the lines and the columns. For this option we assume that the matrix is symmetric and we don't apply any pivoting.    It is not currently possible to change the the type of permutation applied during a simulation.  Applying a fill reducing permutation aims at minimizing the number of non-null values in the decomposition, which would reduce the time spent on solving the triangular systems.  As the impact of the use of fill reducing permutations on the performances is highly influenced by the repartition of the nodes used to model an object, we advise the users to test which type of permutation is the best suited for their simulations.   Usage -----   The SparseLUSolver **requires** the use (above in the scene graph) of an integration scheme, and (below in the scene graph) of a MechanicalObject storing the state information that the SparseLUSolver will access.  The SparseLUSolver is the most generic direct solver. It may be time consuming but it will be able compute the exact solution as soon as  is invertible.  Example -------  This component is used as follows in XML format:  <pre><code>&lt;SparseLUSolver  /&gt;\n</code></pre>  or using SofaPython3:  <pre><code>node.addObject('SparseLUSolver')\n</code></pre>  An example scene involving a SparseLUSolver is available in [*applications/plugins/CSparseSolvers/examples/FEMBAR_SparseLUSolver.scn*](https://github.com/sofa-framework/CSparseSolvers/blob/master/examples/FEMBAR_SparseLUSolver.scn). Note that the SparseLUSolver requires the CSparseSolvers plugin to be fetched and activated."},{"location":"30_Components/45_LinearSolver/20_Direct/BTDLinearSolver/","title":"BTDLinearSolver","text":"<p>Linear system solver using Thomas Algorithm for Block Tridiagonal matrices</p> <p>Templates:</p> <ul> <li><code>BTDMatrix6d</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Direct</code></p> <p>namespace: <code>sofa::component::linearsolver::direct</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 verbose  Dump system state at each iteration  0 subpartSolve  Allows for the computation of a subpart of the system  0 verification  verification of the subpartSolve  0 Visualization showProblem  display debug informations about subpartSolve computation  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve"},{"location":"30_Components/45_LinearSolver/20_Direct/CholeskySolver/","title":"CholeskySolver","text":"<p>Direct linear solver based on Cholesky factorization, for dense matrices</p> <p>Templates:</p> <ul> <li><code>FullMatrix</code></li> <li><code>SparseMatrix</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Direct</code></p> <p>namespace: <code>sofa::component::linearsolver::direct</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve"},{"location":"30_Components/45_LinearSolver/20_Direct/EigenSimplicialLDLT/","title":"EigenSimplicialLDLT","text":"<p>Direct Linear Solver using a Sparse LDL^T factorization.</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Direct</code></p> <p>namespace: <code>sofa::component::linearsolver::direct</code></p> <p>parents: </p> <ul> <li><code>EigenDirectSparseSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve orderingMethod Ordering method used by this component"},{"location":"30_Components/45_LinearSolver/20_Direct/EigenSimplicialLLT/","title":"EigenSimplicialLLT","text":"<p>Direct Linear Solver using a Sparse LL^T factorization.</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Direct</code></p> <p>namespace: <code>sofa::component::linearsolver::direct</code></p> <p>parents: </p> <ul> <li><code>EigenDirectSparseSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve orderingMethod Ordering method used by this component"},{"location":"30_Components/45_LinearSolver/20_Direct/EigenSparseLU/","title":"EigenSparseLU","text":"<p>Direct Linear Solver using a Sparse LU factorization.</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Direct</code></p> <p>namespace: <code>sofa::component::linearsolver::direct</code></p> <p>parents: </p> <ul> <li><code>EigenDirectSparseSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve orderingMethod Ordering method used by this component"},{"location":"30_Components/45_LinearSolver/20_Direct/EigenSparseQR/","title":"EigenSparseQR","text":"<p>Direct Linear Solver using a Sparse QR factorization.</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Direct</code></p> <p>namespace: <code>sofa::component::linearsolver::direct</code></p> <p>parents: </p> <ul> <li><code>EigenDirectSparseSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve orderingMethod Ordering method used by this component"},{"location":"30_Components/45_LinearSolver/20_Direct/MatrixLinearSystem/","title":"MatrixLinearSystem","text":"<p>Linear system Linear system</p> <p>Templates:</p> <ul> <li><code>BTDMatrix6d</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Direct</code></p> <p>namespace: <code>sofa::component::linearsystem</code></p> <p>parents: </p> <ul> <li><code>TypedMatrixLinearSystem</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 matrixSize  Size of the global matrix  assembleStiffness  If true, the stiffness is added to the global matrix  1 assembleMass  If true, the mass is added to the global matrix  1 assembleDamping  If true, the damping is added to the global matrix  1 assembleGeometricStiffness  If true, the geometric stiffness of mappings is added to the global matrix  1 applyProjectiveConstraints  If true, projective constraints are applied on the global matrix  1 applyMappedComponents  If true, mapped components contribute to the global matrix  1 checkIndices  If true, indices are verified before being added in to the global matrix, favoring security over speed  0 parallelAssemblyIndependentMatrices  If true, independent matrices (global matrix vs mapped matrices) are assembled in parallel  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/45_LinearSolver/20_Direct/MatrixLinearSystem/#examples","title":"Examples","text":"<p>Component/LinearSystem/MatrixLinearSystem.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 -10 0\"&gt;\n\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [EigenSimplicialLDLT] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSystem\"/&gt; &lt;!-- Needed to use components [CompositeLinearSystem MatrixLinearSystem MatrixProjectionMethod] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping IdentityMapping SubsetMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [StiffSpringForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetGeometryAlgorithms] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n        &lt;RequiredPlugin name=\"SofaMatrix\"/&gt; &lt;!-- Needed to use components [GlobalSystemMatrixImage] --&gt;\n    &lt;/Node&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;DefaultVisualManagerLoop/&gt;\n\n    &lt;Node name=\"rigidSections\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n\n        &lt;Node name=\"matrices\"&gt;\n            &lt;MatrixLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"system\" checkIndices=\"true\" printLog=\"true\"/&gt;\n            &lt;MatrixLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"GS\" assembleStiffness=\"false\" assembleMass=\"false\" assembleDamping=\"false\" assembleGeometricStiffness=\"true\" applyProjectiveConstraints=\"false\"/&gt;\n            &lt;GlobalSystemMatrixImage name=\"imageA\" linearSystem=\"@system\"/&gt;\n            &lt;GlobalSystemMatrixImage name=\"imageGS\" linearSystem=\"@GS\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;CompositeLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"solverSystem\" linearSystems=\"@matrices/system @matrices/GS\" solverLinearSystem=\"@matrices/system\"/&gt;\n        &lt;EigenSimplicialLDLT template=\"CompressedRowSparseMatrixd\" linearSystem=\"@solverSystem\"/&gt;\n\n        &lt;Node name=\"red\"&gt;\n\n            &lt;RegularGridTopology name=\"grid\" nx=\"1\" ny=\"1\" nz=\"20\" xmin=\"0\" xmax=\"0\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" showObject=\"true\" showObjectScale=\"1\" position=\"@grid.position\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n            &lt;Node name=\"FEM\"&gt;\n                &lt;RegularGridTopology name=\"FEM_grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n                &lt;MechanicalObject template=\"Vec3d\" name=\"DOFs\" position=\"@FEM_grid.position\" printLog=\"false\"/&gt;\n                &lt;HexahedronSetGeometryAlgorithms/&gt;\n                &lt;MeshMatrixMass totalMass=\"320\"/&gt;\n                &lt;HexahedronFEMForceField name=\"FEM_a\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n                &lt;RigidMapping geometricStiffness=\"2\" globalToLocalCoords=\"true\" rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\"/&gt;\n\n                &lt;Node name=\"Visual\"&gt;\n                    &lt;RegularGridTopology name=\"grid\" nx=\"2\" ny=\"2\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                    &lt;OglModel name=\"visu\" lineWidth=\"5\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 1 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                    &lt;BarycentricMapping input=\"@../DOFs\" output=\"@visu\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"green\"&gt;\n            &lt;VisualStyle displayFlags=\"showInteractionForceFields\" /&gt;\n            &lt;MechanicalObject template=\"Vec3d\" name=\"DOFs\" printLog=\"false\"/&gt;\n            &lt;RegularGridTopology name=\"grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-9\" ymax=\"-6\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;HexahedronSetGeometryAlgorithms/&gt;\n            &lt;MeshMatrixMass totalMass=\"320\"/&gt;\n            &lt;BoxROI template=\"Vec3d\" name=\"box\" box=\"-1.6 -9.1 -0.1 1.6 -5.1 0.0001\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"@box.indices\" /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM_b\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n            &lt;Node name=\"a\"&gt;\n                &lt;BoxROI name=\"box\" position=\"@../DOFs.position\" box=\"1.4 -6.1 18.9 1.6 -5.9 19.1\" drawBoxes=\"true\" doUpdate=\"false\"/&gt;\n                &lt;MechanicalObject template=\"Vec3d\" name=\"DOFs\"/&gt;\n                &lt;SubsetMapping input=\"@../DOFs\" output=\"@DOFs\" indices=\"@box.indices\"/&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"b\"&gt;\n                &lt;BoxROI name=\"box\" position=\"@../DOFs.position\" box=\"1.4 -6.1 1.9 1.6 -5.9 2.1\" drawBoxes=\"true\" doUpdate=\"false\"/&gt;\n                &lt;MechanicalObject template=\"Vec3d\" name=\"DOFs\"/&gt;\n                &lt;SubsetMapping input=\"@../DOFs\" output=\"@DOFs\" indices=\"@box.indices\"/&gt;\n            &lt;/Node&gt;\n            &lt;MatrixProjectionMethod areJacobiansConstant=\"true\" mechanicalStates=\"@/rigidSections/green/a/DOFs @/rigidSections/green/a/DOFs\"/&gt;\n            &lt;MatrixProjectionMethod areJacobiansConstant=\"true\" mechanicalStates=\"@/rigidSections/green/a/DOFs @/rigidSections/green/b/DOFs\"/&gt;\n            &lt;MatrixProjectionMethod areJacobiansConstant=\"true\" mechanicalStates=\"@/rigidSections/green/b/DOFs @/rigidSections/green/a/DOFs\"/&gt;\n            &lt;MatrixProjectionMethod areJacobiansConstant=\"true\" mechanicalStates=\"@/rigidSections/green/b/DOFs @/rigidSections/green/b/DOFs\"/&gt;\n            &lt;StiffSpringForceField object1=\"@a/DOFs\" object2=\"@b/DOFs\" spring=\"0 0 100 1 1\" showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n\n            &lt;Node name=\"Visual\"&gt;\n                &lt;RegularGridTopology name=\"grid\" n=\"@../grid.n\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-9\" ymax=\"-6\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                &lt;OglModel name=\"visu\" lineWidth=\"2\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 1 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                &lt;BarycentricMapping input=\"@../DOFs\" output=\"@visu\"/&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"blue\"&gt;\n\n            &lt;RegularGridTopology name=\"grid\" nx=\"1\" ny=\"1\" nz=\"20\" xmin=\"5\" xmax=\"5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" showObject=\"true\" showObjectScale=\"1\" position=\"@grid.position\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n\n            &lt;Node name=\"intermediateMapping\"&gt; &lt;!-- this mapping is introduced just to verify that geometric stiffness is well projected --&gt;\n\n                &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" showObject=\"false\"/&gt;\n                &lt;ConstantForceField forces=\"0 0 0.0005 0 0 0\"/&gt;\n                &lt;IdentityMapping input=\"@../DOFs\" output=\"@DOFs\"/&gt;\n\n                &lt;Node name=\"FEM\"&gt;\n                    &lt;RegularGridTopology name=\"FEM_grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"3.5\" xmax=\"6.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n                    &lt;MechanicalObject template=\"Vec3d\" name=\"DOFs\" position=\"@FEM_grid.position\" printLog=\"false\"/&gt;\n                    &lt;HexahedronSetGeometryAlgorithms/&gt;\n                    &lt;MeshMatrixMass totalMass=\"320\"/&gt;\n                    &lt;HexahedronFEMForceField name=\"FEM_c\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n                    &lt;RigidMapping geometricStiffness=\"2\" globalToLocalCoords=\"true\" rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\"/&gt;\n\n                    &lt;Node name=\"Visual\"&gt;\n                        &lt;RegularGridTopology name=\"grid\" nx=\"2\" ny=\"2\" nz=\"20\" xmin=\"3.5\" xmax=\"6.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                        &lt;OglModel name=\"visu\" lineWidth=\"5\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 0 1 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                        &lt;BarycentricMapping input=\"@../DOFs\" output=\"@visu\"/&gt;\n                    &lt;/Node&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"spring\"&gt;\n            &lt;VisualStyle displayFlags=\"showInteractionForceFields\" /&gt;\n\n            &lt;Node name=\"nonMappedDOFsSpring\"&gt;\n                &lt;StiffSpringForceField object1=\"@red/DOFs\" object2=\"@blue/DOFs\" spring=\"19 19 50 1 1\" showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n            &lt;/Node&gt;\n\n            &lt;Node name=\"springBetweenMappedAndNonMapped\"&gt;\n                &lt;BoxROI position=\"@red/FEM/DOFs.position\" box=\"-1.6 -1.6 18.9 -1.4 -1.4 19.1\" drawBoxes=\"true\"/&gt;\n                &lt;BoxROI position=\"@green/DOFs.position\" box=\"-1.6 -6.1 18.9 -1.4 -5.9 19.1\" drawBoxes=\"true\"/&gt;\n                &lt;StiffSpringForceField object1=\"@red/FEM/DOFs\" object2=\"@green/DOFs\" spring=\"304 316 100 1 1\" showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 -10 0\")\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSystem\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    plugins.addObject('RequiredPlugin', name=\"SofaMatrix\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('DefaultVisualManagerLoop')\n\n    rigidSections = root.addChild('rigidSections')\n    rigidSections.addObject('EulerImplicitSolver', name=\"odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n\n    matrices = rigidSections.addChild('matrices')\n    matrices.addObject('MatrixLinearSystem', template=\"CompressedRowSparseMatrixd\", name=\"system\", checkIndices=\"true\", printLog=\"true\")\n    matrices.addObject('MatrixLinearSystem', template=\"CompressedRowSparseMatrixd\", name=\"GS\", assembleStiffness=\"false\", assembleMass=\"false\", assembleDamping=\"false\", assembleGeometricStiffness=\"true\", applyProjectiveConstraints=\"false\")\n    matrices.addObject('GlobalSystemMatrixImage', name=\"imageA\", linearSystem=\"@system\")\n    matrices.addObject('GlobalSystemMatrixImage', name=\"imageGS\", linearSystem=\"@GS\")\n    rigidSections.addObject('CompositeLinearSystem', template=\"CompressedRowSparseMatrixd\", name=\"solverSystem\", linearSystems=\"@matrices/system @matrices/GS\", solverLinearSystem=\"@matrices/system\")\n    rigidSections.addObject('EigenSimplicialLDLT', template=\"CompressedRowSparseMatrixd\", linearSystem=\"@solverSystem\")\n\n    red = rigidSections.addChild('red')\n    red.addObject('RegularGridTopology', name=\"grid\", nx=\"1\", ny=\"1\", nz=\"20\", xmin=\"0\", xmax=\"0\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    red.addObject('MechanicalObject', template=\"Rigid3d\", name=\"DOFs\", showObject=\"true\", showObjectScale=\"1\", position=\"@grid.position\")\n    red.addObject('FixedProjectiveConstraint', indices=\"0\")\n\n    FEM = red.addChild('FEM')\n    FEM.addObject('RegularGridTopology', name=\"FEM_grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    FEM.addObject('MechanicalObject', template=\"Vec3d\", name=\"DOFs\", position=\"@FEM_grid.position\", printLog=\"false\")\n    FEM.addObject('HexahedronSetGeometryAlgorithms')\n    FEM.addObject('MeshMatrixMass', totalMass=\"320\")\n    FEM.addObject('HexahedronFEMForceField', name=\"FEM_a\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n    FEM.addObject('RigidMapping', geometricStiffness=\"2\", globalToLocalCoords=\"true\", rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\")\n\n    Visual = FEM.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", nx=\"2\", ny=\"2\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"5\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 1 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../DOFs\", output=\"@visu\")\n\n    green = rigidSections.addChild('green')\n    green.addObject('VisualStyle', displayFlags=\"showInteractionForceFields\")\n    green.addObject('MechanicalObject', template=\"Vec3d\", name=\"DOFs\", printLog=\"false\")\n    green.addObject('RegularGridTopology', name=\"grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-9\", ymax=\"-6\", zmin=\"0\", zmax=\"19\")\n    green.addObject('HexahedronSetGeometryAlgorithms')\n    green.addObject('MeshMatrixMass', totalMass=\"320\")\n    green.addObject('BoxROI', template=\"Vec3d\", name=\"box\", box=\"-1.6 -9.1 -0.1 1.6 -5.1 0.0001\")\n    green.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    green.addObject('HexahedronFEMForceField', name=\"FEM_b\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n\n    a = green.addChild('a')\n    a.addObject('BoxROI', name=\"box\", position=\"@../DOFs.position\", box=\"1.4 -6.1 18.9 1.6 -5.9 19.1\", drawBoxes=\"true\", doUpdate=\"false\")\n    a.addObject('MechanicalObject', template=\"Vec3d\", name=\"DOFs\")\n    a.addObject('SubsetMapping', input=\"@../DOFs\", output=\"@DOFs\", indices=\"@box.indices\")\n\n    b = green.addChild('b')\n    b.addObject('BoxROI', name=\"box\", position=\"@../DOFs.position\", box=\"1.4 -6.1 1.9 1.6 -5.9 2.1\", drawBoxes=\"true\", doUpdate=\"false\")\n    b.addObject('MechanicalObject', template=\"Vec3d\", name=\"DOFs\")\n    b.addObject('SubsetMapping', input=\"@../DOFs\", output=\"@DOFs\", indices=\"@box.indices\")\n    green.addObject('MatrixProjectionMethod', areJacobiansConstant=\"true\", mechanicalStates=\"@/rigidSections/green/a/DOFs @/rigidSections/green/a/DOFs\")\n    green.addObject('MatrixProjectionMethod', areJacobiansConstant=\"true\", mechanicalStates=\"@/rigidSections/green/a/DOFs @/rigidSections/green/b/DOFs\")\n    green.addObject('MatrixProjectionMethod', areJacobiansConstant=\"true\", mechanicalStates=\"@/rigidSections/green/b/DOFs @/rigidSections/green/a/DOFs\")\n    green.addObject('MatrixProjectionMethod', areJacobiansConstant=\"true\", mechanicalStates=\"@/rigidSections/green/b/DOFs @/rigidSections/green/b/DOFs\")\n    green.addObject('StiffSpringForceField', object1=\"@a/DOFs\", object2=\"@b/DOFs\", spring=\"0 0 100 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n\n    Visual = green.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", n=\"@../grid.n\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-9\", ymax=\"-6\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"2\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 1 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../DOFs\", output=\"@visu\")\n\n    blue = rigidSections.addChild('blue')\n    blue.addObject('RegularGridTopology', name=\"grid\", nx=\"1\", ny=\"1\", nz=\"20\", xmin=\"5\", xmax=\"5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    blue.addObject('MechanicalObject', template=\"Rigid3d\", name=\"DOFs\", showObject=\"true\", showObjectScale=\"1\", position=\"@grid.position\")\n    blue.addObject('FixedProjectiveConstraint', indices=\"0\")\n\n    intermediateMapping = blue.addChild('intermediateMapping')\n    intermediateMapping.addObject('MechanicalObject', template=\"Rigid3d\", name=\"DOFs\", showObject=\"false\")\n    intermediateMapping.addObject('ConstantForceField', forces=\"0 0 0.0005 0 0 0\")\n    intermediateMapping.addObject('IdentityMapping', input=\"@../DOFs\", output=\"@DOFs\")\n\n    FEM = intermediateMapping.addChild('FEM')\n    FEM.addObject('RegularGridTopology', name=\"FEM_grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"3.5\", xmax=\"6.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    FEM.addObject('MechanicalObject', template=\"Vec3d\", name=\"DOFs\", position=\"@FEM_grid.position\", printLog=\"false\")\n    FEM.addObject('HexahedronSetGeometryAlgorithms')\n    FEM.addObject('MeshMatrixMass', totalMass=\"320\")\n    FEM.addObject('HexahedronFEMForceField', name=\"FEM_c\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n    FEM.addObject('RigidMapping', geometricStiffness=\"2\", globalToLocalCoords=\"true\", rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\")\n\n    Visual = FEM.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", nx=\"2\", ny=\"2\", nz=\"20\", xmin=\"3.5\", xmax=\"6.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"5\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 0 1 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../DOFs\", output=\"@visu\")\n\n    spring = rigidSections.addChild('spring')\n    spring.addObject('VisualStyle', displayFlags=\"showInteractionForceFields\")\n\n    nonMappedDOFsSpring = spring.addChild('nonMappedDOFsSpring')\n    nonMappedDOFsSpring.addObject('StiffSpringForceField', object1=\"@red/DOFs\", object2=\"@blue/DOFs\", spring=\"19 19 50 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n\n    springBetweenMappedAndNonMapped = spring.addChild('springBetweenMappedAndNonMapped')\n    springBetweenMappedAndNonMapped.addObject('BoxROI', position=\"@red/FEM/DOFs.position\", box=\"-1.6 -1.6 18.9 -1.4 -1.4 19.1\", drawBoxes=\"true\")\n    springBetweenMappedAndNonMapped.addObject('BoxROI', position=\"@green/DOFs.position\", box=\"-1.6 -6.1 18.9 -1.4 -5.9 19.1\", drawBoxes=\"true\")\n    springBetweenMappedAndNonMapped.addObject('StiffSpringForceField', object1=\"@red/FEM/DOFs\", object2=\"@green/DOFs\", spring=\"304 316 100 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n</code></pre>"},{"location":"30_Components/45_LinearSolver/20_Direct/PrecomputedLinearSolver/","title":"PrecomputedLinearSolver","text":"<p>Linear system solver based on a precomputed inverse matrix</p> <p>Templates:</p> <ul> <li><code>FullVector</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Direct</code></p> <p>namespace: <code>sofa::component::linearsolver::direct</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 jmjt_twostep  Use two step algorithm to compute JMinvJt  1 use_file  Dump system matrix in a file  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve"},{"location":"30_Components/45_LinearSolver/20_Direct/SVDLinearSolver/","title":"SVDLinearSolver","text":"<p>Linear system solver using a SVD decomposition of a dense matrix</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixd</code></li> <li><code>FullMatrix</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Direct</code></p> <p>namespace: <code>sofa::component::linearsolver::direct</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 verbose  Dump system state at each iteration  0 minSingularValue  Thershold under which a singular value is set to 0, for the stabilization of ill-conditioned system.  1e-06 conditionNumber  Condition number of the matrix: ratio between the largest and smallest singular values. Computed in method solve.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve"},{"location":"30_Components/45_LinearSolver/Ordering/AMDOrderingMethod/","title":"AMDOrderingMethod","text":"<p>Approximate minimum degree ordering implemented in the Eigen library</p> <p>Target: <code>Sofa.Component.LinearSolver.Ordering</code></p> <p>namespace: <code>sofa::component::linearsolver::ordering</code></p> <p>parents: </p> <ul> <li><code>BaseEigenOrderingMethod</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/45_LinearSolver/Ordering/COLAMDOrderingMethod/","title":"COLAMDOrderingMethod","text":"<p>Column approximate minimum degree ordering implemented in the Eigen library</p> <p>Target: <code>Sofa.Component.LinearSolver.Ordering</code></p> <p>namespace: <code>sofa::component::linearsolver::ordering</code></p> <p>parents: </p> <ul> <li><code>BaseEigenOrderingMethod</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/45_LinearSolver/Ordering/NaturalOrderingMethod/","title":"NaturalOrderingMethod","text":"<p>Natural order (no permutation). Corresponding to an identity matrix.</p> <p>Target: <code>Sofa.Component.LinearSolver.Ordering</code></p> <p>namespace: <code>sofa::component::linearsolver::ordering</code></p> <p>parents: </p> <ul> <li><code>BaseOrderingMethod</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/45_LinearSolver/Preconditioner/BlockJacobiPreconditioner/","title":"BlockJacobiPreconditioner","text":"<p>Linear solver based on a NxN block diagonal matrix (i.e. block Jacobi preconditioner)</p> <p>Templates:</p> <ul> <li><code>FullVector</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Preconditioner</code></p> <p>namespace: <code>sofa::component::linearsolver::preconditioner</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve"},{"location":"30_Components/45_LinearSolver/Preconditioner/JacobiPreconditioner/","title":"JacobiPreconditioner","text":"<p>Linear solver based on a diagonal matrix (i.e. Jacobi preconditioner)</p> <p>Templates:</p> <ul> <li><code>DiagonalMatrix</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Preconditioner</code></p> <p>namespace: <code>sofa::component::linearsolver::preconditioner</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve"},{"location":"30_Components/45_LinearSolver/Preconditioner/PrecomputedMatrixSystem/","title":"PrecomputedMatrixSystem","text":"<p>Matrix system</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Preconditioner</code></p> <p>namespace: <code>sofa::component::linearsolver::preconditioner</code></p> <p>parents: </p> <ul> <li><code>TypedMatrixLinearSystem</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 matrixSize  Size of the global matrix  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/45_LinearSolver/Preconditioner/PrecomputedWarpPreconditioner/","title":"PrecomputedWarpPreconditioner","text":"<p>Linear system solver based on a precomputed inverse matrix, wrapped by a per-node rotation matrix</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Preconditioner</code></p> <p>namespace: <code>sofa::component::linearsolver::preconditioner</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 jmjt_twostep  Use two step algorithm to compute JMinvJt  1 use_file  Dump system matrix in a file  1 share_matrix  Share the compliance matrix in memory if they are related to the same file (WARNING: might require to reload Sofa when opening a new scene...)  1 use_rotations  Use Rotations around the preconditioner  1 Visualization draw_rotations_scale  Scale rotations in draw function  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve linearSolver Link towards the linear solver used to precompute the first matrix"},{"location":"30_Components/45_LinearSolver/Preconditioner/RotationMatrixSystem/","title":"RotationMatrixSystem","text":"<p>Rotation matrix warpping the main linear system</p> <p>Templates:</p> <ul> <li><code>RotationMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Preconditioner</code></p> <p>namespace: <code>sofa::component::linearsolver::preconditioner</code></p> <p>parents: </p> <ul> <li><code>TypedMatrixLinearSystem</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 matrixSize  Size of the global matrix  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/45_LinearSolver/Preconditioner/SSORPreconditioner/","title":"SSORPreconditioner","text":"<p>Linear system solver / preconditioner based on Symmetric Successive Over-Relaxation (SSOR). If the matrix is decomposed as $A = D + L + L^T$, this solver computes $(1/(2-w))(D/w+L)(D/w)^{-1}(D/w+L)^T x = b, or $(D+L)D^{-1}(D+L)^T x = b$ if $w=1$.</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Preconditioner</code></p> <p>namespace: <code>sofa::component::linearsolver::preconditioner</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 omega  Omega coefficient  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve"},{"location":"30_Components/45_LinearSolver/Preconditioner/WarpPreconditioner/","title":"WarpPreconditioner","text":"<p>Linear system solver wrapping another (precomputed) linear solver by a per-node rotation matrix</p> <p>Templates:</p> <ul> <li><code>RotationMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSolver.Preconditioner</code></p> <p>namespace: <code>sofa::component::linearsolver::preconditioner</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSolver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 useRotationFinder  Which rotation Finder to use  0 update_step  Number of steps before the next refresh of the system matrix in the main solver  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve linearSolver Link towards the linear solver used to build the warp conditioner"},{"location":"30_Components/48_IO/10_Mesh/10_MeshGmshLoader/","title":"MeshGmshLoader","text":"<p>This component belongs to the category of the MeshLoaders.</p> <p>The MeshGmshLoader loads a mesh from a file under the format *.msh. Such a mesh file can be either surface or volumetric meshes. The *.msh meshes can be generated using softwares like Gmsh. To be noted, an interesting project couples SOFA and Gmsh in python for applications such as parametric design or design optimization.</p>"},{"location":"30_Components/48_IO/10_Mesh/10_MeshGmshLoader/#usage","title":"Usage","text":"<p>No pre-requisite in your scene to use a MeshLoader.</p>"},{"location":"30_Components/48_IO/10_Mesh/10_MeshGmshLoader/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;MeshGmshLoader name=\"GmshLoader\" filename=\"mesh/square3.msh\" createSubelements=\"true\" flipNormals=\"0\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('MeshGmshLoader', name=\"ObjLoader\", filename=\"mesh/square3.msh\", createSubelements=\"true\", flipNormals=\"0\")\n</code></pre> <p>An example scene involving a MeshGmshLoader is available in examples/Component/IO/Mesh/MeshGmshLoader.scn Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/10_MeshGmshLoader/#examples","title":"Examples","text":"<p>Component/IO/Mesh/MeshGmshLoader.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!-- For more details see: https://wiki.sofa-framework.org/tdev/wiki/Notes/NewLoaderArchitecture --&gt;\n&lt;Node name=\"Root\" gravity=\"0 -9.81 0\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"gmsh file\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"GmshLoader\" filename=\"mesh/square3.msh\" createSubelements=\"true\" flipNormals=\"0\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" scale=\"10\" src=\"@GmshLoader\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"topo\" src=\"@GmshLoader\" /&gt;\n        &lt;TriangleSetTopologyModifier name=\"modif\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"triGeo\" drawEdges=\"1\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1\" /&gt;\n        &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"100\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"300\" damping=\"1.0\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node&gt;\n            &lt;OglModel src=\"@../GmshLoader\" name=\"VisualModel\" color=\"blue\" /&gt;\n            &lt;IdentityMapping name=\"mapping\" input=\"@..\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"gmsh file v4\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"GmshLoaderv4\" filename=\"mesh/msh4_cube.msh\" createSubelements=\"true\" flipNormals=\"0\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" scale=\"10\" src=\"@GmshLoaderv4\" /&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"topo\" src=\"@GmshLoaderv4\" /&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"modif\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"tetraGeo\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.2\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node&gt;\n            &lt;OglModel src=\"@../GmshLoaderv4\" name=\"VisualModel\" color=\"blue\" /&gt;\n            &lt;IdentityMapping name=\"mapping\" input=\"@..\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 -9.81 0\", dt=\"0.05\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\")\n    Root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    Root.addObject('BruteForceBroadPhase')\n    Root.addObject('BVHNarrowPhase')\n    Root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    Root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    gmsh file = Root.addChild('gmsh file')\n    gmsh file.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    gmsh file.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    gmsh file.addObject('MeshGmshLoader', name=\"GmshLoader\", filename=\"mesh/square3.msh\", createSubelements=\"true\", flipNormals=\"0\")\n    gmsh file.addObject('MechanicalObject', name=\"dofs\", scale=\"10\", src=\"@GmshLoader\")\n    gmsh file.addObject('TriangleSetTopologyContainer', name=\"topo\", src=\"@GmshLoader\")\n    gmsh file.addObject('TriangleSetTopologyModifier', name=\"modif\")\n    gmsh file.addObject('TriangleSetGeometryAlgorithms', name=\"triGeo\", drawEdges=\"1\")\n    gmsh file.addObject('DiagonalMass', massDensity=\"0.15\")\n    gmsh file.addObject('FixedProjectiveConstraint', indices=\"0 1\")\n    gmsh file.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"100\", poissonRatio=\"0.3\", method=\"large\")\n    gmsh file.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"300\", damping=\"1.0\")\n    gmsh file.addObject('TriangleCollisionModel')\n\n    gmsh file = gmsh file.addChild('gmsh file')\n    gmsh file.addObject('OglModel', src=\"@../GmshLoader\", name=\"VisualModel\", color=\"blue\")\n    gmsh file.addObject('IdentityMapping', name=\"mapping\", input=\"@..\", output=\"@VisualModel\")\n\n    gmsh file v4 = Root.addChild('gmsh file v4')\n    gmsh file v4.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    gmsh file v4.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    gmsh file v4.addObject('MeshGmshLoader', name=\"GmshLoaderv4\", filename=\"mesh/msh4_cube.msh\", createSubelements=\"true\", flipNormals=\"0\")\n    gmsh file v4.addObject('MechanicalObject', name=\"dofs\", scale=\"10\", src=\"@GmshLoaderv4\")\n    gmsh file v4.addObject('TetrahedronSetTopologyContainer', name=\"topo\", src=\"@GmshLoaderv4\")\n    gmsh file v4.addObject('TetrahedronSetTopologyModifier', name=\"modif\")\n    gmsh file v4.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"tetraGeo\")\n    gmsh file v4.addObject('DiagonalMass', massDensity=\"0.2\")\n    gmsh file v4.addObject('FixedProjectiveConstraint', indices=\"0 1\")\n    gmsh file v4.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", method=\"large\")\n    gmsh file v4.addObject('TriangleCollisionModel')\n\n    gmsh file v4 = gmsh file v4.addChild('gmsh file v4')\n    gmsh file v4.addObject('OglModel', src=\"@../GmshLoaderv4\", name=\"VisualModel\", color=\"blue\")\n    gmsh file v4.addObject('IdentityMapping', name=\"mapping\", input=\"@..\", output=\"@VisualModel\")\n</code></pre>"},{"location":"30_Components/48_IO/10_Mesh/20_MeshOBJLoader/","title":"MeshOBJLoader","text":"<p>This component belongs to the category of the MeshLoaders.</p> <p>The MeshOBJLoader loads a mesh from a file under the format *.obj. Such a mesh file only supports surface meshes. The *.obj meshes can be generated using softwares like Blender.</p>"},{"location":"30_Components/48_IO/10_Mesh/20_MeshOBJLoader/#usage","title":"Usage","text":"<p>No pre-requisite in your scene to use a MeshLoader.</p>"},{"location":"30_Components/48_IO/10_Mesh/20_MeshOBJLoader/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;MeshOBJLoader name=\"ObjLoader\" filename=\"mesh/floor3.obj\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('MeshOBJLoader', name=\"ObjLoader\", filename=\"mesh/floor3.obj\")\n</code></pre> <p>An example scene involving a MeshOBJLoader is available in examples/Component/IO/Mesh/MeshOBJLoader.scn Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] handleSeams  Preserve UV and normal seams information (vertices with multiple UV and/or normals)  0 loadMaterial  Load the related MTL file or use a default one?  1 computeMaterialFaces  True to activate export of Data instances containing list of face indices for each material  0 Geometry faceList  List of face definitions.  positionsDefinition  Vertex positions definition  normalsIndex  List of normals of elements of the mesh loaded.  normalsDefinition  Normals definition  vertPosIdx  If vertices have multiple normals/texcoords stores vertices position indices  vertNormIdx  If vertices have multiple normals/texcoords stores vertices normal indices  Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Shading defaultMaterial  Default material  materials  List of materials  Texturing texcoordsIndex  Indices of textures coordinates used in faces definition.  texcoordsDefinition  Texture coordinates definition  texcoords  Texture coordinates of all faces, to be used as the parent data of a VisualModel texcoords data  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/30_MeshOffLoader/","title":"MeshOffLoader","text":"<p>This component belongs to the category of the MeshLoaders.</p> <p>The MeshOffLoader loads a mesh from a file under the format *.off. Such a mesh file can be either surface or volumetric meshes. The *.off meshes can be generated using softwares like MeshLab.</p>"},{"location":"30_Components/48_IO/10_Mesh/30_MeshOffLoader/#usage","title":"Usage","text":"<p>No pre-requisite in your scene to use a MeshLoader.</p>"},{"location":"30_Components/48_IO/10_Mesh/30_MeshOffLoader/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;MeshOffLoader name=\"offLoader\" filename=\"mesh/aneurysm3D_1.off\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('MeshOffLoader', name=\"offLoader\", filename=\"mesh/aneurysm3D_1.off\")\n</code></pre> <p>An example scene involving a MeshOffLoader is available in examples/Component/IO/Mesh/MeshOffLoader.scn</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/30_MeshOffLoader/#examples","title":"Examples","text":"<p>Component/IO/Mesh/MeshOffLoader.scn</p> XMLPython <pre><code>&lt;!-- For more details see: https://wiki.sofa-framework.org/tdev/wiki/Notes/NewLoaderArchitecture --&gt;\n&lt;Node name=\"Root\" gravity=\"0 -9.81 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOffLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"Off file\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshOffLoader name=\"offLoader\" filename=\"mesh/aneurysm3D_1.off\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" scale=\"1\" src=\"@offLoader\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"topo\" src=\"@offLoader\" /&gt;\n        &lt;TriangleSetTopologyModifier name=\"modif\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"triGeo\" /&gt;\n        &lt;OglModel name=\"VisualModel\" src=\"@offLoader\" color=\"red\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 -9.81 0\", dt=\"0.02\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\")\n    Root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    Root.addObject('BruteForceBroadPhase')\n    Root.addObject('BVHNarrowPhase')\n    Root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    Root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    Off file = Root.addChild('Off file')\n    Off file.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Off file.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Off file.addObject('MeshOffLoader', name=\"offLoader\", filename=\"mesh/aneurysm3D_1.off\")\n    Off file.addObject('MechanicalObject', name=\"dofs\", scale=\"1\", src=\"@offLoader\")\n    Off file.addObject('TriangleSetTopologyContainer', name=\"topo\", src=\"@offLoader\")\n    Off file.addObject('TriangleSetTopologyModifier', name=\"modif\")\n    Off file.addObject('TriangleSetGeometryAlgorithms', name=\"triGeo\")\n    Off file.addObject('OglModel', name=\"VisualModel\", src=\"@offLoader\", color=\"red\")\n</code></pre>"},{"location":"30_Components/48_IO/10_Mesh/40_MeshSTLLoader/","title":"MeshSTLLoader","text":"<p>This component belongs to the category of the MeshLoaders.</p> <p>The MeshSTLLoader loads a mesh from a file under the format *.stl. Such a mesh file only supports surface meshes. The *.stl format is widely spread and such meshes can be generated using softwares like MeshLab or Paraview among many other solutions.</p>"},{"location":"30_Components/48_IO/10_Mesh/40_MeshSTLLoader/#usage","title":"Usage","text":"<p>No pre-requisite in your scene to use a MeshLoader.</p>"},{"location":"30_Components/48_IO/10_Mesh/40_MeshSTLLoader/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;MeshSTLLoader name=\"STLLoader\" filename=\"mesh/circle_knot_ascii.stl\" printLog=\"true\" flipNormals=\"0\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('MeshSTLLoader', name=\"STLLoader\", filename=\"mesh/circle_knot_ascii.stl\", flipNormals=\"0\")\n</code></pre> <p>An example scene involving a MeshSTLLoader is available in examples/Component/IO/Mesh/MeshSTLLoader.scn</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] headerSize  Size of the header binary file (just before the number of facet).  80 forceBinary  Force reading in binary mode. Even in first keyword of the file is solid.  0 mergePositionUsingMap  Since positions are duplicated in a STL, they have to be merged. Using a map to do so will temporarily duplicate memory but should be more efficient. Disable it if memory is really an issue.  1 Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/40_MeshSTLLoader/#examples","title":"Examples","text":"<p>Component/IO/Mesh/MeshSTLLoader.scn</p> XMLPython <pre><code>&lt;!-- For more details see: https://wiki.sofa-framework.org/tdev/wiki/Notes/NewLoaderArchitecture --&gt;\n&lt;Node&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshSTLLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showVisual\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;MeshSTLLoader name=\"STLLoader\" filename=\"mesh/circle_knot_ascii.stl\" printLog=\"true\" flipNormals=\"0\" /&gt;\n    &lt;OglModel src=\"@STLLoader\" name=\"VisualModel\" color=\"red\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    rootNode = rootNode.addChild('rootNode')\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    rootNode.addObject('VisualStyle', displayFlags=\"showVisual\")\n    rootNode.addObject('DefaultAnimationLoop')\n    rootNode.addObject('MeshSTLLoader', name=\"STLLoader\", filename=\"mesh/circle_knot_ascii.stl\", printLog=\"true\", flipNormals=\"0\")\n    rootNode.addObject('OglModel', src=\"@STLLoader\", name=\"VisualModel\", color=\"red\")\n</code></pre> <p>Component/IO/Mesh/MeshSTLLoader_binary.scn</p> XMLPython <pre><code>&lt;!-- For more details see: https://wiki.sofa-framework.org/tdev/wiki/Notes/NewLoaderArchitecture --&gt;\n&lt;Node&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshSTLLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showVisual\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshSTLLoader name=\"STLLoader\" filename=\"mesh/pliers_binary.stl\" printLog=\"true\" /&gt;\n    &lt;OglModel src=\"@STLLoader\" name=\"VisualModel\" color=\"red\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    rootNode = rootNode.addChild('rootNode')\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    rootNode.addObject('VisualStyle', displayFlags=\"showVisual\")\n    rootNode.addObject('DefaultAnimationLoop')\n    rootNode.addObject('MeshSTLLoader', name=\"STLLoader\", filename=\"mesh/pliers_binary.stl\", printLog=\"true\")\n    rootNode.addObject('OglModel', src=\"@STLLoader\", name=\"VisualModel\", color=\"red\")\n</code></pre>"},{"location":"30_Components/48_IO/10_Mesh/50_MeshVTKLoader/","title":"MeshVTKLoader","text":"<p>This component belongs to the category of the MeshLoaders.</p> <p>The MeshVTKLoader loads a mesh from a file under the format *.vtk. Such a mesh file can be either surface or volumetric meshes. The *.vtk meshes can be generated using the Paraview software.</p>"},{"location":"30_Components/48_IO/10_Mesh/50_MeshVTKLoader/#usage","title":"Usage","text":"<p>No pre-requisite in your scene to use a MeshLoader.</p>"},{"location":"30_Components/48_IO/10_Mesh/50_MeshVTKLoader/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;MeshVTKLoader name=\"VtkLoader\" filename=\"mesh/liver.vtk\" flipNormals=\"0\"/&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('MeshVTKLoader', name=\"VtkLoader\", filename=\"mesh/liver.vtk\", flipNormals=\"0\")\n</code></pre> <p>An example scene involving a MeshVTKLoader is available in examples/Component/IO/Mesh/MeshVTKLoader.scn</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/50_MeshVTKLoader/#examples","title":"Examples","text":"<p>Component/IO/Mesh/MeshVTKLoader.scn</p> XMLPython <pre><code>&lt;!-- For more details see: https://wiki.sofa-framework.org/tdev/wiki/Notes/NewLoaderArchitecture --&gt;\n&lt;Node name=\"Root\" gravity=\"0 -9.81 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshVTKLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"vtk file\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshVTKLoader name=\"VtkLoader\" filename=\"mesh/liver.vtk\" flipNormals=\"0\"/&gt;\n        &lt;!--      &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" /&gt; --&gt;\n        &lt;MechanicalObject name=\"dofs\" scale=\"1\" src=\"@VtkLoader\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"topo\" src=\"@VtkLoader\" /&gt;\n        &lt;TriangleSetTopologyModifier name=\"modif\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"triGeo\" /&gt;\n        &lt;OglModel name=\"VisualModel\" src=\"@VtkLoader\" color=\"red\" texturename=\"textures/liver-texture-square.png\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 -9.81 0\", dt=\"0.02\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\")\n    Root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    Root.addObject('BruteForceBroadPhase')\n    Root.addObject('BVHNarrowPhase')\n    Root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    Root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    vtk file = Root.addChild('vtk file')\n    vtk file.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    vtk file.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    vtk file.addObject('MeshVTKLoader', name=\"VtkLoader\", filename=\"mesh/liver.vtk\", flipNormals=\"0\")\n    vtk file.addObject('MechanicalObject', name=\"dofs\", scale=\"1\", src=\"@VtkLoader\")\n    vtk file.addObject('TriangleSetTopologyContainer', name=\"topo\", src=\"@VtkLoader\")\n    vtk file.addObject('TriangleSetTopologyModifier', name=\"modif\")\n    vtk file.addObject('TriangleSetGeometryAlgorithms', name=\"triGeo\")\n    vtk file.addObject('OglModel', name=\"VisualModel\", src=\"@VtkLoader\", color=\"red\", texturename=\"textures/liver-texture-square.png\")\n</code></pre>"},{"location":"30_Components/48_IO/10_Mesh/80_VTKExport/","title":"Exporting in VTK format","text":"<p>In this section, we will explain how to export a 3D object in a VTK format file.</p>"},{"location":"30_Components/48_IO/10_Mesh/80_VTKExport/#how-to-use-it","title":"How to use it","text":"<p>Put :</p> <p>into a node where a BaseMeshTopology exists.</p> <ul> <li>filename = : where to save exported VTK file</li> <li>edges/triangles/quads/tetras/hexas= : which primitive you want to     export (at least one type is required)</li> <li>pointsDataFields= where string= : indicates where the exporter will     get its values to put on the points. Obviously, the number of values     has to be the same as the number of points. Several data can be     listed, just separate them with a space.</li> <li>cellsDataFields= where string= : the same as the points. You must     notice that, for now, the mapping between a primitive and a value is     not possible. Consequently, only one primitive can get values (as     the number of values must equal the number of cells)</li> </ul>"},{"location":"30_Components/48_IO/10_Mesh/80_VTKExport/#limitations","title":"Limitations","text":"<p>For now, this class supports only , for the data, Vec{1,2}{f/d} as an array of values and Vec3{f/d} as an array of vectors ('real' vector with arrow and so on ...) The export is processed when Control+E keys are pressed.Don't forget to set listening to true.  </p>"},{"location":"30_Components/48_IO/10_Mesh/80_VTKExport/#example","title":"Example","text":"<ul> <li>example/Component/Collision/Response/VTKExporter.scn</li> </ul> <p>{.size-full .wp-image-1624 .aligncenter width=\"600\" height=\"357\"}</p>"},{"location":"30_Components/48_IO/10_Mesh/80_VTKExport/#reconstruct-vtk-mesh-in-paraview","title":"Reconstruct VTK mesh in ParaView","text":"<p>The VTKExporter component will export the mesh as a \"VTK Unstructured Grid\". This part will explain how to get back a \"VTK Polygonal Mesh\" which could be reload in SOFA. This pipeline has been realised using ParaView release 3.6.2.</p> <ul> <li>Step 1: Open your export file: example.vtk0.vtu (File -&gt; Open).</li> <li>Step 2: unselect \"position\" and then apply.</li> <li>Step 3: Extract Surface (Filters-&gt; Extract Surface), and apply.</li> <li>Step 4: Save Data as VTK file, either in ascii or binary (File -&gt;     Save Data).</li> </ul> <p>You can now use the component MeshVTKLoader to load this mesh in SOFA. Additionally, if you want to save only the principal component of the mesh (remove small elements) Between step 2 and 3 do:</p> <ul> <li>Step 2.1: Filter -&gt; Connectivity, and apply.</li> <li>Step 2.2: Filter -&gt; Threshold, and change the boundary to keep     region between 0 and 1</li> </ul>"},{"location":"30_Components/48_IO/10_Mesh/BlenderExporter/","title":"BlenderExporter","text":"<p>Export the simulation result as blender point cache files</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::_blenderexporter_</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 path  output path  baseName  Base name for the output files  simulationType  simulation type (0: soft body, 1: particles, 2:cloth, 3:hair)  0 step  save the  simulation result every step frames  2 nbPtsByHair  number of element by hair strand  20 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/GIDMeshLoader/","title":"GIDMeshLoader","text":"<p>Loads volumetric meshes generated by GID. Some element types are not implemented.</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/GIDMeshLoader/#examples","title":"Examples","text":"<p>Component/IO/Mesh/GIDMeshLoader.scn</p> XMLPython <pre><code>&lt;!-- For more details see: https://wiki.sofa-framework.org/tdev/wiki/Notes/NewLoaderArchitecture --&gt;\n&lt;Node name=\"Root\" gravity=\"0 0 -9810\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [GIDMeshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [SparseLDLSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehavior\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"Tripod\"&gt;\n        &lt;EulerImplicitSolver/&gt;\n        &lt;SparseLDLSolver/&gt;\n        &lt;GIDMeshLoader name=\"loader\" filename=\"mesh/tripod.gidmsh\" /&gt;\n        &lt;MeshTopology src=\"@loader\"/&gt;\n        &lt;MechanicalObject/&gt;\n        &lt;UniformMass totalMass=\"0.035\"/&gt;\n        &lt;BoxROI name=\"roi\" box=\"-10 -10 -10 10 10 10\" drawBoxes=\"1\"/&gt;\n        &lt;FixedProjectiveConstraint indices=\"@roi.indices\"/&gt;\n        &lt;TetrahedronFEMForceField youngModulus=\"100\" poissonRatio=\"0.45\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 -9810\", dt=\"0.02\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('VisualStyle', displayFlags=\"showBehavior\")\n    Root.addObject('DefaultAnimationLoop')\n\n    Tripod = Root.addChild('Tripod')\n    Tripod.addObject('EulerImplicitSolver')\n    Tripod.addObject('SparseLDLSolver')\n    Tripod.addObject('GIDMeshLoader', name=\"loader\", filename=\"mesh/tripod.gidmsh\")\n    Tripod.addObject('MeshTopology', src=\"@loader\")\n    Tripod.addObject('MechanicalObject')\n    Tripod.addObject('UniformMass', totalMass=\"0.035\")\n    Tripod.addObject('BoxROI', name=\"roi\", box=\"-10 -10 -10 10 10 10\", drawBoxes=\"1\")\n    Tripod.addObject('FixedProjectiveConstraint', indices=\"@roi.indices\")\n    Tripod.addObject('TetrahedronFEMForceField', youngModulus=\"100\", poissonRatio=\"0.45\")\n</code></pre>"},{"location":"30_Components/48_IO/10_Mesh/GridMeshCreator/","title":"GridMeshCreator","text":"<p>Procedural creation of a two-dimensional mesh.</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] resolution  Number of vertices in each direction  2 2 trianglePattern  0: no triangles, 1: alternate triangles, 2: upward triangles, 3: downward triangles  2 Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/GridMeshCreator/#examples","title":"Examples","text":"<p>Component/IO/Mesh/GridMeshCreator.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.04\" gravity=\"0 -1 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [GridMeshCreator] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangleFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [FastTriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehavior hideCollision hideVisual \" /&gt;    \n    &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\" /&gt;\n    &lt;Node name=\"Thin shell\"&gt;\n                &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\" trianglePattern=\"1\" rotation=\"180 0 0 \" scale=\"10 10 0\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject name=\"defoDOF\" template=\"Vec3\"  src=\"@loader\" showObject=\"1\"/&gt;\n                &lt;EdgeSetGeometryAlgorithms /&gt;\n                &lt;BoxConstraint box=\"-0.5 -0.5 -0.5  10.5 0.005 0.005  \" /&gt;\n                &lt;TriangleFEMForceField name=\"FEM1\" youngModulus=\"20000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n                &lt;FastTriangularBendingSprings bendingStiffness=\"1000\" /&gt;\n                &lt;UniformMass totalMass=\"2500\" printLog=\"0\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.04\", gravity=\"0 -1 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehavior hideCollision hideVisual \")\n    root.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n\n    Thin shell = root.addChild('Thin shell')\n    Thin shell.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\", trianglePattern=\"1\", rotation=\"180 0 0 \", scale=\"10 10 0\")\n    Thin shell.addObject('MeshTopology', src=\"@loader\")\n    Thin shell.addObject('MechanicalObject', name=\"defoDOF\", template=\"Vec3\", src=\"@loader\", showObject=\"1\")\n    Thin shell.addObject('EdgeSetGeometryAlgorithms')\n    Thin shell.addObject('BoxConstraint', box=\"-0.5 -0.5 -0.5  10.5 0.005 0.005  \")\n    Thin shell.addObject('TriangleFEMForceField', name=\"FEM1\", youngModulus=\"20000\", poissonRatio=\"0.3\", method=\"large\")\n    Thin shell.addObject('FastTriangularBendingSprings', bendingStiffness=\"1000\")\n    Thin shell.addObject('UniformMass', totalMass=\"2500\", printLog=\"0\")\n</code></pre>"},{"location":"30_Components/48_IO/10_Mesh/MeshExporter/","title":"MeshExporter","text":"<p>Export topology and positions into file.  Supported format are:  - vtkxml - vtk - netgen - teten - gmsh - obj  </p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::_meshexporter_</code></p> <p>parents: </p> <ul> <li><code>BaseSimulationExporter</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Path or filename where to export the data.  If missing the name of the component is used.  exportEveryNumberOfSteps  export file only at specified number of steps (0=disable, default=0)  0 exportAtBegin  export file before the simulation starts, once the simulation is initialized (default=false)  0 exportAtEnd  export file when the simulation is over and cleanup is called, i.e. just before deleting the simulation (default=false)  0 enable  Enable or disable the component. (default=true)  1 format  File format to use  ALL position  points position (will use points from topology or mechanical state if this is empty)  edges  write edge topology  1 triangles  write triangle topology  1 quads  write quad topology  1 tetras  write tetra topology  1 hexas  write hexa topology  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/MeshTrianLoader/","title":"MeshTrianLoader","text":"<p>Specific mesh loader for trian (only triangulations) file format.</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] trian2  Set to true if the mesh is a trian2 format.  0 neighborTable  Table of neighborhood triangle indices for each triangle.  edgesOnBorder  List of edges which are on the border of the mesh loaded.  trianglesOnBorderList  List of triangle indices which are on the border of the mesh loaded.  Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/MeshTrianLoader/#examples","title":"Examples","text":"<p>Component/IO/Mesh/MeshTrianLoader.scn</p> XMLPython <pre><code>&lt;!-- For more details see: https://wiki.sofa-framework.org/tdev/wiki/Notes/NewLoaderArchitecture --&gt;\n&lt;Node name=\"Root\" gravity=\"0 -9.81 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshTrianLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"Trian file\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshTrianLoader name=\"TrianLoader\" filename=\"mesh/coeur1.trian\" /&gt;\n        &lt;!--      &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" /&gt; --&gt;\n        &lt;MechanicalObject name=\"dofs\" scale=\"1\" src=\"@TrianLoader\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"topo\" src=\"@TrianLoader\" /&gt;\n        &lt;TriangleSetTopologyModifier name=\"modif\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"triGeo\" /&gt;\n        &lt;OglModel name=\"VisualModel\" src=\"@TrianLoader\" color=\"red\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 -9.81 0\", dt=\"0.02\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields showCollision showMapping\")\n    Root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    Root.addObject('BruteForceBroadPhase')\n    Root.addObject('BVHNarrowPhase')\n    Root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    Root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    Trian file = Root.addChild('Trian file')\n    Trian file.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Trian file.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Trian file.addObject('MeshTrianLoader', name=\"TrianLoader\", filename=\"mesh/coeur1.trian\")\n    Trian file.addObject('MechanicalObject', name=\"dofs\", scale=\"1\", src=\"@TrianLoader\")\n    Trian file.addObject('TriangleSetTopologyContainer', name=\"topo\", src=\"@TrianLoader\")\n    Trian file.addObject('TriangleSetTopologyModifier', name=\"modif\")\n    Trian file.addObject('TriangleSetGeometryAlgorithms', name=\"triGeo\")\n    Trian file.addObject('OglModel', name=\"VisualModel\", src=\"@TrianLoader\", color=\"red\")\n</code></pre>"},{"location":"30_Components/48_IO/10_Mesh/MeshXspLoader/","title":"MeshXspLoader","text":"<p>Specific mesh loader for Xsp file format.</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/OffSequenceLoader/","title":"OffSequenceLoader","text":"<p>Read and load an .off file at each timestep</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshOffLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] nbOfFiles  number of files in the sequence  1 stepDuration  how long each file is loaded  0.04 Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/STLExporter/","title":"STLExporter","text":"<p>Save a topology in file</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::_stlexporter_</code></p> <p>parents: </p> <ul> <li><code>BaseSimulationExporter</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Path or filename where to export the data.  If missing the name of the component is used.  exportEveryNumberOfSteps  export file only at specified number of steps (0=disable, default=0)  0 exportAtBegin  export file before the simulation starts, once the simulation is initialized (default=false)  0 exportAtEnd  export file when the simulation is over and cleanup is called, i.e. just before deleting the simulation (default=false)  0 enable  Enable or disable the component. (default=true)  1 binaryformat  if true, save in binary format, otherwise in ascii  1 position  points coordinates  triangle  triangles indices  quad  quads indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/SphereLoader/","title":"SphereLoader","text":"<p>Loader for sphere model description files</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>BaseLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  position  Sphere centers  listRadius  Radius of each sphere  scale  Scale applied to sphere positions &amp; radius  1 1 1 rotation  Rotation of the DOFs  0 0 0 translation  Translation applied to sphere positions  0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/StringMeshCreator/","title":"StringMeshCreator","text":"<p>Procedural creation of a one-dimensional mesh.</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>MeshLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  flipNormals  Flip Normals  0 triangulate  Divide all polygons into triangles  0 createSubelements  Divide all n-D elements into their (n-1)-D boundary elements (e.g. tetrahedra to triangles)  0 onlyAttachedPoints  Only keep points attached to elements of the mesh  0 translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 transformation  4x4 Homogeneous matrix to transform the DOFs (when present replace any)  [1 0 0 0,0 1 0 0,0 0 1 0,0 0 0 1] resolution  Number of vertices  2 Groups edgesGroups  Groups of Edges  trianglesGroups  Groups of Triangles  quadsGroups  Groups of Quads  polygonsGroups  Groups of Polygons  tetrahedraGroups  Groups of Tetrahedra  hexahedraGroups  Groups of Hexahedra  pentahedraGroups  Groups of Pentahedra  pyramidsGroups  Groups of Pyramids  Vectors position  Vertices of the mesh loaded  polylines  Polylines of the mesh loaded  edges  Edges of the mesh loaded  triangles  Triangles of the mesh loaded  quads  Quads of the mesh loaded  polygons  Polygons of the mesh loaded  highOrderEdgePositions  High order edge points of the mesh loaded  highOrderTrianglePositions  High order triangle points of the mesh loaded  highOrderQuadPositions  High order quad points of the mesh loaded  tetrahedra  Tetrahedra of the mesh loaded  hexahedra  Hexahedra of the mesh loaded  pentahedra  Pentahedra of the mesh loaded  highOrderTetrahedronPositions  High order tetrahedron points of the mesh loaded  highOrderHexahedronPositions  High order hexahedron points of the mesh loaded  pyramids  Pyramids of the mesh loaded  normals  Normals of the mesh loaded  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/VTKExporter/","title":"VTKExporter","text":"<p>Save State vectors from file at each timestep</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::_vtkexporter_</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  output VTK file name  XMLformat  Set to true to use XML format  1 position  points position (will use points from topology or mechanical state if this is empty)  edges  write edge topology  1 triangles  write triangle topology  0 quads  write quad topology  0 tetras  write tetra topology  0 hexas  write hexa topology  0 pointsDataFields  Data to visualize (on points)  cellsDataFields  Data to visualize (on cells)  exportEveryNumberOfSteps  export file only at specified number of steps (0=disable)  0 exportAtBegin  export file at the initialization  0 exportAtEnd  export file when the simulation is finished  0 overwrite  overwrite the file, otherwise create a new file at each export, with suffix in the filename  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/VTKExporter/#examples","title":"Examples","text":"<p>Component/IO/Mesh/VTKExporter.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9.81 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader VTKExporter] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetTopologyContainer] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshTopology name=\"mesh\" filename=\"mesh/dragon.obj\" /&gt;\n    &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/dragon.obj\" /&gt;\n    &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"mecha\" showObject=\"1\" /&gt;\n    &lt;TetrahedronSetTopologyContainer src=\"@loader\" name=\"topo\" /&gt;\n    &lt;VTKExporter filename=\"example.vtk\" listening=\"true\" edges=\"0\" triangles=\"1\" quads=\"0\" tetras=\"0\" pointsDataFields=\"mecha.position\" exportAtBegin=\"1\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 -9.81 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshTopology', name=\"mesh\", filename=\"mesh/dragon.obj\")\n    root.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/dragon.obj\")\n    root.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"mecha\", showObject=\"1\")\n    root.addObject('TetrahedronSetTopologyContainer', src=\"@loader\", name=\"topo\")\n    root.addObject('VTKExporter', filename=\"example.vtk\", listening=\"true\", edges=\"0\", triangles=\"1\", quads=\"0\", tetras=\"0\", pointsDataFields=\"mecha.position\", exportAtBegin=\"1\")\n</code></pre>"},{"location":"30_Components/48_IO/10_Mesh/VisualModelOBJExporter/","title":"VisualModelOBJExporter","text":"<p>Export the scene under the Wavefront OBJ format.When several frames are exported the file name have the following pattern: outfile000.obj outfile001.obj.</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::_visualmodelobjexporter_</code></p> <p>parents: </p> <ul> <li><code>BaseSimulationExporter</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Path or filename where to export the data.  If missing the name of the component is used.  exportEveryNumberOfSteps  export file only at specified number of steps (0=disable, default=0)  0 exportAtBegin  export file before the simulation starts, once the simulation is initialized (default=false)  0 exportAtEnd  export file when the simulation is over and cleanup is called, i.e. just before deleting the simulation (default=false)  0 enable  Enable or disable the component. (default=true)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/VoxelGridLoader/","title":"VoxelGridLoader","text":"<p>Voxel loader based on RAW files</p> <p>Target: <code>Sofa.Component.IO.Mesh</code></p> <p>namespace: <code>sofa::component::io::mesh</code></p> <p>parents: </p> <ul> <li><code>VoxelLoader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the object  position  Coordinates of the nodes loaded  hexahedra  Hexahedra loaded  voxelSize  Dimension of one voxel  1 1 1 resolution  Resolution of the voxel file  0 0 0 ROI  Region of interest (xmin, ymin, zmin, xmax, ymax, zmax)  0 0 0 65535 65535 65535 header  Header size in bytes  0 segmentationHeader  Header size in bytes  0 idxInRegularGrid  indices of the hexa in the grid.  bgValue  Background values (to be ignored)  dataValue  Active data values  generateHexa  Interpret voxel as either hexa or points  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/48_IO/10_Mesh/VoxelGridLoader/#examples","title":"Examples","text":"<p>Component/IO/Mesh/VoxelGridLoader.scn</p> XMLPython <pre><code>&lt;Node&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [VoxelGridLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetGeometryAlgorithms HexahedronSetTopologyContainer] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver  iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n    &lt;Node&gt;\n        &lt;VoxelGridLoader name=\"gridloader\" filename=\"textures/Test_64_64_4.raw\" voxelSize=\"0.1 0.1 0.1\" resolution=\"64 64 4\" bgValue=\"0\" /&gt;\n        &lt;HexahedronSetTopologyContainer src=\"@gridloader\" /&gt;\n        &lt;HexahedronSetGeometryAlgorithms drawHexa=\"1\"/&gt;\n        &lt;MechanicalObject showObject=\"1\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    rootNode = rootNode.addChild('rootNode')\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    rootNode.addObject('DefaultAnimationLoop')\n    rootNode.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    rootNode.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n\n    rootNode = rootNode.addChild('rootNode')\n    rootNode.addObject('VoxelGridLoader', name=\"gridloader\", filename=\"textures/Test_64_64_4.raw\", voxelSize=\"0.1 0.1 0.1\", resolution=\"64 64 4\", bgValue=\"0\")\n    rootNode.addObject('HexahedronSetTopologyContainer', src=\"@gridloader\")\n    rootNode.addObject('HexahedronSetGeometryAlgorithms', drawHexa=\"1\")\n    rootNode.addObject('MechanicalObject', showObject=\"1\")\n</code></pre>"},{"location":"30_Components/50_Mapping/20_ArticulatedSystemMapping/","title":"ArticulatedSystemMapping","text":"<p>This component belongs to the category of Multi2Mapping, which is the interface to describe many to many mapping. It allows for building an articulated system, like for robotics. From each articulation, it becomes therefore possible to compute the global motion of the system.</p> <p>Each articulation is represented as one degree of freedom (translation or rotation). All articulation DOFs are contained in a MechanicalObject with a <code>template=Vec1d</code>. From these local articulation DOFs, the ArticulatedSystemMapping can build a serial chain (arborescent chain).</p> <p>To compute this mapping, the ArticulatedSystemMapping needs an ArticulatedHierarchyContainer. At the initialization, this component browse the graph and detects to all articulations. The ArticulatedHierarchyContainer therefore contains a link to all pairs of:</p> <ul> <li>ArticulationCenter: defines the location of the articulation. It can either be defined relatively to the parent and child articulations (in local coordinates), or defined in the global coordinate system (and all local data are automatically computed).</li> <li>Articulation: defines the id (integer) and the nature of the articulation, e.g. a translation along the x axis <code>translationAxis=\"1 0 0\"</code> or rotation around the z axis <code>rotationAxis=\"0 0 1\"</code></li> </ul>"},{"location":"30_Components/50_Mapping/20_ArticulatedSystemMapping/#data","title":"Data","text":"<p>The ArticulatedSystemMapping builds the correspondence the articulations and the global motion of the system. It has therefore only two data:</p> <ul> <li>input1 link to the MechanicalObject containing the articulation DOFs (Vec1d)</li> <li>output link to the MechanicalObject containing the mapped DOFs in the global coordinate system for each rigid body (Rigid3d), i.e. for each part of the articulated system</li> </ul> <p>Note that the ArticulatedSystemMapping can include an optional second input, named input2. This data is a link to the MechanicalObject containing the rigid position of a moving base (Rigid3d). This is useful if the articulated system is attached on another body (which must be defined higher in the graph).</p>"},{"location":"30_Components/50_Mapping/20_ArticulatedSystemMapping/#usage","title":"Usage","text":"<p>This component and this structure works well for simple serial articulations. However, more advanced articulations like ball joint can not be created as is. Moreover, it can be noticed that only the position is given to the ArticulationCenter. The ArticulatedSystemMapping works well in quasi-static cases.</p> <p>Next steps of development:</p> <ul> <li>add option of defining a position and a rotation in the ArticulationCenter</li> <li>handle more complex articulations than only Vec1d (rotation/translation), like using quaternions</li> <li>representing the articulated system as a graph, separated from the scene graph</li> <li>load standard format (like urdf)</li> <li>validate the dynamic simulations</li> </ul>"},{"location":"30_Components/50_Mapping/20_ArticulatedSystemMapping/#example","title":"Example","text":"<p>An example scene involving a ArticulatedSystemMapping is available in applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedSystemMapping.scn.</p> <pre><code>&lt;EulerImplicitSolver name=\"cg odesolver\" /&gt;\n&lt;CGLinearSolver iterations=\"100\" name=\"linear solver\" threshold=\"1e-20\" tolerance=\"1e-20\" /&gt;\n\n&lt;Node name=\"restarticulation\"&gt;\n    &lt;MechanicalObject name=\"rest\" template=\"Vec1d\" position=\"0 0 0 0\" /&gt;\n    &lt;FixedConstraint indices=\"0 1 2 3\" /&gt;\n&lt;/Node&gt;\n\n\n&lt;Node name=\"articulation\"&gt;\n\n    &lt;MechanicalObject name=\"Articulations\" template=\"Vec1d\" position=\"0 0 0 0\" /&gt;\n\n    &lt;Node&gt;\n        &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" position=\"0 0 0  0 0 0 1  1 0 0  0 0 0 1  3 0 0  0 0 0 1  5 0 0  0 0 0 1  7 0 0  0 0 0 1\" /&gt;\n        &lt;BeamFEMForceField name=\"FEM\" radius=\"0.1\" youngModulus=\"1e8\" poissonRatio=\"0.45\"/&gt;\n        &lt;MeshTopology name=\"lines\" lines=\"0 1 1 2 2 3 3 4 \" /&gt;\n        &lt;UniformMass template=\"Rigid3d\" name=\"mass\" vertexMass=\"0.1 0.1 [1 0 0,0 1 0,0 0 1]\" /&gt;\n        &lt;FixedConstraint template=\"Rigid3d\" name=\"fixOrigin\" indices=\"0\" /&gt;\n        &lt;ArticulatedSystemMapping input1=\"@../Articulations\" output=\"@DOFs\" /&gt;\n\n    &lt;/Node&gt;\n\n\n    &lt;ArticulatedHierarchyContainer /&gt;\n\n\n    &lt;Node name=\"articulationCenters\"&gt;\n        &lt;Node name=\"articulationCenter1\"&gt;\n            &lt;ArticulationCenter parentIndex=\"0\" childIndex=\"1\" posOnParent=\"0 0 0\" posOnChild=\"-1 0 0\" articulationProcess=\"2\" /&gt;\n            &lt;Node name=\"articulations\"&gt;\n                &lt;Articulation translation=\"0\" rotation=\"1\" rotationAxis=\"0 0 1\" articulationIndex=\"0\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"articulationCenter2\"&gt;\n            &lt;ArticulationCenter parentIndex=\"1\" childIndex=\"2\" posOnParent=\"1 0 0\" posOnChild=\"-1 0 0\" articulationProcess=\"2\" /&gt;\n            &lt;Node name=\"articulations\"&gt;\n                &lt;Articulation translation=\"0\" rotation=\"1\" rotationAxis=\"0 0 1\" articulationIndex=\"1\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"articulationCenter3\"&gt;\n            &lt;ArticulationCenter parentIndex=\"2\" childIndex=\"3\" posOnParent=\"1 0 0\" posOnChild=\"-1 0 0\" articulationProcess=\"0\" /&gt;\n            &lt;Node name=\"articulations\"&gt;\n                &lt;Articulation translation=\"0\" rotation=\"1\" rotationAxis=\"0 0 1\" articulationIndex=\"2\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"articulationCenter4\"&gt;\n            &lt;ArticulationCenter parentIndex=\"3\" childIndex=\"4\" posOnParent=\"1 0 0\" posOnChild=\"-1 0 0\" articulationProcess=\"1\" /&gt;\n            &lt;Node name=\"articulations\"&gt;\n                &lt;Articulation translation=\"0\" rotation=\"1\" rotationAxis=\"0 0 1\" articulationIndex=\"3\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n\n&lt;StiffSpringForceField name=\"Spring\" object1=\"@articulation\" object2=\"@restarticulation\" spring=\" 1 1 100.0 1.0 0.0  2 2 100.0 1.0 0.0  3 3 100.0 1.0 0.0\" /&gt;\n</code></pre> <p>In this above example, we have five rigid frames, saved in the MechanicalObject \"DOFs\", connected through four articulations. All four articulations  all corresponds to a rotation around the z axis (see the component Articulation). The MechanicalObject \"Articulations\" contains the four rotation angles (Vec1d) of each articulation.</p> <p>Note that the MechanicalObject \"DOF\" only contains the result of the articulated system, i.e. it contains mapped degrees of freedom (not real degrees of freedom).</p> <p>The ArticulatedHierarchyContainer must be defined before the description of the articulations. Then, all articulations are made up of a pair: ArticulationCenter+Articulation.</p> <p>The ArticulationCenter defines the location of the articulation. In the example, the position of one articulation is defined relatively to the position of the others. For instance, the second articulation \"articulationCenter2\" is located in x+=1 relatively to the first articulation, and x-=1 relatively to the third articulation.</p> <p>Finally a StiffSpringForceField is added to enforce each articulation get back to its rest configuration (saved in the MechanicalObject \"rest\") through elastic forces. This component is optional.</p>"},{"location":"30_Components/50_Mapping/Linear/BarycentricMapping/","title":"BarycentricMapping","text":"<p>Mapping using barycentric coordinates of the child with respect to cells of its parent Supports GPU-side computations using CUDA Supports GPU-side computations using CUDA Supports GPU-side computations using CUDA Supports GPU-side computations using CUDA Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d,Rigid3d</code></li> <li><code>Vec3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 useRestPosition  Use the rest position of the input and output models to initialize the mapping  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map mapper Internal mapper created depending on the type of topology input_topology Input topology container (usually the surrounding domain). output_topology Output topology container (usually the immersed domain)."},{"location":"30_Components/50_Mapping/Linear/BarycentricMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/BarycentricMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField RegularGridSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showMappings\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"Chain\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_19\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_19\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\"  rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" /&gt;\n            &lt;UniformMass vertexMass=\"0.1\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"red\" dx=\"2.5\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"5\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"4\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_8\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_8\" dx=\"5\" color=\"green\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"5\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject dx=\"7.5\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"2\" nz=\"5\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-0.5\" ymax=\"0.5\" zmin=\"-2\" zmax=\"2\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_13\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_13\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"10\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus2.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_17\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_17\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"ChainFEM\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dz=\"6\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_21\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_21\" color=\"gray\" dz=\"6\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM1\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" dz=\"6\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_23\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_23\" color=\"red\" dx=\"2.5\" dz=\"6\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" dz=\"6\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM2\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"5\" dz=\"6\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"red\" dx=\"5\" dz=\"6\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"5\" dz=\"6\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM3\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" dz=\"6\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_6\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_6\" color=\"red\" dx=\"7.5\" dz=\"6\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" dz=\"6\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM4\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"10\" dz=\"6\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_10\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_10\" color=\"red\" dx=\"10\" dz=\"6\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"10\" dz=\"6\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"ChainSpring\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dz=\"12\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_14\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_14\" dz=\"12\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring1\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" dz=\"12\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"4\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_18\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_18\" dx=\"2.5\" dz=\"12\" color=\"green\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" dz=\"12\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring2\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"5\" dz=\"12\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"4\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_22\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_22\" dx=\"5\" dz=\"12\" color=\"green\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"5\" dz=\"12\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring3\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" dz=\"12\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"4\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" dx=\"7.5\" dz=\"12\" color=\"green\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" dz=\"12\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring4\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"10\" dz=\"12\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"4\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_5\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_5\" dx=\"10\" dz=\"12\" color=\"green\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"10\" dz=\"12\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"ChainFFD\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dz=\"18\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_9\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_9\" dz=\"18\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD1\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject dx=\"2.5\" dz=\"18\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"2\" nz=\"5\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-0.5\" ymax=\"0.5\" zmin=\"-2\" zmax=\"2\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_11\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_11\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD2\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject dx=\"5\" dz=\"18\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"5\" nz=\"2\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-2\" ymax=\"2\" zmin=\"-0.5\" zmax=\"0.5\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_15\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_15\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD3\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject dx=\"7.5\" dz=\"18\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"2\" nz=\"5\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-0.5\" ymax=\"0.5\" zmin=\"-2\" zmax=\"2\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_20\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_20\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD4\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject dx=\"10\" dz=\"18\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"5\" nz=\"2\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-2\" ymax=\"2\" zmin=\"-0.5\" zmax=\"0.5\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_24\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_24\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"ChainRigid\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dz=\"24\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" dz=\"24\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid1\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"2.5\" dz=\"24\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_4\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_4\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid2\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"5\" dz=\"24\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus2.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_7\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_7\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid3\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"7.5\" dz=\"24\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_12\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_12\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid4\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"10\" dz=\"24\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus2.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_16\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_16\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showMappings\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    Chain = root.addChild('Chain')\n\n    TorusFixed = Chain.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_19\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_19\", color=\"gray\")\n\n    TorusFEM = Chain.addChild('TorusFEM')\n    TorusFEM.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\", rayleighMass=\"0.1\")\n    TorusFEM.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFEM.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusFEM.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\")\n    TorusFEM.addObject('UniformMass', vertexMass=\"0.1\")\n    TorusFEM.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"red\", dx=\"2.5\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusSpring = Chain.addChild('TorusSpring')\n    TorusSpring.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusSpring.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusSpring.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusSpring.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring.addObject('MechanicalObject', src=\"@loader\", dx=\"5\")\n    TorusSpring.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"4\")\n\n    Visu = TorusSpring.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_8\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_8\", dx=\"5\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD = Chain.addChild('TorusFFD')\n    TorusFFD.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFFD.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFFD.addObject('MechanicalObject', dx=\"7.5\")\n    TorusFFD.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD.addObject('RegularGridTopology', nx=\"6\", ny=\"2\", nz=\"5\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-0.5\", ymax=\"0.5\", zmin=\"-2\", zmax=\"2\")\n    TorusFFD.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_13\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_13\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusRigid = Chain.addChild('TorusRigid')\n    TorusRigid.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusRigid.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid.addObject('MechanicalObject', template=\"Rigid3\", dx=\"10\")\n    TorusRigid.addObject('UniformMass', filename=\"BehaviorModels/torus2.rigid\")\n\n    Visu = TorusRigid.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_17\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_17\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    ChainFEM = root.addChild('ChainFEM')\n\n    TorusFixed = ChainFEM.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\", dz=\"6\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_21\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_21\", color=\"gray\", dz=\"6\")\n\n    TorusFEM1 = ChainFEM.addChild('TorusFEM1')\n    TorusFEM1.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFEM1.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFEM1.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusFEM1.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM1.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\", dz=\"6\")\n    TorusFEM1.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM1.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_23\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_23\", color=\"red\", dx=\"2.5\", dz=\"6\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\", dz=\"6\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFEM2 = ChainFEM.addChild('TorusFEM2')\n    TorusFEM2.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFEM2.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFEM2.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusFEM2.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\", dz=\"6\")\n    TorusFEM2.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM2.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"red\", dx=\"5\", dz=\"6\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\", dz=\"6\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFEM3 = ChainFEM.addChild('TorusFEM3')\n    TorusFEM3.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFEM3.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFEM3.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusFEM3.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM3.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\", dz=\"6\")\n    TorusFEM3.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM3.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_6\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_6\", color=\"red\", dx=\"7.5\", dz=\"6\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\", dz=\"6\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFEM4 = ChainFEM.addChild('TorusFEM4')\n    TorusFEM4.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFEM4.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFEM4.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusFEM4.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM4.addObject('MechanicalObject', src=\"@loader\", dx=\"10\", dz=\"6\")\n    TorusFEM4.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM4.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_10\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_10\", color=\"red\", dx=\"10\", dz=\"6\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"10\", dz=\"6\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    ChainSpring = root.addChild('ChainSpring')\n\n    TorusFixed = ChainSpring.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\", dz=\"12\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_14\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_14\", dz=\"12\", color=\"gray\")\n\n    TorusSpring1 = ChainSpring.addChild('TorusSpring1')\n    TorusSpring1.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusSpring1.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusSpring1.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusSpring1.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring1.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\", dz=\"12\")\n    TorusSpring1.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring1.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"4\")\n\n    Visu = TorusSpring1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_18\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_18\", dx=\"2.5\", dz=\"12\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\", dz=\"12\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusSpring2 = ChainSpring.addChild('TorusSpring2')\n    TorusSpring2.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusSpring2.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusSpring2.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusSpring2.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\", dz=\"12\")\n    TorusSpring2.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring2.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"4\")\n\n    Visu = TorusSpring2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_22\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_22\", dx=\"5\", dz=\"12\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\", dz=\"12\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusSpring3 = ChainSpring.addChild('TorusSpring3')\n    TorusSpring3.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusSpring3.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusSpring3.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusSpring3.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring3.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\", dz=\"12\")\n    TorusSpring3.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring3.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"4\")\n\n    Visu = TorusSpring3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", dx=\"7.5\", dz=\"12\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\", dz=\"12\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusSpring4 = ChainSpring.addChild('TorusSpring4')\n    TorusSpring4.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusSpring4.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusSpring4.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusSpring4.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring4.addObject('MechanicalObject', src=\"@loader\", dx=\"10\", dz=\"12\")\n    TorusSpring4.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring4.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"4\")\n\n    Visu = TorusSpring4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_5\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_5\", dx=\"10\", dz=\"12\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"10\", dz=\"12\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    ChainFFD = root.addChild('ChainFFD')\n\n    TorusFixed = ChainFFD.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\", dz=\"18\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_9\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_9\", dz=\"18\", color=\"gray\")\n\n    TorusFFD1 = ChainFFD.addChild('TorusFFD1')\n    TorusFFD1.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFFD1.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFFD1.addObject('MechanicalObject', dx=\"2.5\", dz=\"18\")\n    TorusFFD1.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD1.addObject('RegularGridTopology', nx=\"6\", ny=\"2\", nz=\"5\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-0.5\", ymax=\"0.5\", zmin=\"-2\", zmax=\"2\")\n    TorusFFD1.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_11\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_11\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD2 = ChainFFD.addChild('TorusFFD2')\n    TorusFFD2.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFFD2.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFFD2.addObject('MechanicalObject', dx=\"5\", dz=\"18\")\n    TorusFFD2.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD2.addObject('RegularGridTopology', nx=\"6\", ny=\"5\", nz=\"2\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-2\", ymax=\"2\", zmin=\"-0.5\", zmax=\"0.5\")\n    TorusFFD2.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_15\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_15\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD3 = ChainFFD.addChild('TorusFFD3')\n    TorusFFD3.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFFD3.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFFD3.addObject('MechanicalObject', dx=\"7.5\", dz=\"18\")\n    TorusFFD3.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD3.addObject('RegularGridTopology', nx=\"6\", ny=\"2\", nz=\"5\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-0.5\", ymax=\"0.5\", zmin=\"-2\", zmax=\"2\")\n    TorusFFD3.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_20\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_20\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD4 = ChainFFD.addChild('TorusFFD4')\n    TorusFFD4.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFFD4.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFFD4.addObject('MechanicalObject', dx=\"10\", dz=\"18\")\n    TorusFFD4.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD4.addObject('RegularGridTopology', nx=\"6\", ny=\"5\", nz=\"2\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-2\", ymax=\"2\", zmin=\"-0.5\", zmax=\"0.5\")\n    TorusFFD4.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_24\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_24\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    ChainRigid = root.addChild('ChainRigid')\n\n    TorusFixed = ChainRigid.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\", dz=\"24\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", dz=\"24\", color=\"gray\")\n\n    TorusRigid1 = ChainRigid.addChild('TorusRigid1')\n    TorusRigid1.addObject('EulerImplicitSolver', rayleighStiffness=\"0\")\n    TorusRigid1.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid1.addObject('MechanicalObject', template=\"Rigid3\", dx=\"2.5\", dz=\"24\")\n    TorusRigid1.addObject('UniformMass', filename=\"BehaviorModels/torus.rigid\")\n\n    Visu = TorusRigid1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_4\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_4\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid2 = ChainRigid.addChild('TorusRigid2')\n    TorusRigid2.addObject('EulerImplicitSolver', rayleighStiffness=\"0\")\n    TorusRigid2.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid2.addObject('MechanicalObject', template=\"Rigid3\", dx=\"5\", dz=\"24\")\n    TorusRigid2.addObject('UniformMass', filename=\"BehaviorModels/torus2.rigid\")\n\n    Visu = TorusRigid2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_7\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_7\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid3 = ChainRigid.addChild('TorusRigid3')\n    TorusRigid3.addObject('EulerImplicitSolver', rayleighStiffness=\"0\")\n    TorusRigid3.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid3.addObject('MechanicalObject', template=\"Rigid3\", dx=\"7.5\", dz=\"24\")\n    TorusRigid3.addObject('UniformMass', filename=\"BehaviorModels/torus.rigid\")\n\n    Visu = TorusRigid3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_12\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_12\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid4 = ChainRigid.addChild('TorusRigid4')\n    TorusRigid4.addObject('EulerImplicitSolver', rayleighStiffness=\"0\")\n    TorusRigid4.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid4.addObject('MechanicalObject', template=\"Rigid3\", dx=\"10\", dz=\"24\")\n    TorusRigid4.addObject('UniformMass', filename=\"BehaviorModels/torus2.rigid\")\n\n    Visu = TorusRigid4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_16\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_16\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n</code></pre> <p>Component/Mapping/Linear/BarycentricMappingTrussBeam.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [LocalMinDistance] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping IdentityMapping TubularMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [BeamFEMForceField TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Edge2QuadTopologicalMapping Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showCollisionModels\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;LocalMinDistance name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.05\" /&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;!-- A deformable square mesh --&gt;\n    &lt;Node name=\"Truss\" activated=\"true\" gravity=\"0 0 0\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"125\" tolerance=\"1e-16\" threshold=\"1e-16\" /&gt;\n        &lt;MeshGmshLoader name=\"meshLoader0\" filename=\"mesh/truss_tetra.msh\" /&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"Container\" src=\"@meshLoader0\" /&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"TrussMO\" /&gt;\n        &lt;UniformMass totalMass=\"0.05\" /&gt;\n        &lt;BoxConstraint box=\"-0.001 -0.001 -0.001 0.001 0.011 0.011\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"300000\" poissonRatio=\"0.45\" method=\"large\" /&gt;\n        &lt;BoxROI box=\"0.099 -0.001 -0.001 0.11 0.011 0.011\"/&gt;\n        &lt;ConstantForceField forces=\"0 -0.1 0\" /&gt;\n\n        &lt;Node name=\"Triangle\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" /&gt;\n            &lt;Tetra2TriangleTopologicalMapping input=\"@/Truss/Container\" output=\"@Container\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;Node name=\"TriangleVisual\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n                &lt;IdentityMapping template=\"Vec3,Vec3\" name=\"default12\" input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Beam\"&gt;\n            &lt;MechanicalObject template=\"Rigid3\" name=\"BeamMO\" position=\"0 0 0  0 0 0 1  0.02 0 0  0 0 0 1  0.04 0 0  0 0 0 1   0.06 0 0  0 0 0 1  0.08 0 0  0 0 0 1   0.1 0 0  0 0 0 1\" /&gt;\n            &lt;MeshTopology name=\"BeamMesh\" lines=\"0 1 1 2 2 3 3 4 4 5\" /&gt;\n            &lt;FixedProjectiveConstraint name=\"BeamFixedProjectiveConstraint\" indices=\"0\" /&gt;\n            &lt;UniformMass vertexMass=\"0.001 0.001 [0.0001 0 0 0 0.0001 0 0 0 0.0001]\" /&gt;\n            &lt;BeamFEMForceField name=\"BeamFEM\" radius=\"0.005\" youngModulus=\"3000000000\" poissonRatio=\"0.45\" /&gt;\n            &lt;ConstantForceField indices=\"5\" forces=\"0 0 0 -10 0 0\" /&gt;\n            &lt;BarycentricMapping isMechanical=\"true\" input=\"@TrussMO\" output=\"@BeamMO\" /&gt;\n            &lt;Node name=\"VisuThread\"&gt;\n                &lt;MechanicalObject name=\"Quads\" /&gt;\n                &lt;include href=\"Objects/QuadSetTopology.xml\" /&gt;\n                &lt;Edge2QuadTopologicalMapping nbPointsOnEachCircle=\"10\" radius=\"0.005\" input=\"@BeamMesh\" output=\"@Container\" /&gt;\n                &lt;TubularMapping nbPointsOnEachCircle=\"10\" radius=\"0.005\" input=\"@BeamMO\" output=\"@Quads\" /&gt;\n                &lt;Node name=\"VisuOgl\"&gt;\n                    &lt;OglModel name=\"Visual\" color=\"0.5 0.5 1.0\" /&gt;\n                    &lt;IdentityMapping input=\"@Quads\" output=\"@Visual\" /&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showCollisionModels\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('LocalMinDistance', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.05\")\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('DefaultAnimationLoop')\n\n    Truss = root.addChild('Truss', activated=\"true\", gravity=\"0 0 0\")\n    Truss.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Truss.addObject('CGLinearSolver', iterations=\"125\", tolerance=\"1e-16\", threshold=\"1e-16\")\n    Truss.addObject('MeshGmshLoader', name=\"meshLoader0\", filename=\"mesh/truss_tetra.msh\")\n    Truss.addObject('TetrahedronSetTopologyContainer', name=\"Container\", src=\"@meshLoader0\")\n    Truss.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Truss.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Truss.addObject('MechanicalObject', template=\"Vec3\", name=\"TrussMO\")\n    Truss.addObject('UniformMass', totalMass=\"0.05\")\n    Truss.addObject('BoxConstraint', box=\"-0.001 -0.001 -0.001 0.001 0.011 0.011\")\n    Truss.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"300000\", poissonRatio=\"0.45\", method=\"large\")\n    Truss.addObject('BoxROI', box=\"0.099 -0.001 -0.001 0.11 0.011 0.011\")\n    Truss.addObject('ConstantForceField', forces=\"0 -0.1 0\")\n\n    Triangle = Truss.addChild('Triangle')\n    Triangle.addObject('include', href=\"Objects/TriangleSetTopology.xml\")\n    Triangle.addObject('Tetra2TriangleTopologicalMapping', input=\"@/Truss/Container\", output=\"@Container\")\n    Triangle.addObject('TriangleCollisionModel')\n\n    TriangleVisual = Triangle.addChild('TriangleVisual')\n    TriangleVisual.addObject('OglModel', template=\"Vec3\", name=\"Visual\", material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    TriangleVisual.addObject('IdentityMapping', template=\"Vec3,Vec3\", name=\"default12\", input=\"@..\", output=\"@Visual\")\n\n    Beam = Truss.addChild('Beam')\n    Beam.addObject('MechanicalObject', template=\"Rigid3\", name=\"BeamMO\", position=\"0 0 0  0 0 0 1  0.02 0 0  0 0 0 1  0.04 0 0  0 0 0 1   0.06 0 0  0 0 0 1  0.08 0 0  0 0 0 1   0.1 0 0  0 0 0 1\")\n    Beam.addObject('MeshTopology', name=\"BeamMesh\", lines=\"0 1 1 2 2 3 3 4 4 5\")\n    Beam.addObject('FixedProjectiveConstraint', name=\"BeamFixedProjectiveConstraint\", indices=\"0\")\n    Beam.addObject('UniformMass', vertexMass=\"0.001 0.001 [0.0001 0 0 0 0.0001 0 0 0 0.0001]\")\n    Beam.addObject('BeamFEMForceField', name=\"BeamFEM\", radius=\"0.005\", youngModulus=\"3000000000\", poissonRatio=\"0.45\")\n    Beam.addObject('ConstantForceField', indices=\"5\", forces=\"0 0 0 -10 0 0\")\n    Beam.addObject('BarycentricMapping', isMechanical=\"true\", input=\"@TrussMO\", output=\"@BeamMO\")\n\n    VisuThread = Beam.addChild('VisuThread')\n    VisuThread.addObject('MechanicalObject', name=\"Quads\")\n    VisuThread.addObject('include', href=\"Objects/QuadSetTopology.xml\")\n    VisuThread.addObject('Edge2QuadTopologicalMapping', nbPointsOnEachCircle=\"10\", radius=\"0.005\", input=\"@BeamMesh\", output=\"@Container\")\n    VisuThread.addObject('TubularMapping', nbPointsOnEachCircle=\"10\", radius=\"0.005\", input=\"@BeamMO\", output=\"@Quads\")\n\n    VisuOgl = VisuThread.addChild('VisuOgl')\n    VisuOgl.addObject('OglModel', name=\"Visual\", color=\"0.5 0.5 1.0\")\n    VisuOgl.addObject('IdentityMapping', input=\"@Quads\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/50_Mapping/Linear/BeamLinearMapping/","title":"BeamLinearMapping","text":"<p>Set the positions and velocities of points attached to a beam using linear interpolation between DOFs Set the positions and velocities of points attached to a beam using linear interpolation between DOFs</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 localCoord  true if initial coordinates are in the beam local coordinate system (i.e. a point at (10,0,0) is on the DOF number 10, whereas if this is false it is at whatever position on the beam where the distance from the initial DOF is 10)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/Linear/CenterOfMassMapping/","title":"CenterOfMassMapping","text":"<p>Set the point to the center of mass of the DOFs it is attached to</p> <p>Templates:</p> <ul> <li><code>Rigid2d,Vec2d</code></li> <li><code>Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/Linear/CenterOfMassMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/CenterOfMassMapping.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [CenterOfMassMapping SkinningMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [JointSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showForceFields showCollisionModels showMechanicalMappings showWireframe\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default1\" /&gt;\n    &lt;CollisionPipeline name=\"default2\" /&gt;\n    &lt;MinProximityIntersection name=\"default3\" alarmDistance=\"1\" contactDistance=\"0.5\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"pendulum\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\" multiThreadSimulation=\"0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject template=\"Rigid3\" name=\"DOFs\" position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\"\n                               velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                               force=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                               dx=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                               free_position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\"\n                               free_velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                               rest_position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\" /&gt;\n        &lt;UniformMass template=\"Rigid3\" name=\"mass\" vertexMass=\"1 1 [1 0 0,0 1 0,0 0 1]\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Rigid3\" name=\"fixOrigin\" indices=\"0\" /&gt;\n        &lt;Node name=\"segmentsNode\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\" multiThreadSimulation=\"0\"&gt;\n            &lt;MechanicalObject template=\"Rigid3\" name=\"attaches\" position=\"0 0 0 0.707914 0 0 0.707914 0 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 8 0 0 0.707914 0 0 0.707914\"\n                                   velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                                   force=\"-0.204691 0.493087 -1.55393 -15.7823 -4.91695 -0.011207 0.204691 -0.493087 1.55393 15.7823 4.91695 0.011207 -0.817747 -0.565234 -0.504438 15.6267 -1.41904 0.0182122 0.817747 0.565234 0.504438 -15.6267 1.41904 -0.0182122 -0.490036 0.948643 0.849816 10.3784 20.6947 0.014016 0.490036 -0.948643 -0.849816 -10.3784 -20.6947 -0.014016 -1.16244 -0.595626 0.268606 3.22919 22.0184 -0.0357184 1.16244 0.595626 -0.268606 -3.22919 -22.0184 0.0357184 0 0 0 0 0 0\"\n                                   dx=\"0 0 0 0 0 0 -2.04691e-005 4.93087e-005 -0.000155393 -7.89115e-005 -2.45853e-005 2.00717e-007 -2.01601e-005 4.95435e-005 -5.1433e-006 -7.89115e-005 -2.45853e-005 2.00717e-007 -0.000101935 -6.97992e-006 -5.55871e-005 -8.0336e-007 -3.15395e-005 -6.3655e-005 -3.64901e-006 -8.78868e-005 -1.67401e-005 -8.0336e-007 -3.15395e-005 -6.3655e-005 -5.26526e-005 6.9775e-006 6.82415e-005 5.10966e-005 7.20224e-005 -0.000102151 6.00157e-005 0.000177406 0.000244762 5.10966e-005 7.20224e-005 -0.000102151 -5.62283e-005 0.000117843 0.000271622 6.71189e-005 0.000181679 6.29123e-005 7.75285e-006 1.00596e-005 0.000514622 6.71189e-005 0.000181679 6.29123e-005\"\n                                   free_position=\"0 0 0 0.707914 0 0 0.707914 0 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 8 0 0 0.707914 0 0 0.707914\"\n                                   free_velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                                       rest_position=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\" /&gt;\n            &lt;RigidMapping template=\"Rigid3,Rigid3\" name=\"default55\" initialPoints=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\" rigidIndexPerPoint=\"1 2 2 2 2\" /&gt;\n            &lt;JointSpringForceField template=\"Rigid3\" name=\"joint springs\" spring=\"BEGIN_SPRING  0 1  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  2 3  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  4 5  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  6 7  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A;\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"default65\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\" multiThreadSimulation=\"0\"&gt;\n            &lt;OglModel name=\"Visual\" position=\"0 -0.5 -0.5 0 0.5 -0.5 0 0.5 0.5 0 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 8 -0.5 -0.5 8 0.5 -0.5 8 0.5 0.5 8 -0.5 0.5\"\n                    normals=\"-0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248\"\n                    triangles=\"3 1 0  3 2 1  3 6 2  3 7 6  7 5 6  7 4 5  4 1 5  4 0 1  5 1 2  2 6 5  4 7 3  4 3 0  11 9 8  11 10 9  11 14 10  11 15 14  15 13 14  15 12 13  12 9 13  12 8 9  13 9 10  10 14 13  12 15 11  12 11 8  19 17 16  19 18 17  19 22 18  19 23 22  23 21 22  23 20 21  20 17 21  20 16 17  21 17 18  18 22 21  20 23 19  20 19 16  27 25 24  27 26 25  27 30 26  27 31 30  31 29 30  31 28 29  28 25 29  28 24 25  29 25 26  26 30 29  28 31 27  28 27 24\" /&gt;\n            &lt;SkinningMapping template=\"Rigid3,Vec3\" name=\"map\" input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"CenterOfMass\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\" multiThreadSimulation=\"0\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"default88\" listening=\"0\" printLog=\"0\" restScale=\"1\" position=\"3.2 0 0\" velocity=\"0 0 0\" force=\"0 0 0\" dx=\"-1.87325e-005 3.16272e-005 8.66385e-005\" free_position=\"3.2 0 0\" free_velocity=\"0 0 0\" rest_position=\"0 0 0\"/&gt;\n            &lt;SphereCollisionModel name=\"default88Sphere\" active=\"1\" moving=\"1\" simulated=\"1\" selfCollision=\"0\" proximity=\"0\" contactStiffness=\"10\" contactFriction=\"0.01\" color=\"1 0.5 0 1\" radius=\"0.2\"/&gt;\n            &lt;CenterOfMassMapping template=\"Rigid3,Vec3\" name=\"default105\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>```python def createScene(rootNode):</p> <pre><code>root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\nroot.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\nroot.addObject('VisualStyle', displayFlags=\"showVisual showForceFields showCollisionModels showMechanicalMappings showWireframe\")\nroot.addObject('BruteForceBroadPhase')\nroot.addObject('BVHNarrowPhase')\nroot.addObject('CollisionResponse', name=\"default1\")\nroot.addObject('CollisionPipeline', name=\"default2\")\nroot.addObject('MinProximityIntersection', name=\"default3\", alarmDistance=\"1\", contactDistance=\"0.5\")\nroot.addObject('DefaultAnimationLoop')\n\npendulum = root.addChild('pendulum', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\", multiThreadSimulation=\"0\")\npendulum.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\npendulum.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\npendulum.addObject('MechanicalObject', template=\"Rigid3\", name=\"DOFs\", position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\", velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", force=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", dx=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", free_position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\", free_velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", rest_position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\")\npendulum.addObject('UniformMass', template=\"Rigid3\", name=\"mass\", vertexMass=\"1 1 [1 0 0,0 1 0,0 0 1]\")\npendulum.addObject('FixedProjectiveConstraint', template=\"Rigid3\", name=\"fixOrigin\", indices=\"0\")\n\nsegmentsNode = pendulum.addChild('segmentsNode', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\", multiThreadSimulation=\"0\")\nsegmentsNode.addObject('MechanicalObject', template=\"Rigid3\", name=\"attaches\", position=\"0 0 0 0.707914 0 0 0.707914 0 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 8 0 0 0.707914 0 0 0.707914\", velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", force=\"-0.204691 0.493087 -1.55393 -15.7823 -4.91695 -0.011207 0.204691 -0.493087 1.55393 15.7823 4.91695 0.011207 -0.817747 -0.565234 -0.504438 15.6267 -1.41904 0.0182122 0.817747 0.565234 0.504438 -15.6267 1.41904 -0.0182122 -0.490036 0.948643 0.849816 10.3784 20.6947 0.014016 0.490036 -0.948643 -0.849816 -10.3784 -20.6947 -0.014016 -1.16244 -0.595626 0.268606 3.22919 22.0184 -0.0357184 1.16244 0.595626 -0.268606 -3.22919 -22.0184 0.0357184 0 0 0 0 0 0\", dx=\"0 0 0 0 0 0 -2.04691e-005 4.93087e-005 -0.000155393 -7.89115e-005 -2.45853e-005 2.00717e-007 -2.01601e-005 4.95435e-005 -5.1433e-006 -7.89115e-005 -2.45853e-005 2.00717e-007 -0.000101935 -6.97992e-006 -5.55871e-005 -8.0336e-007 -3.15395e-005 -6.3655e-005 -3.64901e-006 -8.78868e-005 -1.67401e-005 -8.0336e-007 -3.15395e-005 -6.3655e-005 -5.26526e-005 6.9775e-006 6.82415e-005 5.10966e-005 7.20224e-005 -0.000102151 6.00157e-005 0.000177406 0.000244762 5.10966e-005 7.20224e-005 -0.000102151 -5.62283e-005 0.000117843 0.000271622 6.71189e-005 0.000181679 6.29123e-005 7.75285e-006 1.00596e-005 0.000514622 6.71189e-005 0.000181679 6.29123e-005\", free_position=\"0 0 0 0.707914 0 0 0.707914 0 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 8 0 0 0.707914 0 0 0.707914\", free_velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", rest_position=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\")\nsegmentsNode.addObject('RigidMapping', template=\"Rigid3,Rigid3\", name=\"default55\", initialPoints=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\", rigidIndexPerPoint=\"1 2 2 2 2\")\nsegmentsNode.addObject('JointSpringForceField', template=\"Rigid3\", name=\"joint springs\", spring=\"BEGIN_SPRING  0 1  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING\n</code></pre> <p>BEGIN_SPRING  2 3  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING  BEGIN_SPRING  4 5  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING  BEGIN_SPRING  6 7  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING \")</p> <pre><code>    default65 = pendulum.addChild('default65', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\", multiThreadSimulation=\"0\")\n    default65.addObject('OglModel', name=\"Visual\", position=\"0 -0.5 -0.5 0 0.5 -0.5 0 0.5 0.5 0 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 8 -0.5 -0.5 8 0.5 -0.5 8 0.5 0.5 8 -0.5 0.5\", normals=\"-0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248\", triangles=\"3 1 0  3 2 1  3 6 2  3 7 6  7 5 6  7 4 5  4 1 5  4 0 1  5 1 2  2 6 5  4 7 3  4 3 0  11 9 8  11 10 9  11 14 10  11 15 14  15 13 14  15 12 13  12 9 13  12 8 9  13 9 10  10 14 13  12 15 11  12 11 8  19 17 16  19 18 17  19 22 18  19 23 22  23 21 22  23 20 21  20 17 21  20 16 17  21 17 18  18 22 21  20 23 19  20 19 16  27 25 24  27 26 25  27 30 26  27 31 30  31 29 30  31 28 29  28 25 29  28 24 25  29 25 26  26 30 29  28 31 27  28 27 24\")\n    default65.addObject('SkinningMapping', template=\"Rigid3,Vec3\", name=\"map\", input=\"@..\", output=\"@Visual\")\n\n    CenterOfMass = pendulum.addChild('CenterOfMass', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\", multiThreadSimulation=\"0\")\n    CenterOfMass.addObject('MechanicalObject', template=\"Vec3\", name=\"default88\", listening=\"0\", printLog=\"0\", restScale=\"1\", position=\"3.2 0 0\", velocity=\"0 0 0\", force=\"0 0 0\", dx=\"-1.87325e-005 3.16272e-005 8.66385e-005\", free_position=\"3.2 0 0\", free_velocity=\"0 0 0\", rest_position=\"0 0 0\")\n    CenterOfMass.addObject('SphereCollisionModel', name=\"default88Sphere\", active=\"1\", moving=\"1\", simulated=\"1\", selfCollision=\"0\", proximity=\"0\", contactStiffness=\"10\", contactFriction=\"0.01\", color=\"1 0.5 0 1\", radius=\"0.2\")\n    CenterOfMass.addObject('CenterOfMassMapping', template=\"Rigid3,Vec3\", name=\"default105\")\n```\n</code></pre>"},{"location":"30_Components/50_Mapping/Linear/CenterOfMassMulti2Mapping/","title":"CenterOfMassMulti2Mapping","text":"<p>Set the point to the center of mass of the DOFs it is attached to</p> <p>Templates:</p> <ul> <li><code>Vec3d,Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input1 Input Object(s) (1st Data type) input2 Input Object(s) (2st Data type) output Output Object(s)"},{"location":"30_Components/50_Mapping/Linear/CenterOfMassMultiMapping/","title":"CenterOfMassMultiMapping","text":"<p>Set the point to the center of mass of the DOFs it is attached to</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Rigid3d</code></li> <li><code>Rigid3d,Vec3d</code></li> <li><code>Vec3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input Object(s) output Output Object(s)"},{"location":"30_Components/50_Mapping/Linear/DeformableOnRigidFrameMapping/","title":"DeformableOnRigidFrameMapping","text":"<p>Set the positions and velocities of points attached to a rigid parent</p> <p>Templates:</p> <ul> <li><code>Vec3d,Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 index  input DOF index  0 indexFromEnd  input DOF index starts from the end of input DOFs vector  0 repartition  number of dest dofs per entry dof  globalToLocalCoords  are the output DOFs initially expressed in global coordinates  rootAngularForceScaleFactor  Scale factor applied on the angular force accumulated on the rigid model  1 rootLinearForceScaleFactor  Scale factor applied on the linear force accumulated on the rigid model  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input1 Input Object(s) (1st Data type) input2 Input Object(s) (2st Data type) output Output Object(s)"},{"location":"30_Components/50_Mapping/Linear/DeformableOnRigidFrameMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/DeformableOnRigidFrameMappingConstraints.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.AnimationLoop\"/&gt; &lt;!-- Needed to use components [FreeMotionAnimationLoop] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [LocalMinDistance] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Correction\"/&gt; &lt;!-- Needed to use components [PrecomputedConstraintCorrection UncoupledConstraintCorrection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Solver\"/&gt; &lt;!-- Needed to use components [LCPConstraintSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping DeformableOnRigidFrameMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehavior\" /&gt;\n    &lt;FreeMotionAnimationLoop /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;LocalMinDistance name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.1\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"FrictionContactConstraint\" /&gt;\n    &lt;LCPConstraintSolver tolerance=\"0.001\" maxIt=\"1000\"/&gt;\n    &lt;FreeMotionAnimationLoop/&gt;\n\n    &lt;Node name=\"ChainRigid\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid\"&gt;\n            &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"50\" threshold=\"1e-15\" tolerance=\"1e-15\" /&gt;\n            &lt;MechanicalObject name=\"rigidframe\" template=\"Rigid3\" position=\"1 2 0 0 0 0.7 0.7\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus.rigid\" /&gt;\n            &lt;UncoupledConstraintCorrection /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusDeformLocal\"&gt;\n            &lt;EulerImplicitSolver /&gt;\n            &lt;CGLinearSolver iterations=\"50\" threshold=\"1e-15\" tolerance=\"1e-15\" /&gt;\n            &lt;SparseGridTopology filename=\"mesh/torus_for_collision.obj\" n=\"7 2 4\" /&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;TetrahedronFEMForceField youngModulus=\"1e4\" poissonRatio=\"0.45\"/&gt;\n            &lt;BoxConstraint box=\"-1 -1 -1 1 1 1\" /&gt;\n            &lt;PrecomputedConstraintCorrection recompute=\"true\" /&gt;\n            &lt;Node name=\"DeformableMappedModel\"&gt;\n                &lt;SparseGridTopology filename=\"mesh/torus_for_collision.obj\" n=\"7 2 4\" /&gt;\n                &lt;MechanicalObject name=\"deformedMO\" /&gt;\n                &lt;DeformableOnRigidFrameMapping input1=\"@..\" input2=\"@../../TorusRigid/rigidframe\" output=\"@deformedMO\" printLog=\"0\" /&gt;\n                &lt;Node name=\"TorusCollisLocal\"&gt;\n                    &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                    &lt;MeshTopology src=\"@loader\" /&gt;\n                    &lt;MechanicalObject src=\"@loader\" /&gt;\n                    &lt;TriangleCollisionModel group=\"2\" /&gt;\n                    &lt;LineCollisionModel group=\"2\" /&gt;\n                    &lt;PointCollisionModel group=\"2\" /&gt;\n                    &lt;BarycentricMapping /&gt;\n                &lt;/Node&gt;\n                &lt;Node name=\"Visu\"&gt;\n                    &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                    &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"gray\" /&gt;\n                    &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;!----&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.AnimationLoop\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Correction\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Solver\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehavior\")\n    root.addObject('FreeMotionAnimationLoop')\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('LocalMinDistance', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.1\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"FrictionContactConstraint\")\n    root.addObject('LCPConstraintSolver', tolerance=\"0.001\", maxIt=\"1000\")\n    root.addObject('FreeMotionAnimationLoop')\n\n    ChainRigid = root.addChild('ChainRigid')\n\n    TorusFixed = ChainRigid.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"gray\")\n\n    TorusRigid = ChainRigid.addChild('TorusRigid')\n    TorusRigid.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TorusRigid.addObject('CGLinearSolver', iterations=\"50\", threshold=\"1e-15\", tolerance=\"1e-15\")\n    TorusRigid.addObject('MechanicalObject', name=\"rigidframe\", template=\"Rigid3\", position=\"1 2 0 0 0 0.7 0.7\")\n    TorusRigid.addObject('UniformMass', filename=\"BehaviorModels/torus.rigid\")\n    TorusRigid.addObject('UncoupledConstraintCorrection')\n\n    TorusDeformLocal = ChainRigid.addChild('TorusDeformLocal')\n    TorusDeformLocal.addObject('EulerImplicitSolver')\n    TorusDeformLocal.addObject('CGLinearSolver', iterations=\"50\", threshold=\"1e-15\", tolerance=\"1e-15\")\n    TorusDeformLocal.addObject('SparseGridTopology', filename=\"mesh/torus_for_collision.obj\", n=\"7 2 4\")\n    TorusDeformLocal.addObject('MechanicalObject')\n    TorusDeformLocal.addObject('TetrahedronFEMForceField', youngModulus=\"1e4\", poissonRatio=\"0.45\")\n    TorusDeformLocal.addObject('BoxConstraint', box=\"-1 -1 -1 1 1 1\")\n    TorusDeformLocal.addObject('PrecomputedConstraintCorrection', recompute=\"true\")\n\n    DeformableMappedModel = TorusDeformLocal.addChild('DeformableMappedModel')\n    DeformableMappedModel.addObject('SparseGridTopology', filename=\"mesh/torus_for_collision.obj\", n=\"7 2 4\")\n    DeformableMappedModel.addObject('MechanicalObject', name=\"deformedMO\")\n    DeformableMappedModel.addObject('DeformableOnRigidFrameMapping', input1=\"@..\", input2=\"@../../TorusRigid/rigidframe\", output=\"@deformedMO\", printLog=\"0\")\n\n    TorusCollisLocal = DeformableMappedModel.addChild('TorusCollisLocal')\n    TorusCollisLocal.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    TorusCollisLocal.addObject('MeshTopology', src=\"@loader\")\n    TorusCollisLocal.addObject('MechanicalObject', src=\"@loader\")\n    TorusCollisLocal.addObject('TriangleCollisionModel', group=\"2\")\n    TorusCollisLocal.addObject('LineCollisionModel', group=\"2\")\n    TorusCollisLocal.addObject('PointCollisionModel', group=\"2\")\n    TorusCollisLocal.addObject('BarycentricMapping')\n\n    Visu = DeformableMappedModel.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"gray\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n</code></pre> <p>Component/Mapping/Linear/DeformableOnRigidFrameMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!-- Mechanical DeformableOnRigidFrameMapping Example --&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping DeformableOnRigidFrameMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [PlaneForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehavior showVisual\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;NewProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"ChainRigid\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;!--        &lt;Node name=\"TorusRigid\"&gt; --&gt;\n        &lt;Node name=\"Torus\"&gt;\n            &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"50\" threshold=\"1e-15\" tolerance=\"1e-15\" verbose=\"0\" /&gt;\n            &lt;MechanicalObject name=\"rigidframe\" template=\"Rigid3\" position=\"1 2 0 0 0 0.7 0.7\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus.rigid\" /&gt;\n            &lt;!--&lt;FixedProjectiveConstraint /&gt; --&gt;\n            &lt;!--    &lt;/Node&gt; --&gt;\n            &lt;Node name=\"TorusDeformLocal\"&gt;\n                &lt;SparseGridTopology filename=\"mesh/torus_for_collision.obj\" n=\"7 2 4\" /&gt;\n                &lt;MechanicalObject /&gt;\n                &lt;TetrahedronFEMForceField youngModulus=\"125\" poissonRatio=\"0.45\" /&gt;\n                &lt;BoxConstraint box=\"-1 -1 -1 1 1 1\" /&gt;\n                &lt;Node name=\"DeformableMappedModel\"&gt;\n                    &lt;SparseGridTopology filename=\"mesh/torus_for_collision.obj\" n=\"7 2 4\" /&gt;\n                    &lt;MechanicalObject name=\"deformedMO\" /&gt;\n                    &lt;DeformableOnRigidFrameMapping input1=\"@..\" input2=\"@../../rigidframe\" output=\"@deformedMO\" printLog=\"0\" /&gt;\n                    &lt;Node name=\"TorusCollisLocal\"&gt;\n                        &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                        &lt;MeshTopology src=\"@loader\" /&gt;\n                        &lt;MechanicalObject src=\"@loader\" /&gt;\n                        &lt;TriangleCollisionModel group=\"2\" /&gt;\n                        &lt;BarycentricMapping /&gt;\n                        &lt;PlaneForceField name=\"Floor\" normal=\"0 1 0\" d=\"-4\" stiffness=\"100\" damping=\"1\" /&gt;\n                    &lt;/Node&gt;\n                    &lt;Node name=\"Visu\"&gt;\n                        &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                        &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"gray\" /&gt;\n                        &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n                    &lt;/Node&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;!----&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehavior showVisual\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('NewProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n    root.addObject('DefaultAnimationLoop')\n\n    ChainRigid = root.addChild('ChainRigid')\n\n    TorusFixed = ChainRigid.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"gray\")\n\n    Torus = ChainRigid.addChild('Torus')\n    Torus.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Torus.addObject('CGLinearSolver', iterations=\"50\", threshold=\"1e-15\", tolerance=\"1e-15\", verbose=\"0\")\n    Torus.addObject('MechanicalObject', name=\"rigidframe\", template=\"Rigid3\", position=\"1 2 0 0 0 0.7 0.7\")\n    Torus.addObject('UniformMass', filename=\"BehaviorModels/torus.rigid\")\n\n    TorusDeformLocal = Torus.addChild('TorusDeformLocal')\n    TorusDeformLocal.addObject('SparseGridTopology', filename=\"mesh/torus_for_collision.obj\", n=\"7 2 4\")\n    TorusDeformLocal.addObject('MechanicalObject')\n    TorusDeformLocal.addObject('TetrahedronFEMForceField', youngModulus=\"125\", poissonRatio=\"0.45\")\n    TorusDeformLocal.addObject('BoxConstraint', box=\"-1 -1 -1 1 1 1\")\n\n    DeformableMappedModel = TorusDeformLocal.addChild('DeformableMappedModel')\n    DeformableMappedModel.addObject('SparseGridTopology', filename=\"mesh/torus_for_collision.obj\", n=\"7 2 4\")\n    DeformableMappedModel.addObject('MechanicalObject', name=\"deformedMO\")\n    DeformableMappedModel.addObject('DeformableOnRigidFrameMapping', input1=\"@..\", input2=\"@../../rigidframe\", output=\"@deformedMO\", printLog=\"0\")\n\n    TorusCollisLocal = DeformableMappedModel.addChild('TorusCollisLocal')\n    TorusCollisLocal.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    TorusCollisLocal.addObject('MeshTopology', src=\"@loader\")\n    TorusCollisLocal.addObject('MechanicalObject', src=\"@loader\")\n    TorusCollisLocal.addObject('TriangleCollisionModel', group=\"2\")\n    TorusCollisLocal.addObject('BarycentricMapping')\n    TorusCollisLocal.addObject('PlaneForceField', name=\"Floor\", normal=\"0 1 0\", d=\"-4\", stiffness=\"100\", damping=\"1\")\n\n    Visu = DeformableMappedModel.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"gray\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/50_Mapping/Linear/IdentityMapping/","title":"IdentityMapping","text":"<p>Special case of mapping where the child points are the same as the parent points Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid2d,Rigid2d</code></li> <li><code>Rigid2d,Vec2d</code></li> <li><code>Rigid3d,Rigid3d</code></li> <li><code>Rigid3d,Vec3d</code></li> <li><code>Vec1d,Vec1d</code></li> <li><code>Vec2d,Vec2d</code></li> <li><code>Vec3d,Vec3d</code></li> <li><code>Vec6d,Vec3d</code></li> <li><code>Vec6d,Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/Linear/IdentityMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/IdentityMapping.scn</p> XMLPython <pre><code>&lt;!-- Mechanical MassSpring Group Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangleFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showMappings\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"tshirt\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/tshirt_0.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" scale=\"10\" /&gt;\n        &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;UniformMass vertexMass=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"38 39 40 41 42 43 123 124 137\" /&gt;\n        &lt;TriangleFEMForceField name=\"FEM\" youngModulus=\"50000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showMappings\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    tshirt = root.addChild('tshirt')\n    tshirt.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    tshirt.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    tshirt.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/tshirt_0.msh\")\n    tshirt.addObject('MeshTopology', src=\"@loader\")\n    tshirt.addObject('MechanicalObject', src=\"@loader\", scale=\"10\")\n    tshirt.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@loader\")\n    tshirt.addObject('UniformMass', vertexMass=\"1\")\n    tshirt.addObject('FixedProjectiveConstraint', indices=\"38 39 40 41 42 43 123 124 137\")\n    tshirt.addObject('TriangleFEMForceField', name=\"FEM\", youngModulus=\"50000\", poissonRatio=\"0.3\", method=\"large\")\n    tshirt.addObject('TriangleCollisionModel')\n\n    Visu = tshirt.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"red\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/50_Mapping/Linear/IdentityMultiMapping/","title":"IdentityMultiMapping","text":"<p>Concatenate several States together</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Rigid3d</code></li> <li><code>Vec3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input Object(s) output Output Object(s)"},{"location":"30_Components/50_Mapping/Linear/IdentityMultiMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/IdentityMultiMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [GridMeshCreator] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMultiMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showCollisionModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;CollisionPipeline/&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DiscreteIntersection/&gt;\n\n\n    &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n\n\n    &lt;Node name=\"object1\"&gt;        \n        &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\" src=\"@loader\" name=\"dof1\" /&gt;\n\n        &lt;Node name=\"object2\"&gt;        \n            &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\" translation=\"2 0 0\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject template=\"Vec3\" src=\"@loader\"  name=\"dof2\"/&gt;\n\n            &lt;Node name=\"concatenation\"&gt;\n                &lt;MechanicalObject template=\"Vec3\" name=\"dofall\" showObject=\"1\"/&gt;\n                &lt;IdentityMultiMapping template=\"Vec3,Vec3\" input=\"@../../dof1 @../dof2\" output=\"@./dofall\" /&gt;\n                &lt;SphereCollisionModel radius=\"0.3\" selfCollision=\"1\"/&gt;\n                &lt;UniformMass vertexMass=\"1\" /&gt;\n                &lt;ConstantForceField indices=\"0\" forces=\"1 0 0\"/&gt;\n            &lt;/Node&gt;\n\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showCollisionModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline')\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n\n    object1 = root.addChild('object1')\n    object1.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\")\n    object1.addObject('MeshTopology', src=\"@loader\")\n    object1.addObject('MechanicalObject', template=\"Vec3\", src=\"@loader\", name=\"dof1\")\n\n    object2 = object1.addChild('object2')\n    object2.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\", translation=\"2 0 0\")\n    object2.addObject('MeshTopology', src=\"@loader\")\n    object2.addObject('MechanicalObject', template=\"Vec3\", src=\"@loader\", name=\"dof2\")\n\n    concatenation = object2.addChild('concatenation')\n    concatenation.addObject('MechanicalObject', template=\"Vec3\", name=\"dofall\", showObject=\"1\")\n    concatenation.addObject('IdentityMultiMapping', template=\"Vec3,Vec3\", input=\"@../../dof1 @../dof2\", output=\"@./dofall\")\n    concatenation.addObject('SphereCollisionModel', radius=\"0.3\", selfCollision=\"1\")\n    concatenation.addObject('UniformMass', vertexMass=\"1\")\n    concatenation.addObject('ConstantForceField', indices=\"0\", forces=\"1 0 0\")\n</code></pre>"},{"location":"30_Components/50_Mapping/Linear/LineSetSkinningMapping/","title":"LineSetSkinningMapping","text":"<p>skin a model from a set of rigid lines</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 neighborhoodLevel  Set the neighborhood line level  3 numberInfluencedLines  Set the number of most influenced lines by each vertice  4 weightCoef  Set the coefficient used to compute the weight of lines  4 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/Linear/Mesh2PointMechanicalMapping/","title":"Mesh2PointMechanicalMapping","text":"<p>Mechanical mapping between a set of mesh primitives (point, edge, triangle...) and a set of points generated by Mesh2PointTopologicalMapping</p> <p>Templates:</p> <ul> <li><code>Vec3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/Linear/Mesh2PointTopologicalMapping/","title":"Mesh2PointTopologicalMapping","text":"<p>This class maps any mesh primitive (point, edge, triangle...) into a point using a relative position from the primitive</p> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 copyEdges  Activate mapping of input edges into the output topology (requires at least one item in pointBaryCoords)  0 copyTriangles  Activate mapping of input triangles into the output topology (requires at least one item in pointBaryCoords)  0 copyTetrahedra  Activate mapping of input tetrahedra into the output topology (requires at least one item in pointBaryCoords)  0 BaryCoords pointBaryCoords  Coordinates for the points of the output topology created from the points of the input topology  edgeBaryCoords  Coordinates for the points of the output topology created from the edges of the input topology  triangleBaryCoords  Coordinates for the points of the output topology created from the triangles of the input topology  quadBaryCoords  Coordinates for the points of the output topology created from the quads of the input topology  tetraBaryCoords  Coordinates for the points of the output topology created from the tetra of the input topology  hexaBaryCoords  Coordinates for the points of the output topology created from the hexa of the input topology  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/50_Mapping/Linear/Mesh2PointTopologicalMapping/#examples","title":"Examples","text":"<p>Component/Topology/Mapping/Mesh2PointTopologicalMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [Mesh2PointTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [PointSetTopologyContainer TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showCollisionModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"MeshTopology\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"meshLoader0\" filename=\"mesh/liver.msh\" /&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"Container1\" src=\"@meshLoader0\" /&gt;\n        &lt;TetrahedronSetTopologyModifier /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n        &lt;DiagonalMass massDensity=\"1\" name=\"computed using mass density\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"3000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n        &lt;Node name=\"PointSetTopology\"&gt;\n            &lt;PointSetTopologyContainer name=\"Container2\" /&gt;\n            &lt;!--&lt;PointSetTopologyModifier/&gt;--&gt;\n            &lt;!--&lt;Mesh2PointTopologicalMapping input=\"@Container1\" output=\"@Container2\" pointBaryCoords=\"0 0 0\" tetraBaryCoords=\"0.25 0.25 0.25\" /&gt;--&gt;\n            &lt;Mesh2PointTopologicalMapping input=\"@Container1\" output=\"@Container2\" pointBaryCoords=\"0 0 0\" edgeBaryCoords=\"0.5 0.5 0.0\" /&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;!--&lt;Mesh2PointMechanicalMapping/&gt;--&gt;\n            &lt;SphereCollisionModel radius=\"0.25\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showCollisionModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    MeshTopology = root.addChild('MeshTopology')\n    MeshTopology.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    MeshTopology.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    MeshTopology.addObject('MeshGmshLoader', name=\"meshLoader0\", filename=\"mesh/liver.msh\")\n    MeshTopology.addObject('TetrahedronSetTopologyContainer', name=\"Container1\", src=\"@meshLoader0\")\n    MeshTopology.addObject('TetrahedronSetTopologyModifier')\n    MeshTopology.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    MeshTopology.addObject('MechanicalObject', name=\"dofs\")\n    MeshTopology.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n    MeshTopology.addObject('DiagonalMass', massDensity=\"1\", name=\"computed using mass density\")\n    MeshTopology.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"3000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"large\")\n\n    PointSetTopology = MeshTopology.addChild('PointSetTopology')\n    PointSetTopology.addObject('PointSetTopologyContainer', name=\"Container2\")\n    PointSetTopology.addObject('Mesh2PointTopologicalMapping', input=\"@Container1\", output=\"@Container2\", pointBaryCoords=\"0 0 0\", edgeBaryCoords=\"0.5 0.5 0.0\")\n    PointSetTopology.addObject('MechanicalObject')\n    PointSetTopology.addObject('SphereCollisionModel', radius=\"0.25\")\n</code></pre>"},{"location":"30_Components/50_Mapping/Linear/SimpleTesselatedHexaTopologicalMapping/","title":"SimpleTesselatedHexaTopologicalMapping","text":"<p>Special case of mapping where HexahedronSetTopology is converted into a finer HexahedronSetTopology</p> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/50_Mapping/Linear/SimpleTesselatedTetraMechanicalMapping/","title":"SimpleTesselatedTetraMechanicalMapping","text":"<p>Mechanical mapping between two TetrahedronSetTopologies generated by SimpleTesselatedTetraTopologicalMapping</p> <p>Templates:</p> <ul> <li><code>Vec3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/Linear/SimpleTesselatedTetraTopologicalMapping/","title":"SimpleTesselatedTetraTopologicalMapping","text":"<p>Special case of mapping where TetrahedronSetTopology is converted into a finer TetrahedronSetTopology</p> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 tetrahedraMappedFromTetra  Each Tetrahedron of the input topology is mapped to the 8 tetrahedrons in which it can be divided  tetraSource  Which tetra from the input topology map to a given tetra in the output topology (sofa::InvalidID if none)  pointMappedFromPoint  Each point of the input topology is mapped to the same point  pointMappedFromEdge  Each edge of the input topology is mapped to his midpoint  pointSource  Which input topology element map to a given point in the output topology : 0 -&gt; none, &gt; 0 -&gt; point index + 1, &lt; 0 , - edge index -1  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/50_Mapping/Linear/SimpleTesselatedTetraTopologicalMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/SimpleTesselatedTetraTopologicalMapping.scn</p> XMLPython <pre><code>&lt;!-- --&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [SimpleTesselatedTetraMechanicalMapping SimpleTesselatedTetraTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showCollisionModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"TetraTopology1\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"meshLoader0\" filename=\"mesh/liver.msh\" /&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"Container1\" src=\"@meshLoader0\" /&gt;\n        &lt;TetrahedronSetTopologyModifier /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" drawEdges=\"1\" drawColorEdges=\"0 1 0\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n        &lt;DiagonalMass massDensity=\"1\" name=\"computed using mass density\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"3000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n        &lt;Node name=\"TetraTopology2\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container2\" /&gt;\n            &lt;TetrahedronSetTopologyModifier /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" drawTetrahedra=\"1\" drawColorTetrahedra=\"1 0 0 1\" /&gt;\n            &lt;SimpleTesselatedTetraTopologicalMapping input=\"@Container1\" output=\"@Container2\" /&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;SimpleTesselatedTetraMechanicalMapping /&gt;\n            &lt;TriangleCollisionModel /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showCollisionModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    TetraTopology1 = root.addChild('TetraTopology1')\n    TetraTopology1.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TetraTopology1.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TetraTopology1.addObject('MeshGmshLoader', name=\"meshLoader0\", filename=\"mesh/liver.msh\")\n    TetraTopology1.addObject('TetrahedronSetTopologyContainer', name=\"Container1\", src=\"@meshLoader0\")\n    TetraTopology1.addObject('TetrahedronSetTopologyModifier')\n    TetraTopology1.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", drawEdges=\"1\", drawColorEdges=\"0 1 0\")\n    TetraTopology1.addObject('MechanicalObject', name=\"dofs\")\n    TetraTopology1.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n    TetraTopology1.addObject('DiagonalMass', massDensity=\"1\", name=\"computed using mass density\")\n    TetraTopology1.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"3000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"large\")\n\n    TetraTopology2 = TetraTopology1.addChild('TetraTopology2')\n    TetraTopology2.addObject('TetrahedronSetTopologyContainer', name=\"Container2\")\n    TetraTopology2.addObject('TetrahedronSetTopologyModifier')\n    TetraTopology2.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", drawTetrahedra=\"1\", drawColorTetrahedra=\"1 0 0 1\")\n    TetraTopology2.addObject('SimpleTesselatedTetraTopologicalMapping', input=\"@Container1\", output=\"@Container2\")\n    TetraTopology2.addObject('MechanicalObject')\n    TetraTopology2.addObject('SimpleTesselatedTetraMechanicalMapping')\n    TetraTopology2.addObject('TriangleCollisionModel')\n</code></pre>"},{"location":"30_Components/50_Mapping/Linear/SkinningMapping/","title":"SkinningMapping","text":"<p>skin a model from a set of rigid dofs</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 initPos  initial child coordinates in the world reference frame.  nbRef  Number of primitives influencing each point.  indices  parent indices for each child.  weight  influence weights of the Dofs.  Visualization showFromIndex  Displayed From Index.  0 showWeights  Show influence.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/Linear/SkinningMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/SkinningMapping.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\" multiThreadSimulation=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [SkinningMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [JointSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showCollisionModels\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default1\" /&gt;\n    &lt;CollisionPipeline name=\"default2\" /&gt;\n    &lt;MinProximityIntersection name=\"default3\" alarmDistance=\"1\" contactDistance=\"0.5\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"default4\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"0\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver\" iterations=\"25\" tolerance=\"1e-09\" threshold=\"1e-09\" /&gt;\n        &lt;MechanicalObject template=\"Rigid3\" name=\"DOFs\" restScale=\"1\" position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\" velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" /&gt;\n        &lt;UniformMass  name=\"mass\" vertexMass=\"1 1 [1 0 0,0 1 0,0 0 1]\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Rigid3\" name=\"fixOrigin\" indices=\"0\" /&gt;\n        &lt;Node name=\"default5\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MechanicalObject template=\"Rigid3\" name=\"attaches\" restScale=\"1\" position=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\" velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" /&gt;\n            &lt;RigidMapping template=\"Rigid3,Rigid3\" name=\"default6\" rigidIndexPerPoint=\"1 2 2 2 2\" input=\"@../DOFs\" output=\"@attaches\" /&gt;\n            &lt;JointSpringForceField template=\"Rigid3\" name=\"joint springs\" spring=\"BEGIN_SPRING  0 1  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  2 3  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  4 5  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  6 7  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A;\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"default7\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"PointSet\" restScale=\"1\" position=\"0 -0.5 -0.5 0 0.5 -0.5 0 0.5 0.5 0 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 8 -0.5 -0.5 8 0.5 -0.5 8 0.5 0.5 8 -0.5 0.5\" velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\" /&gt;\n            &lt;MeshTopology name=\"default9\" edges=\"0 1  1 2  2 3  3 0  1 5  5 4  4 0  5 6  6 7  7 4  2 6  7 3  8 9  9 10  10 11  11 8  9 13  13 12  12 8  13 14  14 15  15 12  10 14  15 11  16 17  17 18  18 19  19 16  17 21  21 20  20 16  21 22  22 23  23 20  18 22  23 19  24 25  25 26  26 27  27 24  25 29  29 28  28 24  29 30  30 31  31 28  26 30  31 27 \" triangles=\"3 1 0  3 2 1  3 6 2  3 7 6  7 5 6  7 4 5  4 1 5  4 0 1  5 1 2  2 6 5  4 7 3  4 3 0  11 9 8  11 10 9  11 14 10  11 15 14  15 13 14  15 12 13  12 9 13  12 8 9  13 9 10  10 14 13  12 15 11  12 11 8  19 17 16  19 18 17  19 22 18  19 23 22  23 21 22  23 20 21  20 17 21  20 16 17  21 17 18  18 22 21  20 23 19  20 19 16  27 25 24  27 26 25  27 30 26  27 31 30  31 29 30  31 28 29  28 25 29  28 24 25  29 25 26  26 30 29  28 31 27  28 27 24 \" /&gt;\n            &lt;TriangleCollisionModel template=\"Vec3\" name=\"default10\" /&gt;\n            &lt;LineCollisionModel name=\"default11\" /&gt;\n            &lt;SkinningMapping template=\"Rigid3,Vec3\" input=\"@../DOFs\" output=\"@PointSet\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Visu\" gravity=\"0 -9.81 0\"&gt;\n            &lt;OglModel template=\"Vec3\" name=\"Visual\" position=\"0 -0.5 -0.5 0 0.5 -0.5 0 0.5 0.5 0 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 8 -0.5 -0.5 8 0.5 -0.5 8 0.5 0.5 8 -0.5 0.5\" triangles=\"3 1 0  3 2 1  3 6 2  3 7 6  7 5 6  7 4 5  4 1 5  4 0 1  5 1 2  2 6 5  4 7 3  4 3 0  11 9 8  11 10 9  11 14 10  11 15 14  15 13 14  15 12 13  12 9 13  12 8 9  13 9 10  10 14 13  12 15 11  12 11 8  19 17 16  19 18 17  19 22 18  19 23 22  23 21 22  23 20 21  20 17 21  20 16 17  21 17 18  18 22 21  20 23 19  20 19 16  27 25 24  27 26 25  27 30 26  27 31 30  31 29 30  31 28 29  28 25 29  28 24 25  29 25 26  26 30 29  28 31 27  28 27 24 \" /&gt;\n            &lt;SkinningMapping template=\"Rigid3,Vec3\" input=\"@../DOFs\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>```python def createScene(rootNode):</p> <pre><code>root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\", multiThreadSimulation=\"0\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\nroot.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\nroot.addObject('VisualStyle', displayFlags=\"showBehaviorModels showCollisionModels\")\nroot.addObject('BruteForceBroadPhase')\nroot.addObject('BVHNarrowPhase')\nroot.addObject('CollisionResponse', name=\"default1\")\nroot.addObject('CollisionPipeline', name=\"default2\")\nroot.addObject('MinProximityIntersection', name=\"default3\", alarmDistance=\"1\", contactDistance=\"0.5\")\nroot.addObject('DefaultAnimationLoop')\n\ndefault4 = root.addChild('default4', gravity=\"0 -9.81 0\")\ndefault4.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\ndefault4.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver\", iterations=\"25\", tolerance=\"1e-09\", threshold=\"1e-09\")\ndefault4.addObject('MechanicalObject', template=\"Rigid3\", name=\"DOFs\", restScale=\"1\", position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\", velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\")\ndefault4.addObject('UniformMass', name=\"mass\", vertexMass=\"1 1 [1 0 0,0 1 0,0 0 1]\")\ndefault4.addObject('FixedProjectiveConstraint', template=\"Rigid3\", name=\"fixOrigin\", indices=\"0\")\n\ndefault5 = default4.addChild('default5', gravity=\"0 -9.81 0\")\ndefault5.addObject('MechanicalObject', template=\"Rigid3\", name=\"attaches\", restScale=\"1\", position=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\", velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\")\ndefault5.addObject('RigidMapping', template=\"Rigid3,Rigid3\", name=\"default6\", rigidIndexPerPoint=\"1 2 2 2 2\", input=\"@../DOFs\", output=\"@attaches\")\ndefault5.addObject('JointSpringForceField', template=\"Rigid3\", name=\"joint springs\", spring=\"BEGIN_SPRING  0 1  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING\n</code></pre> <p>BEGIN_SPRING  2 3  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING  BEGIN_SPRING  4 5  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING  BEGIN_SPRING  6 7  FREE_AXIS 0 0 0 0 1 0  KS_T 0 30000  KS_R 0 200000  KD 1  R_LIM_X -0.8 0.8  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING \")</p> <pre><code>    default7 = default4.addChild('default7', gravity=\"0 -9.81 0\")\n    default7.addObject('MechanicalObject', template=\"Vec3\", name=\"PointSet\", restScale=\"1\", position=\"0 -0.5 -0.5 0 0.5 -0.5 0 0.5 0.5 0 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 8 -0.5 -0.5 8 0.5 -0.5 8 0.5 0.5 8 -0.5 0.5\", velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\")\n    default7.addObject('MeshTopology', name=\"default9\", edges=\"0 1  1 2  2 3  3 0  1 5  5 4  4 0  5 6  6 7  7 4  2 6  7 3  8 9  9 10  10 11  11 8  9 13  13 12  12 8  13 14  14 15  15 12  10 14  15 11  16 17  17 18  18 19  19 16  17 21  21 20  20 16  21 22  22 23  23 20  18 22  23 19  24 25  25 26  26 27  27 24  25 29  29 28  28 24  29 30  30 31  31 28  26 30  31 27 \", triangles=\"3 1 0  3 2 1  3 6 2  3 7 6  7 5 6  7 4 5  4 1 5  4 0 1  5 1 2  2 6 5  4 7 3  4 3 0  11 9 8  11 10 9  11 14 10  11 15 14  15 13 14  15 12 13  12 9 13  12 8 9  13 9 10  10 14 13  12 15 11  12 11 8  19 17 16  19 18 17  19 22 18  19 23 22  23 21 22  23 20 21  20 17 21  20 16 17  21 17 18  18 22 21  20 23 19  20 19 16  27 25 24  27 26 25  27 30 26  27 31 30  31 29 30  31 28 29  28 25 29  28 24 25  29 25 26  26 30 29  28 31 27  28 27 24 \")\n    default7.addObject('TriangleCollisionModel', template=\"Vec3\", name=\"default10\")\n    default7.addObject('LineCollisionModel', name=\"default11\")\n    default7.addObject('SkinningMapping', template=\"Rigid3,Vec3\", input=\"@../DOFs\", output=\"@PointSet\")\n\n    Visu = default4.addChild('Visu', gravity=\"0 -9.81 0\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", position=\"0 -0.5 -0.5 0 0.5 -0.5 0 0.5 0.5 0 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 8 -0.5 -0.5 8 0.5 -0.5 8 0.5 0.5 8 -0.5 0.5\", triangles=\"3 1 0  3 2 1  3 6 2  3 7 6  7 5 6  7 4 5  4 1 5  4 0 1  5 1 2  2 6 5  4 7 3  4 3 0  11 9 8  11 10 9  11 14 10  11 15 14  15 13 14  15 12 13  12 9 13  12 8 9  13 9 10  10 14 13  12 15 11  12 11 8  19 17 16  19 18 17  19 22 18  19 23 22  23 21 22  23 20 21  20 17 21  20 16 17  21 17 18  18 22 21  20 23 19  20 19 16  27 25 24  27 26 25  27 30 26  27 31 30  31 29 30  31 28 29  28 25 29  28 24 25  29 25 26  26 30 29  28 31 27  28 27 24 \")\n    Visu.addObject('SkinningMapping', template=\"Rigid3,Vec3\", input=\"@../DOFs\", output=\"@Visual\")\n```\n</code></pre>"},{"location":"30_Components/50_Mapping/Linear/SubsetMapping/","title":"SubsetMapping","text":"<p>TODO-SubsetMappingClass Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Rigid3d</code></li> <li><code>Vec1d,Vec1d</code></li> <li><code>Vec3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 indices  list of input indices  first  first index (use if indices are sequential)  4294967295 last  last index (use if indices are sequential)  4294967295 radius  search radius to find corresponding points in case no indices are given  1e-05 handleTopologyChange  Enable support of topological changes for indices (disable if it is linked from SubsetTopologicalMapping::d_pointD2S)  1 ignoreNotFound  True to ignore points that are not found in the input model, they will be treated as fixed points  0 resizeToModel  True to resize the output MechanicalState to match the size of indices  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map topology link to the topology container"},{"location":"30_Components/50_Mapping/Linear/SubsetMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/SubsetMapping.scn</p> XMLPython <pre><code>&lt;!-- Mechanical SubsetMapping Group Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9.6 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [LocalMinDistance] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping SubsetMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n\n    &lt;VisualStyle displayFlags=\"hideBehaviorModels hideCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\"/&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;LocalMinDistance name=\"Proximity\"  alarmDistance=\"0.006\" contactDistance=\"0.001\" coneFactor=\"0.3\" angleCone=\"0.01\" filterIntersection=\"true\"/&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"NeedleContact\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"sutureSoftCubes\"&gt;\n        &lt;EulerImplicitSolver name=\"TissueSolver\" printLog=\"false\" rayleighStiffness=\"0.3\" rayleighMass=\"0.2\"/&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\"/&gt;\n        &lt;UniformMass vertexMass=\"0.001\"/&gt;\n        &lt;RegularGridTopology name=\"grid\"\n                nx=\"10\" ny=\"4\" nz=\"10\"\n                xmin=\"-0.05\" xmax=\"0.05\"\n                ymin=\"0.0\" ymax=\"0.03\"\n                zmin=\"-0.05\" zmax=\"0.05\"\n        /&gt;\n        &lt;!--&lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1e3\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\" method=\"large\"/&gt;--&gt;\n        &lt;BoxROI name=\"box_roi\" box=\"-0.06 -0.001 -0.06 0.06 0.001 0.06   -0.052 -0.001 -0.06 -0.048 0.011 0.06    0.048 -0.001 -0.06 0.052 0.011 0.06\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box_roi.indices\" /&gt;\n\n        &lt;Node name=\"subCube1\"&gt;\n            &lt;MechanicalObject template=\"Vec3\"/&gt;\n            &lt;RegularGridTopology name=\"grid\"\n                nx=\"5\" ny=\"2\" nz=\"10\"\n                xmin=\"-0.05\" xmax=\"-0.00555555555555555555555\"\n                ymin=\"0.02\" ymax=\"0.03\"\n                zmin=\"-0.05\" zmax=\"0.05\"\n            /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"3e5\" poissonRatio=\"0.4\" method=\"large\"/&gt;\n            &lt;SubsetMapping /&gt;\n            &lt;Node name=\"Tetra1\"&gt;\n                &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n                &lt;TetrahedronSetTopologyModifier name=\"Modifier\"/&gt;\n                &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                &lt;Hexa2TetraTopologicalMapping input=\"@../grid\" output=\"@Container\"/&gt;\n                &lt;Node name=\"Visu1\"&gt;\n                    &lt;TriangleSetTopologyContainer name=\"Container\"/&gt;\n                    &lt;TriangleSetTopologyModifier name=\"Modifier\"/&gt;\n                    &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                    &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" flipNormals=\"1\" /&gt;\n&lt;!--                    &lt;OglModel name=\"Visual\" filename=\"mesh/suture.obj\" putOnlyTexCoords=\"true\"  dx=\"-0.055\" material=\"texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 0.8 0.7 1.0 Specular 1 0.1 0.1 0.1 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20\" /&gt;\n                    &lt;OglShadowShader/&gt;\n                    &lt;OglShaderDefineMacro id=\"USE_TEXTURE\" /&gt;\n                    &lt;OglTexture2D id=\"colorTexture\" texture2DFilename=\"textures/skin2.png\" textureUnit=\"1\" repeat=\"true\" /&gt;\n                    &lt;BarycentricMapping input=\"@../..\" output=\"@Visual\"/&gt;\n--&gt;\n                    &lt;OglModel name=\"Visual1\" color=\"0.3 1 0.3 1\"/&gt;\n                    &lt;IdentityMapping input=\"@../..\" output=\"@Visual1\"/&gt;\n\n                    &lt;TriangleCollisionModel group=\"2\" name=\"cube1_collis_tri\"/&gt;\n                    &lt;LineCollisionModel group=\"2\"  name=\"cube1_collis_line\"/&gt;\n                    &lt;PointCollisionModel group=\"2\" name=\"cube2_collis_point\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"subCube2\"&gt;\n            &lt;MechanicalObject template=\"Vec3\"/&gt;\n            &lt;RegularGridTopology name=\"grid\"\n                nx=\"5\" ny=\"2\" nz=\"10\"\n                xmin=\"0.00555555555555555555555\" xmax=\"0.05\"\n                ymin=\"0.02\" ymax=\"0.03\"\n                zmin=\"-0.05\" zmax=\"0.05\"\n            /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"3e5\" poissonRatio=\"0.4\" method=\"large\"/&gt;\n            &lt;SubsetMapping /&gt;\n            &lt;Node name=\"Tetra2\"&gt;\n                &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n                &lt;TetrahedronSetTopologyModifier name=\"Modifier\"/&gt;\n                &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                &lt;Hexa2TetraTopologicalMapping input=\"@../grid\" output=\"@Container\"/&gt;\n                &lt;Node name=\"Visu2\"&gt;\n                    &lt;TriangleSetTopologyContainer name=\"Container\"/&gt;\n                    &lt;TriangleSetTopologyModifier name=\"Modifier\"/&gt;\n                    &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                    &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" flipNormals=\"1\" /&gt;\n&lt;!--                    &lt;OglModel name=\"Visual\" filename=\"mesh/suture.obj\" putOnlyTexCoords=\"true\"  dx=\"0.00\" material=\"texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 0.8 0.7 1.0 Specular 1 0.1 0.1 0.1 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20\" /&gt;\n                    &lt;OglShadowShader/&gt;\n                    &lt;OglShaderDefineMacro id=\"USE_TEXTURE\" /&gt;\n                    &lt;OglTexture2D id=\"colorTexture\" texture2DFilename=\"textures/skin2.png\" textureUnit=\"1\" repeat=\"true\" /&gt;\n                    &lt;BarycentricMapping input=\"@../..\" output=\"@Visual\"/&gt;\n --&gt;\n                    &lt;OglModel name=\"Visual2\" color=\"0.3 0.3 1 1\"/&gt;\n                    &lt;IdentityMapping input=\"@../..\" output=\"@Visual2\"/&gt;\n\n                    &lt;TriangleCollisionModel group=\"3\" name=\"cube2_collis_tri\"/&gt;\n                    &lt;LineCollisionModel group=\"3\"  name=\"cube2_collis_line\"/&gt;\n                    &lt;PointCollisionModel group=\"3\" name=\"cube2_collis_point\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"subCube3\"&gt;\n            &lt;MechanicalObject template=\"Vec3\"/&gt;\n            &lt;RegularGridTopology name=\"grid\"\n                nx=\"10\" ny=\"3\" nz=\"10\"\n                xmin=\"-0.05\" xmax=\"0.05\"\n                ymin=\"0.0\" ymax=\"0.02\"\n                zmin=\"-0.05\" zmax=\"0.05\"\n            /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"2e3\" poissonRatio=\"0.4\" method=\"large\"/&gt;\n            &lt;SubsetMapping /&gt;\n            &lt;Node name=\"Tetra3\"&gt;\n                &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n                &lt;TetrahedronSetTopologyModifier name=\"Modifier\"/&gt;\n                &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                &lt;Hexa2TetraTopologicalMapping input=\"@../grid\" output=\"@Container\"/&gt;\n                &lt;Node name=\"Visu3\"&gt;\n                    &lt;TriangleSetTopologyContainer name=\"Container\"/&gt;\n                    &lt;TriangleSetTopologyModifier name=\"Modifier\"/&gt;\n                    &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                    &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" flipNormals=\"1\" /&gt;\n                    &lt;OglModel name=\"Visual3\" color=\"1 0.3 0.1 1\"/&gt;\n                    &lt;IdentityMapping input=\"@../..\" output=\"@Visual3\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 -9.6 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"hideBehaviorModels hideCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('LocalMinDistance', name=\"Proximity\", alarmDistance=\"0.006\", contactDistance=\"0.001\", coneFactor=\"0.3\", angleCone=\"0.01\", filterIntersection=\"true\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"NeedleContact\")\n    root.addObject('DefaultAnimationLoop')\n\n    sutureSoftCubes = root.addChild('sutureSoftCubes')\n    sutureSoftCubes.addObject('EulerImplicitSolver', name=\"TissueSolver\", printLog=\"false\", rayleighStiffness=\"0.3\", rayleighMass=\"0.2\")\n    sutureSoftCubes.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    sutureSoftCubes.addObject('MechanicalObject', template=\"Vec3\")\n    sutureSoftCubes.addObject('UniformMass', vertexMass=\"0.001\")\n    sutureSoftCubes.addObject('RegularGridTopology', name=\"grid\", nx=\"10\", ny=\"4\", nz=\"10\", xmin=\"-0.05\", xmax=\"0.05\", ymin=\"0.0\", ymax=\"0.03\", zmin=\"-0.05\", zmax=\"0.05\")\n    sutureSoftCubes.addObject('BoxROI', name=\"box_roi\", box=\"-0.06 -0.001 -0.06 0.06 0.001 0.06   -0.052 -0.001 -0.06 -0.048 0.011 0.06    0.048 -0.001 -0.06 0.052 0.011 0.06\")\n    sutureSoftCubes.addObject('FixedProjectiveConstraint', indices=\"@box_roi.indices\")\n\n    subCube1 = sutureSoftCubes.addChild('subCube1')\n    subCube1.addObject('MechanicalObject', template=\"Vec3\")\n    subCube1.addObject('RegularGridTopology', name=\"grid\", nx=\"5\", ny=\"2\", nz=\"10\", xmin=\"-0.05\", xmax=\"-0.00555555555555555555555\", ymin=\"0.02\", ymax=\"0.03\", zmin=\"-0.05\", zmax=\"0.05\")\n    subCube1.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"3e5\", poissonRatio=\"0.4\", method=\"large\")\n    subCube1.addObject('SubsetMapping')\n\n    Tetra1 = subCube1.addChild('Tetra1')\n    Tetra1.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    Tetra1.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Tetra1.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Tetra1.addObject('Hexa2TetraTopologicalMapping', input=\"@../grid\", output=\"@Container\")\n\n    Visu1 = Tetra1.addChild('Visu1')\n    Visu1.addObject('TriangleSetTopologyContainer', name=\"Container\")\n    Visu1.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Visu1.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Visu1.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\", flipNormals=\"1\")\n    Visu1.addObject('OglModel', name=\"Visual1\", color=\"0.3 1 0.3 1\")\n    Visu1.addObject('IdentityMapping', input=\"@../..\", output=\"@Visual1\")\n    Visu1.addObject('TriangleCollisionModel', group=\"2\", name=\"cube1_collis_tri\")\n    Visu1.addObject('LineCollisionModel', group=\"2\", name=\"cube1_collis_line\")\n    Visu1.addObject('PointCollisionModel', group=\"2\", name=\"cube2_collis_point\")\n\n    subCube2 = sutureSoftCubes.addChild('subCube2')\n    subCube2.addObject('MechanicalObject', template=\"Vec3\")\n    subCube2.addObject('RegularGridTopology', name=\"grid\", nx=\"5\", ny=\"2\", nz=\"10\", xmin=\"0.00555555555555555555555\", xmax=\"0.05\", ymin=\"0.02\", ymax=\"0.03\", zmin=\"-0.05\", zmax=\"0.05\")\n    subCube2.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"3e5\", poissonRatio=\"0.4\", method=\"large\")\n    subCube2.addObject('SubsetMapping')\n\n    Tetra2 = subCube2.addChild('Tetra2')\n    Tetra2.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    Tetra2.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Tetra2.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Tetra2.addObject('Hexa2TetraTopologicalMapping', input=\"@../grid\", output=\"@Container\")\n\n    Visu2 = Tetra2.addChild('Visu2')\n    Visu2.addObject('TriangleSetTopologyContainer', name=\"Container\")\n    Visu2.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Visu2.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Visu2.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\", flipNormals=\"1\")\n    Visu2.addObject('OglModel', name=\"Visual2\", color=\"0.3 0.3 1 1\")\n    Visu2.addObject('IdentityMapping', input=\"@../..\", output=\"@Visual2\")\n    Visu2.addObject('TriangleCollisionModel', group=\"3\", name=\"cube2_collis_tri\")\n    Visu2.addObject('LineCollisionModel', group=\"3\", name=\"cube2_collis_line\")\n    Visu2.addObject('PointCollisionModel', group=\"3\", name=\"cube2_collis_point\")\n\n    subCube3 = sutureSoftCubes.addChild('subCube3')\n    subCube3.addObject('MechanicalObject', template=\"Vec3\")\n    subCube3.addObject('RegularGridTopology', name=\"grid\", nx=\"10\", ny=\"3\", nz=\"10\", xmin=\"-0.05\", xmax=\"0.05\", ymin=\"0.0\", ymax=\"0.02\", zmin=\"-0.05\", zmax=\"0.05\")\n    subCube3.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"2e3\", poissonRatio=\"0.4\", method=\"large\")\n    subCube3.addObject('SubsetMapping')\n\n    Tetra3 = subCube3.addChild('Tetra3')\n    Tetra3.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    Tetra3.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Tetra3.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Tetra3.addObject('Hexa2TetraTopologicalMapping', input=\"@../grid\", output=\"@Container\")\n\n    Visu3 = Tetra3.addChild('Visu3')\n    Visu3.addObject('TriangleSetTopologyContainer', name=\"Container\")\n    Visu3.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Visu3.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Visu3.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\", flipNormals=\"1\")\n    Visu3.addObject('OglModel', name=\"Visual3\", color=\"1 0.3 0.1 1\")\n    Visu3.addObject('IdentityMapping', input=\"@../..\", output=\"@Visual3\")\n</code></pre>"},{"location":"30_Components/50_Mapping/Linear/SubsetMultiMapping/","title":"SubsetMultiMapping","text":"<p>Compute a subset of the input MechanicalObjects according to a dof index list Compute a subset of the input MechanicalObjects according to a dof index list</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Rigid3d</code></li> <li><code>Rigid3d,Vec3d</code></li> <li><code>Vec1d,Vec1d</code></li> <li><code>Vec2d,Vec2d</code></li> <li><code>Vec3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 indexPairs  list of couples (parent index + index in the parent)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input Object(s) output Output Object(s)"},{"location":"30_Components/50_Mapping/Linear/SubsetMultiMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/SubsetMultiMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 0 0\"&gt;\n\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [GridMeshCreator] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [SubsetMultiMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showCollisionModels showForceFields\" /&gt;\n\n    &lt;CollisionPipeline/&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DiscreteIntersection/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n\n    &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n\n\n    &lt;Node name=\"object1\"&gt;        \n        &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\" src=\"@loader\" name=\"dof1\" /&gt;\n\n        &lt;Node name=\"object2\"&gt;        \n            &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\" translation=\"2 0 0\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject template=\"Vec3\" src=\"@loader\"  name=\"dof2\"/&gt;\n\n            &lt;Node name=\"concatenation\"&gt;\n                &lt;MechanicalObject template=\"Vec3\" name=\"dofall\" showObject=\"1\"/&gt;\n                &lt;SubsetMultiMapping template=\"Vec3,Vec3\" input=\"@../../dof1 @../dof2\" output=\"@./dofall\" indexPairs=\"0 0 0 1 1 0 1 1\"/&gt;\n                &lt;SphereCollisionModel radius=\"0.3\" selfCollision=\"1\"/&gt;\n                &lt;UniformMass vertexMass=\"1\" /&gt;\n                &lt;ConstantForceField indices=\"0\" forces=\"1 0 0\"/&gt;\n            &lt;/Node&gt;\n\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n\n    &lt;!--    converting  Rigid -&gt; Vec in SubsetMultiMapping  --&gt;\n    &lt;Node name=\"rigid1\" activated=\"1\"&gt;\n        &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\"  translation=\"0 2 0\"/&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject template=\"Rigid3\" src=\"@loader\" name=\"dof1\" /&gt;\n\n        &lt;Node name=\"origid2\"&gt;\n            &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\" translation=\"2 2 0\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" src=\"@loader\"  name=\"dof2\"/&gt;\n\n            &lt;Node name=\"concatenation\"&gt;\n                &lt;MechanicalObject template=\"Vec3\" name=\"dofall\" showObject=\"1\"/&gt;\n                &lt;SubsetMultiMapping template=\"Rigid3,Vec3\" input=\"@../../dof1 @../dof2\" output=\"@./dofall\" indexPairs=\"0 0 0 1 1 0 1 1\"/&gt;\n                &lt;SphereCollisionModel radius=\"0.3\" selfCollision=\"1\"/&gt;\n                &lt;UniformMass vertexMass=\"1\" /&gt;\n                &lt;ConstantForceField indices=\"0\" forces=\"1 0 0\"/&gt;\n            &lt;/Node&gt;\n\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showCollisionModels showForceFields\")\n    root.addObject('CollisionPipeline')\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n\n    object1 = root.addChild('object1')\n    object1.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\")\n    object1.addObject('MeshTopology', src=\"@loader\")\n    object1.addObject('MechanicalObject', template=\"Vec3\", src=\"@loader\", name=\"dof1\")\n\n    object2 = object1.addChild('object2')\n    object2.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\", translation=\"2 0 0\")\n    object2.addObject('MeshTopology', src=\"@loader\")\n    object2.addObject('MechanicalObject', template=\"Vec3\", src=\"@loader\", name=\"dof2\")\n\n    concatenation = object2.addChild('concatenation')\n    concatenation.addObject('MechanicalObject', template=\"Vec3\", name=\"dofall\", showObject=\"1\")\n    concatenation.addObject('SubsetMultiMapping', template=\"Vec3,Vec3\", input=\"@../../dof1 @../dof2\", output=\"@./dofall\", indexPairs=\"0 0 0 1 1 0 1 1\")\n    concatenation.addObject('SphereCollisionModel', radius=\"0.3\", selfCollision=\"1\")\n    concatenation.addObject('UniformMass', vertexMass=\"1\")\n    concatenation.addObject('ConstantForceField', indices=\"0\", forces=\"1 0 0\")\n\n    rigid1 = root.addChild('rigid1', activated=\"1\")\n    rigid1.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\", translation=\"0 2 0\")\n    rigid1.addObject('MeshTopology', src=\"@loader\")\n    rigid1.addObject('MechanicalObject', template=\"Rigid3\", src=\"@loader\", name=\"dof1\")\n\n    origid2 = rigid1.addChild('origid2')\n    origid2.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\", translation=\"2 2 0\")\n    origid2.addObject('MeshTopology', src=\"@loader\")\n    origid2.addObject('MechanicalObject', template=\"Rigid3\", src=\"@loader\", name=\"dof2\")\n\n    concatenation = origid2.addChild('concatenation')\n    concatenation.addObject('MechanicalObject', template=\"Vec3\", name=\"dofall\", showObject=\"1\")\n    concatenation.addObject('SubsetMultiMapping', template=\"Rigid3,Vec3\", input=\"@../../dof1 @../dof2\", output=\"@./dofall\", indexPairs=\"0 0 0 1 1 0 1 1\")\n    concatenation.addObject('SphereCollisionModel', radius=\"0.3\", selfCollision=\"1\")\n    concatenation.addObject('UniformMass', vertexMass=\"1\")\n    concatenation.addObject('ConstantForceField', indices=\"0\", forces=\"1 0 0\")\n</code></pre>"},{"location":"30_Components/50_Mapping/Linear/TubularMapping/","title":"TubularMapping","text":"<p>Create a Tube around rigid points</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 nbPointsOnEachCircle  Discretization of created circles  radius  Radius of created circles  peak  =0 no peak, =1 peak on the first segment =2 peak on the two first segment, =-1 peak on the last segment  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/Linear/VoidMapping/","title":"VoidMapping","text":"<p>Special mapping that 'map' points for void ( no input DOF ). This is useful to be able to create animated objects mixed with real DOFs.</p> <p>Target: <code>Sofa.Component.Mapping.Linear</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/50_Mapping/NonLinear/DistanceFromTargetMapping/","title":"DistanceFromTargetMapping","text":"<p>Compute edge extensions</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec1d</code></li> <li><code>Vec1d,Vec1d</code></li> <li><code>Vec3d,Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.NonLinear</code></p> <p>namespace: <code>sofa::component::mapping::nonlinear</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 geometricStiffness  Method used to compute the geometric stiffness: -None: geometric stiffness is not computed -Exact: the exact geometric stiffness is computed -Stabilized: the exact geometric stiffness is approximated in order to improve stability  Stabilized indices  Indices of the parent points  targetPositions  Positions to compute the distances from  restLengths  Rest lengths of the connections.  Visualization showObjectScale  Scale for object display  0 showColor  Color for object display. (default=[1.0,1.0,0.0,1.0])  1 1 0 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/NonLinear/DistanceFromTargetMapping/#examples","title":"Examples","text":"<p>Component/Mapping/NonLinear/DistanceFromTargetMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [StringMeshCreator] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [EigenSimplicialLLT] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [DistanceFromTargetMapping DistanceMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RestShapeSpringsForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms EdgeSetTopologyContainer] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;DefaultVisualManagerLoop/&gt;\n\n    &lt;StringMeshCreator name=\"loader\" resolution=\"20\" scale3d=\"1 1 1\" /&gt;\n\n    &lt;EulerImplicitSolver /&gt;\n    &lt;EigenSimplicialLLT /&gt;\n\n    &lt;EdgeSetTopologyContainer name=\"topology\" position=\"@loader.position\" edges=\"@loader.edges\"/&gt;\n    &lt;MechanicalObject name=\"dofs\" template=\"Vec3\" /&gt;\n    &lt;EdgeSetGeometryAlgorithms drawEdges=\"true\" /&gt;\n    &lt;DiagonalMass name=\"mass\" totalMass=\"1e-3\"/&gt;\n    &lt;Node name=\"attach\"&gt;\n        &lt;MechanicalObject template=\"Vec1\"/&gt;\n        &lt;DistanceFromTargetMapping indices=\"0\" targetPositions=\"0 0 0\"/&gt;\n        &lt;RestShapeSpringsForceField/&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"extensionsNode\" &gt;\n        &lt;MechanicalObject template=\"Vec1\"  name=\"extensionsDOF\" /&gt;\n        &lt;DistanceMapping  name=\"distanceMapping\" topology=\"@../topology\"/&gt;\n        &lt;RestShapeSpringsForceField/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('DefaultVisualManagerLoop')\n    root.addObject('StringMeshCreator', name=\"loader\", resolution=\"20\", scale3d=\"1 1 1\")\n    root.addObject('EulerImplicitSolver')\n    root.addObject('EigenSimplicialLLT')\n    root.addObject('EdgeSetTopologyContainer', name=\"topology\", position=\"@loader.position\", edges=\"@loader.edges\")\n    root.addObject('MechanicalObject', name=\"dofs\", template=\"Vec3\")\n    root.addObject('EdgeSetGeometryAlgorithms', drawEdges=\"true\")\n    root.addObject('DiagonalMass', name=\"mass\", totalMass=\"1e-3\")\n\n    attach = root.addChild('attach')\n    attach.addObject('MechanicalObject', template=\"Vec1\")\n    attach.addObject('DistanceFromTargetMapping', indices=\"0\", targetPositions=\"0 0 0\")\n    attach.addObject('RestShapeSpringsForceField')\n\n    extensionsNode = root.addChild('extensionsNode')\n    extensionsNode.addObject('MechanicalObject', template=\"Vec1\", name=\"extensionsDOF\")\n    extensionsNode.addObject('DistanceMapping', name=\"distanceMapping\", topology=\"@../topology\")\n    extensionsNode.addObject('RestShapeSpringsForceField')\n</code></pre>"},{"location":"30_Components/50_Mapping/NonLinear/DistanceMapping/","title":"DistanceMapping","text":"<p>Compute edge extensions</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec1d</code></li> <li><code>Vec3d,Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.NonLinear</code></p> <p>namespace: <code>sofa::component::mapping::nonlinear</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 geometricStiffness  Method used to compute the geometric stiffness: -None: geometric stiffness is not computed -Exact: the exact geometric stiffness is computed -Stabilized: the exact geometric stiffness is approximated in order to improve stability  Stabilized computeDistance  if 'computeDistance = true', then rest length of each element equal 0, otherwise rest length is the initial lenght of each of them  0 restLengths  Rest lengths of the connections  Visualization showObjectScale  Scale for object display  0 showColor  Color for object display. (default=[1.0,1.0,0.0,1.0])  1 1 0 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map topology link to the topology container"},{"location":"30_Components/50_Mapping/NonLinear/DistanceMapping/#examples","title":"Examples","text":"<p>Component/Mapping/NonLinear/DistanceMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"Root\" gravity=\"0 -10 0\" time=\"0\" animate=\"0\"  dt=\"0.01\"&gt;\n\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [StringMeshCreator] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [DistanceMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RestShapeSpringsForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms EdgeSetTopologyContainer] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;/Node&gt;\n\n    &lt;DefaultVisualManagerLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisualModels showBehaviorModels showMappings showForceFields showMechanicalMappings\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;StringMeshCreator name=\"loader\" resolution=\"20\" /&gt;\n\n    &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n    &lt;CGLinearSolver iterations=\"2500\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n    &lt;EdgeSetTopologyContainer name=\"topology\" position=\"@loader.position\" edges=\"@loader.edges\" /&gt;\n    &lt;MechanicalObject name=\"defoDOF\" template=\"Vec3\" /&gt;\n    &lt;EdgeSetGeometryAlgorithms drawEdges=\"true\" /&gt;\n    &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n    &lt;DiagonalMass  name=\"mass\" totalMass=\"1e-2\"/&gt;\n    &lt;Node name=\"extensionsNode\" &gt;\n        &lt;MechanicalObject template=\"Vec1\" name=\"extensionsDOF\" /&gt;\n        &lt;DistanceMapping name=\"distanceMapping\" topology=\"@../topology\" input=\"@../defoDOF\" output=\"@extensionsDOF\" geometricStiffness=\"2\" applyRestPosition=\"true\" computeDistance=\"true\"/&gt;\n        &lt;RestShapeSpringsForceField template=\"Vec1\" stiffness=\"10000\"/&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 -10 0\", time=\"0\", animate=\"0\", dt=\"0.01\")\n\n    plugins = Root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('DefaultVisualManagerLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisualModels showBehaviorModels showMappings showForceFields showMechanicalMappings\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('StringMeshCreator', name=\"loader\", resolution=\"20\")\n    Root.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Root.addObject('CGLinearSolver', iterations=\"2500\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Root.addObject('EdgeSetTopologyContainer', name=\"topology\", position=\"@loader.position\", edges=\"@loader.edges\")\n    Root.addObject('MechanicalObject', name=\"defoDOF\", template=\"Vec3\")\n    Root.addObject('EdgeSetGeometryAlgorithms', drawEdges=\"true\")\n    Root.addObject('FixedProjectiveConstraint', indices=\"0\")\n    Root.addObject('DiagonalMass', name=\"mass\", totalMass=\"1e-2\")\n\n    extensionsNode = Root.addChild('extensionsNode')\n    extensionsNode.addObject('MechanicalObject', template=\"Vec1\", name=\"extensionsDOF\")\n    extensionsNode.addObject('DistanceMapping', name=\"distanceMapping\", topology=\"@../topology\", input=\"@../defoDOF\", output=\"@extensionsDOF\", geometricStiffness=\"2\", applyRestPosition=\"true\", computeDistance=\"true\")\n    extensionsNode.addObject('RestShapeSpringsForceField', template=\"Vec1\", stiffness=\"10000\")\n</code></pre>"},{"location":"30_Components/50_Mapping/NonLinear/DistanceMultiMapping/","title":"DistanceMultiMapping","text":"<p>Compute edge extensions</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec1d</code></li> <li><code>Vec3d,Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.NonLinear</code></p> <p>namespace: <code>sofa::component::mapping::nonlinear</code></p> <p>parents: </p> <ul> <li><code>MultiMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 geometricStiffness  Method used to compute the geometric stiffness: -None: geometric stiffness is not computed -Exact: the exact geometric stiffness is computed -Stabilized: the exact geometric stiffness is approximated in order to improve stability  Stabilized computeDistance  if 'computeDistance = true', then rest length of each element equal 0, otherwise rest length is the initial lenght of each of them  0 restLengths  Rest lengths of the connections  indexPairs  list of couples (parent index + index in the parent)  Visualization showObjectScale  Scale for object display  0 showColor  Color for object display. (default=[1.0,1.0,0.0,1.0])  1 1 0 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input Object(s) output Output Object(s) topology link to the topology container"},{"location":"30_Components/50_Mapping/NonLinear/DistanceMultiMapping/#examples","title":"Examples","text":"<p>Component/Mapping/NonLinear/DistanceMultiMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"Root\" gravity=\"0 -10 0\" time=\"0\" animate=\"0\"  dt=\"0.01\"&gt;\n\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Engine.Transform\"/&gt; &lt;!-- Needed to use components [TransformEngine] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [StringMeshCreator] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [DistanceMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [UniformVelocityDampingForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RestShapeSpringsForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms EdgeSetTopologyContainer] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;/Node&gt;\n\n    &lt;DefaultVisualManagerLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisualModels showBehaviorModels showMappings showForceFields showMechanicalMappings\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;StringMeshCreator name=\"loader\" resolution=\"20\" /&gt;\n\n    &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n    &lt;CGLinearSolver iterations=\"2500\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n    &lt;Node  name=\"springs0\" &gt;\n        &lt;TransformEngine name=\"translate\" input_position=\"@../loader.position\" translation=\"0 0 0\" /&gt;\n\n        &lt;EdgeSetTopologyContainer name=\"topology\" position=\"@translate.output_position\" edges=\"@../loader.edges\" /&gt;\n        &lt;MechanicalObject name=\"defoDOF\" template=\"Vec3\" /&gt;\n        &lt;EdgeSetGeometryAlgorithms drawEdges=\"true\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n        &lt;DiagonalMass  name=\"mass\" totalMass=\"1e-2\"/&gt;\n        &lt;UniformVelocityDampingForceField template=\"Vec3\" name=\"uniformVelocityDampingFF0\" implicit=\"true\" dampingCoefficient=\"0.005\"/&gt;\n        &lt;Node name=\"extensionsNode\" &gt;\n            &lt;MechanicalObject template=\"Vec1\" name=\"extensionsDOF\" /&gt;\n            &lt;DistanceMapping name=\"distanceMapping\" topology=\"@../topology\" input=\"@../defoDOF\" output=\"@extensionsDOF\" geometricStiffness=\"0\" applyRestPosition=\"true\" computeDistance=\"true\"/&gt;\n            &lt;RestShapeSpringsForceField template=\"Vec1\" stiffness=\"1000\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node  name=\"springs1\" &gt;\n        &lt;TransformEngine name=\"translate\" input_position=\"@../loader.position\" translation=\"1.2 0 0\" /&gt;\n\n        &lt;EdgeSetTopologyContainer name=\"topology\" position=\"@translate.output_position\" edges=\"@../loader.edges\" /&gt;\n        &lt;MechanicalObject name=\"defoDOF\" template=\"Vec3\" /&gt;\n        &lt;EdgeSetGeometryAlgorithms drawEdges=\"true\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"19\" /&gt;\n        &lt;DiagonalMass  name=\"mass\" totalMass=\"1e-2\"/&gt;\n        &lt;UniformVelocityDampingForceField template=\"Vec3\" name=\"uniformVelocityDampingFF0\" implicit=\"true\" dampingCoefficient=\"0.005\"/&gt;\n        &lt;Node name=\"extensionsNode\" &gt;\n            &lt;MechanicalObject template=\"Vec1\" name=\"extensionsDOF\" /&gt;\n            &lt;DistanceMapping name=\"distanceMapping\" topology=\"@../topology\" input=\"@../defoDOF\" output=\"@extensionsDOF\" geometricStiffness=\"0\" applyRestPosition=\"true\" computeDistance=\"true\"/&gt;\n            &lt;RestShapeSpringsForceField template=\"Vec1\" stiffness=\"1000\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"connection\"&gt;\n        &lt;MechanicalObject template=\"Vec1\" name=\"connectionDOF\" /&gt;\n        &lt;EdgeSetTopologyContainer edges=\"0 1\"/&gt;\n        &lt;DistanceMultiMapping template=\"Vec3,Vec1\" input=\"@../springs0 @../springs1\" output=\"@connectionDOF\" indexPairs=\"0 19 1 0\" restLengths=\"1\" geometricStiffness=\"0\" applyRestPosition=\"true\" computeDistance=\"true\"/&gt;\n        &lt;RestShapeSpringsForceField template=\"Vec1\" stiffness=\"1\"/&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 -10 0\", time=\"0\", animate=\"0\", dt=\"0.01\")\n\n    plugins = Root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Transform\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('DefaultVisualManagerLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisualModels showBehaviorModels showMappings showForceFields showMechanicalMappings\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('StringMeshCreator', name=\"loader\", resolution=\"20\")\n    Root.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Root.addObject('CGLinearSolver', iterations=\"2500\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n\n    springs0 = Root.addChild('springs0')\n    springs0.addObject('TransformEngine', name=\"translate\", input_position=\"@../loader.position\", translation=\"0 0 0\")\n    springs0.addObject('EdgeSetTopologyContainer', name=\"topology\", position=\"@translate.output_position\", edges=\"@../loader.edges\")\n    springs0.addObject('MechanicalObject', name=\"defoDOF\", template=\"Vec3\")\n    springs0.addObject('EdgeSetGeometryAlgorithms', drawEdges=\"true\")\n    springs0.addObject('FixedProjectiveConstraint', indices=\"0\")\n    springs0.addObject('DiagonalMass', name=\"mass\", totalMass=\"1e-2\")\n    springs0.addObject('UniformVelocityDampingForceField', template=\"Vec3\", name=\"uniformVelocityDampingFF0\", implicit=\"true\", dampingCoefficient=\"0.005\")\n\n    extensionsNode = springs0.addChild('extensionsNode')\n    extensionsNode.addObject('MechanicalObject', template=\"Vec1\", name=\"extensionsDOF\")\n    extensionsNode.addObject('DistanceMapping', name=\"distanceMapping\", topology=\"@../topology\", input=\"@../defoDOF\", output=\"@extensionsDOF\", geometricStiffness=\"0\", applyRestPosition=\"true\", computeDistance=\"true\")\n    extensionsNode.addObject('RestShapeSpringsForceField', template=\"Vec1\", stiffness=\"1000\")\n\n    springs1 = Root.addChild('springs1')\n    springs1.addObject('TransformEngine', name=\"translate\", input_position=\"@../loader.position\", translation=\"1.2 0 0\")\n    springs1.addObject('EdgeSetTopologyContainer', name=\"topology\", position=\"@translate.output_position\", edges=\"@../loader.edges\")\n    springs1.addObject('MechanicalObject', name=\"defoDOF\", template=\"Vec3\")\n    springs1.addObject('EdgeSetGeometryAlgorithms', drawEdges=\"true\")\n    springs1.addObject('FixedProjectiveConstraint', indices=\"19\")\n    springs1.addObject('DiagonalMass', name=\"mass\", totalMass=\"1e-2\")\n    springs1.addObject('UniformVelocityDampingForceField', template=\"Vec3\", name=\"uniformVelocityDampingFF0\", implicit=\"true\", dampingCoefficient=\"0.005\")\n\n    extensionsNode = springs1.addChild('extensionsNode')\n    extensionsNode.addObject('MechanicalObject', template=\"Vec1\", name=\"extensionsDOF\")\n    extensionsNode.addObject('DistanceMapping', name=\"distanceMapping\", topology=\"@../topology\", input=\"@../defoDOF\", output=\"@extensionsDOF\", geometricStiffness=\"0\", applyRestPosition=\"true\", computeDistance=\"true\")\n    extensionsNode.addObject('RestShapeSpringsForceField', template=\"Vec1\", stiffness=\"1000\")\n\n    connection = Root.addChild('connection')\n    connection.addObject('MechanicalObject', template=\"Vec1\", name=\"connectionDOF\")\n    connection.addObject('EdgeSetTopologyContainer', edges=\"0 1\")\n    connection.addObject('DistanceMultiMapping', template=\"Vec3,Vec1\", input=\"@../springs0 @../springs1\", output=\"@connectionDOF\", indexPairs=\"0 19 1 0\", restLengths=\"1\", geometricStiffness=\"0\", applyRestPosition=\"true\", computeDistance=\"true\")\n    connection.addObject('RestShapeSpringsForceField', template=\"Vec1\", stiffness=\"1\")\n</code></pre>"},{"location":"30_Components/50_Mapping/NonLinear/RigidMapping/","title":"RigidMapping","text":"<p>Set the positions and velocities of points attached to a rigid parent Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid2d,Vec2d</code></li> <li><code>Rigid3d,Rigid3d</code></li> <li><code>Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.NonLinear</code></p> <p>namespace: <code>sofa::component::mapping::nonlinear</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 geometricStiffness  Method used to compute the geometric stiffness: -None: geometric stiffness is not computed -Exact: the exact geometric stiffness is computed -Stabilized: the exact geometric stiffness is approximated in order to improve stability  Stabilized initialPoints  Local Coordinates of the points  index  input DOF index  0 filename  Xsp file where rigid mapping information can be loaded from.  useX0  Use x0 instead of local copy of initial positions (to support topo changes)  0 indexFromEnd  input DOF index starts from the end of input DOFs vector  0 rigidIndexPerPoint  For each mapped point, the index of the Rigid it is mapped from  globalToLocalCoords  are the output DOFs initially expressed in global coordinates  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/NonLinear/RigidMapping/#examples","title":"Examples","text":"<p>Component/Mapping/NonLinear/RigidMapping-basic.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"Root\" gravity=\"0 0 0\" time=\"0\" animate=\"0\" bbox=\"-1 -1 -1 1 1 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [PartialFixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [StaticSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showMapping\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"parent node with independent DOFs\"&gt;\n        &lt;StaticSolver name=\"ODE solver\" printLog=\"0\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver used by implicit ODE solvers\" printLog=\"0\" iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" /&gt;\n        &lt;PartialFixedProjectiveConstraint fixedDirections=\"1 1 1 0 0 0\" /&gt;\n        &lt;UniformMass template=\"Rigid3\" name=\"mass\" /&gt;\n        &lt;Node name=\"child node with DOFs mapped from the parent\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"endpoint coordinates\" position=\"1 -0.0 0\"  /&gt;\n            &lt;RigidMapping name=\"angle-coord mapping\" input=\"@..\" output=\"@.\" index=\"0\" /&gt;\n            &lt;ConstantForceField forces=\"1 -1 0\" indices=\"0\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", time=\"0\", animate=\"0\", bbox=\"-1 -1 -1 1 1 1\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showMapping\")\n    Root.addObject('DefaultAnimationLoop')\n\n    parent node with independent DOFs = Root.addChild('parent node with independent DOFs')\n    parent node with independent DOFs.addObject('StaticSolver', name=\"ODE solver\", printLog=\"0\")\n    parent node with independent DOFs.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver used by implicit ODE solvers\", printLog=\"0\", iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    parent node with independent DOFs.addObject('MechanicalObject', template=\"Rigid3\")\n    parent node with independent DOFs.addObject('PartialFixedProjectiveConstraint', fixedDirections=\"1 1 1 0 0 0\")\n    parent node with independent DOFs.addObject('UniformMass', template=\"Rigid3\", name=\"mass\")\n\n    child node with DOFs mapped from the parent = parent node with independent DOFs.addChild('child node with DOFs mapped from the parent')\n    child node with DOFs mapped from the parent.addObject('MechanicalObject', template=\"Vec3\", name=\"endpoint coordinates\", position=\"1 -0.0 0\")\n    child node with DOFs mapped from the parent.addObject('RigidMapping', name=\"angle-coord mapping\", input=\"@..\", output=\"@.\", index=\"0\")\n    child node with DOFs mapped from the parent.addObject('ConstantForceField', forces=\"1 -1 0\", indices=\"0\")\n</code></pre> <p>Component/Mapping/NonLinear/RigidMapping2d-basic.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"Root\" gravity=\"0 0 0\" time=\"0\" animate=\"0\" bbox=\"-1 -1 -1 1 1 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [PartialFixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [StaticSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showMapping\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"parent node with independent DOFs\"&gt;\n        &lt;!--        &lt;EulerImplicitSolver name=\"ODE solver\" printLog=\"0\"  verbose=\"0\" rayleighStiffness=\"0.0\" rayleighMass=\"0\"/&gt; --&gt;\n        &lt;StaticSolver name=\"ODE solver\" printLog=\"0\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver used by implicit ODE solvers\" printLog=\"0\" iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid2\" /&gt;\n        &lt;PartialFixedProjectiveConstraint fixedDirections=\"1 1 0\" /&gt;\n        &lt;UniformMass template=\"Rigid2\" name=\"mass\" /&gt;\n        &lt;Node name=\"child node with DOFs mapped from the parent\"&gt;\n            &lt;MechanicalObject template=\"Vec2\" name=\"endpoint coordinates\" position=\"1 0 \"  /&gt;\n            &lt;RigidMapping template=\"\" name=\"angle-coord mapping\" input=\"@..\" output=\"@.\" index=\"0\" /&gt;\n            &lt;ConstantForceField forces=\"1 -1\" indices=\"0\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", time=\"0\", animate=\"0\", bbox=\"-1 -1 -1 1 1 1\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showMapping\")\n    Root.addObject('DefaultAnimationLoop')\n\n    parent node with independent DOFs = Root.addChild('parent node with independent DOFs')\n    parent node with independent DOFs.addObject('StaticSolver', name=\"ODE solver\", printLog=\"0\")\n    parent node with independent DOFs.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver used by implicit ODE solvers\", printLog=\"0\", iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    parent node with independent DOFs.addObject('MechanicalObject', template=\"Rigid2\")\n    parent node with independent DOFs.addObject('PartialFixedProjectiveConstraint', fixedDirections=\"1 1 0\")\n    parent node with independent DOFs.addObject('UniformMass', template=\"Rigid2\", name=\"mass\")\n\n    child node with DOFs mapped from the parent = parent node with independent DOFs.addChild('child node with DOFs mapped from the parent')\n    child node with DOFs mapped from the parent.addObject('MechanicalObject', template=\"Vec2\", name=\"endpoint coordinates\", position=\"1 0 \")\n    child node with DOFs mapped from the parent.addObject('RigidMapping', template=\"\", name=\"angle-coord mapping\", input=\"@..\", output=\"@.\", index=\"0\")\n    child node with DOFs mapped from the parent.addObject('ConstantForceField', forces=\"1 -1\", indices=\"0\")\n</code></pre> <p>Component/Mapping/NonLinear/RigidMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;NewProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"ChainRigid\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel contactStiffness=\"1000\" simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"gray\" texturename=\"textures/brushed_metal.bmp\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid1\"&gt;\n            &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"2.5\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"gray\" texturename=\"textures/brushed_metal.bmp\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid2\"&gt;\n            &lt;EulerImplicitSolver /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"5\" /&gt;\n            &lt;UniformMass /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_4\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_4\" color=\"gray\" texturename=\"textures/brushed_metal.bmp\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid3\"&gt;\n            &lt;EulerImplicitSolver /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"7.5\" /&gt;\n            &lt;UniformMass /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"gray\" texturename=\"textures/brushed_metal.bmp\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid4\"&gt;\n            &lt;EulerImplicitSolver /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"10\" /&gt;\n            &lt;UniformMass /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"gray\" texturename=\"textures/brushed_metal.bmp\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('NewProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n    root.addObject('DefaultAnimationLoop')\n\n    ChainRigid = root.addChild('ChainRigid')\n\n    TorusFixed = ChainRigid.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\")\n    TorusFixed.addObject('TriangleCollisionModel', contactStiffness=\"1000\", simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"gray\", texturename=\"textures/brushed_metal.bmp\")\n\n    TorusRigid1 = ChainRigid.addChild('TorusRigid1')\n    TorusRigid1.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TorusRigid1.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid1.addObject('MechanicalObject', template=\"Rigid3\", dx=\"2.5\")\n    TorusRigid1.addObject('UniformMass', filename=\"BehaviorModels/torus.rigid\")\n\n    Visu = TorusRigid1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"gray\", texturename=\"textures/brushed_metal.bmp\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid2 = ChainRigid.addChild('TorusRigid2')\n    TorusRigid2.addObject('EulerImplicitSolver')\n    TorusRigid2.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid2.addObject('MechanicalObject', template=\"Rigid3\", dx=\"5\")\n    TorusRigid2.addObject('UniformMass')\n\n    Visu = TorusRigid2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_4\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_4\", color=\"gray\", texturename=\"textures/brushed_metal.bmp\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid3 = ChainRigid.addChild('TorusRigid3')\n    TorusRigid3.addObject('EulerImplicitSolver')\n    TorusRigid3.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid3.addObject('MechanicalObject', template=\"Rigid3\", dx=\"7.5\")\n    TorusRigid3.addObject('UniformMass')\n\n    Visu = TorusRigid3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"gray\", texturename=\"textures/brushed_metal.bmp\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid4 = ChainRigid.addChild('TorusRigid4')\n    TorusRigid4.addObject('EulerImplicitSolver')\n    TorusRigid4.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid4.addObject('MechanicalObject', template=\"Rigid3\", dx=\"10\")\n    TorusRigid4.addObject('UniformMass')\n\n    Visu = TorusRigid4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"gray\", texturename=\"textures/brushed_metal.bmp\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n</code></pre>"},{"location":"30_Components/50_Mapping/NonLinear/SquareDistanceMapping/","title":"SquareDistanceMapping","text":"<p>Compute square edge extensions</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec1d</code></li> <li><code>Vec3d,Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.NonLinear</code></p> <p>namespace: <code>sofa::component::mapping::nonlinear</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 geometricStiffness  Method used to compute the geometric stiffness: -None: geometric stiffness is not computed -Exact: the exact geometric stiffness is computed -Stabilized: the exact geometric stiffness is approximated in order to improve stability  Stabilized Visualization showObjectScale  Scale for object display  0 showColor  Color for object display. (default=[1.0,1.0,0.0,1.0])  1 1 0 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map topology link to the topology container"},{"location":"30_Components/50_Mapping/NonLinear/SquareDistanceMapping/#examples","title":"Examples","text":"<p>Component/Mapping/NonLinear/SquareDistanceMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"Root\" gravity=\"0 -10 0\" time=\"0\" animate=\"0\"  dt=\"0.01\"&gt;\n\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [StringMeshCreator] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [SquareDistanceMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RestShapeSpringsForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms EdgeSetTopologyContainer] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;/Node&gt;\n\n    &lt;DefaultVisualManagerLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisualModels showBehaviorModels showMappings showForceFields showMechanicalMappings\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;StringMeshCreator name=\"loader\" resolution=\"20\" /&gt;\n\n    &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n    &lt;CGLinearSolver iterations=\"2500\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n    &lt;EdgeSetTopologyContainer name=\"topology\" position=\"@loader.position\" edges=\"@loader.edges\" /&gt;\n    &lt;MechanicalObject name=\"defoDOF\" template=\"Vec3\" /&gt;\n    &lt;EdgeSetGeometryAlgorithms drawEdges=\"true\" /&gt;\n    &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n    &lt;DiagonalMass  name=\"mass\" totalMass=\"1e-2\"/&gt;\n    &lt;Node name=\"extensionsNode\" &gt;\n        &lt;MechanicalObject template=\"Vec1\" name=\"extensionsDOF\" /&gt;\n        &lt;SquareDistanceMapping name=\"distanceMapping\" topology=\"@../topology\" input=\"@../defoDOF\" output=\"@extensionsDOF\" geometricStiffness=\"1\" applyRestPosition=\"true\"/&gt;\n        &lt;RestShapeSpringsForceField template=\"Vec1\" stiffness=\"10000\"/&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 -10 0\", time=\"0\", animate=\"0\", dt=\"0.01\")\n\n    plugins = Root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('DefaultVisualManagerLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisualModels showBehaviorModels showMappings showForceFields showMechanicalMappings\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('StringMeshCreator', name=\"loader\", resolution=\"20\")\n    Root.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Root.addObject('CGLinearSolver', iterations=\"2500\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Root.addObject('EdgeSetTopologyContainer', name=\"topology\", position=\"@loader.position\", edges=\"@loader.edges\")\n    Root.addObject('MechanicalObject', name=\"defoDOF\", template=\"Vec3\")\n    Root.addObject('EdgeSetGeometryAlgorithms', drawEdges=\"true\")\n    Root.addObject('FixedProjectiveConstraint', indices=\"0\")\n    Root.addObject('DiagonalMass', name=\"mass\", totalMass=\"1e-2\")\n\n    extensionsNode = Root.addChild('extensionsNode')\n    extensionsNode.addObject('MechanicalObject', template=\"Vec1\", name=\"extensionsDOF\")\n    extensionsNode.addObject('SquareDistanceMapping', name=\"distanceMapping\", topology=\"@../topology\", input=\"@../defoDOF\", output=\"@extensionsDOF\", geometricStiffness=\"1\", applyRestPosition=\"true\")\n    extensionsNode.addObject('RestShapeSpringsForceField', template=\"Vec1\", stiffness=\"10000\")\n</code></pre>"},{"location":"30_Components/50_Mapping/NonLinear/SquareMapping/","title":"SquareMapping","text":"<p>Compute the square</p> <p>Templates:</p> <ul> <li><code>Vec1d,Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.Mapping.NonLinear</code></p> <p>namespace: <code>sofa::component::mapping::nonlinear</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 geometricStiffness  Method used to compute the geometric stiffness: -None: geometric stiffness is not computed -Exact: the exact geometric stiffness is computed  Exact useGeometricStiffnessMatrix  If available (cached), the geometric stiffness matrix is used in order to compute the product with the parent displacement. Otherwise, the product is computed directly using the available vectors (matrix-free method).  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"30_Components/50_Mapping/NonLinear/SquareMapping/#examples","title":"Examples","text":"<p>Component/Mapping/NonLinear/SquareMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"Root\" gravity=\"0 -10 0\" time=\"0\" animate=\"0\"  dt=\"0.01\"&gt;\n\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Engine.Transform\"/&gt; &lt;!-- Needed to use components [TransformEngine] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [StringMeshCreator] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [DistanceMapping SquareDistanceMapping SquareMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RestShapeSpringsForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms EdgeSetTopologyContainer] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;/Node&gt;\n\n    &lt;DefaultVisualManagerLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisualModels showBehaviorModels showMappings showForceFields showMechanicalMappings\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;StringMeshCreator name=\"loader\" resolution=\"3\" /&gt;\n\n    &lt;Node name=\"twoMappings\"&gt;\n\n        &lt;EulerImplicitSolver name=\"solverTwoMappings\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n        &lt;CGLinearSolver iterations=\"1e4\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;EdgeSetTopologyContainer name=\"topology\" position=\"@../loader.position\" edges=\"@../loader.edges\" /&gt;\n        &lt;MechanicalObject name=\"defoDOF\" template=\"Vec3\" /&gt;\n        &lt;EdgeSetGeometryAlgorithms drawEdges=\"true\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n        &lt;DiagonalMass  name=\"mass\" totalMass=\"1e-2\"/&gt;\n        &lt;Node name=\"extensionsNode\" &gt;\n            &lt;MechanicalObject template=\"Vec1\" name=\"extensionsDOF\" /&gt;\n            &lt;DistanceMapping name=\"distanceMapping\" topology=\"@../topology\" input=\"@../defoDOF\" output=\"@extensionsDOF\" geometricStiffness=\"1\" applyRestPosition=\"true\" computeDistance=\"true\"/&gt;\n            &lt;Node name=\"square\"&gt;\n                &lt;MechanicalObject template=\"Vec1\" name=\"squaredDOF\" /&gt;\n                &lt;SquareMapping input=\"@../extensionsDOF\" output=\"@squaredDOF\" geometricStiffness=\"1\" applyRestPosition=\"true\"/&gt;\n                &lt;RestShapeSpringsForceField template=\"Vec1\" stiffness=\"10000\"/&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"oneMapping\"&gt;\n        &lt;TransformEngine name=\"transform\" template=\"Vec3\" translation=\"0 0 0\" input_position=\"@../loader.position\" /&gt;\n\n        &lt;EulerImplicitSolver name=\"solverOneMapping\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n        &lt;CGLinearSolver iterations=\"1e4\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n\n        &lt;EdgeSetTopologyContainer name=\"topology\" position=\"@transform.output_position\" edges=\"@../loader.edges\" /&gt;\n        &lt;MechanicalObject name=\"defoDOF\" template=\"Vec3\" /&gt;\n        &lt;EdgeSetGeometryAlgorithms drawEdges=\"true\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n        &lt;DiagonalMass  name=\"mass\" totalMass=\"1e-2\"/&gt;\n        &lt;Node name=\"extensionsNode\" &gt;\n            &lt;MechanicalObject template=\"Vec1\" name=\"extensionsDOF\" /&gt;\n            &lt;SquareDistanceMapping name=\"distanceMapping\" topology=\"@../topology\" input=\"@../defoDOF\" output=\"@extensionsDOF\" geometricStiffness=\"1\" applyRestPosition=\"true\"/&gt;\n            &lt;RestShapeSpringsForceField template=\"Vec1\" stiffness=\"10000\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 -10 0\", time=\"0\", animate=\"0\", dt=\"0.01\")\n\n    plugins = Root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Transform\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('DefaultVisualManagerLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisualModels showBehaviorModels showMappings showForceFields showMechanicalMappings\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('StringMeshCreator', name=\"loader\", resolution=\"3\")\n\n    twoMappings = Root.addChild('twoMappings')\n    twoMappings.addObject('EulerImplicitSolver', name=\"solverTwoMappings\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    twoMappings.addObject('CGLinearSolver', iterations=\"1e4\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    twoMappings.addObject('EdgeSetTopologyContainer', name=\"topology\", position=\"@../loader.position\", edges=\"@../loader.edges\")\n    twoMappings.addObject('MechanicalObject', name=\"defoDOF\", template=\"Vec3\")\n    twoMappings.addObject('EdgeSetGeometryAlgorithms', drawEdges=\"true\")\n    twoMappings.addObject('FixedProjectiveConstraint', indices=\"0\")\n    twoMappings.addObject('DiagonalMass', name=\"mass\", totalMass=\"1e-2\")\n\n    extensionsNode = twoMappings.addChild('extensionsNode')\n    extensionsNode.addObject('MechanicalObject', template=\"Vec1\", name=\"extensionsDOF\")\n    extensionsNode.addObject('DistanceMapping', name=\"distanceMapping\", topology=\"@../topology\", input=\"@../defoDOF\", output=\"@extensionsDOF\", geometricStiffness=\"1\", applyRestPosition=\"true\", computeDistance=\"true\")\n\n    square = extensionsNode.addChild('square')\n    square.addObject('MechanicalObject', template=\"Vec1\", name=\"squaredDOF\")\n    square.addObject('SquareMapping', input=\"@../extensionsDOF\", output=\"@squaredDOF\", geometricStiffness=\"1\", applyRestPosition=\"true\")\n    square.addObject('RestShapeSpringsForceField', template=\"Vec1\", stiffness=\"10000\")\n\n    oneMapping = Root.addChild('oneMapping')\n    oneMapping.addObject('TransformEngine', name=\"transform\", template=\"Vec3\", translation=\"0 0 0\", input_position=\"@../loader.position\")\n    oneMapping.addObject('EulerImplicitSolver', name=\"solverOneMapping\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    oneMapping.addObject('CGLinearSolver', iterations=\"1e4\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    oneMapping.addObject('EdgeSetTopologyContainer', name=\"topology\", position=\"@transform.output_position\", edges=\"@../loader.edges\")\n    oneMapping.addObject('MechanicalObject', name=\"defoDOF\", template=\"Vec3\")\n    oneMapping.addObject('EdgeSetGeometryAlgorithms', drawEdges=\"true\")\n    oneMapping.addObject('FixedProjectiveConstraint', indices=\"0\")\n    oneMapping.addObject('DiagonalMass', name=\"mass\", totalMass=\"1e-2\")\n\n    extensionsNode = oneMapping.addChild('extensionsNode')\n    extensionsNode.addObject('MechanicalObject', template=\"Vec1\", name=\"extensionsDOF\")\n    extensionsNode.addObject('SquareDistanceMapping', name=\"distanceMapping\", topology=\"@../topology\", input=\"@../defoDOF\", output=\"@extensionsDOF\", geometricStiffness=\"1\", applyRestPosition=\"true\")\n    extensionsNode.addObject('RestShapeSpringsForceField', template=\"Vec1\", stiffness=\"10000\")\n</code></pre>"},{"location":"30_Components/55_Mass/10_UniformMass/","title":"UniformMass","text":"<p>This component belongs to the category of Masses. The UniformMass is a very simplistic mass component since it does not compute the volume integration of a density term. The mass is equally spread over the number of points, thus resulting in the following diagonal mass matrix:</p> <p></p> <p>Each diagonal term equals the nodal mass  where  is the total mass of the objet and  is the number of nodes of the object. Spreading the mass over the nodes without considering their connectivity results in this diagonal mass matrix .</p> <p>As all mass components, the UniformMass  will contribute to the main matrix  in the system . Depending on the type of LinearSolver used:</p> <ul> <li>for iterative solvers, the result of the multiplication between the mass matrix  and an approximated solution is computed by the function:</li> </ul> <pre><code>template &lt;class DataTypes, class MassType&gt;\nvoid UniformMass&lt;DataTypes, MassType&gt;::addMDx ( const core::MechanicalParams*, DataVecDeriv&amp; vres, const DataVecDeriv&amp; vdx, SReal factor)\n{\n    helper::WriteAccessor&lt;DataVecDeriv&gt; res = vres;\n    helper::ReadAccessor&lt;DataVecDeriv&gt; dx = vdx;\n\n    WriteAccessor&lt;Data&lt;vector&lt;int&gt; &gt; &gt; indices = d_indices;\n\n    MassType m = d_vertexMass.getValue();\n    if ( factor != 1.0 )\n        m *= ( typename DataTypes::Real ) factor;\n\n    for ( unsigned int i=0; i&lt;indices.size(); i++ )\n        res[indices[i]] += dx[indices[i]] * m;\n}\n</code></pre> <ul> <li>for direct solvers, the mass matrix  is built by the function:</li> </ul> <pre><code>/// Add Mass contribution to global Matrix assembling\ntemplate &lt;class DataTypes, class MassType&gt;\nvoid UniformMass&lt;DataTypes, MassType&gt;::addMToMatrix (const MechanicalParams *mparams, const MultiMatrixAccessor* matrix)\n{\n    const MassType&amp; m = d_vertexMass.getValue();\n\n    const size_t N = DataTypeInfo&lt;Deriv&gt;::size();\n\n    AddMToMatrixFunctor&lt;Deriv,MassType&gt; calc;\n    MultiMatrixAccessor::MatrixRef r = matrix-&gt;getMatrix(mstate);\n\n    Real mFactor = (Real)mparams-&gt;mFactorIncludingRayleighDamping(this-&gt;rayleighMass.getValue());\n\n    ReadAccessor&lt;Data&lt;vector&lt;int&gt; &gt; &gt; indices = d_indices;\n    for ( unsigned int i=0; i&lt;indices.size(); i++ )\n        calc ( r.matrix, m, r.offset + N*indices[i], mFactor);\n}\n</code></pre>"},{"location":"30_Components/55_Mass/10_UniformMass/#data","title":"Data","text":"<p>Since the UniformMass equally spread the total mass  over all the nodes of the object, the component can be initialized using:</p> <ul> <li>either the vertexMass data: corresponding to the nodal mass , set equally at each node</li> <li>or the totalMass data: corresponding to the total mass  of the object</li> </ul>"},{"location":"30_Components/55_Mass/10_UniformMass/#usage","title":"Usage","text":"<p>The UniformMass only requires a MechanicalObject to store the degrees of freedom associated to the nodes. An integration scheme and a solver are also necessary to solve the linear system at each time step.</p> <p>Since the UniformMass only set a constant mass at each node without considering their connectivity, no topology is needed for the UniformMass. For this reason, the UniformMass is suitable for rigid frames.</p> <p>However, the UniformMass should be carefully used if accuracy is a criterion, especially when using surface or volumetric physical models. As written above, the UniformMass does not take into account the geometry and the topology of the object since no space integration is computed.</p>"},{"location":"30_Components/55_Mass/10_UniformMass/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;UniformMass totalMass=\"10\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('UniformMass', totalMass='10')\n</code></pre> <p>An example scene involving a UniformMass is available in examples/Component/Mass/UniformMass.scn</p> <p>Target: <code>Sofa.Component.Mass</code></p> <p>namespace: <code>sofa::component::mass</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 vertexMass  Specify one single, positive, real value for the mass of each particle.  If unspecified or wrongly set, the totalMass information is used.  1 1 1 totalMass  Specify the total mass resulting from all particles.  If unspecified or wrongly set, the default value is used: totalMass = 1.0  1 filename  File storing the mass parameters [rigid objects only].  compute_mapping_inertia  to be used if the mass is placed under a mapping  0 localRange  optional range of local DOF indices.  Any computation involving only indices outside of this range  are discarded (useful for parallelization using mesh partitionning)  -1 -1 indices  optional local DOF indices. Any computation involving only indices outside of this list are discarded  preserveTotalMass  Prevent totalMass from decreasing when removing particles.  0 Visualization showGravityCenter  display the center of gravity of the system  0 showAxisSizeFactor  factor length of the axis displayed (only used for rigids)  1 showInitialCenterOfGravity  display the initial center of gravity of the system  0 showX0  display the rest positions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>Sofa.Component.Mass</code></p> <p>namespace: <code>sofa::component::mass</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 vertexMass  Specify one single, positive, real value for the mass of each particle.  If unspecified or wrongly set, the totalMass information is used.  1 1 [1 0 0,0 1 0,0 0 1] totalMass  Specify the total mass resulting from all particles.  If unspecified or wrongly set, the default value is used: totalMass = 1.0  1 filename  rigid file to load the mass parameters  compute_mapping_inertia  to be used if the mass is placed under a mapping  0 localRange  optional range of local DOF indices.  Any computation involving only indices outside of this range  are discarded (useful for parallelization using mesh partitionning)  -1 -1 indices  optional local DOF indices. Any computation involving only indices outside of this list are discarded  preserveTotalMass  Prevent totalMass from decreasing when removing particles.  0 Visualization showGravityCenter  display the center of gravity of the system  0 showAxisSizeFactor  factor length of the axis displayed (only used for rigids)  1 showInitialCenterOfGravity  display the initial center of gravity of the system  0 showX0  display the rest positions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.Mass</code></p> <p>namespace: <code>sofa::component::mass</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 vertexMass  Specify one single, positive, real value for the mass of each particle.  If unspecified or wrongly set, the totalMass information is used.  1 totalMass  Specify the total mass resulting from all particles.  If unspecified or wrongly set, the default value is used: totalMass = 1.0  1 filename  File storing the mass parameters [rigid objects only].  compute_mapping_inertia  to be used if the mass is placed under a mapping  0 localRange  optional range of local DOF indices.  Any computation involving only indices outside of this range  are discarded (useful for parallelization using mesh partitionning)  -1 -1 indices  optional local DOF indices. Any computation involving only indices outside of this list are discarded  preserveTotalMass  Prevent totalMass from decreasing when removing particles.  0 Visualization showGravityCenter  display the center of gravity of the system  0 showAxisSizeFactor  factor length of the axis displayed (only used for rigids)  1 showInitialCenterOfGravity  display the initial center of gravity of the system  0 showX0  display the rest positions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/55_Mass/10_UniformMass/#examples","title":"Examples","text":"<p>Component/Mass/UniformMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.005\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/liver.msh\" /&gt;\n    &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n\n    &lt;Node name=\"Liver\" depend=\"topo dofs\"&gt;\n        &lt;EulerImplicitSolver name=\"integration scheme\" /&gt;\n        &lt;CGLinearSolver name=\"linear solver\" iterations=\"1000\" tolerance=\"1e-9\" threshold=\"1e-9\"/&gt;\n        &lt;MechanicalObject name=\"dofs\" src=\"@../loader\" /&gt;\n        &lt;!-- Container for the tetrahedra--&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"TetraTopo\" src=\"@../loader\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;UniformMass totalMass=\"60\"  name=\"uniformlyConstantMass\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.45\" youngModulus=\"5000\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@../../meshLoader_0\" color=\"yellow\" /&gt;\n            &lt;BarycentricMapping name=\"VisualMapping\" input=\"@../dofs\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n            &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject name=\"spheres\" position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping name=\"CollisionMapping\" input=\"@../dofs\" output=\"@spheres\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/liver.msh\")\n    root.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver-smooth.obj\", handleSeams=\"1\")\n\n    Liver = root.addChild('Liver', depend=\"topo dofs\")\n    Liver.addObject('EulerImplicitSolver', name=\"integration scheme\")\n    Liver.addObject('CGLinearSolver', name=\"linear solver\", iterations=\"1000\", tolerance=\"1e-9\", threshold=\"1e-9\")\n    Liver.addObject('MechanicalObject', name=\"dofs\", src=\"@../loader\")\n    Liver.addObject('TetrahedronSetTopologyContainer', name=\"TetraTopo\", src=\"@../loader\")\n    Liver.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    Liver.addObject('UniformMass', totalMass=\"60\", name=\"uniformlyConstantMass\")\n    Liver.addObject('TetrahedralCorotationalFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.45\", youngModulus=\"5000\")\n    Liver.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n\n    Visu = Liver.addChild('Visu')\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@../../meshLoader_0\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', name=\"VisualMapping\", input=\"@../dofs\", output=\"@VisualModel\")\n\n    Surf = Liver.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Surf.addObject('MechanicalObject', name=\"spheres\", position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', name=\"CollisionModel\", listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping', name=\"CollisionMapping\", input=\"@../dofs\", output=\"@spheres\")\n</code></pre>"},{"location":"30_Components/55_Mass/20_MeshMatrixMass/","title":"MeshMatrixMass","text":"<p>This component belongs to the category of Masses. In the dynamic equation (see Physics integration page), the mass density results from the first derivative in time of the momentum term. The MeshMatrixMass computes the integral of this mass density over the volume of the object geometry. To do so and for any given topology (triangles, quads, tetrahedra or hexahedra), the MeshMatrixMass integrates the mass density inside each elements and sums the mass matrix  in the system matrix .</p>"},{"location":"30_Components/55_Mass/20_MeshMatrixMass/#volume-integration","title":"Volume integration","text":"<p>As detailed in the Physics integration page, the left hand side part of the linear momentum conservation equals . To integrate over the domain, its weak form will result in the mass matrix:</p> <p></p> <p>where  are the test functions, which are basis functions ensuring the existence of a solution. Since no exact integration can be performed on a random domain , the MeshMatrixMass relies on the Finite Element Method (FEM) and accumulates the result of the integral over each finite element (triangles, quads, tetrahedra or hexahedra):</p> <p></p> <p>The FEM relies on simple geometries in which any field can be interpolated using shape functions  (see FEM at a glance). Note that the same basis functions are chosen for both the test and the shape functions. The interpolation of the acceleration term  thus gives:</p> <p></p> <p>By change of variables, the computation of the mass matrix results in solving the following integration of the shape functions  in each element:</p> <p></p>"},{"location":"30_Components/55_Mass/20_MeshMatrixMass/#case-of-a-linear-tetrahedron","title":"Case of a linear tetrahedron","text":"<p>In the case of a linear tetrahedron, the shape functions are:</p> <p></p> <p>By replacing the shape functions, we therefore obtain:</p> <p></p> <p></p> <p></p> <p>We can note that the matrix is symmetric. The integration in the reference (or parent) space  can be numerically computed using a Gauss quadrature (or Gauss point integration). The resulting mass matrix is:</p> <p></p>"},{"location":"30_Components/55_Mass/20_MeshMatrixMass/#api","title":"API","text":"<p>Depending on the type of LinearSolver used:</p> <ul> <li>for iterative solvers, the result of the multiplication between the mass matrix  and an approximated solution is computed by the function:</li> </ul> <pre><code>template &lt;class DataTypes, class MassType&gt;\nvoid MeshMatrixMass&lt;DataTypes, MassType&gt;::addMDx(const core::MechanicalParams*, DataVecDeriv&amp; vres, const DataVecDeriv&amp; vdx, SReal factor)\n{\n    const MassVector &amp;vertexMass= d_vertexMassInfo.getValue();\n    const MassVector &amp;edgeMass= d_edgeMassInfo.getValue();\n\n    helper::WriteAccessor&lt; DataVecDeriv &gt; res = vres;\n    helper::ReadAccessor&lt; DataVecDeriv &gt; dx = vdx;\n\n    size_t v0,v1,nbEdges=_topology-&gt;getNbEdges();\n\n    for (unsigned int i=0; i&lt;dx.size(); i++)\n    {\n        res[i] += dx[i] * vertexMass[i] * (Real)factor;\n    }\n\n    for (unsigned int j=0; j&lt;nbEdges; ++j)\n    {\n        v0=_topology-&gt;getEdge(j)[0];\n        v1=_topology-&gt;getEdge(j)[1];\n\n        res[v0] += dx[v1] * edgeMass[j] * (Real)factor;\n        res[v1] += dx[v0] * edgeMass[j] * (Real)factor;\n    }\n}\n</code></pre> <ul> <li>for direct solvers, the mass matrix  is built by the function:</li> </ul> <pre><code>template &lt;class DataTypes, class MassType&gt;\nvoid MeshMatrixMass&lt;DataTypes, MassType&gt;::addMToMatrix(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor* matrix)\n{\n    const MassVector &amp;vertexMass= d_vertexMassInfo.getValue();\n    const MassVector &amp;edgeMass= d_edgeMassInfo.getValue();\n\n    size_t v0,v1,nbEdges=_topology-&gt;getNbEdges();\n\n    const int N = defaulttype::DataTypeInfo&lt;Deriv&gt;::size();\n    AddMToMatrixFunctor&lt;Deriv,MassType&gt; calc;\n    sofa::core::behavior::MultiMatrixAccessor::MatrixRef r = matrix-&gt;getMatrix(this-&gt;mstate);\n    sofa::defaulttype::BaseMatrix* mat = r.matrix;\n    Real mFactor = (Real)mparams-&gt;mFactorIncludingRayleighDamping(this-&gt;rayleighMass.getValue());\n\n\n    for (size_t i = 0; i &lt; vertexMass.size(); i++)\n    {\n        calc(r.matrix, vertexMass[i], r.offset + N*i, mFactor);\n    }\n\n    for (size_t j = 0; j &lt; nbEdges; ++j)\n    {\n        v0 = _topology-&gt;getEdge(j)[0];\n        v1 = _topology-&gt;getEdge(j)[1];\n\n        calc(r.matrix, edgeMass[j], r.offset + N*v0, r.offset + N*v1, mFactor);\n        calc(r.matrix, edgeMass[j], r.offset + N*v1, r.offset + N*v0, mFactor);\n    }\n}\n</code></pre>"},{"location":"30_Components/55_Mass/20_MeshMatrixMass/#data","title":"Data","text":"<p>The MeshMatrixMass can be initialized using two different input data:</p> <ul> <li>totalMass: corresponding to the total mass of the object, which will be distributed over its volume taking into account the geometry</li> <li>massDensity: corresponding to the mass density used for the integration detailed above</li> </ul> <p>Note that using the optional data lumping, it is possible to simply the mass matrix by making it diagonal. This is called mass lumping and it consists in summing all mass values of a line on the diagonal. The DiagonalMass is an optimized version of this mass lumping approach. In case of a linear tetrahedron, if the data lumping is true, the (lumped) mass matrix becomes:</p> <p></p> <p>Use lumping with caution since it is a numerical approximation, thus decreasing the accuracy of the integration.</p>"},{"location":"30_Components/55_Mass/20_MeshMatrixMass/#usage","title":"Usage","text":"<p>The MeshMatrixMass requires a MechanicalObject to store the degrees of freedom associated to the nodes, as well as a Topology. An integration scheme and a solver are also necessary to solve the linear system at each time step.</p> <p>Several topologies are handled by the MeshMatrixMass, namely: triangles, quads, tetrahedra or hexahedra. Only the beam model (edge topology) is not handled by this component.</p>"},{"location":"30_Components/55_Mass/20_MeshMatrixMass/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;MeshMatrixMass massDensity=\"1000\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('MeshMatrixMass', massDensity='1000')\n</code></pre> <p>An example scene involving a MeshMatrixMass is available in examples/Component/Mass/MeshMatrixMass.scn</p> <p>Target: <code>Sofa.Component.Mass</code></p> <p>namespace: <code>sofa::component::mass</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 massDensity  Specify real and strictly positive value(s) for the mass density.  If unspecified or wrongly set, the totalMass information is used.  totalMass  Specify the total mass resulting from all particles.  If unspecified or wrongly set, the default value is used: totalMass = 1.0  1 vertexMass  internal values of the particles masses on vertices, supporting topological changes  edgeMass  internal values of the particles masses on edges, supporting topological changes  computeMassOnRest  If true, the mass of every element is computed based on the rest position rather than the position  0 lumping  boolean if you need to use a lumped mass matrix  0 printMass  boolean if you want to check the mass conservation  0 graph  Graph of the controlled potential  Visualization showGravityCenter  display the center of gravity of the system  0 showAxisSizeFactor  factor length of the axis displayed (only used for rigids)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container geometryState link to the MechanicalObject associated with the geometry"},{"location":"30_Components/55_Mass/20_MeshMatrixMass/#examples","title":"Examples","text":"<p>Component/Mass/MeshMatrixMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.005\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n\n    &lt;MeshGmshLoader name=\"MeshLoader\" filename=\"mesh/liver.msh\" /&gt;\n    &lt;MeshOBJLoader name=\"LiverSurface\" filename=\"mesh/liver-smooth.obj\" /&gt;\n\n    &lt;Node name=\"Liver\"&gt;\n        &lt;EulerImplicitSolver name=\"integration scheme\" /&gt;\n        &lt;CGLinearSolver name=\"linear solver\" iterations=\"1000\" tolerance=\"1e-9\" threshold=\"1e-9\"/&gt;\n        &lt;MechanicalObject name=\"dofs\" src=\"@../MeshLoader\"/&gt;\n        &lt;!-- Container for the tetrahedra--&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"TetraTopo\" src=\"@../MeshLoader\"/&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;MeshMatrixMass totalMass=\"60\" name=\"SparseMass\" topology=\"@TetraTopo\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.45\" youngModulus=\"5000\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n\n        &lt;Node name=\"Visu\" &gt;\n            &lt;OglModel  name=\"VisualModel\" src=\"@../../LiverSurface\" color=\"cyan\"/&gt;\n            &lt;BarycentricMapping name=\"VisualMapping\" input=\"@../dofs\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\" &gt;\n            &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject name=\"spheres\" position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\"/&gt;\n            &lt;BarycentricMapping name=\"CollisionMapping\" input=\"@../dofs\" output=\"@spheres\" /&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('MeshGmshLoader', name=\"MeshLoader\", filename=\"mesh/liver.msh\")\n    root.addObject('MeshOBJLoader', name=\"LiverSurface\", filename=\"mesh/liver-smooth.obj\")\n\n    Liver = root.addChild('Liver')\n    Liver.addObject('EulerImplicitSolver', name=\"integration scheme\")\n    Liver.addObject('CGLinearSolver', name=\"linear solver\", iterations=\"1000\", tolerance=\"1e-9\", threshold=\"1e-9\")\n    Liver.addObject('MechanicalObject', name=\"dofs\", src=\"@../MeshLoader\")\n    Liver.addObject('TetrahedronSetTopologyContainer', name=\"TetraTopo\", src=\"@../MeshLoader\")\n    Liver.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    Liver.addObject('MeshMatrixMass', totalMass=\"60\", name=\"SparseMass\", topology=\"@TetraTopo\")\n    Liver.addObject('TetrahedralCorotationalFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.45\", youngModulus=\"5000\")\n    Liver.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n\n    Visu = Liver.addChild('Visu')\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@../../LiverSurface\", color=\"cyan\")\n    Visu.addObject('BarycentricMapping', name=\"VisualMapping\", input=\"@../dofs\", output=\"@VisualModel\")\n\n    Surf = Liver.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Surf.addObject('MechanicalObject', name=\"spheres\", position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', name=\"CollisionModel\", listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping', name=\"CollisionMapping\", input=\"@../dofs\", output=\"@spheres\")\n</code></pre>"},{"location":"30_Components/55_Mass/30_DiagonalMass/","title":"DiagonalMass","text":"<p>This component belongs to the category of Masses. In the dynamic equation (see Physics integration page), the mass density results from the first derivative in time of the momentum term. Like the MeshMatrixMass, the DiagonalMass computes the integral of this mass density over the volume of the object geometry. To do so and for any given topology (edges, triangles, quads, tetrahedra or hexahedra), the DiagonalMass integrates the mass density inside each elements and sums the mass matrix  in the system matrix .</p> <p>However, the DiagonalMass makes a strong simplification: it considers the mass matrix  as being diagonal. To build this diagonal mass matrix, the DiagonalMass relies on a numerical method called the mass lumping. It consists in summing all mass values of a line on the diagonal. This approach is already implemented in the MeshMatrixMass but the DiagonalMass proposes an optimized version of the mass lumping and extend it to edge topology.</p> <p>For details on the volume integration, please report to the MeshMatrixMass page. As demonstrated in the MeshMatrixMass page, in case of a topology using linear tetrahedra, the diagonal mass matrix corresponds to:</p> <p></p> <p>By making the matrix diagonal (i.e. removing extra-diagonal terms), the lumping method removes the connectivity (neighborhood) information from the matrix. Due to this numerical approximation, the accuracy of the integration is decreased compared to the MeshMatrixMass integration. It is therefore advised to use the DiagonalMass carefully.</p>"},{"location":"30_Components/55_Mass/30_DiagonalMass/#api","title":"API","text":"<p>Depending on the type of LinearSolver used:</p> <ul> <li>for iterative solvers, the result of the multiplication between the mass matrix  and an approximated solution is computed by the function:</li> </ul> <pre><code>template &lt;class DataTypes, class MassType&gt;\nvoid DiagonalMass&lt;DataTypes, MassType&gt;::addMDx(const core::MechanicalParams* /*mparams*/, DataVecDeriv&amp; res, const DataVecDeriv&amp; dx, SReal factor)\n{\n    const MassVector &amp;masses= d_vertexMass.getValue();\n    helper::WriteAccessor&lt; DataVecDeriv &gt; _res = res;\n    helper::ReadAccessor&lt; DataVecDeriv &gt; _dx = dx;\n\n    size_t n = masses.size();\n\n    for (size_t i=0; i&lt;n; i++)\n    {\n        _res[i] += (_dx[i] * masses[i]) * (Real)factor;\n    }\n}\n</code></pre> <ul> <li>for direct solvers, the mass matrix  is built by the function:</li> </ul> <pre><code>template &lt;class DataTypes, class MassType&gt;\nvoid DiagonalMass&lt;DataTypes, MassType&gt;::addMToMatrix(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor* matrix)\n{\n    const MassVector &amp;masses= d_vertexMass.getValue();\n    const int N = defaulttype::DataTypeInfo&lt;Deriv&gt;::size();\n    AddMToMatrixFunctor&lt;Deriv,MassType&gt; calc;\n    sofa::core::behavior::MultiMatrixAccessor::MatrixRef r = matrix-&gt;getMatrix(this-&gt;mstate);\n    Real mFactor = (Real)mparams-&gt;mFactorIncludingRayleighDamping(this-&gt;rayleighMass.getValue());\n    for (unsigned int i=0; i&lt;masses.size(); i++)\n        calc(r.matrix, masses[i], r.offset + N*i, mFactor);\n}\n</code></pre>"},{"location":"30_Components/55_Mass/30_DiagonalMass/#data","title":"Data","text":"<p>The DiagonalMass can be initialized using two different input data:</p> <ul> <li>totalMass: corresponding to the total mass of the object, which will be distributed over its volume taking into account the geometry</li> <li>massDensity: corresponding to the mass density used for the integration detailed above</li> </ul>"},{"location":"30_Components/55_Mass/30_DiagonalMass/#usage","title":"Usage","text":"<p>The DiagonalMass requires a MechanicalObject to store the degrees of freedom associated to the nodes, as well as a Topology. An integration scheme and a solver are also necessary to solve the linear system at each time step.</p> <p>All topologies are handled by the DiagonalMass, namely: edges, triangles, quads, tetrahedra or hexahedra.</p>"},{"location":"30_Components/55_Mass/30_DiagonalMass/#example","title":"Example","text":"<p>This component is used as follows in XML format:</p> <pre><code>&lt;DiagonalMass massDensity=\"1000\" /&gt;\n</code></pre> <p>or using SofaPython3:</p> <pre><code>node.addObject('DiagonalMass', massDensity='1000')\n</code></pre> <p>An example scene involving a DiagonalMass is available in examples/Component/Mass/DiagonalMass.scn</p> <p>Target: <code>Sofa.Component.Mass</code></p> <p>namespace: <code>sofa::component::mass</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 vertexMass  Specify a vector giving the mass of each vertex.  If unspecified or wrongly set, the massDensity or totalMass information is used.  massDensity  Specify one single real and positive value for the mass density.  If unspecified or wrongly set, the totalMass information is used.  1 totalMass  Specify the total mass resulting from all particles.  If unspecified or wrongly set, the default value is used: totalMass = 1.0  1 computeMassOnRest  If true, the mass of every element is computed based on the rest position rather than the position  1 filename  Xsp3.0 file to specify the mass parameters  Visualization showGravityCenter  Display the center of gravity of the system  0 showAxisSizeFactor  Factor length of the axis displayed (only used for rigids)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container geometryState link to the MechanicalObject associated with the geometry"},{"location":"30_Components/55_Mass/30_DiagonalMass/#examples","title":"Examples","text":"<p>Component/Mass/DiagonalMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.005\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/liver.msh\" /&gt;\n    &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n\n    &lt;Node name=\"Liver\" depend=\"topo dofs\"&gt;\n        &lt;EulerImplicitSolver name=\"integration scheme\" /&gt;\n        &lt;CGLinearSolver name=\"linear solver\" iterations=\"1000\" tolerance=\"1e-9\" threshold=\"1e-9\"/&gt;\n        &lt;MechanicalObject name=\"dofs\" src=\"@../loader\" /&gt;\n        &lt;!-- Container for the tetrahedra--&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"TetraTopo\" src=\"@../loader\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass totalMass=\"60\" name=\"diagonalMass\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.45\" youngModulus=\"5000\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@../../meshLoader_0\" color=\"red\" /&gt;\n            &lt;BarycentricMapping name=\"VisualMapping\" input=\"@../dofs\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n            &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject name=\"spheres\" position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping name=\"CollisionMapping\" input=\"@../dofs\" output=\"@spheres\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/liver.msh\")\n    root.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver-smooth.obj\", handleSeams=\"1\")\n\n    Liver = root.addChild('Liver', depend=\"topo dofs\")\n    Liver.addObject('EulerImplicitSolver', name=\"integration scheme\")\n    Liver.addObject('CGLinearSolver', name=\"linear solver\", iterations=\"1000\", tolerance=\"1e-9\", threshold=\"1e-9\")\n    Liver.addObject('MechanicalObject', name=\"dofs\", src=\"@../loader\")\n    Liver.addObject('TetrahedronSetTopologyContainer', name=\"TetraTopo\", src=\"@../loader\")\n    Liver.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    Liver.addObject('DiagonalMass', totalMass=\"60\", name=\"diagonalMass\")\n    Liver.addObject('TetrahedralCorotationalFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.45\", youngModulus=\"5000\")\n    Liver.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n\n    Visu = Liver.addChild('Visu')\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@../../meshLoader_0\", color=\"red\")\n    Visu.addObject('BarycentricMapping', name=\"VisualMapping\", input=\"@../dofs\", output=\"@VisualModel\")\n\n    Surf = Liver.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Surf.addObject('MechanicalObject', name=\"spheres\", position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', name=\"CollisionModel\", listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping', name=\"CollisionMapping\", input=\"@../dofs\", output=\"@spheres\")\n</code></pre>"},{"location":"30_Components/65_Rendering/10_Different_Viewports/","title":"Different Viewports","text":""},{"location":"30_Components/65_Rendering/10_Different_Viewports/#using-different-views-in-opengl","title":"Using different views in OpenGL","text":"<p>You can get different points of view of your scene. It can be useful if you want to watch something for example. In order to get those viewports, you have to add :</p> <pre><code>&lt;OglViewport screenPosition=\"0 0\" screenSize=\"250 250\" cameraPosition=\"-1 2.7 5\" cameraOrientation=\"-0 -0 -0 1\" /&gt;\n</code></pre> <p>where :</p> <ul> <li>screenPosition = : position on the viewer</li> <li>screenSize = : size of the viewport</li> <li>cameraPosition = : position of the camera in eye's space</li> <li>cameraOrientation = : camera's orientation (direction and     up vectors)</li> </ul> <p>cameraPosition and cameraOrientation can be easily retrieved, using viewer's view file: get the view you want to add with the main viewer, save the view, open the resulting yourscene.scn.view file and copy-paste the 2 vectors into the corresponding fields.</p>"},{"location":"30_Components/65_Rendering/10_Different_Viewports/#example","title":"Example","text":"<ul> <li>example/Component/visualmodel/OglViewport.scn</li> </ul>"},{"location":"30_Components/65_Rendering/20_Shaders/","title":"Shaders","text":""},{"location":"30_Components/65_Rendering/20_Shaders/#general-use-of-shaders","title":"General use of Shaders","text":"<p>A complete set of tools about using shaders is implemented into SOFA. The three kinds of shaders (vertex and fragments (mandatory), geometry (optional)) are available. Shader is used only for Visual Model as OglModel. The effects of the shader is spread to the associated subtree. Finally, there is only one shader activated for each visual model : if two shaders are present in the same node, only the second will be effective. To simply include a shader, add this into your node :</p> <p>vertFilename and fragFilename are the only mandatory parameters. Other optional parameters are about geometry shader : geoFilename, geometryInputType, geometryOutputType and geometryVerticesOut. A last parameter, turnOn, is for debugging purpose, when you want to disable shader without restarting the scene. If you want to send values to uniform variables defined into the shader, a certain number of objects is available :</p> <ul> <li>OglIntVariable,OglInt{2,3,4}Variable : for int and ivec{2,3,4}</li> <li>OglFloatVariable,OglFloat{2,3,4}Variable : for float and vec{2,3,4}</li> <li>OglIntVectorVariable, OglIntVector{2,3,4}Variable : for arrays of     int and ivec{2,3,4}</li> <li>OglFloatVectorVariable, OglFloatVector{2,3,4}Variable : for arrays     of float and vec{2,3,4}</li> <li>OglMatrix{2,3,4}x{2,3,4} : for matrix n*m where n and m = {2,3,4}</li> </ul>"},{"location":"30_Components/65_Rendering/30_Shadowing/","title":"Shadowing","text":""},{"location":"30_Components/65_Rendering/30_Shadowing/#shadows","title":"Shadows","text":"<p>Shadow Mapping has been implemented in SOFA, in order to have a better depth feeling (and an overall nicer scene...) Two versions has been coded :</p> <ul> <li>hard shadows : quick and not so bad visually,</li> <li>soft shadows : requires more GPU processing, but nicer than     hard shadows.</li> </ul> <p>[caption id=\"attachment_1419\" align=\"alignnone\" width=\"400\"]{.wp-image-1419 width=\"400\" height=\"300\"} Hard shadows[/caption]   [caption id=\"attachment_1420\" align=\"alignnone\" width=\"400\"]{.wp-image-1420 width=\"400\" height=\"300\"} Soft shadows[/caption]</p> <p>(example in examples/Component/Visual/OglShadowShader.scn)</p>"},{"location":"30_Components/65_Rendering/30_Shadowing/#enabling-shadows","title":"Enabling Shadows","text":"<p>First, you have a light in your scene in order to have shadows (obviously). And you will need two more objects :</p> <p>As you may guess, the important parameter here is softShadows which if true, enable soft shadows, else enable only hard shadows. Put these at the root of your scene file, if you want to cast shadows for all the visual objects in your scene. Finally, press CONTROL + L to draw shadows when simulating. If you don't want to activate it manually, simply add the parameter shadows to true, which will automatically draws shadows.</p>"},{"location":"30_Components/65_Rendering/30_Shadowing/#customize-shadows","title":"Customize Shadows","text":"<p>Default parameters may be not sufficient for your needs (speed, rendering quality). One important parameter located in Light* object is the texture size, which is used in shadow mapping algorithm.</p> <p>For hard shadows, greater the number is, more precise the shadow will be, but slower the scene will be ... But for soft shadows, greater the number is, fuzzier the shadow will be. So try to have a good balance between speed and rendering quality.</p> <p>[caption id=\"attachment_1430\" align=\"alignnone\" width=\"401\"]{.wp-image-1430 width=\"401\" height=\"300\"} Hard shadows with 128x128 texture size[/caption]</p> <p>[caption id=\"attachment_1431\" align=\"alignnone\" width=\"401\"]{.wp-image-1431 width=\"401\" height=\"300\"} Hard shadows with 2048x2048 texture size[/caption]</p> <p>[caption id=\"attachment_1432\" align=\"alignnone\" width=\"401\"]{.wp-image-1432 width=\"401\" height=\"300\"} Soft shadows with 128x128 texture size[/caption]</p> <p>[caption id=\"attachment_1433\" align=\"alignnone\" width=\"401\"]{.wp-image-1433 width=\"401\" height=\"300\"} Soft shadows with 512x512 texture size[/caption]</p> <p>[caption id=\"attachment_1434\" align=\"alignnone\" width=\"401\"]{.wp-image-1434 width=\"401\" height=\"300\"} Soft shadows with 2048x2048 texture size[/caption]</p>"},{"location":"30_Components/65_Rendering/40_Lighting/","title":"Lighting","text":""},{"location":"30_Components/65_Rendering/40_Lighting/#adding-lights","title":"Adding Lights","text":"<p>One white global light illuminates the scene by default. This can be changed through a light manager object and a certain number of lights (limited by OpenGL). The first step is to add the object called LightManager, preferably at the top of the scene file.</p> <pre><code>&lt;LightManager /&gt;\n</code></pre> <p>After that, we can add 3 different kinds of lights :</p> <ul> <li> <p>a positional light (parameters : color, position) ;</p> <pre><code>&lt;PositionalLight name=\"light2\" color=\"0 1 0\" attenuation=\"0.1\" position=\"0.5 -0.7 2\" /&gt;\n</code></pre> </li> <li> <p>a directional light (parameters : color, direction) ;</p> <pre><code>&lt;DirectionalLight name=\"light2\" color=\"0 0 1\" direction=\"1 1 0\" /&gt;\n</code></pre> </li> <li> <p>a spotlight (parameters : color, position, direction, cut off,     exponent, attenuation)</p> <pre><code> &lt;SpotLight name=\"light1\" color=\"1 0 0\" position=\"0.5 0.7 2\" cutoff=\"25\" exponent=\"1\" /&gt;\n</code></pre> </li> </ul>"},{"location":"30_Components/65_Rendering/40_Lighting/#example","title":"Example","text":"<ul> <li>example/Component/visualmodel/LightManager.scn</li> </ul>"},{"location":"30_Components/70_Visual/20_VisualStyle/","title":"VisualStyle","text":""},{"location":"30_Components/70_Visual/20_VisualStyle/#customize-what-to-render-on-screen","title":"Customize what to render on screen","text":""},{"location":"30_Components/70_Visual/20_VisualStyle/#description","title":"Description","text":"<p>VisualStyle component controls the DisplayFlags state embedded in the VisualParams for the current subgraph. It merges the DisplayFlags conveyed by the VisualParams with its own DisplayFlags. Example Taken from examples/Component/Visual/VisualStyle.scn</p> <p>[caption id=\"attachment_1566\" align=\"aligncenter\" width=\"533\"]{.size-full .wp-image-1566 width=\"533\" height=\"400\"} Resulting View from the previous XML scene[/caption]</p>"},{"location":"30_Components/70_Visual/20_VisualStyle/#xml-usage","title":"XML Usage","text":"<pre><code>&lt;VisualStyle displayFlags=\"showBehavior showVisual\" /&gt;\n</code></pre> <p>allowed values for displayFlags data are a combination of the following:</p> <pre><code>showAll, hideAll,\n  showVisual, hideVisual,\n   showVisualModels, hideVisualModels,\n  showBehavior, hideBehavior,\n    showBehaviorModels, hideBehaviorModels,\n    showForceFields, hideForceFields,\n    showInteractionForceFields, hideInteractionForceFields\n  showMapping, hideMapping\n    showMappings, hideMappings\n    showMechanicalMappings, hideMechanicalMappings\n  showCollision, hideCollision\n     showCollisionModels, hideCollisionModels\n     showBoundingCollisionModels, hideBoundingCollisionModels\nshowOptions hideOptions\n  showNormals hideNormals\n  showWireframe hideWireframe\n</code></pre>"},{"location":"30_Components/70_Visual/20_VisualStyle/#c-usage","title":"C++ Usage","text":"<p>In C++, to set the visual style in a node, you have to create a VisualStyle component, attach it to the node, create and tune a !DisplayFlags object and set the !VisualStyle with it, as shown in the following example:</p> <pre><code>  VisualStyle::SPtr visualStyle = New();\n  root-&gt;addObject(visualStyle);\n  VisualStyle::DisplayFlags displayFlags;\n  displayFlags.setShowAll();\n  visualStyle-&gt;displayFlags.setValue(displayFlags);\n</code></pre> <p>You can also use method component::visualmodel::addVisualStyle( simulation::Node::SPtr ) to insert a VisualStyle component at the given node and return a WriteAccessor on the display flags:</p> <pre><code>addVisualStyle(root)-&gt;setShowVisual().setShowBehavior().setShowMapping(false);\n</code></pre> <p>Target: <code>Sofa.Component.Visual</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 displayFlags  Display Flags  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/70_Visual/20_VisualStyle/#examples","title":"Examples","text":"<p>Component/Visual/VisualStyle.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;!-- Using the VisualStyle choose your visual options! --&gt;\n    &lt;!-- ACTIVATE: showVisual showBehavior showForceFields showInteractionForceFields showCollision showCollisionModels showWireFrame --&gt;\n    &lt;!-- DE-ACTIVATE: hideVisual hideBehavior hideForceFields hideInteractionForceFields hideCollision hideCollisionModels hideWireFrame --&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showCollisionModels\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Liver\" &gt;\n        &lt;MeshGmshLoader name=\"meshLoader\" filename=\"mesh/liver.msh\" /&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"topo\" src=\"@meshLoader\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" src=\"@meshLoader\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass name=\"computed using mass density\" massDensity=\"1\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"3000\" computeGlobalMatrix=\"0\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n        &lt;Node name=\"WireframeVisu\" &gt;\n            &lt;VisualStyle displayFlags=\"showVisual showWireframe\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@meshLoader_1\" /&gt;\n            &lt;BarycentricMapping name=\"visual mapping\" input=\"@../dofs\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Sphere\" &gt;\n            &lt;VisualStyle displayFlags=\"hideBehavior showCollision showWireframe\" /&gt;\n        &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject name=\"spheres\" position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping name=\"sphere mapping\" input=\"@../dofs\" output=\"@spheres\" /&gt;\n        &lt;/Node&gt;\n\n\n        &lt;Node name=\"TranslatedSurface\" gravity=\"0 -9.81 0\"&gt;\n&lt;!--             default rendering should be flat rendered and not wireframed --&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver.obj\" translation=\"5 0 0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel src=\"@meshLoader_0\" /&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showCollisionModels\")\n    root.addObject('DefaultAnimationLoop')\n\n    Liver = root.addChild('Liver')\n    Liver.addObject('MeshGmshLoader', name=\"meshLoader\", filename=\"mesh/liver.msh\")\n    Liver.addObject('TetrahedronSetTopologyContainer', name=\"topo\", src=\"@meshLoader\")\n    Liver.addObject('MechanicalObject', name=\"dofs\", src=\"@meshLoader\")\n    Liver.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    Liver.addObject('DiagonalMass', name=\"computed using mass density\", massDensity=\"1\")\n    Liver.addObject('TetrahedralCorotationalFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"3000\", computeGlobalMatrix=\"0\")\n    Liver.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n\n    WireframeVisu = Liver.addChild('WireframeVisu')\n    WireframeVisu.addObject('VisualStyle', displayFlags=\"showVisual showWireframe\")\n    WireframeVisu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/liver-smooth.obj\", handleSeams=\"1\")\n    WireframeVisu.addObject('OglModel', name=\"VisualModel\", src=\"@meshLoader_1\")\n    WireframeVisu.addObject('BarycentricMapping', name=\"visual mapping\", input=\"@../dofs\", output=\"@VisualModel\")\n\n    Sphere = Liver.addChild('Sphere')\n    Sphere.addObject('VisualStyle', displayFlags=\"hideBehavior showCollision showWireframe\")\n    Sphere.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Sphere.addObject('MechanicalObject', name=\"spheres\", position=\"@[-1].position\")\n    Sphere.addObject('SphereCollisionModel', name=\"CollisionModel\", listRadius=\"@[-2].listRadius\")\n    Sphere.addObject('BarycentricMapping', name=\"sphere mapping\", input=\"@../dofs\", output=\"@spheres\")\n\n    TranslatedSurface = Liver.addChild('TranslatedSurface', gravity=\"0 -9.81 0\")\n    TranslatedSurface.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver.obj\", translation=\"5 0 0\", handleSeams=\"1\")\n    TranslatedSurface.addObject('OglModel', src=\"@meshLoader_0\")\n</code></pre>"},{"location":"30_Components/70_Visual/Camera/","title":"Camera","text":"<p>A Camera that render the scene from a given location &amp; orientation.</p> <p>Target: <code>Sofa.Component.Visual</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>BaseCamera</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 position  Camera's position  orientation  Camera's orientation  lookAt  Camera's look at  distance  Distance between camera and look at  fieldOfView  Camera's FOV  45 zNear  Camera's zNear  0.01 zFar  Camera's zFar  100 computeZClip  Compute Z clip planes (Near and Far) according to the bounding box  1 minBBox  minBBox  0 0 0 maxBBox  maxBBox  1 1 1 widthViewport  widthViewport  800 heightViewport  heightViewport  600 projectionType  Camera Type (0 = Perspective, 1 = Orthographic)  activated  Camera activated ?  1 fixedLookAt  keep the lookAt point always fixed  0 modelViewMatrix  ModelView Matrix  projectionMatrix  Projection Matrix  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/70_Visual/InteractiveCamera/","title":"InteractiveCamera","text":"<p>InteractiveCamera</p> <p>Target: <code>Sofa.Component.Visual</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>BaseCamera</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 position  Camera's position  orientation  Camera's orientation  lookAt  Camera's look at  distance  Distance between camera and look at  fieldOfView  Camera's FOV  45 zNear  Camera's zNear  0.01 zFar  Camera's zFar  100 computeZClip  Compute Z clip planes (Near and Far) according to the bounding box  1 minBBox  minBBox  0 0 0 maxBBox  maxBBox  1 1 1 widthViewport  widthViewport  800 heightViewport  heightViewport  600 projectionType  Camera Type (0 = Perspective, 1 = Orthographic)  activated  Camera activated ?  1 fixedLookAt  keep the lookAt point always fixed  0 modelViewMatrix  ModelView Matrix  projectionMatrix  Projection Matrix  zoomSpeed  Zoom Speed  250 panSpeed  Pan Speed  0.1 pivot  Pivot (0 =&gt; Camera lookAt, 1 =&gt; Camera position, 2 =&gt; Scene center, 3 =&gt; World center  2 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/70_Visual/LineAxis/","title":"LineAxis","text":"<p>Display scene axis</p> <p>Target: <code>Sofa.Component.Visual</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 axis  Axis to draw  xyz size  Size of the squared grid  10 thickness  Thickness of the lines in the grid  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/70_Visual/RecordedCamera/","title":"RecordedCamera","text":"<p>A camera that is moving along a predetermined path.</p> <p>Target: <code>Sofa.Component.Visual</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>BaseCamera</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 position  Camera's position  orientation  Camera's orientation  lookAt  Camera's look at  distance  Distance between camera and look at  fieldOfView  Camera's FOV  45 zNear  Camera's zNear  0.01 zFar  Camera's zFar  100 computeZClip  Compute Z clip planes (Near and Far) according to the bounding box  1 minBBox  minBBox  0 0 0 maxBBox  maxBBox  1 1 1 widthViewport  widthViewport  800 heightViewport  heightViewport  600 projectionType  Camera Type (0 = Perspective, 1 = Orthographic)  activated  Camera activated ?  1 fixedLookAt  keep the lookAt point always fixed  0 modelViewMatrix  ModelView Matrix  projectionMatrix  Projection Matrix  zoomSpeed  Zoom Speed  250 panSpeed  Pan Speed  0.1 pivot  Pivot (0 =&gt; Scene center, 1 =&gt; World Center  0 startTime  Time when the camera moves will start  0 endTime  Time when the camera moves will end (or loop)  200 rotationMode  If true, rotation will be performed  0 translationMode  If true, translation will be performed  0 navigationMode  If true, navigation will be performed  0 rotationSpeed  rotation Speed  0.1 rotationCenter  Rotation center coordinates  rotationStartPoint  Rotation start position coordinates  rotationLookAt  Position to be focused during rotation  rotationAxis  Rotation axis  0 1 0 cameraUp  Camera Up axis  0 0 0 cameraPositions  Intermediate camera's positions  cameraOrientations  Intermediate camera's orientations  Visualization drawRotation  If true, will draw the rotation path  0 drawTranslation  If true, will draw the translation path  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/70_Visual/RecordedCamera/#examples","title":"Examples","text":"<p>Component/Visual/RecordedCamera.scn</p> XMLPython <pre><code>&lt;!-- For more details see: https://wiki.sofa-framework.org/tdev/wiki/Notes/NewLoaderArchitecture --&gt;\n&lt;Node name=\"Root\" gravity=\"0 -9.81 0\" dt=\"0.15\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [RecordedCamera VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual\" /&gt;\n    &lt;CollisionPipeline name=\"DefaultCollisionPipeline\" verbose=\"0\" draw=\"0\" depth=\"6\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.64\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;!-- &lt;InteractiveCamera name=\"cam\" position=\"0 0 0\" lookAt=\"0 -1 1\"/&gt; --&gt;\n    &lt;RecordedCamera name=\"cam\" position=\"0 10 0\" rotationLookAt=\"0 30 0\" rotationStartPoint=\"0 100 100\" rotationCenter=\"0 100 0\" listening=\"true\" endTime=\"1000\" drawRotation=\"1\" rotationMode=\"1\" /&gt;\n    &lt;Node name=\"Model 3D\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_0\"  scale=\"10\" translation=\"10 15 0\"filename=\"mesh/liver-smoothUV.obj\" handleSeams=\"1\" /&gt;\n        &lt;OglModel name=\"VisualModel\" texturename=\"textures/RustySteel.bmp\" src=\"@meshLoader_0\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"floor\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/floor.obj\" scale3d=\"1 1 1\" translation=\"0 0 0\" handleSeams=\"1\" /&gt;\n        &lt;OglModel name=\"VisualModel\" src=\"@meshLoader_1\" texturename=\"textures/ice_chess.bmp\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 -9.81 0\", dt=\"0.15\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('VisualStyle', displayFlags=\"showVisual\")\n    Root.addObject('CollisionPipeline', name=\"DefaultCollisionPipeline\", verbose=\"0\", draw=\"0\", depth=\"6\")\n    Root.addObject('BruteForceBroadPhase')\n    Root.addObject('BVHNarrowPhase')\n    Root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.64\")\n    Root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n    Root.addObject('RecordedCamera', name=\"cam\", position=\"0 10 0\", rotationLookAt=\"0 30 0\", rotationStartPoint=\"0 100 100\", rotationCenter=\"0 100 0\", listening=\"true\", endTime=\"1000\", drawRotation=\"1\", rotationMode=\"1\")\n\n    Model 3D = Root.addChild('Model 3D')\n    Model 3D.addObject('MeshOBJLoader', name=\"meshLoader_0\", scale=\"10\", translation=\"10 15 0\", filename=\"mesh/liver-smoothUV.obj\", handleSeams=\"1\")\n    Model 3D.addObject('OglModel', name=\"VisualModel\", texturename=\"textures/RustySteel.bmp\", src=\"@meshLoader_0\")\n\n    floor = Root.addChild('floor')\n    floor.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/floor.obj\", scale3d=\"1 1 1\", translation=\"0 0 0\", handleSeams=\"1\")\n    floor.addObject('OglModel', name=\"VisualModel\", src=\"@meshLoader_1\", texturename=\"textures/ice_chess.bmp\")\n</code></pre>"},{"location":"30_Components/70_Visual/TrailRenderer/","title":"TrailRenderer","text":"<p>Render a trail behind particles</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Visual</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 position  Position of the particles behind which a trail is rendered  nbSteps  Number of time steps to use to render the trail  100 color  Color of the trail  0 1 0 1 thickness  Thickness of the trail  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/70_Visual/TrailRenderer/#examples","title":"Examples","text":"<p>Component/Visual/TrailRenderer.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n\n&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.01\"&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Forward\"/&gt; &lt;!-- Needed to use components [EulerExplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [TrailRenderer VisualGrid] --&gt;\n    &lt;/Node&gt;\n\n    &lt;VisualGrid size=\"20\"/&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;EulerExplicitSolver/&gt;\n    &lt;MechanicalObject template=\"Vec3\" name=\"particle\"\n                      position=\"0 0 0  0 0 0  0 0 0  0 0 0\"\n                      velocity=\"5 5 0  -5 5 0  7 7 0  -7 7 0\" showObject=\"true\" showObjectScale=\"10\"/&gt;\n    &lt;UniformMass/&gt;\n    &lt;TrailRenderer template=\"Vec3\" position=\"@particle.position\" nbSteps=\"200\"/&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.01\")\n    root.addObject('DefaultAnimationLoop')\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Forward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualGrid', size=\"20\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('EulerExplicitSolver')\n    root.addObject('MechanicalObject', template=\"Vec3\", name=\"particle\", position=\"0 0 0  0 0 0  0 0 0  0 0 0\", velocity=\"5 5 0  -5 5 0  7 7 0  -7 7 0\", showObject=\"true\", showObjectScale=\"10\")\n    root.addObject('UniformMass')\n    root.addObject('TrailRenderer', template=\"Vec3\", position=\"@particle.position\", nbSteps=\"200\")\n</code></pre>"},{"location":"30_Components/70_Visual/Visual3DText/","title":"Visual3DText","text":"<p>Display 3D camera-oriented text</p> <p>Target: <code>Sofa.Component.Visual</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 text  Test to display  position  3d position  0 0 0 scale  text scale  1 color  text color. (default=[1.0,1.0,1.0,1.0])  1 1 1 1 depthTest  perform depth test  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/70_Visual/Visual3DText/#examples","title":"Examples","text":"<p>Component/Visual/Visual3DText.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [Visual3DText VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;VisualStyle displayFlags=\"showVisualModels\"/&gt;\n        &lt;Visual3DText text=\"hello world!\" position=\"1 1 1\" color=\"red\" scale=\"2\" depthTest=\"false\"/&gt;\n\n        &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/dragon.obj\" handleSeams=\"1\" /&gt;\n        &lt;OglModel src=\"@meshLoader_0\"/&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root')\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showVisualModels\")\n    root.addObject('Visual3DText', text=\"hello world!\", position=\"1 1 1\", color=\"red\", scale=\"2\", depthTest=\"false\")\n    root.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/dragon.obj\", handleSeams=\"1\")\n    root.addObject('OglModel', src=\"@meshLoader_0\")\n</code></pre>"},{"location":"30_Components/70_Visual/VisualGrid/","title":"VisualGrid","text":"<p>Display a simple grid</p> <p>Target: <code>Sofa.Component.Visual</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 plane  Plane of the grid  z size  Size of the squared grid  10 nbSubdiv  Number of subdivisions  16 color  Color of the lines in the grid. default=(0.34,0.34,0.34,1.0)  0.341176 0.341176 0.341176 1 thickness  Thickness of the lines in the grid  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/70_Visual/VisualGrid/#examples","title":"Examples","text":"<p>Component/Visual/VisualGrid.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualGrid] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n    &lt;OglModel name=\"VisualModel\" src=\"@meshLoader_0\" color=\"red\" /&gt;\n    &lt;VisualGrid/&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver-smooth.obj\", handleSeams=\"1\")\n    root.addObject('OglModel', name=\"VisualModel\", src=\"@meshLoader_0\", color=\"red\")\n    root.addObject('VisualGrid')\n</code></pre>"},{"location":"30_Components/70_Visual/VisualModelImpl/","title":"VisualModelImpl","text":"<p>Generic visual model. If a viewer is active it will replace the VisualModel alias, otherwise nothing will be displayed.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Visual</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> <li><code>VisualState</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 initRestPositions  True if rest positions must be initialized with initial positions  0 useNormals  True if normal smoothing groups should be read from file  1 updateNormals  True if normals should be updated at each iteration  1 computeTangents  True if tangents should be computed at startup  0 updateTangents  True if tangents should be updated at each iteration  1 handleDynamicTopology  True if topological changes should be handled  1 fixMergedUVSeams  True if UV seams should be handled even when duplicate UVs are merged  1 keepLines  keep and draw lines (false by default)  0 vertPosIdx  If vertices have multiple normals/texcoords stores vertices position indices  vertNormIdx  If vertices have multiple normals/texcoords stores vertices normal indices  filename   Path to an ogl model  texturename  Name of the Texture  scaleTex  Scale of the texture  1 1 translationTex  Translation of the texture  0 0 material  Material  putOnlyTexCoords  Give Texture Coordinates without the texture binding  0 srgbTexturing  When sRGB rendering is enabled, is the texture in sRGB colorspace?  0 materials  List of materials  groups  Groups of triangles and quads using a given material  Transformation translation  Initial Translation of the object  0 0 0 rotation  Initial Rotation of the object  0 0 0 scale3d  Initial Scale of the object  1 1 1 Vector position  Vertices coordinates  restPosition  Vertices rest coordinates  normal  Normals of the model  vertices  vertices of the model (only if vertices have multiple normals/texcoords, otherwise positions are used)  texcoords  coordinates of the texture  tangents  tangents for normal mapping  bitangents  tangents for normal mapping  edges  edges of the model  triangles  triangles of the model  quads  quads of the model  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/70_Visual/VisualTransform/","title":"VisualTransform","text":"<p>TODO</p> <p>Target: <code>Sofa.Component.Visual</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 transform  Transformation to apply  recursive  True to apply transform to all nodes below  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/75_UI/10_Customizing_the_UI/","title":"Customizing the UI","text":""},{"location":"30_Components/75_UI/10_Customizing_the_UI/#attachbodybuttonsetting","title":"AttachBodyButtonSetting","text":"<p>Tune the attachBody mouse operation, like which button is used for the operation and the stiffness of the spring.</p>"},{"location":"30_Components/75_UI/10_Customizing_the_UI/#fixpickedparticlebuttonsetting","title":"FixPickedParticleButtonSetting","text":"<p>Specify the mouse button used for this particular operation.</p>"},{"location":"30_Components/75_UI/10_Customizing_the_UI/#viewersetting","title":"ViewerSetting","text":"<p>Customize things like the resolution of the viewer, the camera projection, and the picking method. The picking can be done through ray casting (default) or can be imaged based by using a selection buffer. If you use the picking with the selection buffer you can only pick the surfacic primitives like triangles and spheres which belong to the collision layer of your models.</p>"},{"location":"30_Components/75_UI/10_Customizing_the_UI/#backgroundsetting","title":"BackgroundSetting","text":"<p>Tune the color or the image used for the background of the viewer.</p>"},{"location":"30_Components/75_UI/10_Customizing_the_UI/#sofadefaultpathsetting","title":"SofaDefaultPathSetting","text":"<p>Tell Sofa where to put your simulation records and gnuplot files.</p>"},{"location":"30_Components/75_UI/10_Customizing_the_UI/#statssettings","title":"StatsSettings","text":"<p>Give access to various logging options.</p>"},{"location":"30_Components/75_UI/20_Recorded_Camera/","title":"Recorded Camera","text":""},{"location":"30_Components/75_UI/20_Recorded_Camera/#how-to-manage-the-recorded-camera","title":"How to manage the recorded camera","text":"<p>In this page, we explain how to manage the recorded camera. The recorded camera is available on componentSofaBaseVisual. You have three modes to manipulate the camera: rotation mode, translation mode and navigation mode.</p>"},{"location":"30_Components/75_UI/20_Recorded_Camera/#the-rotation-mode","title":"The rotation mode","text":"<p>The camera can rotate, if you define the rotation center, the rotation axis and the rotation start point. The rotation path is visible if you check the option \"if true, draw the rotation path\".</p>"},{"location":"30_Components/75_UI/20_Recorded_Camera/#the-translation-mode","title":"The translation mode","text":"<p>This mode enables to move the camera between intermediate camera positions. The camera path is then defined with a linear spline linking these intermediate positions.You can select the intermediate positions on the orthogonal views of the plugin image by double-clicking on the point. Each time you double-click on a point you have to update the ImageViewer component. Image:Example.jpg The camera can navigate along the path with a default view up, if you check the option \"if true, translation will be performed\". To draw the translation path check the option \"if true, translation path will be performed\". An example navigationInVolume.scn is available in the plugin image.</p> <ul> <li>How is camera orientation defined ? To define the camera     orientation, you have to determine the look-at vector and the     view-up vector. The camera looks at the next point of the     linear spline. To define the up vector, we initialize it with a     default value. Then in order to guarantee a stability during the     navigation, the up vector is oriented almost in the     same orientation. Indeed for each step n, the right vector is     defined as the cross product between the previous up vector and the     current focal vector. [caption id=\"attachment_1558\"     align=\"aligncenter\" width=\"302\"]{.size-full     .wp-image-1558 width=\"302\"     height=\"214\"}     Axes of the Camera[/caption]</li> </ul>"},{"location":"30_Components/75_UI/20_Recorded_Camera/#the-navigation-mode","title":"The navigation mode","text":"<p>The navigation mode enables to move between selected intermediate camera view points. A view point corresponds to a camera position and a camera orientation. Therefore, the main difference between navigation mode and translation mode is that the camera orientation is defined in the navigation mode by interpolation between intermediate orientations. To save an intermediate camera view point select in the mouse manager (edit-&gt;Mouse manager) the operation \"Save camera's view point for navigation\". To navigate select the operation \"Start navigation if camera's view points have been saved\", which works if at least 2 view points have been saved. An example navigationRecordedCamera.scn is available in examplesComponentsvisualmodel.</p>"},{"location":"30_Components/Controller/MechanicalStateController/","title":"MechanicalStateController","text":"<p>Provides a Mouse &amp; Keyboard user control on a Mechanical State.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.Controller</code></p> <p>namespace: <code>sofa::component::controller</code></p> <p>parents: </p> <ul> <li><code>Controller</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 index  Index of the controlled DOF  0 onlyTranslation  Controlling the DOF only in translation  0 buttonDeviceState  state of ths device button  0 mainDirection  Main direction and orientation of the controlled DOF  0 0 -1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Controller/MechanicalStateController/#examples","title":"Examples","text":"<p>Component/Controller/MechanicalStateController.scn</p> XMLPython <pre><code>&lt;!-- MechanicalStateController example --&gt;\n&lt;Node name=\"root\" dt=\"0.005\" gravity=\"0 -10 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [LocalMinDistance] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Controller\"/&gt; &lt;!-- Needed to use components [MechanicalStateController] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [BTDLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [BeamFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms EdgeSetTopologyContainer EdgeSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showForceFields showCollisionModels\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;LocalMinDistance name=\"Proximity\" alarmDistance=\"1.0\" contactDistance=\"0.5\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"InstrumentEdgeSet\"&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0\" printLog=\"false\"  rayleighMass=\"0.1\" /&gt;\n        &lt;BTDLinearSolver template=\"BTDMatrix6d\" printLog=\"false\" verbose=\"false\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/edgeSet.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"MechanicalDOFs\" template=\"Rigid3\" position=\"0 0 0 0 0 0 1  1 0 0 0 0 0 1  2 0 0 0 0 0 1\" showObject=\"1\"/&gt;\n        &lt;include href=\"Objects/EdgeSetTopology.xml\" src=\"@loader\" template=\"Rigid3\" /&gt;\n        &lt;MechanicalStateController template=\"Rigid3\" listening=\"true\" mainDirection=\"-1.0 0.0 0.0\" handleEventTriggersUpdate=\"true\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"0\" /&gt;\n        &lt;UniformMass vertexMass=\"1 1 0.1 0 0 0 0.1 0 0 0 0.1\" printLog=\"false\" /&gt; \n\n        &lt;BeamFEMForceField name=\"FEM\" radius=\"0.1\" youngModulus=\"50000000\" poissonRatio=\".49\"/&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", gravity=\"0 -10 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Controller\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showForceFields showCollisionModels\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('LocalMinDistance', name=\"Proximity\", alarmDistance=\"1.0\", contactDistance=\"0.5\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    InstrumentEdgeSet = root.addChild('InstrumentEdgeSet')\n    InstrumentEdgeSet.addObject('EulerImplicitSolver', rayleighStiffness=\"0\", printLog=\"false\", rayleighMass=\"0.1\")\n    InstrumentEdgeSet.addObject('BTDLinearSolver', template=\"BTDMatrix6d\", printLog=\"false\", verbose=\"false\")\n    InstrumentEdgeSet.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/edgeSet.msh\")\n    InstrumentEdgeSet.addObject('MechanicalObject', src=\"@loader\", name=\"MechanicalDOFs\", template=\"Rigid3\", position=\"0 0 0 0 0 0 1  1 0 0 0 0 0 1  2 0 0 0 0 0 1\", showObject=\"1\")\n    InstrumentEdgeSet.addObject('include', href=\"Objects/EdgeSetTopology.xml\", src=\"@loader\", template=\"Rigid3\")\n    InstrumentEdgeSet.addObject('MechanicalStateController', template=\"Rigid3\", listening=\"true\", mainDirection=\"-1.0 0.0 0.0\", handleEventTriggersUpdate=\"true\")\n    InstrumentEdgeSet.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"0\")\n    InstrumentEdgeSet.addObject('UniformMass', vertexMass=\"1 1 0.1 0 0 0 0.1 0 0 0 0.1\", printLog=\"false\")\n    InstrumentEdgeSet.addObject('BeamFEMForceField', name=\"FEM\", radius=\"0.1\", youngModulus=\"50000000\", poissonRatio=\".49\")\n</code></pre> <p>Component/Controller/MechanicalStateControllerTranslation.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.005\" gravity=\"0 -10 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [LocalMinDistance] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Controller\"/&gt; &lt;!-- Needed to use components [MechanicalStateController] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showForceFields showCollisionModels\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;LocalMinDistance name=\"Proximity\" alarmDistance=\"1.0\" contactDistance=\"0.5\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"InstrumentEdgeSet\"&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0\" printLog=\"false\"  rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" /&gt;\n        &lt;UniformMass totalMass=\"1\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/sphere.obj\" scale=\"50\" handleSeams=\"1\" /&gt;\n            &lt;OglModel color=\"0.500 0.500 0.500\" src=\"@meshLoader_0\" name=\"Visual\" /&gt;\n            &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/sphere.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" scale=\"50\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;LineCollisionModel /&gt;\n            &lt;PointCollisionModel /&gt;\n            &lt;RigidMapping /&gt;\n        &lt;/Node&gt;\n        &lt;MechanicalStateController template=\"Rigid3\" onlyTranslation=\"true\" listening=\"true\" handleEventTriggersUpdate=\"true\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\", gravity=\"0 -10 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Controller\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showForceFields showCollisionModels\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('LocalMinDistance', name=\"Proximity\", alarmDistance=\"1.0\", contactDistance=\"0.5\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    InstrumentEdgeSet = root.addChild('InstrumentEdgeSet')\n    InstrumentEdgeSet.addObject('EulerImplicitSolver', rayleighStiffness=\"0\", printLog=\"false\", rayleighMass=\"0.1\")\n    InstrumentEdgeSet.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    InstrumentEdgeSet.addObject('MechanicalObject', template=\"Rigid3\")\n    InstrumentEdgeSet.addObject('UniformMass', totalMass=\"1\")\n\n    Visu = InstrumentEdgeSet.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/sphere.obj\", scale=\"50\", handleSeams=\"1\")\n    Visu.addObject('OglModel', color=\"0.500 0.500 0.500\", src=\"@meshLoader_0\", name=\"Visual\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = InstrumentEdgeSet.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/sphere.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", scale=\"50\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n    InstrumentEdgeSet.addObject('MechanicalStateController', template=\"Rigid3\", onlyTranslation=\"true\", listening=\"true\", handleEventTriggersUpdate=\"true\")\n</code></pre>"},{"location":"30_Components/Diffusion/TetrahedronDiffusionFEMForceField/","title":"TetrahedronDiffusionFEMForceField","text":"<p>Isotropic or anisotropic diffusion on Tetrahedral Meshes</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Diffusion</code></p> <p>namespace: <code>sofa::component::diffusion</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 constantDiffusionCoefficient  Constant diffusion coefficient  1 tetraDiffusionCoefficient  Diffusion coefficient for each tetrahedron, by default equal to constantDiffusionCoefficient.  anisotropyRatio  Anisotropy ratio (r\u00b2&gt;1).  Default is 1.0 = isotropy.  1 transverseAnisotropyArray  Data to handle topology on tetrahedra  tagMechanics  Tag of the Mechanical Object.  meca Visualization drawConduc  To display conductivity map.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"30_Components/Diffusion/TetrahedronDiffusionFEMForceField/#examples","title":"Examples","text":"<p>Component/Diffusion/TetrahedronDiffusionFEMForceField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.00001\" gravity=\"0 0 0\" &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [LinearMovementProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Diffusion\"/&gt; &lt;!-- Needed to use components [TetrahedronDiffusionFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader MeshVTKLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Engine\"/&gt; &lt;!-- Needed to use components [TextureInterpolation] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels\"/&gt;\n\n    &lt;MeshVTKLoader name=\"meshLoader\" filename=\"mesh/raptorTetra_8418.vtu\" /&gt;\n    &lt;MeshOBJLoader name=\"potentialLoader\" filename=\"mesh/raptorTemperature.obj\" /&gt;\n\n    &lt;TetrahedronSetTopologyContainer name=\"topo\" src=\"@meshLoader\" tags=\"mechanics\"/&gt;\n    &lt;MechanicalObject template=\"Vec3\" name=\"raptorDOFs\" src=\"@meshLoader\" tags=\"mechanics\" /&gt;\n    &lt;TetrahedronSetTopologyModifier name=\"Modifier\" tags=\"mechanics\"/&gt;\n    &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"  tags=\"mechanics\"/&gt;\n    &lt;BoxROI name=\"box-hot\" box=\"-3 4 4 3 8 8\" drawBoxes=\"1\" position=\"@raptorDOFs.position\"/&gt;\n    &lt;BoxROI name=\"box-cold\" box=\"-3 4 -4 3 8 -10\" drawBoxes=\"1\" position=\"@raptorDOFs.position\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n\n    &lt;Node name=\"Temperature\" gravity=\"0 0 0\"  &gt;\n\n        &lt;EulerImplicitSolver name=\"EulerExplicitSolver\" firstOrder=\"1\" tags=\"heat\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver name=\"CG\" iterations=\"1000\" tolerance=\"1.0e-10\" threshold=\"1.0e-30\" tags=\"heat\"/&gt;\n        &lt;MechanicalObject template=\"Vec1\" position=\"@../potentialLoader.position\"  name=\"gridTemperature\" bbox=\"0 0 0 0 0 0\" tags=\"heat\"/&gt;\n        &lt;TetrahedronDiffusionFEMForceField template=\"Vec1\" name=\"DiffusionForceField\" topology=\"@../topo\" constantDiffusionCoefficient=\"1500\" printLog=\"0\" drawConduc=\"0\" tagMechanics=\"mechanics\" tags=\"heat\"/&gt;\n        &lt;MeshMatrixMass name=\"Mass\" template=\"Vec1,Vec3\" lumping=\"0\" massDensity=\"1.0\" printLog=\"0\" tags=\"heat\" topology=\"@../topo\" geometryState=\"@../raptorDOFs\"/&gt;\n\n        &lt;LinearMovementProjectiveConstraint template=\"Vec1\" keyTimes=\"0 0.005 0.006\" movements=\"0 0 1\" indices=\"@../box-cold.indices\" /&gt;\n        &lt;LinearMovementProjectiveConstraint template=\"Vec1\" keyTimes=\"0.001 0.002 0.004 0.005 0.006\" movements=\"0 1 0.5 1 0\" indices=\"@../box-hot.indices\" /&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;TextureInterpolation template=\"Vec1\" name=\"EngineInterpolation\"  input_states=\"@../gridTemperature.position\"  input_coordinates=\"@../../raptorDOFs.position\"  min_value=\"0.0\"  max_value=\"1.0\"  manual_scale=\"1\"  drawPotentiels=\"0\"  showIndicesScale=\"5e-05\" /&gt;\n            &lt;OglModel template=\"Vec3\" name=\"oglPotentiel\" texcoords=\"@EngineInterpolation.output_coordinates\" handleDynamicTopology=\"0\" texturename=\"textures/heatColor.bmp\" scale3d=\"1 1 1\"  material=\"Default Diffuse 1 1 1 1 0.5 Ambient 1 1 1 1 0.3 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \"/&gt;\n            &lt;IdentityMapping input=\"@../../raptorDOFs\" output=\"@oglPotentiel\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.00001\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Diffusion\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Engine\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels\")\n    root.addObject('MeshVTKLoader', name=\"meshLoader\", filename=\"mesh/raptorTetra_8418.vtu\")\n    root.addObject('MeshOBJLoader', name=\"potentialLoader\", filename=\"mesh/raptorTemperature.obj\")\n    root.addObject('TetrahedronSetTopologyContainer', name=\"topo\", src=\"@meshLoader\", tags=\"mechanics\")\n    root.addObject('MechanicalObject', template=\"Vec3\", name=\"raptorDOFs\", src=\"@meshLoader\", tags=\"mechanics\")\n    root.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\", tags=\"mechanics\")\n    root.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\", tags=\"mechanics\")\n    root.addObject('BoxROI', name=\"box-hot\", box=\"-3 4 4 3 8 8\", drawBoxes=\"1\", position=\"@raptorDOFs.position\")\n    root.addObject('BoxROI', name=\"box-cold\", box=\"-3 4 -4 3 8 -10\", drawBoxes=\"1\", position=\"@raptorDOFs.position\")\n    root.addObject('DefaultAnimationLoop')\n\n    Temperature = root.addChild('Temperature', gravity=\"0 0 0\")\n    Temperature.addObject('EulerImplicitSolver', name=\"EulerExplicitSolver\", firstOrder=\"1\", tags=\"heat\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Temperature.addObject('CGLinearSolver', name=\"CG\", iterations=\"1000\", tolerance=\"1.0e-10\", threshold=\"1.0e-30\", tags=\"heat\")\n    Temperature.addObject('MechanicalObject', template=\"Vec1\", position=\"@../potentialLoader.position\", name=\"gridTemperature\", bbox=\"0 0 0 0 0 0\", tags=\"heat\")\n    Temperature.addObject('TetrahedronDiffusionFEMForceField', template=\"Vec1\", name=\"DiffusionForceField\", topology=\"@../topo\", constantDiffusionCoefficient=\"1500\", printLog=\"0\", drawConduc=\"0\", tagMechanics=\"mechanics\", tags=\"heat\")\n    Temperature.addObject('MeshMatrixMass', name=\"Mass\", template=\"Vec1,Vec3\", lumping=\"0\", massDensity=\"1.0\", printLog=\"0\", tags=\"heat\", topology=\"@../topo\", geometryState=\"@../raptorDOFs\")\n    Temperature.addObject('LinearMovementProjectiveConstraint', template=\"Vec1\", keyTimes=\"0 0.005 0.006\", movements=\"0 0 1\", indices=\"@../box-cold.indices\")\n    Temperature.addObject('LinearMovementProjectiveConstraint', template=\"Vec1\", keyTimes=\"0.001 0.002 0.004 0.005 0.006\", movements=\"0 1 0.5 1 0\", indices=\"@../box-hot.indices\")\n\n    Visu = Temperature.addChild('Visu')\n    Visu.addObject('TextureInterpolation', template=\"Vec1\", name=\"EngineInterpolation\", input_states=\"@../gridTemperature.position\", input_coordinates=\"@../../raptorDOFs.position\", min_value=\"0.0\", max_value=\"1.0\", manual_scale=\"1\", drawPotentiels=\"0\", showIndicesScale=\"5e-05\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"oglPotentiel\", texcoords=\"@EngineInterpolation.output_coordinates\", handleDynamicTopology=\"0\", texturename=\"textures/heatColor.bmp\", scale3d=\"1 1 1\", material=\"Default Diffuse 1 1 1 1 0.5 Ambient 1 1 1 1 0.3 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \")\n    Visu.addObject('IdentityMapping', input=\"@../../raptorDOFs\", output=\"@oglPotentiel\")\n</code></pre>"},{"location":"30_Components/GUI/AddFrameButtonSetting/","title":"AddFrameButtonSetting","text":"<p>Add a frame to a skinned model</p> <p>Target: <code>Sofa.GUI.Component</code></p> <p>namespace: <code>sofa::gui::component</code></p> <p>parents: </p> <ul> <li><code>MouseButtonSetting</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 button  Mouse button used  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/GUI/AddRecordedCameraButtonSetting/","title":"AddRecordedCameraButtonSetting","text":"<p>Save Camera's View Point Button configuration</p> <p>Target: <code>Sofa.GUI.Component</code></p> <p>namespace: <code>sofa::gui::component</code></p> <p>parents: </p> <ul> <li><code>MouseButtonSetting</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 button  Mouse button used  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/GUI/AttachBodyButtonSetting/","title":"AttachBodyButtonSetting","text":"<p>Attach Body Button configuration</p> <p>Target: <code>Sofa.GUI.Component</code></p> <p>namespace: <code>sofa::gui::component</code></p> <p>parents: </p> <ul> <li><code>MouseButtonSetting</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 button  Mouse button used  stiffness  Stiffness of the spring to attach a particule  1000 arrowSize  Size of the drawn spring: if &gt;0 an arrow will be drawn  0 Visualization showFactorSize  Show factor size of the JointSpringForcefield  when interacting with rigids  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/GUI/ConstraintAttachButtonSetting/","title":"ConstraintAttachButtonSetting","text":"<p>Attach an object to the mouse using lagrangian multiplier</p> <p>Target: <code>Sofa.GUI.Component</code></p> <p>namespace: <code>sofa::gui::component</code></p> <p>parents: </p> <ul> <li><code>MouseButtonSetting</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 button  Mouse button used  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/GUI/FixPickedParticleButtonSetting/","title":"FixPickedParticleButtonSetting","text":"<p>Fix a picked particle in space</p> <p>Target: <code>Sofa.GUI.Component</code></p> <p>namespace: <code>sofa::gui::component</code></p> <p>parents: </p> <ul> <li><code>MouseButtonSetting</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 button  Mouse button used  stiffness  Stiffness of the spring to fix a particule  10000 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/GUI/MouseInteractor/","title":"MouseInteractor","text":"<p>Perform tasks related to the interaction with the mouse Perform tasks related to the interaction with the mouse and rigid objects Supports Mouse Interaction using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.GUI.Component</code></p> <p>namespace: <code>sofa::gui::component::performer</code></p> <p>parents: </p> <ul> <li><code>BaseMouseInteractor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/GUI/StartNavigationButtonSetting/","title":"StartNavigationButtonSetting","text":"<p>Start Navigation Button configuration</p> <p>Target: <code>Sofa.GUI.Component</code></p> <p>namespace: <code>sofa::gui::component</code></p> <p>parents: </p> <ul> <li><code>MouseButtonSetting</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 button  Mouse button used  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Haptics/LCPForceFeedback/","title":"LCPForceFeedback","text":"<p>LCP force feedback for the device</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.Haptics</code></p> <p>namespace: <code>sofa::component::haptics</code></p> <p>parents: </p> <ul> <li><code>MechanicalStateForceFeedback</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 activate  boolean to activate or deactivate the forcefeedback  0 indice  Tool indice in the OmniDriver  0 forceCoef  multiply haptic force by this coef.  0.03 solverTimeout  max time to spend solving constraints.  0.0008 solverMaxIt  max iteration to spend solving constraints  100 derivRotations  if true, deriv the rotations when updating the violations  0 localHapticConstraintAllFrames  Flag to enable/disable constraint haptic influence from all frames  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Haptics/NullForceFeedback/","title":"NullForceFeedback","text":"<p>Null force feedback for haptic feedback device</p> <p>Target: <code>Sofa.Component.Haptics</code></p> <p>namespace: <code>sofa::component::haptics</code></p> <p>parents: </p> <ul> <li><code>ForceFeedback</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 activate  boolean to activate or deactivate the forcefeedback  0 indice  Tool indice in the OmniDriver  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Haptics/NullForceFeedbackT/","title":"NullForceFeedbackT","text":"<p>Null force feedback for haptic feedback device</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> </ul> <p>Target: <code>Sofa.Component.Haptics</code></p> <p>namespace: <code>sofa::component::haptics</code></p> <p>parents: </p> <ul> <li><code>MechanicalStateForceFeedback</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 activate  boolean to activate or deactivate the forcefeedback  0 indice  Tool indice in the OmniDriver  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/LinearSystem/CompositeLinearSystem/","title":"CompositeLinearSystem","text":"<p>Component acting like a linear system, but delegates the linear system functionalities to a list of real linear systems</p> <p>Templates:</p> <ul> <li><code>BlockDiagonalMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixMat2x2d</code></li> <li><code>CompressedRowSparseMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixMat4x4d</code></li> <li><code>CompressedRowSparseMatrixMat6x6d</code></li> <li><code>CompressedRowSparseMatrixMat8x8d</code></li> <li><code>CompressedRowSparseMatrixd</code></li> <li><code>DiagonalMatrix</code></li> <li><code>FullMatrix</code></li> <li><code>RotationMatrixd</code></li> <li><code>SparseMatrix</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSystem</code></p> <p>namespace: <code>sofa::component::linearsystem</code></p> <p>parents: </p> <ul> <li><code>TypedMatrixLinearSystem</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 matrixSize  Size of the global matrix  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystems List of linear systems to assemble solverLinearSystem Among the list of linear systems, which one is to be used by the linear solver"},{"location":"30_Components/LinearSystem/CompositeLinearSystem/#examples","title":"Examples","text":"<p>Component/LinearSystem/CompositeLinearSystem.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 -10 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [SparseLDLSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSystem\"/&gt; &lt;!-- Needed to use components [CompositeLinearSystem MatrixLinearSystem] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetGeometryAlgorithms] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"SofaMatrix\"/&gt; &lt;!-- Needed to use components [GlobalSystemMatrixImage] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;DefaultVisualManagerLoop/&gt;\n\n    &lt;DefaultVisualManagerLoop/&gt;\n\n    &lt;Node name=\"node\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n\n        &lt;Node name=\"matrices\"&gt;\n            &lt;MatrixLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"system\"/&gt;\n            &lt;MatrixLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"K\" assembleMass=\"false\" assembleDamping=\"false\" assembleGeometricStiffness=\"false\" applyProjectiveConstraints=\"false\"/&gt;\n            &lt;MatrixLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"M\" assembleStiffness=\"false\" assembleDamping=\"false\" assembleGeometricStiffness=\"false\" applyProjectiveConstraints=\"false\"/&gt;\n            &lt;GlobalSystemMatrixImage name=\"imageA\" linearSystem=\"@system\"/&gt;\n            &lt;GlobalSystemMatrixImage name=\"imageK\" linearSystem=\"@K\"/&gt;\n            &lt;GlobalSystemMatrixImage name=\"imageM\" linearSystem=\"@M\"/&gt;\n        &lt;/Node&gt;\n        &lt;CompositeLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"solverSystem\" linearSystems=\"@matrices/system @matrices/K @matrices/M\" solverLinearSystem=\"@matrices/system\"/&gt;\n        &lt;SparseLDLSolver template=\"CompressedRowSparseMatrixd\" linearSystem=\"@solverSystem\"/&gt;\n\n\n        &lt;Node name=\"object_a\"&gt;\n\n            &lt;RegularGridTopology name=\"grid\" nx=\"1\" ny=\"1\" nz=\"20\" xmin=\"0\" xmax=\"0\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" showObject=\"true\" showObjectScale=\"1\" position=\"@grid.position\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n            &lt;Node name=\"FEM\"&gt;\n                &lt;RegularGridTopology name=\"FEM_grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n                &lt;MechanicalObject template=\"Vec3d\" name=\"FEM_DOFs_a\" position=\"@FEM_grid.position\" printLog=\"false\"/&gt;\n                &lt;HexahedronSetGeometryAlgorithms/&gt;\n                &lt;UniformMass vertexMass=\"1\"/&gt;\n                &lt;HexahedronFEMForceField name=\"FEM_a\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n                &lt;RigidMapping globalToLocalCoords=\"true\" rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\"/&gt;\n\n                &lt;Node name=\"Visual\"&gt;\n                    &lt;RegularGridTopology name=\"grid\" nx=\"2\" ny=\"2\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                    &lt;OglModel name=\"visu\" lineWidth=\"5\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 1 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                    &lt;BarycentricMapping input=\"@../FEM_DOFs_a\" output=\"@visu\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"object_b\"&gt;\n            &lt;MechanicalObject template=\"Vec3d\" name=\"FEM_DOFs_b\" printLog=\"false\"/&gt;\n            &lt;RegularGridTopology name=\"grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-9\" ymax=\"-6\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;HexahedronSetGeometryAlgorithms/&gt;\n            &lt;UniformMass totalMass=\"320\"/&gt;\n            &lt;BoxROI template=\"Vec3d\" name=\"box\" box=\"-1.6 -9.1 -0.1 1.6 -5.1 0.0001\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"@box.indices\" /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM_b\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n            &lt;Node name=\"Visual\"&gt;\n                &lt;RegularGridTopology name=\"grid\" n=\"@../grid.n\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-9\" ymax=\"-6\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                &lt;OglModel name=\"visu\" lineWidth=\"2\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 1 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                &lt;BarycentricMapping input=\"@../FEM_DOFs_b\" output=\"@visu\"/&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"object_c\"&gt;\n\n            &lt;RegularGridTopology name=\"grid\" nx=\"1\" ny=\"1\" nz=\"20\" xmin=\"5\" xmax=\"5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" showObject=\"true\" showObjectScale=\"1\" position=\"@grid.position\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n            &lt;Node name=\"FEM\"&gt;\n                &lt;RegularGridTopology name=\"FEM_grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"3.5\" xmax=\"6.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n                &lt;MechanicalObject template=\"Vec3d\" name=\"FEM_DOFs_c\" position=\"@FEM_grid.position\" printLog=\"false\"/&gt;\n                &lt;HexahedronSetGeometryAlgorithms/&gt;\n                &lt;UniformMass vertexMass=\"1\"/&gt;\n                &lt;HexahedronFEMForceField name=\"FEM_c\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n                &lt;RigidMapping globalToLocalCoords=\"true\" rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\"/&gt;\n\n                &lt;Node name=\"Visual\"&gt;\n                    &lt;RegularGridTopology name=\"grid\" nx=\"2\" ny=\"2\" nz=\"20\" xmin=\"3.5\" xmax=\"6.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                    &lt;OglModel name=\"visu\" lineWidth=\"5\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 0 1 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                    &lt;BarycentricMapping input=\"@../FEM_DOFs_c\" output=\"@visu\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 -10 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSystem\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"SofaMatrix\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('DefaultVisualManagerLoop')\n    root.addObject('DefaultVisualManagerLoop')\n\n    node = root.addChild('node')\n    node.addObject('EulerImplicitSolver', name=\"odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n\n    matrices = node.addChild('matrices')\n    matrices.addObject('MatrixLinearSystem', template=\"CompressedRowSparseMatrixd\", name=\"system\")\n    matrices.addObject('MatrixLinearSystem', template=\"CompressedRowSparseMatrixd\", name=\"K\", assembleMass=\"false\", assembleDamping=\"false\", assembleGeometricStiffness=\"false\", applyProjectiveConstraints=\"false\")\n    matrices.addObject('MatrixLinearSystem', template=\"CompressedRowSparseMatrixd\", name=\"M\", assembleStiffness=\"false\", assembleDamping=\"false\", assembleGeometricStiffness=\"false\", applyProjectiveConstraints=\"false\")\n    matrices.addObject('GlobalSystemMatrixImage', name=\"imageA\", linearSystem=\"@system\")\n    matrices.addObject('GlobalSystemMatrixImage', name=\"imageK\", linearSystem=\"@K\")\n    matrices.addObject('GlobalSystemMatrixImage', name=\"imageM\", linearSystem=\"@M\")\n    node.addObject('CompositeLinearSystem', template=\"CompressedRowSparseMatrixd\", name=\"solverSystem\", linearSystems=\"@matrices/system @matrices/K @matrices/M\", solverLinearSystem=\"@matrices/system\")\n    node.addObject('SparseLDLSolver', template=\"CompressedRowSparseMatrixd\", linearSystem=\"@solverSystem\")\n\n    object_a = node.addChild('object_a')\n    object_a.addObject('RegularGridTopology', name=\"grid\", nx=\"1\", ny=\"1\", nz=\"20\", xmin=\"0\", xmax=\"0\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    object_a.addObject('MechanicalObject', template=\"Rigid3d\", name=\"DOFs\", showObject=\"true\", showObjectScale=\"1\", position=\"@grid.position\")\n    object_a.addObject('FixedProjectiveConstraint', indices=\"0\")\n\n    FEM = object_a.addChild('FEM')\n    FEM.addObject('RegularGridTopology', name=\"FEM_grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    FEM.addObject('MechanicalObject', template=\"Vec3d\", name=\"FEM_DOFs_a\", position=\"@FEM_grid.position\", printLog=\"false\")\n    FEM.addObject('HexahedronSetGeometryAlgorithms')\n    FEM.addObject('UniformMass', vertexMass=\"1\")\n    FEM.addObject('HexahedronFEMForceField', name=\"FEM_a\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n    FEM.addObject('RigidMapping', globalToLocalCoords=\"true\", rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\")\n\n    Visual = FEM.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", nx=\"2\", ny=\"2\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"5\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 1 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../FEM_DOFs_a\", output=\"@visu\")\n\n    object_b = node.addChild('object_b')\n    object_b.addObject('MechanicalObject', template=\"Vec3d\", name=\"FEM_DOFs_b\", printLog=\"false\")\n    object_b.addObject('RegularGridTopology', name=\"grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-9\", ymax=\"-6\", zmin=\"0\", zmax=\"19\")\n    object_b.addObject('HexahedronSetGeometryAlgorithms')\n    object_b.addObject('UniformMass', totalMass=\"320\")\n    object_b.addObject('BoxROI', template=\"Vec3d\", name=\"box\", box=\"-1.6 -9.1 -0.1 1.6 -5.1 0.0001\")\n    object_b.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    object_b.addObject('HexahedronFEMForceField', name=\"FEM_b\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n\n    Visual = object_b.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", n=\"@../grid.n\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-9\", ymax=\"-6\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"2\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 1 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../FEM_DOFs_b\", output=\"@visu\")\n\n    object_c = node.addChild('object_c')\n    object_c.addObject('RegularGridTopology', name=\"grid\", nx=\"1\", ny=\"1\", nz=\"20\", xmin=\"5\", xmax=\"5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    object_c.addObject('MechanicalObject', template=\"Rigid3d\", name=\"DOFs\", showObject=\"true\", showObjectScale=\"1\", position=\"@grid.position\")\n    object_c.addObject('FixedProjectiveConstraint', indices=\"0\")\n\n    FEM = object_c.addChild('FEM')\n    FEM.addObject('RegularGridTopology', name=\"FEM_grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"3.5\", xmax=\"6.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    FEM.addObject('MechanicalObject', template=\"Vec3d\", name=\"FEM_DOFs_c\", position=\"@FEM_grid.position\", printLog=\"false\")\n    FEM.addObject('HexahedronSetGeometryAlgorithms')\n    FEM.addObject('UniformMass', vertexMass=\"1\")\n    FEM.addObject('HexahedronFEMForceField', name=\"FEM_c\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n    FEM.addObject('RigidMapping', globalToLocalCoords=\"true\", rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\")\n\n    Visual = FEM.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", nx=\"2\", ny=\"2\", nz=\"20\", xmin=\"3.5\", xmax=\"6.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"5\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 0 1 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../FEM_DOFs_c\", output=\"@visu\")\n</code></pre>"},{"location":"30_Components/LinearSystem/ConstantSparsityPatternSystem/","title":"ConstantSparsityPatternSystem","text":"<p>Linear system taking advantage of the constant sparsity pattern of the global matrix to speed up the matrix assembly. Do not use if sparsity pattern is not constant (topological changes, ...).</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSystem</code></p> <p>namespace: <code>sofa::component::linearsystem</code></p> <p>parents: </p> <ul> <li><code>MatrixLinearSystem</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 matrixSize  Size of the global matrix  assembleStiffness  If true, the stiffness is added to the global matrix  1 assembleMass  If true, the mass is added to the global matrix  1 assembleDamping  If true, the damping is added to the global matrix  1 assembleGeometricStiffness  If true, the geometric stiffness of mappings is added to the global matrix  1 applyProjectiveConstraints  If true, projective constraints are applied on the global matrix  1 applyMappedComponents  If true, mapped components contribute to the global matrix  1 checkIndices  If true, indices are verified before being added in to the global matrix, favoring security over speed  0 parallelAssemblyIndependentMatrices  If true, independent matrices (global matrix vs mapped matrices) are assembled in parallel  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/LinearSystem/ConstantSparsityPatternSystem/#examples","title":"Examples","text":"<p>Component/LinearSystem/ConstantSparsityPatternSystem.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 -10 0\"&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [EigenSimplicialLDLT] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSystem\"/&gt; &lt;!-- Needed to use components [ConstantSparsityPatternSystem] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetGeometryAlgorithms] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;DefaultVisualManagerLoop/&gt;\n\n    &lt;Node name=\"beams\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;ConstantSparsityPatternSystem template=\"CompressedRowSparseMatrixd\" name=\"A\" printLog=\"true\" checkIndices=\"false\"/&gt;\n        &lt;EigenSimplicialLDLT template=\"CompressedRowSparseMatrixd\" linearSystem=\"@A\"/&gt;\n\n        &lt;Node name=\"object_a\"&gt;\n\n            &lt;RegularGridTopology name=\"grid\" nx=\"1\" ny=\"1\" nz=\"20\" xmin=\"0\" xmax=\"0\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" showObject=\"true\" showObjectScale=\"1\" position=\"@grid.position\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n            &lt;Node name=\"FEM\"&gt;\n                &lt;RegularGridTopology name=\"FEM_grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n                &lt;MechanicalObject template=\"Vec3d\" name=\"FEM_DOFs_a\" position=\"@FEM_grid.position\" printLog=\"false\"/&gt;\n                &lt;HexahedronSetGeometryAlgorithms/&gt;\n                &lt;UniformMass totalMass=\"320\"/&gt;\n                &lt;HexahedronFEMForceField name=\"FEM_a\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n                &lt;RigidMapping globalToLocalCoords=\"true\" rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\"/&gt;\n\n                &lt;Node name=\"Visual\"&gt;\n                    &lt;RegularGridTopology name=\"grid\" nx=\"2\" ny=\"2\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                    &lt;OglModel name=\"visu\" lineWidth=\"5\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 1 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                    &lt;BarycentricMapping input=\"@../FEM_DOFs_a\" output=\"@visu\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"object_b\"&gt;\n            &lt;MechanicalObject template=\"Vec3d\" name=\"FEM_DOFs_b\" printLog=\"false\"/&gt;\n            &lt;RegularGridTopology name=\"grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-9\" ymax=\"-6\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;HexahedronSetGeometryAlgorithms/&gt;\n            &lt;UniformMass totalMass=\"320\"/&gt;\n            &lt;BoxROI template=\"Vec3d\" name=\"box\" box=\"-1.6 -9.1 -0.1 1.6 -5.1 0.0001\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"@box.indices\" /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM_b\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n            &lt;Node name=\"Visual\"&gt;\n                &lt;RegularGridTopology name=\"grid\" n=\"@../grid.n\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-9\" ymax=\"-6\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                &lt;OglModel name=\"visu\" lineWidth=\"2\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 1 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                &lt;BarycentricMapping input=\"@../FEM_DOFs_b\" output=\"@visu\"/&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"object_c\"&gt;\n\n            &lt;RegularGridTopology name=\"grid\" nx=\"1\" ny=\"1\" nz=\"20\" xmin=\"5\" xmax=\"5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" showObject=\"true\" showObjectScale=\"1\" position=\"@grid.position\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n            &lt;Node name=\"FEM\"&gt;\n                &lt;RegularGridTopology name=\"FEM_grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"3.5\" xmax=\"6.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n                &lt;MechanicalObject template=\"Vec3d\" name=\"FEM_DOFs_c\" position=\"@FEM_grid.position\" printLog=\"false\"/&gt;\n                &lt;HexahedronSetGeometryAlgorithms/&gt;\n                &lt;UniformMass totalMass=\"320\"/&gt;\n                &lt;HexahedronFEMForceField name=\"FEM_c\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n                &lt;RigidMapping globalToLocalCoords=\"true\" rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\"/&gt;\n\n                &lt;Node name=\"Visual\"&gt;\n                    &lt;RegularGridTopology name=\"grid\" nx=\"2\" ny=\"2\" nz=\"20\" xmin=\"3.5\" xmax=\"6.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                    &lt;OglModel name=\"visu\" lineWidth=\"5\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 0 1 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                    &lt;BarycentricMapping input=\"@../FEM_DOFs_c\" output=\"@visu\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 -10 0\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSystem\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('DefaultVisualManagerLoop')\n\n    beams = root.addChild('beams')\n    beams.addObject('EulerImplicitSolver', name=\"odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    beams.addObject('ConstantSparsityPatternSystem', template=\"CompressedRowSparseMatrixd\", name=\"A\", printLog=\"true\", checkIndices=\"false\")\n    beams.addObject('EigenSimplicialLDLT', template=\"CompressedRowSparseMatrixd\", linearSystem=\"@A\")\n\n    object_a = beams.addChild('object_a')\n    object_a.addObject('RegularGridTopology', name=\"grid\", nx=\"1\", ny=\"1\", nz=\"20\", xmin=\"0\", xmax=\"0\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    object_a.addObject('MechanicalObject', template=\"Rigid3d\", name=\"DOFs\", showObject=\"true\", showObjectScale=\"1\", position=\"@grid.position\")\n    object_a.addObject('FixedProjectiveConstraint', indices=\"0\")\n\n    FEM = object_a.addChild('FEM')\n    FEM.addObject('RegularGridTopology', name=\"FEM_grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    FEM.addObject('MechanicalObject', template=\"Vec3d\", name=\"FEM_DOFs_a\", position=\"@FEM_grid.position\", printLog=\"false\")\n    FEM.addObject('HexahedronSetGeometryAlgorithms')\n    FEM.addObject('UniformMass', totalMass=\"320\")\n    FEM.addObject('HexahedronFEMForceField', name=\"FEM_a\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n    FEM.addObject('RigidMapping', globalToLocalCoords=\"true\", rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\")\n\n    Visual = FEM.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", nx=\"2\", ny=\"2\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"5\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 1 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../FEM_DOFs_a\", output=\"@visu\")\n\n    object_b = beams.addChild('object_b')\n    object_b.addObject('MechanicalObject', template=\"Vec3d\", name=\"FEM_DOFs_b\", printLog=\"false\")\n    object_b.addObject('RegularGridTopology', name=\"grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-9\", ymax=\"-6\", zmin=\"0\", zmax=\"19\")\n    object_b.addObject('HexahedronSetGeometryAlgorithms')\n    object_b.addObject('UniformMass', totalMass=\"320\")\n    object_b.addObject('BoxROI', template=\"Vec3d\", name=\"box\", box=\"-1.6 -9.1 -0.1 1.6 -5.1 0.0001\")\n    object_b.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    object_b.addObject('HexahedronFEMForceField', name=\"FEM_b\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n\n    Visual = object_b.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", n=\"@../grid.n\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-9\", ymax=\"-6\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"2\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 1 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../FEM_DOFs_b\", output=\"@visu\")\n\n    object_c = beams.addChild('object_c')\n    object_c.addObject('RegularGridTopology', name=\"grid\", nx=\"1\", ny=\"1\", nz=\"20\", xmin=\"5\", xmax=\"5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    object_c.addObject('MechanicalObject', template=\"Rigid3d\", name=\"DOFs\", showObject=\"true\", showObjectScale=\"1\", position=\"@grid.position\")\n    object_c.addObject('FixedProjectiveConstraint', indices=\"0\")\n\n    FEM = object_c.addChild('FEM')\n    FEM.addObject('RegularGridTopology', name=\"FEM_grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"3.5\", xmax=\"6.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    FEM.addObject('MechanicalObject', template=\"Vec3d\", name=\"FEM_DOFs_c\", position=\"@FEM_grid.position\", printLog=\"false\")\n    FEM.addObject('HexahedronSetGeometryAlgorithms')\n    FEM.addObject('UniformMass', totalMass=\"320\")\n    FEM.addObject('HexahedronFEMForceField', name=\"FEM_c\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n    FEM.addObject('RigidMapping', globalToLocalCoords=\"true\", rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\")\n\n    Visual = FEM.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", nx=\"2\", ny=\"2\", nz=\"20\", xmin=\"3.5\", xmax=\"6.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"5\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 0 1 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../FEM_DOFs_c\", output=\"@visu\")\n</code></pre>"},{"location":"30_Components/LinearSystem/ConstantSparsityProjectionMethod/","title":"ConstantSparsityProjectionMethod","text":"<p>Matrix mapping computing the matrix projection taking advantage of the constant sparsity pattern</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSystem</code></p> <p>namespace: <code>sofa::component::linearsystem</code></p> <p>parents: </p> <ul> <li><code>MatrixProjectionMethod</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 areJacobiansConstant  True if mapping jacobians are considered constant over time. They are computed only the first time.  0 parallelProduct  Compute the matrix product in parallel  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated"},{"location":"30_Components/LinearSystem/MatrixLinearSystem/","title":"MatrixLinearSystem","text":"<p>Linear system Linear system</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixMat2x2d</code></li> <li><code>CompressedRowSparseMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixMat4x4d</code></li> <li><code>CompressedRowSparseMatrixMat6x6d</code></li> <li><code>CompressedRowSparseMatrixMat8x8d</code></li> <li><code>CompressedRowSparseMatrixd</code></li> <li><code>FullMatrix</code></li> <li><code>SparseMatrix</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSystem</code></p> <p>namespace: <code>sofa::component::linearsystem</code></p> <p>parents: </p> <ul> <li><code>TypedMatrixLinearSystem</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 matrixSize  Size of the global matrix  assembleStiffness  If true, the stiffness is added to the global matrix  1 assembleMass  If true, the mass is added to the global matrix  1 assembleDamping  If true, the damping is added to the global matrix  1 assembleGeometricStiffness  If true, the geometric stiffness of mappings is added to the global matrix  1 applyProjectiveConstraints  If true, projective constraints are applied on the global matrix  1 applyMappedComponents  If true, mapped components contribute to the global matrix  1 checkIndices  If true, indices are verified before being added in to the global matrix, favoring security over speed  0 parallelAssemblyIndependentMatrices  If true, independent matrices (global matrix vs mapped matrices) are assembled in parallel  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/LinearSystem/MatrixLinearSystem/#examples","title":"Examples","text":"<p>Component/LinearSystem/MatrixLinearSystem.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 -10 0\"&gt;\n\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [EigenSimplicialLDLT] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSystem\"/&gt; &lt;!-- Needed to use components [CompositeLinearSystem MatrixLinearSystem MatrixProjectionMethod] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping IdentityMapping SubsetMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [StiffSpringForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetGeometryAlgorithms] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n        &lt;RequiredPlugin name=\"SofaMatrix\"/&gt; &lt;!-- Needed to use components [GlobalSystemMatrixImage] --&gt;\n    &lt;/Node&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showWireframe\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;DefaultVisualManagerLoop/&gt;\n\n    &lt;Node name=\"rigidSections\"&gt;\n        &lt;EulerImplicitSolver name=\"odesolver\" rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n\n        &lt;Node name=\"matrices\"&gt;\n            &lt;MatrixLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"system\" checkIndices=\"true\" printLog=\"true\"/&gt;\n            &lt;MatrixLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"GS\" assembleStiffness=\"false\" assembleMass=\"false\" assembleDamping=\"false\" assembleGeometricStiffness=\"true\" applyProjectiveConstraints=\"false\"/&gt;\n            &lt;GlobalSystemMatrixImage name=\"imageA\" linearSystem=\"@system\"/&gt;\n            &lt;GlobalSystemMatrixImage name=\"imageGS\" linearSystem=\"@GS\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;CompositeLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"solverSystem\" linearSystems=\"@matrices/system @matrices/GS\" solverLinearSystem=\"@matrices/system\"/&gt;\n        &lt;EigenSimplicialLDLT template=\"CompressedRowSparseMatrixd\" linearSystem=\"@solverSystem\"/&gt;\n\n        &lt;Node name=\"red\"&gt;\n\n            &lt;RegularGridTopology name=\"grid\" nx=\"1\" ny=\"1\" nz=\"20\" xmin=\"0\" xmax=\"0\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" showObject=\"true\" showObjectScale=\"1\" position=\"@grid.position\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n            &lt;Node name=\"FEM\"&gt;\n                &lt;RegularGridTopology name=\"FEM_grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n                &lt;MechanicalObject template=\"Vec3d\" name=\"DOFs\" position=\"@FEM_grid.position\" printLog=\"false\"/&gt;\n                &lt;HexahedronSetGeometryAlgorithms/&gt;\n                &lt;MeshMatrixMass totalMass=\"320\"/&gt;\n                &lt;HexahedronFEMForceField name=\"FEM_a\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n                &lt;RigidMapping geometricStiffness=\"2\" globalToLocalCoords=\"true\" rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\"/&gt;\n\n                &lt;Node name=\"Visual\"&gt;\n                    &lt;RegularGridTopology name=\"grid\" nx=\"2\" ny=\"2\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                    &lt;OglModel name=\"visu\" lineWidth=\"5\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 1 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                    &lt;BarycentricMapping input=\"@../DOFs\" output=\"@visu\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"green\"&gt;\n            &lt;VisualStyle displayFlags=\"showInteractionForceFields\" /&gt;\n            &lt;MechanicalObject template=\"Vec3d\" name=\"DOFs\" printLog=\"false\"/&gt;\n            &lt;RegularGridTopology name=\"grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-9\" ymax=\"-6\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;HexahedronSetGeometryAlgorithms/&gt;\n            &lt;MeshMatrixMass totalMass=\"320\"/&gt;\n            &lt;BoxROI template=\"Vec3d\" name=\"box\" box=\"-1.6 -9.1 -0.1 1.6 -5.1 0.0001\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"@box.indices\" /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM_b\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n            &lt;Node name=\"a\"&gt;\n                &lt;BoxROI name=\"box\" position=\"@../DOFs.position\" box=\"1.4 -6.1 18.9 1.6 -5.9 19.1\" drawBoxes=\"true\" doUpdate=\"false\"/&gt;\n                &lt;MechanicalObject template=\"Vec3d\" name=\"DOFs\"/&gt;\n                &lt;SubsetMapping input=\"@../DOFs\" output=\"@DOFs\" indices=\"@box.indices\"/&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"b\"&gt;\n                &lt;BoxROI name=\"box\" position=\"@../DOFs.position\" box=\"1.4 -6.1 1.9 1.6 -5.9 2.1\" drawBoxes=\"true\" doUpdate=\"false\"/&gt;\n                &lt;MechanicalObject template=\"Vec3d\" name=\"DOFs\"/&gt;\n                &lt;SubsetMapping input=\"@../DOFs\" output=\"@DOFs\" indices=\"@box.indices\"/&gt;\n            &lt;/Node&gt;\n            &lt;MatrixProjectionMethod areJacobiansConstant=\"true\" mechanicalStates=\"@/rigidSections/green/a/DOFs @/rigidSections/green/a/DOFs\"/&gt;\n            &lt;MatrixProjectionMethod areJacobiansConstant=\"true\" mechanicalStates=\"@/rigidSections/green/a/DOFs @/rigidSections/green/b/DOFs\"/&gt;\n            &lt;MatrixProjectionMethod areJacobiansConstant=\"true\" mechanicalStates=\"@/rigidSections/green/b/DOFs @/rigidSections/green/a/DOFs\"/&gt;\n            &lt;MatrixProjectionMethod areJacobiansConstant=\"true\" mechanicalStates=\"@/rigidSections/green/b/DOFs @/rigidSections/green/b/DOFs\"/&gt;\n            &lt;StiffSpringForceField object1=\"@a/DOFs\" object2=\"@b/DOFs\" spring=\"0 0 100 1 1\" showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n\n            &lt;Node name=\"Visual\"&gt;\n                &lt;RegularGridTopology name=\"grid\" n=\"@../grid.n\" xmin=\"-1.5\" xmax=\"1.5\" ymin=\"-9\" ymax=\"-6\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                &lt;OglModel name=\"visu\" lineWidth=\"2\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 1 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                &lt;BarycentricMapping input=\"@../DOFs\" output=\"@visu\"/&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"blue\"&gt;\n\n            &lt;RegularGridTopology name=\"grid\" nx=\"1\" ny=\"1\" nz=\"20\" xmin=\"5\" xmax=\"5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" showObject=\"true\" showObjectScale=\"1\" position=\"@grid.position\"/&gt;\n            &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n\n            &lt;Node name=\"intermediateMapping\"&gt; &lt;!-- this mapping is introduced just to verify that geometric stiffness is well projected --&gt;\n\n                &lt;MechanicalObject template=\"Rigid3d\" name=\"DOFs\" showObject=\"false\"/&gt;\n                &lt;ConstantForceField forces=\"0 0 0.0005 0 0 0\"/&gt;\n                &lt;IdentityMapping input=\"@../DOFs\" output=\"@DOFs\"/&gt;\n\n                &lt;Node name=\"FEM\"&gt;\n                    &lt;RegularGridTopology name=\"FEM_grid\" nx=\"4\" ny=\"4\" nz=\"20\" xmin=\"3.5\" xmax=\"6.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" /&gt;\n                    &lt;MechanicalObject template=\"Vec3d\" name=\"DOFs\" position=\"@FEM_grid.position\" printLog=\"false\"/&gt;\n                    &lt;HexahedronSetGeometryAlgorithms/&gt;\n                    &lt;MeshMatrixMass totalMass=\"320\"/&gt;\n                    &lt;HexahedronFEMForceField name=\"FEM_c\" youngModulus=\"10000\" poissonRatio=\"0.45\" method=\"large\" printLog=\"false\"/&gt;\n\n                    &lt;RigidMapping geometricStiffness=\"2\" globalToLocalCoords=\"true\" rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\"/&gt;\n\n                    &lt;Node name=\"Visual\"&gt;\n                        &lt;RegularGridTopology name=\"grid\" nx=\"2\" ny=\"2\" nz=\"20\" xmin=\"3.5\" xmax=\"6.5\" ymin=\"-1.5\" ymax=\"1.5\" zmin=\"0\" zmax=\"19\" computeTriangleList=\"false\" /&gt;\n                        &lt;OglModel name=\"visu\" lineWidth=\"5\" material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 0 1 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\"/&gt;\n                        &lt;BarycentricMapping input=\"@../DOFs\" output=\"@visu\"/&gt;\n                    &lt;/Node&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"spring\"&gt;\n            &lt;VisualStyle displayFlags=\"showInteractionForceFields\" /&gt;\n\n            &lt;Node name=\"nonMappedDOFsSpring\"&gt;\n                &lt;StiffSpringForceField object1=\"@red/DOFs\" object2=\"@blue/DOFs\" spring=\"19 19 50 1 1\" showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n            &lt;/Node&gt;\n\n            &lt;Node name=\"springBetweenMappedAndNonMapped\"&gt;\n                &lt;BoxROI position=\"@red/FEM/DOFs.position\" box=\"-1.6 -1.6 18.9 -1.4 -1.4 19.1\" drawBoxes=\"true\"/&gt;\n                &lt;BoxROI position=\"@green/DOFs.position\" box=\"-1.6 -6.1 18.9 -1.4 -5.9 19.1\" drawBoxes=\"true\"/&gt;\n                &lt;StiffSpringForceField object1=\"@red/FEM/DOFs\" object2=\"@green/DOFs\" spring=\"304 316 100 1 1\" showArrowSize=\"0.05\" drawMode=\"2\"/&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 -10 0\")\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSystem\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    plugins.addObject('RequiredPlugin', name=\"SofaMatrix\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showWireframe\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('DefaultVisualManagerLoop')\n\n    rigidSections = root.addChild('rigidSections')\n    rigidSections.addObject('EulerImplicitSolver', name=\"odesolver\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n\n    matrices = rigidSections.addChild('matrices')\n    matrices.addObject('MatrixLinearSystem', template=\"CompressedRowSparseMatrixd\", name=\"system\", checkIndices=\"true\", printLog=\"true\")\n    matrices.addObject('MatrixLinearSystem', template=\"CompressedRowSparseMatrixd\", name=\"GS\", assembleStiffness=\"false\", assembleMass=\"false\", assembleDamping=\"false\", assembleGeometricStiffness=\"true\", applyProjectiveConstraints=\"false\")\n    matrices.addObject('GlobalSystemMatrixImage', name=\"imageA\", linearSystem=\"@system\")\n    matrices.addObject('GlobalSystemMatrixImage', name=\"imageGS\", linearSystem=\"@GS\")\n    rigidSections.addObject('CompositeLinearSystem', template=\"CompressedRowSparseMatrixd\", name=\"solverSystem\", linearSystems=\"@matrices/system @matrices/GS\", solverLinearSystem=\"@matrices/system\")\n    rigidSections.addObject('EigenSimplicialLDLT', template=\"CompressedRowSparseMatrixd\", linearSystem=\"@solverSystem\")\n\n    red = rigidSections.addChild('red')\n    red.addObject('RegularGridTopology', name=\"grid\", nx=\"1\", ny=\"1\", nz=\"20\", xmin=\"0\", xmax=\"0\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    red.addObject('MechanicalObject', template=\"Rigid3d\", name=\"DOFs\", showObject=\"true\", showObjectScale=\"1\", position=\"@grid.position\")\n    red.addObject('FixedProjectiveConstraint', indices=\"0\")\n\n    FEM = red.addChild('FEM')\n    FEM.addObject('RegularGridTopology', name=\"FEM_grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    FEM.addObject('MechanicalObject', template=\"Vec3d\", name=\"DOFs\", position=\"@FEM_grid.position\", printLog=\"false\")\n    FEM.addObject('HexahedronSetGeometryAlgorithms')\n    FEM.addObject('MeshMatrixMass', totalMass=\"320\")\n    FEM.addObject('HexahedronFEMForceField', name=\"FEM_a\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n    FEM.addObject('RigidMapping', geometricStiffness=\"2\", globalToLocalCoords=\"true\", rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\")\n\n    Visual = FEM.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", nx=\"2\", ny=\"2\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"5\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 1 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../DOFs\", output=\"@visu\")\n\n    green = rigidSections.addChild('green')\n    green.addObject('VisualStyle', displayFlags=\"showInteractionForceFields\")\n    green.addObject('MechanicalObject', template=\"Vec3d\", name=\"DOFs\", printLog=\"false\")\n    green.addObject('RegularGridTopology', name=\"grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-9\", ymax=\"-6\", zmin=\"0\", zmax=\"19\")\n    green.addObject('HexahedronSetGeometryAlgorithms')\n    green.addObject('MeshMatrixMass', totalMass=\"320\")\n    green.addObject('BoxROI', template=\"Vec3d\", name=\"box\", box=\"-1.6 -9.1 -0.1 1.6 -5.1 0.0001\")\n    green.addObject('FixedProjectiveConstraint', indices=\"@box.indices\")\n    green.addObject('HexahedronFEMForceField', name=\"FEM_b\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n\n    a = green.addChild('a')\n    a.addObject('BoxROI', name=\"box\", position=\"@../DOFs.position\", box=\"1.4 -6.1 18.9 1.6 -5.9 19.1\", drawBoxes=\"true\", doUpdate=\"false\")\n    a.addObject('MechanicalObject', template=\"Vec3d\", name=\"DOFs\")\n    a.addObject('SubsetMapping', input=\"@../DOFs\", output=\"@DOFs\", indices=\"@box.indices\")\n\n    b = green.addChild('b')\n    b.addObject('BoxROI', name=\"box\", position=\"@../DOFs.position\", box=\"1.4 -6.1 1.9 1.6 -5.9 2.1\", drawBoxes=\"true\", doUpdate=\"false\")\n    b.addObject('MechanicalObject', template=\"Vec3d\", name=\"DOFs\")\n    b.addObject('SubsetMapping', input=\"@../DOFs\", output=\"@DOFs\", indices=\"@box.indices\")\n    green.addObject('MatrixProjectionMethod', areJacobiansConstant=\"true\", mechanicalStates=\"@/rigidSections/green/a/DOFs @/rigidSections/green/a/DOFs\")\n    green.addObject('MatrixProjectionMethod', areJacobiansConstant=\"true\", mechanicalStates=\"@/rigidSections/green/a/DOFs @/rigidSections/green/b/DOFs\")\n    green.addObject('MatrixProjectionMethod', areJacobiansConstant=\"true\", mechanicalStates=\"@/rigidSections/green/b/DOFs @/rigidSections/green/a/DOFs\")\n    green.addObject('MatrixProjectionMethod', areJacobiansConstant=\"true\", mechanicalStates=\"@/rigidSections/green/b/DOFs @/rigidSections/green/b/DOFs\")\n    green.addObject('StiffSpringForceField', object1=\"@a/DOFs\", object2=\"@b/DOFs\", spring=\"0 0 100 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n\n    Visual = green.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", n=\"@../grid.n\", xmin=\"-1.5\", xmax=\"1.5\", ymin=\"-9\", ymax=\"-6\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"2\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 1 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../DOFs\", output=\"@visu\")\n\n    blue = rigidSections.addChild('blue')\n    blue.addObject('RegularGridTopology', name=\"grid\", nx=\"1\", ny=\"1\", nz=\"20\", xmin=\"5\", xmax=\"5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    blue.addObject('MechanicalObject', template=\"Rigid3d\", name=\"DOFs\", showObject=\"true\", showObjectScale=\"1\", position=\"@grid.position\")\n    blue.addObject('FixedProjectiveConstraint', indices=\"0\")\n\n    intermediateMapping = blue.addChild('intermediateMapping')\n    intermediateMapping.addObject('MechanicalObject', template=\"Rigid3d\", name=\"DOFs\", showObject=\"false\")\n    intermediateMapping.addObject('ConstantForceField', forces=\"0 0 0.0005 0 0 0\")\n    intermediateMapping.addObject('IdentityMapping', input=\"@../DOFs\", output=\"@DOFs\")\n\n    FEM = intermediateMapping.addChild('FEM')\n    FEM.addObject('RegularGridTopology', name=\"FEM_grid\", nx=\"4\", ny=\"4\", nz=\"20\", xmin=\"3.5\", xmax=\"6.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\")\n    FEM.addObject('MechanicalObject', template=\"Vec3d\", name=\"DOFs\", position=\"@FEM_grid.position\", printLog=\"false\")\n    FEM.addObject('HexahedronSetGeometryAlgorithms')\n    FEM.addObject('MeshMatrixMass', totalMass=\"320\")\n    FEM.addObject('HexahedronFEMForceField', name=\"FEM_c\", youngModulus=\"10000\", poissonRatio=\"0.45\", method=\"large\", printLog=\"false\")\n    FEM.addObject('RigidMapping', geometricStiffness=\"2\", globalToLocalCoords=\"true\", rigidIndexPerPoint=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 15 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19\")\n\n    Visual = FEM.addChild('Visual')\n    Visual.addObject('RegularGridTopology', name=\"grid\", nx=\"2\", ny=\"2\", nz=\"20\", xmin=\"3.5\", xmax=\"6.5\", ymin=\"-1.5\", ymax=\"1.5\", zmin=\"0\", zmax=\"19\", computeTriangleList=\"false\")\n    Visual.addObject('OglModel', name=\"visu\", lineWidth=\"5\", material=\"Default Diffuse 0 1 1 1 1 Ambient 1 0 0 1 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visual.addObject('BarycentricMapping', input=\"@../DOFs\", output=\"@visu\")\n\n    spring = rigidSections.addChild('spring')\n    spring.addObject('VisualStyle', displayFlags=\"showInteractionForceFields\")\n\n    nonMappedDOFsSpring = spring.addChild('nonMappedDOFsSpring')\n    nonMappedDOFsSpring.addObject('StiffSpringForceField', object1=\"@red/DOFs\", object2=\"@blue/DOFs\", spring=\"19 19 50 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n\n    springBetweenMappedAndNonMapped = spring.addChild('springBetweenMappedAndNonMapped')\n    springBetweenMappedAndNonMapped.addObject('BoxROI', position=\"@red/FEM/DOFs.position\", box=\"-1.6 -1.6 18.9 -1.4 -1.4 19.1\", drawBoxes=\"true\")\n    springBetweenMappedAndNonMapped.addObject('BoxROI', position=\"@green/DOFs.position\", box=\"-1.6 -6.1 18.9 -1.4 -5.9 19.1\", drawBoxes=\"true\")\n    springBetweenMappedAndNonMapped.addObject('StiffSpringForceField', object1=\"@red/FEM/DOFs\", object2=\"@green/DOFs\", spring=\"304 316 100 1 1\", showArrowSize=\"0.05\", drawMode=\"2\")\n</code></pre>"},{"location":"30_Components/LinearSystem/MatrixProjectionMethod/","title":"MatrixProjectionMethod","text":"<p>Matrix mapping computing the matrix projection using the Eigen library</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>Sofa.Component.LinearSystem</code></p> <p>namespace: <code>sofa::component::linearsystem</code></p> <p>parents: </p> <ul> <li><code>BaseMatrixProjectionMethod</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 areJacobiansConstant  True if mapping jacobians are considered constant over time. They are computed only the first time.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated"},{"location":"30_Components/Playback/CompareState/","title":"CompareState","text":"<p>Compare State vectors from a reference frame to the associated Mechanical State</p> <p>Target: <code>Sofa.Component.Playback</code></p> <p>namespace: <code>sofa::component::playback</code></p> <p>parents: </p> <ul> <li><code>ReadState</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  output file name  interval  time duration between inputs  0 shift  shift between times in the file and times when they will be read  0 loop  set to 'true' to re-read the file when reaching the end  0 Transformation scalePos  scale the input mechanical object  1 rotation  rotate the input mechanical object  0 0 0 translation  translate the input mechanical object  0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Playback/CompareState/#examples","title":"Examples","text":"<p>Component/Playback/CompareState.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9.81 0\"&gt;\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [SparseLDLSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Playback\"/&gt; &lt;!-- Needed to use components [CompareState] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;/Node&gt;\n\n    &lt;VisualStyle displayFlags=\"showForceFields showBehaviorModels showVisual showInteractionForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;!-- Beam under gravity --&gt;\n    &lt;Node name=\"Beam\"&gt;\n        &lt;EulerImplicitSolver/&gt;                \n        &lt;SparseLDLSolver /&gt;\n\n        &lt;MechanicalObject name=\"beamMO\" template=\"Vec3\" /&gt;\n        &lt;RegularGridTopology nx=\"3\" ny=\"3\" nz=\"7\" xmin=\"0\" xmax=\"3\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"7\" /&gt;\n        &lt;UniformMass totalMass=\"5\" /&gt;\n\n        &lt;!-- CompareState: read file beamGravity exported with totalMass == 10 --&gt;\n        &lt;CompareState name=\"StateComparator\" filename=\"beamGravity.txt.gz\" printLog=\"0\"/&gt;\n\n        &lt;FixedProjectiveConstraint indices=\"0-8\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"100\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"BeamReplay\"&gt;\n        &lt;MechanicalObject name=\"beamMO\" showObject=\"1\"/&gt;\n        &lt;RegularGridTopology name=\"grid\" nx=\"3\" ny=\"3\" nz=\"7\" xmin=\"0\" xmax=\"3\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"7\" /&gt;\n        &lt;ReadState name=\"StateReader\" filename=\"beamGravity.txt.gz\" /&gt;\n\n        &lt;Node name=\"visu\"&gt;\n            &lt;EdgeSetTopologyContainer edges=\"@../grid.edges\"/&gt;\n            &lt;EdgeSetTopologyModifier /&gt;\n            &lt;EdgeSetGeometryAlgorithms template=\"Vec3\" drawEdges=\"1\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 -9.81 0\")\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Playback\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showForceFields showBehaviorModels showVisual showInteractionForceFields\")\n    root.addObject('DefaultAnimationLoop')\n\n    Beam = root.addChild('Beam')\n    Beam.addObject('EulerImplicitSolver')\n    Beam.addObject('SparseLDLSolver')\n    Beam.addObject('MechanicalObject', name=\"beamMO\", template=\"Vec3\")\n    Beam.addObject('RegularGridTopology', nx=\"3\", ny=\"3\", nz=\"7\", xmin=\"0\", xmax=\"3\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"7\")\n    Beam.addObject('UniformMass', totalMass=\"5\")\n    Beam.addObject('CompareState', name=\"StateComparator\", filename=\"beamGravity.txt.gz\", printLog=\"0\")\n    Beam.addObject('FixedProjectiveConstraint', indices=\"0-8\")\n    Beam.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"100\", poissonRatio=\"0.3\", method=\"large\")\n\n    BeamReplay = root.addChild('BeamReplay')\n    BeamReplay.addObject('MechanicalObject', name=\"beamMO\", showObject=\"1\")\n    BeamReplay.addObject('RegularGridTopology', name=\"grid\", nx=\"3\", ny=\"3\", nz=\"7\", xmin=\"0\", xmax=\"3\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"7\")\n    BeamReplay.addObject('ReadState', name=\"StateReader\", filename=\"beamGravity.txt.gz\")\n\n    visu = BeamReplay.addChild('visu')\n    visu.addObject('EdgeSetTopologyContainer', edges=\"@../grid.edges\")\n    visu.addObject('EdgeSetTopologyModifier')\n    visu.addObject('EdgeSetGeometryAlgorithms', template=\"Vec3\", drawEdges=\"1\")\n</code></pre>"},{"location":"30_Components/Playback/CompareTopology/","title":"CompareTopology","text":"<p>Compare Topology containers from a reference frame to the associated Topology</p> <p>Target: <code>Sofa.Component.Playback</code></p> <p>namespace: <code>sofa::component::playback</code></p> <p>parents: </p> <ul> <li><code>ReadTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  input file name  interval  time duration between inputs  0 shift  shift between times in the file and times when they will be read  0 loop  set to 'true' to re-read the file when reaching the end  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Playback/InputEventReader/","title":"InputEventReader","text":"<p>Read events from file</p> <p>Target: <code>Sofa.Component.Playback</code></p> <p>namespace: <code>sofa::component::playback</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  input events file name  /dev/input/mouse2 inverseSense  inverse the sense of the mouvement  0 printEvent  Print event informations  0 key1  Key event generated when the left pedal is pressed  0 key2  Key event generated when the right pedal is pressed  1 writeEvents  If true, write incoming events ; if false, read events from that file (if an output filename is provided)  0 outputFilename  Other filename where events will be stored (or read)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Playback/ReadState/","title":"ReadState","text":"<p>Read State vectors from file at each timestep</p> <p>Target: <code>Sofa.Component.Playback</code></p> <p>namespace: <code>sofa::component::playback</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  output file name  interval  time duration between inputs  0 shift  shift between times in the file and times when they will be read  0 loop  set to 'true' to re-read the file when reaching the end  0 Transformation scalePos  scale the input mechanical object  1 rotation  rotate the input mechanical object  0 0 0 translation  translate the input mechanical object  0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Playback/ReadState/#examples","title":"Examples","text":"<p>Component/Playback/ReadState.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 0 -9.81\"&gt;\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Playback\"/&gt; &lt;!-- Needed to use components [ReadState] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms,EdgeSetTopologyContainer,EdgeSetTopologyModifier] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;/Node&gt;\n    &lt;VisualStyle displayFlags=\"showForceFields showBehaviorModels showVisual showInteractionForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;!-- Beam animated by reading the state file --&gt;\n    &lt;Node name=\"Beam\"&gt;\n        &lt;MechanicalObject name=\"beamMO\" showObject=\"1\"/&gt;\n        &lt;RegularGridTopology name=\"grid\" nx=\"3\" ny=\"3\" nz=\"7\" xmin=\"0\" xmax=\"3\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"7\" /&gt;\n        &lt;!-- Read the file: beamGravity.txt --&gt;\n        &lt;!-- This file is generated by the example scene: WriteState.scn --&gt;\n        &lt;ReadState name=\"StateReader\" filename=\"beamGravity.txt.gz\" /&gt;\n\n        &lt;Node name=\"visu\"&gt;\n            &lt;EdgeSetTopologyContainer edges=\"@../grid.edges\"/&gt;\n            &lt;EdgeSetTopologyModifier /&gt;\n            &lt;EdgeSetGeometryAlgorithms template=\"Vec3\" drawEdges=\"1\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 0 -9.81\")\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Playback\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showForceFields showBehaviorModels showVisual showInteractionForceFields\")\n    root.addObject('DefaultAnimationLoop')\n\n    Beam = root.addChild('Beam')\n    Beam.addObject('MechanicalObject', name=\"beamMO\", showObject=\"1\")\n    Beam.addObject('RegularGridTopology', name=\"grid\", nx=\"3\", ny=\"3\", nz=\"7\", xmin=\"0\", xmax=\"3\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"7\")\n    Beam.addObject('ReadState', name=\"StateReader\", filename=\"beamGravity.txt.gz\")\n\n    visu = Beam.addChild('visu')\n    visu.addObject('EdgeSetTopologyContainer', edges=\"@../grid.edges\")\n    visu.addObject('EdgeSetTopologyModifier')\n    visu.addObject('EdgeSetGeometryAlgorithms', template=\"Vec3\", drawEdges=\"1\")\n</code></pre>"},{"location":"30_Components/Playback/ReadTopology/","title":"ReadTopology","text":"<p>Read topology containers informations from file at each timestep</p> <p>Target: <code>Sofa.Component.Playback</code></p> <p>namespace: <code>sofa::component::playback</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  input file name  interval  time duration between inputs  0 shift  shift between times in the file and times when they will be read  0 loop  set to 'true' to re-read the file when reaching the end  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Playback/WriteState/","title":"WriteState","text":"<p>Write State vectors to file at each timestep</p> <p>Target: <code>Sofa.Component.Playback</code></p> <p>namespace: <code>sofa::component::playback</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  output file name  writeX  flag enabling output of X vector  1 writeX0  flag enabling output of X0 vector  0 writeV  flag enabling output of V vector  0 writeF  flag enabling output of F vector  0 time  set time to write outputs (by default export at t=0)  period  period between outputs  0 DOFsX  set the position DOFs to write  DOFsV  set the velocity DOFs to write  stopAt  stop the simulation when the given threshold is reached  0 keperiod  set the period to measure the kinetic energy increase  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Playback/WriteState/#examples","title":"Examples","text":"<p>Component/Playback/WriteState.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9.81 0\"&gt;\n    &lt;Node name=\"plugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Direct\"/&gt; &lt;!-- Needed to use components [SparseLDLSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Playback\"/&gt; &lt;!-- Needed to use components [WriteState] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;/Node&gt;\n\n    &lt;VisualStyle displayFlags=\"showForceFields showBehaviorModels showVisual showInteractionForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;!-- Beam under gravity --&gt;\n    &lt;Node name=\"Beam\"&gt;\n        &lt;EulerImplicitSolver/&gt;                \n        &lt;SparseLDLSolver /&gt;\n\n        &lt;MechanicalObject name=\"beamMO\" template=\"Vec3\" /&gt;\n        &lt;RegularGridTopology nx=\"3\" ny=\"3\" nz=\"7\" xmin=\"0\" xmax=\"3\" ymin=\"0\" ymax=\"3\" zmin=\"0\" zmax=\"7\" /&gt;\n        &lt;UniformMass totalMass=\"10\" /&gt;\n\n        &lt;!-- WriteState: finds automatically the Mechanical within its node/context --&gt;\n        &lt;!-- Export positions (X) every 0.01 (each time step) --&gt;\n        &lt;WriteState name=\"StateWriter\" filename=\"beamGravity.txt.gz\" period=\"0.01\" writeX=\"1\" writeV=\"0\" writeF=\"0\" time=\"0\"/&gt;\n\n        &lt;FixedProjectiveConstraint indices=\"0-8\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"100\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 -9.81 0\")\n\n    plugins = root.addChild('plugins')\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Direct\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Playback\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    plugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showForceFields showBehaviorModels showVisual showInteractionForceFields\")\n    root.addObject('DefaultAnimationLoop')\n\n    Beam = root.addChild('Beam')\n    Beam.addObject('EulerImplicitSolver')\n    Beam.addObject('SparseLDLSolver')\n    Beam.addObject('MechanicalObject', name=\"beamMO\", template=\"Vec3\")\n    Beam.addObject('RegularGridTopology', nx=\"3\", ny=\"3\", nz=\"7\", xmin=\"0\", xmax=\"3\", ymin=\"0\", ymax=\"3\", zmin=\"0\", zmax=\"7\")\n    Beam.addObject('UniformMass', totalMass=\"10\")\n    Beam.addObject('WriteState', name=\"StateWriter\", filename=\"beamGravity.txt.gz\", period=\"0.01\", writeX=\"1\", writeV=\"0\", writeF=\"0\", time=\"0\")\n    Beam.addObject('FixedProjectiveConstraint', indices=\"0-8\")\n    Beam.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"100\", poissonRatio=\"0.3\", method=\"large\")\n</code></pre>"},{"location":"30_Components/Playback/WriteTopology/","title":"WriteTopology","text":"<p>Write topology containers informations to file at each timestep</p> <p>Target: <code>Sofa.Component.Playback</code></p> <p>namespace: <code>sofa::component::playback</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  output file name  writeContainers  flag enabling output of common topology containers.  1 writeShellContainers  flag enabling output of specific shell topology containers.  0 interval  time duration between outputs  0 time  set time to write outputs  period  period between outputs  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Rendering2D/OglColorMap/","title":"OglColorMap","text":"<p>Provides color palette and support for conversion of numbers to colors.</p> <p>Target: <code>Sofa.GL.Component.Rendering2D</code></p> <p>namespace: <code>sofa::gl::component::rendering2d</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 paletteSize  How many colors to use  256 colorScheme  Color scheme to use  legendOffset  Draw the legend on screen with an x,y offset  10 5 legendTitle  Font size of the legend (if any)  legendSize  Add a title to the legend  11 min  min value for drawing the legend without the need to actually use the range with getEvaluator method wich sets the min  0 max  max value for drawing the legend without the need to actually use the range with getEvaluator method wich sets the max  0 legendRangeScale  to change the unit of the min/max value of the legend  1 Visualization showLegend  Activate rendering of color scale legend on the side  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Rendering2D/OglLabel/","title":"OglLabel","text":"<p>Display 2D text in the viewport.</p> <p>Target: <code>Sofa.GL.Component.Rendering2D</code></p> <p>namespace: <code>sofa::gl::component::rendering2d</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 prefix  The prefix of the text to display  label  The text to display  suffix  The suffix of the text to display  x  The x position of the text on the screen  10 y  The y position of the text on the screen  10 fontsize  The size of the font used to display the text on the screen  14 color  The color of the text to display. (default='gray')  0.5 0.5 0.5 1 selectContrastingColor  Overide the color value but one that contrast with the background color  0 updateLabelEveryNbSteps  Update the display of the label every nb of time steps  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Rendering2D/OglLabel/#examples","title":"Examples","text":"<p>Component/Visual/OglLabel.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 0 -9.81\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Analyze\"/&gt; &lt;!-- Needed to use components [AverageCoord] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [PlaneForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Setting\"/&gt; &lt;!-- Needed to use components [BackgroundSetting] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualGrid VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering2D\"/&gt; &lt;!-- Needed to use components [OglLabel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;VisualStyle displayFlags=\"showForceFields\"/&gt;\n    &lt;BackgroundSetting color=\"0.8 0.4 0.6\"/&gt;\n\n    &lt;VisualGrid size=\"16\" plane=\"y\"/&gt;\n\n    &lt;EulerImplicitSolver name=\"EulerImplicit\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver name=\"CG Solver\" iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\" /&gt;\n\n    &lt;MechanicalObject name=\"Particles\" template=\"Vec3\"\n            position=\"0 0 1  1 0 1  0 1 1  1 1 1  0 0 2  1 0 2  0 1 2  1 1 2\" /&gt;\n\n    &lt;MeshTopology name=\"Topology\" hexas=\"0 4 6 2 1 5 7 3\" /&gt;\n\n    &lt;UniformMass name=\"Mass\" totalMass=\"1\" /&gt;\n    &lt;MeshSpringForceField name=\"Springs\" stiffness=\"100\" damping=\"1\" /&gt;\n\n    &lt;PlaneForceField name=\"Floor\" normal=\"-0.2 0 1\" stiffness=\"100\" damping=\"1\"/&gt;\n    &lt;!-- &lt;PlaneForceField name=\"Wall\" normal=\"0 -1 0\" d=\"-4\" stiffness=\"100\" damping=\"1\" draw=\"1\" color=\"0.4 0.4 0.4\" /&gt; --&gt;\n\n    &lt;AverageCoord name=\"center\" template=\"Vec3\" listening=\"true\"/&gt;\n\n    &lt;OglLabel label=\"Sofa framework\" fontsize=\"30\"/&gt;\n    &lt;OglLabel label=\"Falling cube on an inclined plane\" fontsize=\"20\" y=\"50\"/&gt;\n    &lt;OglLabel label=\"@center.average\" fontsize=\"20\" selectContrastingColor='true' prefix=\"Cube position: \" updateLabelEveryNbSteps=\"30\" y=\"75\"/&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 0 -9.81\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Analyze\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Setting\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering2D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showForceFields\")\n    root.addObject('BackgroundSetting', color=\"0.8 0.4 0.6\")\n    root.addObject('VisualGrid', size=\"16\", plane=\"y\")\n    root.addObject('EulerImplicitSolver', name=\"EulerImplicit\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', name=\"CG Solver\", iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    root.addObject('MechanicalObject', name=\"Particles\", template=\"Vec3\", position=\"0 0 1  1 0 1  0 1 1  1 1 1  0 0 2  1 0 2  0 1 2  1 1 2\")\n    root.addObject('MeshTopology', name=\"Topology\", hexas=\"0 4 6 2 1 5 7 3\")\n    root.addObject('UniformMass', name=\"Mass\", totalMass=\"1\")\n    root.addObject('MeshSpringForceField', name=\"Springs\", stiffness=\"100\", damping=\"1\")\n    root.addObject('PlaneForceField', name=\"Floor\", normal=\"-0.2 0 1\", stiffness=\"100\", damping=\"1\")\n    root.addObject('AverageCoord', name=\"center\", template=\"Vec3\", listening=\"true\")\n    root.addObject('OglLabel', label=\"Sofa framework\", fontsize=\"30\")\n    root.addObject('OglLabel', label=\"Falling cube on an inclined plane\", fontsize=\"20\", y=\"50\")\n    root.addObject('OglLabel', label=\"@center.average\", fontsize=\"20\", selectContrastingColor=\"true\", prefix=\"Cube position: \", updateLabelEveryNbSteps=\"30\", y=\"75\")\n</code></pre>"},{"location":"30_Components/Rendering2D/OglViewport/","title":"OglViewport","text":"<p>OglViewport</p> <p>Target: <code>Sofa.GL.Component.Rendering2D</code></p> <p>namespace: <code>sofa::gl::component::rendering2d</code></p> <p>parents: </p> <ul> <li><code>VisualManager</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 screenPosition  Viewport position  screenSize  Viewport size  cameraPosition  Camera's position in eye's space  0 0 0 cameraOrientation  Camera's orientation  0 0 0 1 cameraRigid  Camera's rigid coord  zNear  Camera's ZNear  zFar  Camera's ZFar  fovy  Field of View (Y axis)  60 enabled  Enable visibility of the viewport  1 advancedRendering  If true, viewport will be hidden if advancedRendering visual flag is not enabled  0 useFBO  Use a FBO to render the viewport  1 swapMainView  Swap this viewport with the main view  0 Visualization drawCamera  Draw a frame representing the camera (see it in main viewport)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Rendering2D/OglViewport/#examples","title":"Examples","text":"<p>Component/Visual/OglViewport.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering2D\"/&gt; &lt;!-- Needed to use components [OglViewport] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;Node name=\"Liver\" depend=\"topo dofs\"&gt;\n        &lt;!--&lt;CGImplicit iterations=\"25\"/&gt;--&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/liver.msh\" /&gt;\n        &lt;!-- Container for the tetrahedra--&gt;\n        &lt;TetrahedronSetTopologyContainer src=\"@loader\" name=\"topo\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"dofs\" /&gt;\n        &lt;!-- Algorithms: used in DiagonalMass to compute the mass --&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass massDensity=\"1\" name=\"computed using mass density\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"3000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n        &lt;Node name=\"Visu\" tags=\"Visual\"&gt;\n            &lt;!-- Using material contained in liver-smooth.obj --&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@meshLoader_0\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualModel\" name=\"visual mapping\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n        &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping name=\"sphere mapping\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;OglViewport screenPosition=\"0 0\" screenSize=\"250 250\" cameraPosition=\"-1 2.7 5\" cameraOrientation=\"-0 -0 -0 1\" /&gt;\n    &lt;OglViewport screenPosition=\"300 0\" screenSize=\"400 400\" cameraRigid=\"-1 2.7 13 -0 -0 -0 1\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering2D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n\n    Liver = root.addChild('Liver', depend=\"topo dofs\")\n    Liver.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Liver.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Liver.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/liver.msh\")\n    Liver.addObject('TetrahedronSetTopologyContainer', src=\"@loader\", name=\"topo\")\n    Liver.addObject('MechanicalObject', src=\"@loader\", name=\"dofs\")\n    Liver.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    Liver.addObject('DiagonalMass', massDensity=\"1\", name=\"computed using mass density\")\n    Liver.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"3000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"large\")\n    Liver.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n\n    Visu = Liver.addChild('Visu', tags=\"Visual\")\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver-smooth.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@meshLoader_0\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualModel\", name=\"visual mapping\")\n\n    Surf = Liver.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Surf.addObject('MechanicalObject', position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', name=\"CollisionModel\", listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping', name=\"sphere mapping\")\n    root.addObject('OglViewport', screenPosition=\"0 0\", screenSize=\"250 250\", cameraPosition=\"-1 2.7 5\", cameraOrientation=\"-0 -0 -0 1\")\n    root.addObject('OglViewport', screenPosition=\"300 0\", screenSize=\"400 400\", cameraRigid=\"-1 2.7 13 -0 -0 -0 1\")\n</code></pre>"},{"location":"30_Components/Rendering3D/ClipPlane/","title":"ClipPlane","text":"<p>OpenGL Clipping Plane</p> <p>Target: <code>Sofa.GL.Component.Rendering3D</code></p> <p>namespace: <code>sofa::gl::component::rendering3d</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 position  Point crossed by the clipping plane  0 0 0 normal  Normal of the clipping plane, pointing toward the clipped region  1 0 0 id  Clipping plane OpenGL ID  0 active  Control whether the clipping plane should be applied or not  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Rendering3D/ClipPlane/#examples","title":"Examples","text":"<p>Component/Visual/ClipPlane.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 0 -10\" showBoundingTree=\"0\"&gt;\n\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [ClipPlane OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.02\" contactDistance=\"0.02\" /&gt;\n    &lt;ClipPlane name=\"Clip\" normal=\"1 0 0\" /&gt;\n    &lt;include href=\"Objects/SaladBowl.xml\" /&gt;\n    &lt;include href=\"Objects/TorusRigid.xml\" scale=\"0.05\" rx=\"30\" ry=\"15\" dz=\"1\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 0 -10\", showBoundingTree=\"0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.02\", contactDistance=\"0.02\")\n    root.addObject('ClipPlane', name=\"Clip\", normal=\"1 0 0\")\n    root.addObject('include', href=\"Objects/SaladBowl.xml\")\n    root.addObject('include', href=\"Objects/TorusRigid.xml\", scale=\"0.05\", rx=\"30\", ry=\"15\", dz=\"1\")\n</code></pre>"},{"location":"30_Components/Rendering3D/DataDisplay/","title":"DataDisplay","text":"<p>Rendering of meshes colored by data</p> <p>Target: <code>Sofa.GL.Component.Rendering3D</code></p> <p>namespace: <code>sofa::gl::component::rendering3d</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> <li><code>VisualState</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 maximalRange  Keep the maximal range through all timesteps  1 pointData  Data associated with nodes  triangleData  Data associated with triangles  quadData  Data associated with quads  pointTriangleData  Data associated with nodes per triangle  pointQuadData  Data associated with nodes per quad  colorNaN  Color used for NaN values.(default=[0.0,0.0,0.0,1.0])  0 0 0 1 userRange  Clamp to this values (if max&gt;min)  1 -1 currentMin  Current min range  0 currentMax  Current max range  0 shininess  Shininess for rendering point-based data [0,128].  &lt;0 means no specularity  -1 transparency  transparency draw objects with transparency, the value varies between 0. and 1. Where 1. means no transparency and 0 full transparency  1 Vector position  Vertices coordinates  restPosition  Vertices rest coordinates  normal  Normals of the model  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Rendering3D/DataDisplay/#examples","title":"Examples","text":"<p>Component/Visual/DataDisplay.scn</p> XMLPython <pre><code>&lt;!-- Use of DataDisplay to show distances from rest shape  --&gt;\n&lt;Node name=\"root\" gravity=\"0 0 -1\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangleFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangleBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering2D\"/&gt; &lt;!-- Needed to use components [OglColorMap] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [DataDisplay] --&gt;\n    &lt;RequiredPlugin name=\"SofaValidation\"/&gt; &lt;!-- Needed to use components [EvalPointsDistance] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showVisual hideBehavior hideCollision hideMapping\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Mesh\"&gt;\n        &lt;RegularGridTopology name=\"Grid\" nx=\"10\" ny=\"10\" nz=\"1\" xmin=\"0\" xmax=\"9\" ymin=\"0\" ymax=\"9\" zmin=\"0\" zmax=\"1\" /&gt;\n        &lt;MechanicalObject name=\"MO\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"Simulation\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;RegularGridTopology src=\"@/Mesh/Grid\" /&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"0.1\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 9 99\" /&gt;\n        &lt;TriangleFEMForceField name=\"FEM3\" youngModulus=\"5000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleBendingSprings name=\"FEM-Bend\" stiffness=\"100\" damping=\"0.1\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n\n        &lt;EvalPointsDistance name=\"dist\" object1=\"@/Mesh/MO\" object2=\"@.\" listening=\"true\" period=\"0.05\" draw=\"false\" /&gt;\n\n\n        &lt;Node name=\"Data\"&gt;\n            &lt;DataDisplay pointData=\"@../dist.distance\" /&gt;\n            &lt;OglColorMap colorScheme=\"Blue to Red\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@.\"/&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 -1\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering2D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"SofaValidation\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual hideBehavior hideCollision hideMapping\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    Mesh = root.addChild('Mesh')\n    Mesh.addObject('RegularGridTopology', name=\"Grid\", nx=\"10\", ny=\"10\", nz=\"1\", xmin=\"0\", xmax=\"9\", ymin=\"0\", ymax=\"9\", zmin=\"0\", zmax=\"1\")\n    Mesh.addObject('MechanicalObject', name=\"MO\")\n\n    Simulation = root.addChild('Simulation')\n    Simulation.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Simulation.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Simulation.addObject('RegularGridTopology', src=\"@/Mesh/Grid\")\n    Simulation.addObject('MechanicalObject')\n    Simulation.addObject('UniformMass', vertexMass=\"0.1\")\n    Simulation.addObject('FixedProjectiveConstraint', indices=\"0 9 99\")\n    Simulation.addObject('TriangleFEMForceField', name=\"FEM3\", youngModulus=\"5000\", poissonRatio=\"0.3\", method=\"large\")\n    Simulation.addObject('TriangleBendingSprings', name=\"FEM-Bend\", stiffness=\"100\", damping=\"0.1\")\n    Simulation.addObject('TriangleCollisionModel')\n    Simulation.addObject('EvalPointsDistance', name=\"dist\", object1=\"@/Mesh/MO\", object2=\"@.\", listening=\"true\", period=\"0.05\", draw=\"false\")\n\n    Data = Simulation.addChild('Data')\n    Data.addObject('DataDisplay', pointData=\"@../dist.distance\")\n    Data.addObject('OglColorMap', colorScheme=\"Blue to Red\")\n    Data.addObject('IdentityMapping', input=\"@..\", output=\"@.\")\n</code></pre>"},{"location":"30_Components/Rendering3D/MergeVisualModels/","title":"MergeVisualModels","text":"<p>Merge several visual models</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.GL.Component.Rendering3D</code></p> <p>namespace: <code>sofa::gl::component::rendering3d</code></p> <p>parents: </p> <ul> <li><code>OglModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 initRestPositions  True if rest positions must be initialized with initial positions  0 useNormals  True if normal smoothing groups should be read from file  1 updateNormals  True if normals should be updated at each iteration  1 computeTangents  True if tangents should be computed at startup  0 updateTangents  True if tangents should be updated at each iteration  1 handleDynamicTopology  True if topological changes should be handled  1 fixMergedUVSeams  True if UV seams should be handled even when duplicate UVs are merged  1 keepLines  keep and draw lines (false by default)  0 vertPosIdx  If vertices have multiple normals/texcoords stores vertices position indices  vertNormIdx  If vertices have multiple normals/texcoords stores vertices normal indices  filename   Path to an ogl model  texturename  Name of the Texture  scaleTex  Scale of the texture  1 1 translationTex  Translation of the texture  0 0 material  Material  putOnlyTexCoords  Give Texture Coordinates without the texture binding  0 srgbTexturing  When sRGB rendering is enabled, is the texture in sRGB colorspace?  0 materials  List of materials  groups  Groups of triangles and quads using a given material  blendTranslucency  Blend transparent parts  1 premultipliedAlpha  is alpha premultiplied ?  0 writeZTransparent  Write into Z Buffer for Transparent Object  0 alphaBlend  Enable alpha blending  0 depthTest  Enable depth testing  1 cullFace  Face culling (0 = no culling, 1 = cull back faces, 2 = cull front faces)  0 lineWidth  Line width (set if != 1, only for lines rendering)  1 pointSize  Point size (set if != 1, only for points rendering)  1 lineSmooth  Enable smooth line rendering  0 pointSmooth  Enable smooth point rendering  0 isEnabled  Activate/deactive the component.  1 primitiveType  Select types of primitives to send (necessary for some shader types such as geometry or tesselation)  blendEquation  if alpha blending is enabled this specifies how source and destination colors are combined  sfactor  if alpha blending is enabled this specifies how the red, green, blue, and alpha source blending factors are computed  dfactor  if alpha blending is enabled this specifies how the red, green, blue, and alpha destination blending factors are computed  nb  number of input visual models to merge  1 Transformation translation  Initial Translation of the object  0 0 0 rotation  Initial Rotation of the object  0 0 0 scale3d  Initial Scale of the object  1 1 1 Vector position  Vertices coordinates  restPosition  Vertices rest coordinates  normal  Normals of the model  vertices  vertices of the model (only if vertices have multiple normals/texcoords, otherwise positions are used)  texcoords  coordinates of the texture  tangents  tangents for normal mapping  bitangents  tangents for normal mapping  edges  edges of the model  triangles  triangles of the model  quads  quads of the model  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container input1 input visual model(1)"},{"location":"30_Components/Rendering3D/MergeVisualModels/#examples","title":"Examples","text":"<p>Component/Visual/MergeVisualModels.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [MergeVisualModels OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshOBJLoader name=\"meshLoader\" filename=\"mesh/snake_body.obj\" handleSeams=\"1\"/&gt;\n    &lt;MeshTopology src=\"@meshLoader\"/&gt;\n\n    &lt;OglModel name=\"visualModel1\" src=\"@meshLoader\" useNormals=\"0\" translation=\"0 0 0\" /&gt;\n    &lt;OglModel name=\"visualModel2\" src=\"@meshLoader\" useNormals=\"0\" translation=\"10 0 0\"/&gt;\n    &lt;OglModel name=\"visualModel3\" src=\"@meshLoader\" useNormals=\"0\" translation=\"20 0 0\"/&gt;\n\n\n    &lt;MergeVisualModels name=\"merged\" nb=\"2\" input1=\"@visualModel1\"  input2=\"@visualModel3\"   texturename=\"textures/snakeColorMap.png\" color=\"red\"  /&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshOBJLoader', name=\"meshLoader\", filename=\"mesh/snake_body.obj\", handleSeams=\"1\")\n    root.addObject('MeshTopology', src=\"@meshLoader\")\n    root.addObject('OglModel', name=\"visualModel1\", src=\"@meshLoader\", useNormals=\"0\", translation=\"0 0 0\")\n    root.addObject('OglModel', name=\"visualModel2\", src=\"@meshLoader\", useNormals=\"0\", translation=\"10 0 0\")\n    root.addObject('OglModel', name=\"visualModel3\", src=\"@meshLoader\", useNormals=\"0\", translation=\"20 0 0\")\n    root.addObject('MergeVisualModels', name=\"merged\", nb=\"2\", input1=\"@visualModel1\", input2=\"@visualModel3\", texturename=\"textures/snakeColorMap.png\", color=\"red\")\n</code></pre>"},{"location":"30_Components/Rendering3D/OglCylinderModel/","title":"OglCylinderModel","text":"<p>A simple visualization for set of cylinder.</p> <p>Target: <code>Sofa.GL.Component.Rendering3D</code></p> <p>namespace: <code>sofa::gl::component::rendering3d</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> <li><code>VisualState</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 radius  Radius of the cylinder.  1 color  Color of the cylinders.  1 1 1 1 edges  List of edge indices  Vector position  Vertices coordinates  restPosition  Vertices rest coordinates  normal  Normals of the model  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Rendering3D/OglCylinderModel/#examples","title":"Examples","text":"<p>Component/Visual/OglCylinderModel.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglCylinderModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showVisual\" /&gt;\n    &lt;OglCylinderModel  position=\"0 0 0   10 0 0 \"  edges=\"0 1\" /&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showVisual\")\n    root.addObject('OglCylinderModel', position=\"0 0 0   10 0 0 \", edges=\"0 1\")\n</code></pre>"},{"location":"30_Components/Rendering3D/OglModel/","title":"OglModel","text":"<p>Generic visual model for OpenGL display</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.GL.Component.Rendering3D</code></p> <p>namespace: <code>sofa::gl::component::rendering3d</code></p> <p>parents: </p> <ul> <li><code>VisualModelImpl</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 initRestPositions  True if rest positions must be initialized with initial positions  0 useNormals  True if normal smoothing groups should be read from file  1 updateNormals  True if normals should be updated at each iteration  1 computeTangents  True if tangents should be computed at startup  0 updateTangents  True if tangents should be updated at each iteration  1 handleDynamicTopology  True if topological changes should be handled  1 fixMergedUVSeams  True if UV seams should be handled even when duplicate UVs are merged  1 keepLines  keep and draw lines (false by default)  0 vertPosIdx  If vertices have multiple normals/texcoords stores vertices position indices  vertNormIdx  If vertices have multiple normals/texcoords stores vertices normal indices  filename   Path to an ogl model  texturename  Name of the Texture  scaleTex  Scale of the texture  1 1 translationTex  Translation of the texture  0 0 material  Material  putOnlyTexCoords  Give Texture Coordinates without the texture binding  0 srgbTexturing  When sRGB rendering is enabled, is the texture in sRGB colorspace?  0 materials  List of materials  groups  Groups of triangles and quads using a given material  blendTranslucency  Blend transparent parts  1 premultipliedAlpha  is alpha premultiplied ?  0 writeZTransparent  Write into Z Buffer for Transparent Object  0 alphaBlend  Enable alpha blending  0 depthTest  Enable depth testing  1 cullFace  Face culling (0 = no culling, 1 = cull back faces, 2 = cull front faces)  0 lineWidth  Line width (set if != 1, only for lines rendering)  1 pointSize  Point size (set if != 1, only for points rendering)  1 lineSmooth  Enable smooth line rendering  0 pointSmooth  Enable smooth point rendering  0 isEnabled  Activate/deactive the component.  1 primitiveType  Select types of primitives to send (necessary for some shader types such as geometry or tesselation)  blendEquation  if alpha blending is enabled this specifies how source and destination colors are combined  sfactor  if alpha blending is enabled this specifies how the red, green, blue, and alpha source blending factors are computed  dfactor  if alpha blending is enabled this specifies how the red, green, blue, and alpha destination blending factors are computed  Transformation translation  Initial Translation of the object  0 0 0 rotation  Initial Rotation of the object  0 0 0 scale3d  Initial Scale of the object  1 1 1 Vector position  Vertices coordinates  restPosition  Vertices rest coordinates  normal  Normals of the model  vertices  vertices of the model (only if vertices have multiple normals/texcoords, otherwise positions are used)  texcoords  coordinates of the texture  tangents  tangents for normal mapping  bitangents  tangents for normal mapping  edges  edges of the model  triangles  triangles of the model  quads  quads of the model  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Rendering3D/OglModel/#examples","title":"Examples","text":"<p>Component/Visual/OglModel.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/snake_body.obj\" translation=\"30 0 0\" handleSeams=\"1\" /&gt;\n    &lt;OglModel name=\"VisualModel\" src=\"@meshLoader_0\" useNormals=\"0\"/&gt;\n\n    &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/snake_body.obj\" translation=\"0 0 0\"/&gt;    \n    &lt;OglModel name=\"VisualModel2\"  src=\"@loader\" color=\"red\"/&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/snake_body.obj\", translation=\"30 0 0\", handleSeams=\"1\")\n    root.addObject('OglModel', name=\"VisualModel\", src=\"@meshLoader_0\", useNormals=\"0\")\n    root.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/snake_body.obj\", translation=\"0 0 0\")\n    root.addObject('OglModel', name=\"VisualModel2\", src=\"@loader\", color=\"red\")\n</code></pre>"},{"location":"30_Components/Rendering3D/OglSceneFrame/","title":"OglSceneFrame","text":"<p>Display a frame at the corner of the scene view</p> <p>Target: <code>Sofa.GL.Component.Rendering3D</code></p> <p>namespace: <code>sofa::gl::component::rendering3d</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 style  Style of the frame  alignment  Alignment of the frame in the view  viewportSize  Size of the viewport where the frame is rendered  150 Visualization draw  Display the frame or not  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Rendering3D/OglSceneFrame/#examples","title":"Examples","text":"<p>Component/Visual/OglSceneFrame.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel OglSceneFrame] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n    &lt;OglModel name=\"VisualModel\" src=\"@meshLoader_0\" color=\"red\" /&gt;\n    &lt;!-- &lt;OglSceneFrame style=\"0\"/&gt; --&gt;\n    &lt;OglSceneFrame style=\"1\"/&gt;\n    &lt;!-- &lt;OglSceneFrame style=\"2\"/&gt; --&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver-smooth.obj\", handleSeams=\"1\")\n    root.addObject('OglModel', name=\"VisualModel\", src=\"@meshLoader_0\", color=\"red\")\n    root.addObject('OglSceneFrame', style=\"1\")\n</code></pre>"},{"location":"30_Components/Rendering3D/PointSplatModel/","title":"PointSplatModel","text":"<p>A simple visualization for a cloud of points.</p> <p>Target: <code>Sofa.GL.Component.Rendering3D</code></p> <p>namespace: <code>sofa::gl::component::rendering3d</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 radius  Radius of the spheres.  1 textureSize  Size of the billboard texture.  32 alpha  Opacity of the billboards. 1.0 is 100% opaque.  1 color  Billboard color.(default=[1.0,1.0,1.0,1.0])  1 1 1 1 pointData  scalar field modulating point colors  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Rendering3D/PointSplatModel/#examples","title":"Examples","text":"<p>Component/Visual/PointSplatModel.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;!-- Mechanical PointSplatModel Example --&gt;\n&lt;Node dt=\"0.005\" gravity=\"0 -10 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Forward\"/&gt; &lt;!-- Needed to use components [RungeKutta4Solver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [PointSetTopologyContainer PointSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel PointSplatModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;NewProximityIntersection alarmDistance=\"0.5\" contactDistance=\"0.3\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"Fluid\"&gt;\n        &lt;RungeKutta4Solver /&gt;\n        &lt;MeshOBJLoader name=\"meshLoader\" filename=\"mesh/dragon_clean.obj\" scale3d=\"0.2 0.2 0.2\"/&gt;\n        &lt;PointSetTopologyContainer /&gt;\n        &lt;MechanicalObject name=\"MModel\" position=\"@meshLoader.position\"/&gt;\n\n        &lt;PointSetTopologyContainer name=\"con\" /&gt;\n        &lt;PointSetTopologyModifier name=\"mod\" /&gt;\n\n        &lt;UniformMass name=\"M1\" vertexMass=\"1\" /&gt;\n        &lt;!-- Visual model --&gt;\n        &lt;PointSplatModel name=\"VModel\" radius=\"0.25\" alpha=\"0.1\" color=\"cyan\" /&gt;\n        &lt;PointCollisionModel contactStiffness=\"100\"  /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"World\"&gt;\n        &lt;MechanicalObject position=\"-4 -1.6 -4    4 -5.6 -4    4 -6.4 4    -4 -2.4 4\" scale=\"1.075\" /&gt;\n        &lt;MeshTopology triangles=\"0 1 2  0 2 3\" /&gt;\n        &lt;TriangleCollisionModel contactStiffness=\"20\" moving=\"false\" simulated=\"false\" /&gt;\n        &lt;LineCollisionModel contactStiffness=\"20\" moving=\"false\" simulated=\"false\" /&gt;\n        &lt;PointCollisionModel contactStiffness=\"20\" moving=\"false\" simulated=\"false\" /&gt;\n        &lt;OglModel name=\"VModel\" color=\"blue\" printLog=\"true\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    rootNode = rootNode.addChild('rootNode', dt=\"0.005\", gravity=\"0 -10 0\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Forward\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    rootNode.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    rootNode.addObject('DefaultAnimationLoop')\n    rootNode.addObject('CollisionPipeline', verbose=\"0\")\n    rootNode.addObject('NewProximityIntersection', alarmDistance=\"0.5\", contactDistance=\"0.3\")\n    rootNode.addObject('BruteForceBroadPhase')\n    rootNode.addObject('BVHNarrowPhase')\n    rootNode.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n\n    Fluid = rootNode.addChild('Fluid')\n    Fluid.addObject('RungeKutta4Solver')\n    Fluid.addObject('MeshOBJLoader', name=\"meshLoader\", filename=\"mesh/dragon_clean.obj\", scale3d=\"0.2 0.2 0.2\")\n    Fluid.addObject('PointSetTopologyContainer')\n    Fluid.addObject('MechanicalObject', name=\"MModel\", position=\"@meshLoader.position\")\n    Fluid.addObject('PointSetTopologyContainer', name=\"con\")\n    Fluid.addObject('PointSetTopologyModifier', name=\"mod\")\n    Fluid.addObject('UniformMass', name=\"M1\", vertexMass=\"1\")\n    Fluid.addObject('PointSplatModel', name=\"VModel\", radius=\"0.25\", alpha=\"0.1\", color=\"cyan\")\n    Fluid.addObject('PointCollisionModel', contactStiffness=\"100\")\n\n    World = rootNode.addChild('World')\n    World.addObject('MechanicalObject', position=\"-4 -1.6 -4    4 -5.6 -4    4 -6.4 4    -4 -2.4 4\", scale=\"1.075\")\n    World.addObject('MeshTopology', triangles=\"0 1 2  0 2 3\")\n    World.addObject('TriangleCollisionModel', contactStiffness=\"20\", moving=\"false\", simulated=\"false\")\n    World.addObject('LineCollisionModel', contactStiffness=\"20\", moving=\"false\", simulated=\"false\")\n    World.addObject('PointCollisionModel', contactStiffness=\"20\", moving=\"false\", simulated=\"false\")\n    World.addObject('OglModel', name=\"VModel\", color=\"blue\", printLog=\"true\")\n</code></pre>"},{"location":"30_Components/Rendering3D/SlicedVolumetricModel/","title":"SlicedVolumetricModel","text":"<p>A simple visualization for a cloud of points.</p> <p>Target: <code>Sofa.GL.Component.Rendering3D</code></p> <p>namespace: <code>sofa::gl::component::rendering3d</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 alpha  Opacity of the billboards. 1.0 is 100% opaque.  0.2 color  Billboard color.(default=1.0,1.0,1.0,1.0)  1 1 1 1 nbSlices  Number of billboards.  100 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/SceneUtility/APIVersion/","title":"APIVersion","text":"<p>Specify the APIVersion of the component used in a scene.</p> <p>Target: <code>Sofa.Component.SceneUtility</code></p> <p>namespace: <code>sofa::component::sceneutility::_apiversion_</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 level  The API Level of the scene ('17.06', '17.12', '18.06', ...)  24.06.99 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/SceneUtility/AddDataRepository/","title":"AddDataRepository","text":"<p>Add a path to DataRepository</p> <p>Target: <code>Sofa.Component.SceneUtility</code></p> <p>namespace: <code>sofa::component::sceneutility</code></p> <p>parents: </p> <ul> <li><code>BaseAddResourceRepository</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 path  Path to add to the pool of resources  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/SceneUtility/AddPluginRepository/","title":"AddPluginRepository","text":"<p>Add a path to PluginRepository</p> <p>Target: <code>Sofa.Component.SceneUtility</code></p> <p>namespace: <code>sofa::component::sceneutility</code></p> <p>parents: </p> <ul> <li><code>BaseAddResourceRepository</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 path  Path to add to the pool of resources  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/SceneUtility/FileMessageHandlerComponent/","title":"FileMessageHandlerComponent","text":"<p>This component dump all the messages intoa file.</p> <p>Target: <code>Sofa.Component.SceneUtility</code></p> <p>namespace: <code>sofa::component::sceneutility</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Name of the file into which the message will be saved in.  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/SceneUtility/InfoComponent/","title":"InfoComponent","text":"<p>This object retain the info/error message</p> <p>Target: <code>Sofa.Component.SceneUtility</code></p> <p>namespace: <code>sofa::component::sceneutility::infocomponent</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/SceneUtility/MakeAlias/","title":"MakeAlias","text":"<p>This object create an alias to a component name to make the scene more readable. </p> <p>Target: <code>Sofa.Component.SceneUtility</code></p> <p>namespace: <code>sofa::component::sceneutility::makealiascomponent</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 targetcomponent  The component class for which to create an alias.  alias  The new alias of the component.  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/SceneUtility/MakeAlias/#examples","title":"Examples","text":"<p>Component/SceneUtility/MakeAlias.scn</p> XMLPython <pre><code>&lt;?xml version='1.0'?&gt;                                               \n&lt;Node   name='Root' gravity='0 0 0' time='0' animate='0' bbox=\"-1 -1 -1 1 1 1\"  &gt;   \n        &lt;RequiredPlugin name=\"Sofa.Component.SceneUtility\"/&gt; &lt;!-- Needed to use components [MakeAlias] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;DefaultAnimationLoop/&gt;\n        &lt;MakeAlias targetcomponent='MechanicalObject' alias='Mecha'/&gt;    \n        &lt;MechanicalObject  name=\"createdWithAlias\" position=\"1 2 3\"/&gt;    \n&lt;/Node&gt;                                                             \n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", time=\"0\", animate=\"0\", bbox=\"-1 -1 -1 1 1 1\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.SceneUtility\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('MakeAlias', targetcomponent=\"MechanicalObject\", alias=\"Mecha\")\n    Root.addObject('MechanicalObject', name=\"createdWithAlias\", position=\"1 2 3\")\n</code></pre>"},{"location":"30_Components/SceneUtility/MakeDataAlias/","title":"MakeDataAlias","text":"<p>This object create an alias to a data field. </p> <p>Target: <code>Sofa.Component.SceneUtility</code></p> <p>namespace: <code>sofa::component::sceneutility::makedataaliascomponent</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 componentname  The component class for which to create an alias.  dataname  The data field for which to create an alias.  alias  The alias of the data field.  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/SceneUtility/MakeDataAlias/#examples","title":"Examples","text":"<p>Component/SceneUtility/MakeDataAlias.scn</p> XMLPython <pre><code>&lt;?xml version='1.0'?&gt;                                               \n&lt;Node   name='Root' gravity='0 0 0' time='0' animate='0' bbox=\"-1 -1 -1 1 1 1\"  &gt;   \n       &lt;RequiredPlugin name=\"Sofa.Component.SceneUtility\"/&gt; &lt;!-- Needed to use components [MakeDataAlias] --&gt;\n       &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n       &lt;DefaultAnimationLoop/&gt;      \n       &lt;MakeDataAlias componentname='MechanicalObject' dataname='position' alias='myrest_position'/&gt; \n       &lt;MechanicalObject name=\"position should be 1 2 3 \" myrest_position='1 2 3'/&gt;                                                 \n&lt;/Node&gt;                                                             \n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", time=\"0\", animate=\"0\", bbox=\"-1 -1 -1 1 1 1\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.SceneUtility\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('DefaultAnimationLoop')\n    Root.addObject('MakeDataAlias', componentname=\"MechanicalObject\", dataname=\"position\", alias=\"myrest_position\")\n    Root.addObject('MechanicalObject', name=\"position should be 1 2 3 \", myrest_position=\"1 2 3\")\n</code></pre>"},{"location":"30_Components/SceneUtility/MessageHandlerComponent/","title":"MessageHandlerComponent","text":"<p>This object controls the way Sofa print's info/warning/error/fatal messages. </p> <p>Target: <code>Sofa.Component.SceneUtility</code></p> <p>namespace: <code>sofa::component::sceneutility</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handler  Type of the message handler to use among [sofa, clang                                        //, log                                        , silent].   <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/SceneUtility/PauseAnimationOnEvent/","title":"PauseAnimationOnEvent","text":"<p>PauseAnimationOnEvent</p> <p>Target: <code>Sofa.Component.SceneUtility</code></p> <p>namespace: <code>sofa::component::sceneutility</code></p> <p>parents: </p> <ul> <li><code>PauseAnimation</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Setting/BackgroundSetting/","title":"BackgroundSetting","text":"<p>Background setting</p> <p>Target: <code>Sofa.Component.Setting</code></p> <p>namespace: <code>sofa::component::setting</code></p> <p>parents: </p> <ul> <li><code>ConfigurationSetting</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 color  Color of the background  image  Image to be used as background  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Setting/SofaDefaultPathSetting/","title":"SofaDefaultPathSetting","text":"<p>Default Paths for Sofa Application</p> <p>Target: <code>Sofa.Component.Setting</code></p> <p>namespace: <code>sofa::component::setting</code></p> <p>parents: </p> <ul> <li><code>ConfigurationSetting</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 gnuplotPath  Path where will be saved the gnuplot files  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Setting/StatsSetting/","title":"StatsSetting","text":"<p>Stats settings</p> <p>Target: <code>Sofa.Component.Setting</code></p> <p>namespace: <code>sofa::component::setting</code></p> <p>parents: </p> <ul> <li><code>ConfigurationSetting</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 dumpState  Dump state vectors at each time step of the simulation  0 logTime  Output in the console an average of the time spent during different stages of the simulation  0 exportState  Create GNUPLOT files with the positions, velocities and forces of all the simulated objects of the scene  0 traceVisitors  Trace the time spent by each visitor, and allows to profile precisely one step of a simulation  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Setting/ViewerSetting/","title":"ViewerSetting","text":"<p>Configuration for the Viewer of your application</p> <p>Target: <code>Sofa.Component.Setting</code></p> <p>namespace: <code>sofa::component::setting</code></p> <p>parents: </p> <ul> <li><code>ConfigurationSetting</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 resolution  resolution of the Viewer  800 600 fullscreen  Fullscreen mode  0 cameraMode  Camera mode  Perspective objectPickingMethod  The method used to pick objects  Ray casting <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Setting/ViewerSetting/#examples","title":"Examples","text":"<p>Component/Setting/ViewerSetting.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" gravity=\"0 -1000 0\" dt=\"0.04\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.AnimationLoop\"/&gt; &lt;!-- Needed to use components [FreeMotionAnimationLoop] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Correction\"/&gt; &lt;!-- Needed to use components [UncoupledConstraintCorrection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Lagrangian.Solver\"/&gt; &lt;!-- Needed to use components [LCPConstraintSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Setting\"/&gt; &lt;!-- Needed to use components [ViewerSetting] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridRamificationTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [LightManager SpotLight] --&gt;\n\n    &lt;!-- Change the viewer size here --&gt;\n    &lt;ViewerSetting resolution=\"800 600\"/&gt;\n\n    &lt;VisualStyle displayFlags=\"showVisual  \" /&gt; &lt;!--showBehaviorModels showCollisionModels--&gt;\n    &lt;LCPConstraintSolver tolerance=\"1e-3\" maxIt=\"1000\" initial_guess=\"false\" build_lcp=\"false\"  printLog=\"0\" mu=\"0.2\"/&gt;\n    &lt;FreeMotionAnimationLoop /&gt;\n    &lt;CollisionPipeline depth=\"15\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"1.5\" contactDistance=\"1\" /&gt;\n\n    &lt;LightManager /&gt;\n    &lt;SpotLight name=\"light1\" color=\"1 1 1\" position=\"0 80 25\" direction=\"0 -1 -0.8\" cutoff=\"30\" exponent=\"1\" /&gt;\n    &lt;SpotLight name=\"light2\" color=\"1 1 1\" position=\"0 40 100\" direction=\"0 0 -1\" cutoff=\"30\" exponent=\"1\" /&gt;\n\n    &lt;CollisionResponse name=\"Response\" response=\"FrictionContactConstraint\" /&gt;\n    &lt;Node name=\"Snake\" &gt;\n\n        &lt;SparseGridRamificationTopology n=\"4 12 3\" fileTopology=\"mesh/snake_body.obj\" nbVirtualFinerLevels=\"3\" finestConnectivity=\"0\" /&gt;\n\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" rayleighMass=\"1\" rayleighStiffness=\"0.03\" /&gt;\n        &lt;CGLinearSolver name=\"linear solver\" iterations=\"20\" tolerance=\"1e-12\" threshold=\"1e-18\" /&gt;\n        &lt;MechanicalObject name=\"dofs\"  scale=\"1\" dy=\"2\"/&gt;\n        &lt;UniformMass totalMass=\"1.0\" /&gt;\n        &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"30000.0\" poissonRatio=\"0.3\" method=\"large\" updateStiffnessMatrix=\"false\" printLog=\"0\" /&gt;\n\n        &lt;UncoupledConstraintCorrection /&gt;\n\n        &lt;Node name=\"Collis\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/meca_snake_900tri.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" name=\"CollisModel\" /&gt;\n            &lt;TriangleCollisionModel  selfCollision=\"0\" /&gt;\n            &lt;LineCollisionModel    selfCollision=\"0\" /&gt;\n            &lt;PointCollisionModel  selfCollision=\"0\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@.\" /&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"VisuBody\" tags=\"Visual\" &gt;\n                        &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/snake_body.obj\" handleSeams=\"1\" /&gt;\n                        &lt;OglModel  name=\"VisualBody\" src=\"@meshLoader_0\"   /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualBody\" /&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"VisuCornea\" tags=\"Visual\" &gt;\n                        &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/snake_cornea.obj\" handleSeams=\"1\" /&gt;\n                        &lt;OglModel  name=\"VisualCornea\" src=\"@meshLoader_3\"   /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualCornea\" /&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"VisuEye\" tags=\"Visual\" &gt;\n                        &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/snake_yellowEye.obj\" handleSeams=\"1\" /&gt;\n                        &lt;OglModel  name=\"VisualEye\" src=\"@meshLoader_1\"   /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualEye\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n    &lt;Node name=\"Base\" &gt;\n\n        &lt;Node name=\"Stick\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/collision_batons.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" name=\"CollisModel\" /&gt;\n            &lt;LineCollisionModel simulated=\"false\" moving=\"false\" /&gt;\n            &lt;PointCollisionModel simulated=\"false\"  moving=\"false\"/&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Blobs\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/collision_boules_V3.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" name=\"CollisModel\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"false\" moving=\"false\"/&gt;\n            &lt;LineCollisionModel simulated=\"false\" moving=\"false\"/&gt;\n            &lt;PointCollisionModel simulated=\"false\" moving=\"false\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"Foot\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/collision_pied.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" name=\"CollisModel\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"false\" moving=\"false\"/&gt;\n            &lt;LineCollisionModel simulated=\"false\" moving=\"false\"/&gt;\n            &lt;PointCollisionModel simulated=\"false\" moving=\"false\"/&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"Visu\" tags=\"Visual\" &gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/SOFA_pod.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel  name=\"OglModel\" src=\"@meshLoader_2\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -1000 0\", dt=\"0.04\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.AnimationLoop\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Correction\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Lagrangian.Solver\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Setting\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('ViewerSetting', resolution=\"800 600\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual  \")\n    root.addObject('LCPConstraintSolver', tolerance=\"1e-3\", maxIt=\"1000\", initial_guess=\"false\", build_lcp=\"false\", printLog=\"0\", mu=\"0.2\")\n    root.addObject('FreeMotionAnimationLoop')\n    root.addObject('CollisionPipeline', depth=\"15\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"1.5\", contactDistance=\"1\")\n    root.addObject('LightManager')\n    root.addObject('SpotLight', name=\"light1\", color=\"1 1 1\", position=\"0 80 25\", direction=\"0 -1 -0.8\", cutoff=\"30\", exponent=\"1\")\n    root.addObject('SpotLight', name=\"light2\", color=\"1 1 1\", position=\"0 40 100\", direction=\"0 0 -1\", cutoff=\"30\", exponent=\"1\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"FrictionContactConstraint\")\n\n    Snake = root.addChild('Snake')\n    Snake.addObject('SparseGridRamificationTopology', n=\"4 12 3\", fileTopology=\"mesh/snake_body.obj\", nbVirtualFinerLevels=\"3\", finestConnectivity=\"0\")\n    Snake.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighMass=\"1\", rayleighStiffness=\"0.03\")\n    Snake.addObject('CGLinearSolver', name=\"linear solver\", iterations=\"20\", tolerance=\"1e-12\", threshold=\"1e-18\")\n    Snake.addObject('MechanicalObject', name=\"dofs\", scale=\"1\", dy=\"2\")\n    Snake.addObject('UniformMass', totalMass=\"1.0\")\n    Snake.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"30000.0\", poissonRatio=\"0.3\", method=\"large\", updateStiffnessMatrix=\"false\", printLog=\"0\")\n    Snake.addObject('UncoupledConstraintCorrection')\n\n    Collis = Snake.addChild('Collis')\n    Collis.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/meca_snake_900tri.obj\")\n    Collis.addObject('MeshTopology', src=\"@loader\")\n    Collis.addObject('MechanicalObject', src=\"@loader\", name=\"CollisModel\")\n    Collis.addObject('TriangleCollisionModel', selfCollision=\"0\")\n    Collis.addObject('LineCollisionModel', selfCollision=\"0\")\n    Collis.addObject('PointCollisionModel', selfCollision=\"0\")\n    Collis.addObject('BarycentricMapping', input=\"@..\", output=\"@.\")\n\n    VisuBody = Snake.addChild('VisuBody', tags=\"Visual\")\n    VisuBody.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/snake_body.obj\", handleSeams=\"1\")\n    VisuBody.addObject('OglModel', name=\"VisualBody\", src=\"@meshLoader_0\")\n    VisuBody.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualBody\")\n\n    VisuCornea = Snake.addChild('VisuCornea', tags=\"Visual\")\n    VisuCornea.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/snake_cornea.obj\", handleSeams=\"1\")\n    VisuCornea.addObject('OglModel', name=\"VisualCornea\", src=\"@meshLoader_3\")\n    VisuCornea.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualCornea\")\n\n    VisuEye = Snake.addChild('VisuEye', tags=\"Visual\")\n    VisuEye.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/snake_yellowEye.obj\", handleSeams=\"1\")\n    VisuEye.addObject('OglModel', name=\"VisualEye\", src=\"@meshLoader_1\")\n    VisuEye.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualEye\")\n\n    Base = root.addChild('Base')\n\n    Stick = Base.addChild('Stick')\n    Stick.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/collision_batons.obj\")\n    Stick.addObject('MeshTopology', src=\"@loader\")\n    Stick.addObject('MechanicalObject', src=\"@loader\", name=\"CollisModel\")\n    Stick.addObject('LineCollisionModel', simulated=\"false\", moving=\"false\")\n    Stick.addObject('PointCollisionModel', simulated=\"false\", moving=\"false\")\n\n    Blobs = Base.addChild('Blobs')\n    Blobs.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/collision_boules_V3.obj\")\n    Blobs.addObject('MeshTopology', src=\"@loader\")\n    Blobs.addObject('MechanicalObject', src=\"@loader\", name=\"CollisModel\")\n    Blobs.addObject('TriangleCollisionModel', simulated=\"false\", moving=\"false\")\n    Blobs.addObject('LineCollisionModel', simulated=\"false\", moving=\"false\")\n    Blobs.addObject('PointCollisionModel', simulated=\"false\", moving=\"false\")\n\n    Foot = Base.addChild('Foot')\n    Foot.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/collision_pied.obj\")\n    Foot.addObject('MeshTopology', src=\"@loader\")\n    Foot.addObject('MechanicalObject', src=\"@loader\", name=\"CollisModel\")\n    Foot.addObject('TriangleCollisionModel', simulated=\"false\", moving=\"false\")\n    Foot.addObject('LineCollisionModel', simulated=\"false\", moving=\"false\")\n    Foot.addObject('PointCollisionModel', simulated=\"false\", moving=\"false\")\n\n    Visu = Base.addChild('Visu', tags=\"Visual\")\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/SOFA_pod.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"OglModel\", src=\"@meshLoader_2\")\n</code></pre>"},{"location":"30_Components/Shader/CompositingVisualLoop/","title":"CompositingVisualLoop","text":"<p>Visual loop enabling multipass rendering. Needs multiple fbo data and a compositing shader</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>DefaultVisualManagerLoop</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 vertFilename  Set the vertex shader filename to load  shaders/compositing.vert fragFilename  Set the fragment shader filename to load  shaders/compositing.frag <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects targetNode Link to the scene's node where the rendering will take place"},{"location":"30_Components/Shader/DirectionalLight/","title":"DirectionalLight","text":"<p>A directional light illuminating the scene with parallel rays of light (can cast shadows).</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>Light</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 color  Set the color of the light. (default=[1.0,1.0,1.0,1.0])  1 1 1 1 shadowTextureSize  [Shadowing] Set size for shadow texture   0 zNear  [Shadowing] Light's ZNear  zFar  [Shadowing] Light's ZFar  shadowsEnabled  [Shadowing] Enable Shadow from this light  1 softShadows  [Shadowing] Turn on Soft Shadow from this light  0 shadowFactor  [Shadowing] Shadow Factor (decrease/increase darkness)  1 VSMLightBleeding  [Shadowing] (VSM only) Light bleeding paramter  0.05 VSMMinVariance  [Shadowing] (VSM only) Minimum variance parameter  0.001 textureUnit  [Shadowing] Texture unit for the genereated shadow texture  1 modelViewMatrix  [Shadowing] ModelView Matrix  projectionMatrix  [Shadowing] Projection Matrix  direction  Set the direction of the light  0 0 -1 Visualization drawSource  Draw Light Source  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/DirectionalLight/#examples","title":"Examples","text":"<p>Component/Visual/DirectionalLight.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 0 -10\" showBoundingTree=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [DirectionalLight LightManager] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.02\" contactDistance=\"0.02\" /&gt;\n    &lt;LightManager /&gt;\n    &lt;DirectionalLight name=\"light1\" color=\"1 0 0\" direction=\"0 -1 -1\" /&gt;\n    &lt;DirectionalLight name=\"light2\" color=\"0 1 0\" direction=\"1 1 0\" /&gt;\n    &lt;include href=\"Objects/SaladBowl.xml\" /&gt;\n    &lt;include href=\"Objects/TorusRigid.xml\" scale=\"0.05\" rx=\"30\" ry=\"15\" dz=\"1\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 0 -10\", showBoundingTree=\"0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.02\", contactDistance=\"0.02\")\n    root.addObject('LightManager')\n    root.addObject('DirectionalLight', name=\"light1\", color=\"1 0 0\", direction=\"0 -1 -1\")\n    root.addObject('DirectionalLight', name=\"light2\", color=\"0 1 0\", direction=\"1 1 0\")\n    root.addObject('include', href=\"Objects/SaladBowl.xml\")\n    root.addObject('include', href=\"Objects/TorusRigid.xml\", scale=\"0.05\", rx=\"30\", ry=\"15\", dz=\"1\")\n</code></pre>"},{"location":"30_Components/Shader/LightManager/","title":"LightManager","text":"<p>Manage a set of lights that can cast hard and soft shadows.Soft Shadows is done using Variance Shadow Mapping (http://developer.download.nvidia.com/SDK/10.5/direct3d/Source/VarianceShadowMapping/Doc/VarianceShadowMapping.pdf)</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>VisualManager</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 shadows  Enable Shadow in the scene. (default=0)  0 softShadows  If Shadows enabled, Enable Variance Soft Shadow in the scene. (default=0)  0 ambient  Ambient lights contribution (Vec4f)(default=[0.0f,0.0f,0.0f,0.0f])  0 0 0 1 debugDraw  enable/disable drawing of lights shadow textures. (default=false)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/LightManager/#examples","title":"Examples","text":"<p>Component/Visual/LightManager.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 0 -10\" showBoundingTree=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [DirectionalLight LightManager PositionalLight SpotLight] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.02\" contactDistance=\"0.02\" /&gt;\n    &lt;LightManager /&gt;\n    &lt;SpotLight name=\"light1\" color=\"1 0 0\" position=\"0.5 0.7 2\" cutoff=\"25\" exponent=\"1\" /&gt;\n    &lt;PositionalLight name=\"light2\" color=\"0 1 0\" attenuation=\"0.1\" position=\"0.5 -0.7 2\" /&gt;\n    &lt;DirectionalLight name=\"light3\" color=\"0 0 1\" direction=\"1 1 0\" /&gt;\n    &lt;include href=\"Objects/SaladBowl.xml\" /&gt;\n    &lt;include href=\"Objects/TorusRigid.xml\" scale=\"0.05\" rx=\"30\" ry=\"15\" dz=\"1\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 0 -10\", showBoundingTree=\"0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.02\", contactDistance=\"0.02\")\n    root.addObject('LightManager')\n    root.addObject('SpotLight', name=\"light1\", color=\"1 0 0\", position=\"0.5 0.7 2\", cutoff=\"25\", exponent=\"1\")\n    root.addObject('PositionalLight', name=\"light2\", color=\"0 1 0\", attenuation=\"0.1\", position=\"0.5 -0.7 2\")\n    root.addObject('DirectionalLight', name=\"light3\", color=\"0 0 1\", direction=\"1 1 0\")\n    root.addObject('include', href=\"Objects/SaladBowl.xml\")\n    root.addObject('include', href=\"Objects/TorusRigid.xml\", scale=\"0.05\", rx=\"30\", ry=\"15\", dz=\"1\")\n</code></pre>"},{"location":"30_Components/Shader/OglFloat2Attribute/","title":"OglFloat2Attribute","text":"<p>OglFloat2Attribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloat2Variable/","title":"OglFloat2Variable","text":"<p>OglFloat2Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloat3Attribute/","title":"OglFloat3Attribute","text":"<p>OglFloat3Attribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloat3Variable/","title":"OglFloat3Variable","text":"<p>OglFloat3Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloat4Attribute/","title":"OglFloat4Attribute","text":"<p>OglFloat4Attribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloat4Variable/","title":"OglFloat4Variable","text":"<p>OglFloat4Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  0 0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloatAttribute/","title":"OglFloatAttribute","text":"<p>OglFloatAttribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloatVariable/","title":"OglFloatVariable","text":"<p>OglFloatVariable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloatVector2Variable/","title":"OglFloatVector2Variable","text":"<p>OglFloatVector2Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloatVector3Variable/","title":"OglFloatVector3Variable","text":"<p>OglFloatVector3Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloatVector4Variable/","title":"OglFloatVector4Variable","text":"<p>OglFloatVector4Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglFloatVectorVariable/","title":"OglFloatVectorVariable","text":"<p>OglFloatVectorVariable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglInt2Attribute/","title":"OglInt2Attribute","text":"<p>OglInt2Attribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglInt2Variable/","title":"OglInt2Variable","text":"<p>OglInt2Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglInt3Attribute/","title":"OglInt3Attribute","text":"<p>OglInt3Attribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglInt3Variable/","title":"OglInt3Variable","text":"<p>OglInt3Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglInt4Attribute/","title":"OglInt4Attribute","text":"<p>OglInt4Attribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglInt4Variable/","title":"OglInt4Variable","text":"<p>OglInt4Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  0 0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglIntAttribute/","title":"OglIntAttribute","text":"<p>OglIntAttribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglIntVariable/","title":"OglIntVariable","text":"<p>OglIntVariable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglIntVector2Variable/","title":"OglIntVector2Variable","text":"<p>OglIntVector2Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglIntVectorVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglIntVector3Variable/","title":"OglIntVector3Variable","text":"<p>OglIntVector3Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglIntVectorVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglIntVector4Variable/","title":"OglIntVector4Variable","text":"<p>OglIntVector4Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglIntVectorVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglIntVectorVariable/","title":"OglIntVectorVariable","text":"<p>OglIntVectorVariable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglMatrix2Variable/","title":"OglMatrix2Variable","text":"<p>OglMatrix2Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  transpose  Transpose the matrix (e.g. to use row-dominant matrices in OpenGL  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglMatrix2x3Variable/","title":"OglMatrix2x3Variable","text":"<p>OglMatrix2x3Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglMatrix2Variable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  transpose  Transpose the matrix (e.g. to use row-dominant matrices in OpenGL  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglMatrix2x4Variable/","title":"OglMatrix2x4Variable","text":"<p>OglMatrix2x4Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglMatrix2Variable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  transpose  Transpose the matrix (e.g. to use row-dominant matrices in OpenGL  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglMatrix3Variable/","title":"OglMatrix3Variable","text":"<p>OglMatrix3Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglMatrix2Variable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  transpose  Transpose the matrix (e.g. to use row-dominant matrices in OpenGL  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglMatrix3x2Variable/","title":"OglMatrix3x2Variable","text":"<p>OglMatrix3x2Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglMatrix2Variable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  transpose  Transpose the matrix (e.g. to use row-dominant matrices in OpenGL  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglMatrix3x4Variable/","title":"OglMatrix3x4Variable","text":"<p>OglMatrix3x4Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglMatrix2Variable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  transpose  Transpose the matrix (e.g. to use row-dominant matrices in OpenGL  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglMatrix4Variable/","title":"OglMatrix4Variable","text":"<p>OglMatrix4Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglMatrix2Variable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  transpose  Transpose the matrix (e.g. to use row-dominant matrices in OpenGL  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglMatrix4VectorVariable/","title":"OglMatrix4VectorVariable","text":"<p>OglMatrix4VectorVariable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglVariable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  transpose  Transpose the matrix (e.g. to use row-dominant matrices in OpenGL  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglMatrix4x2Variable/","title":"OglMatrix4x2Variable","text":"<p>OglMatrix4x2Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglMatrix2Variable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  transpose  Transpose the matrix (e.g. to use row-dominant matrices in OpenGL  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglMatrix4x3Variable/","title":"OglMatrix4x3Variable","text":"<p>OglMatrix4x3Variable</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglMatrix2Variable</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set Uniform Value  transpose  Transpose the matrix (e.g. to use row-dominant matrices in OpenGL  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglOITShader/","title":"OglOITShader","text":"<p>OglOITShader</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglShader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 turnOn  Turn On the shader?  1 passive  Will this shader be activated manually or automatically?  0 fileVertexShaders  Set the vertex shader filename to load  [ 'shaders/toonShading.vert' ] fileFragmentShaders  Set the fragment shader filename to load  [ 'shaders/toonShading.frag' ] fileGeometryShaders  Set the geometry shader filename to load  fileTessellationControlShaders  Set the tessellation control filename to load  fileTessellationEvaluationShaders  Set the tessellation evaluation filename to load  geometryInputType  Set input types for the geometry shader  -1 geometryOutputType  Set output types for the geometry shader  -1 geometryVerticesOut  Set max number of vertices in output for the geometry shader  -1 tessellationOuterLevel  For tessellation without control shader: default outer level (edge subdivisions)  1 tessellationInnerLevel  For tessellation without control shader: default inner level (face subdivisions)  1 indexActiveShader  Set current active shader  0 backfaceWriting  it enables writing to gl_BackColor inside a GLSL vertex shader  0 clampVertexColor  clamp the vertex color between 0 and 1  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglRenderingSRGB/","title":"OglRenderingSRGB","text":"<p>OglRenderingSRGB</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>VisualManager</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglShader/","title":"OglShader","text":"<p>OglShader</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>Shader</code></li> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 turnOn  Turn On the shader?  1 passive  Will this shader be activated manually or automatically?  0 fileVertexShaders  Set the vertex shader filename to load  [ 'shaders/toonShading.vert' ] fileFragmentShaders  Set the fragment shader filename to load  [ 'shaders/toonShading.frag' ] fileGeometryShaders  Set the geometry shader filename to load  fileTessellationControlShaders  Set the tessellation control filename to load  fileTessellationEvaluationShaders  Set the tessellation evaluation filename to load  geometryInputType  Set input types for the geometry shader  -1 geometryOutputType  Set output types for the geometry shader  -1 geometryVerticesOut  Set max number of vertices in output for the geometry shader  -1 tessellationOuterLevel  For tessellation without control shader: default outer level (edge subdivisions)  1 tessellationInnerLevel  For tessellation without control shader: default inner level (face subdivisions)  1 indexActiveShader  Set current active shader  0 backfaceWriting  it enables writing to gl_BackColor inside a GLSL vertex shader  0 clampVertexColor  clamp the vertex color between 0 and 1  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglShader/#examples","title":"Examples","text":"<p>Component/Visual/OglShader.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [OglShader] --&gt;\n\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"Liver\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/liver.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"Liver\" /&gt;\n        &lt;UniformMass name=\"mass\" vertexMass=\"0.05\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"500\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglShader fileFragmentShaders=\"['shaders/toonShading.frag']\" fileVertexShaders=\"['shaders/toonShading.vert']\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@meshLoader_0\" color=\"red\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n        &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    Liver = root.addChild('Liver')\n    Liver.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Liver.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Liver.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/liver.msh\")\n    Liver.addObject('MeshTopology', src=\"@loader\")\n    Liver.addObject('MechanicalObject', src=\"@loader\", name=\"Liver\")\n    Liver.addObject('UniformMass', name=\"mass\", vertexMass=\"0.05\")\n    Liver.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"500\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"large\")\n    Liver.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n\n    Visu = Liver.addChild('Visu')\n    Visu.addObject('OglShader', fileFragmentShaders=\"['shaders/toonShading.frag']\", fileVertexShaders=\"['shaders/toonShading.vert']\")\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver-smooth.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@meshLoader_0\", color=\"red\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualModel\")\n\n    Surf = Liver.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Surf.addObject('MechanicalObject', position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', name=\"CollisionModel\", listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping')\n</code></pre> <p>Component/Visual/OglShader_tessellation.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TaitSurfacePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceFieldOptim] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [FastTriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [OglFloatVariable OglShader] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;Node name=\"Liver\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" rayleighMass=\"0.1\" rayleighStiffness=\"0.2\" printLog=\"false\" /&gt;\n&lt;!--        &lt;CGLinearSolver template=\"CompressedRowSparseMatrixMat3x3\" iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;--&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/sphere_02b.obj\" scale=\"0.25 0.25 0.25\" rotation=\"-90 0 0\" triangulate=\"1\" /&gt;\n        &lt;TriangleSetTopologyContainer src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"DOFs\" /&gt;\n        &lt;TriangleSetTopologyModifier /&gt;\n        &lt;TriangleSetGeometryAlgorithms /&gt;\n        &lt;BoxConstraint box=\"-10 -10 -10  10 -5 10\" /&gt;\n        &lt;TriangularFEMForceFieldOptim name=\"FEM\" youngModulus=\"10000\" poissonRatio=\"0.4\" restScale=\"0.97\" method=\"large\" /&gt;\n        &lt;FastTriangularBendingSprings name=\"Bending\" bendingStiffness=\"100\" /&gt;\n        &lt;TaitSurfacePressureForceField name=\"Pressure\" gamma=\"5\" B=\"10000\" injectedVolume=\"100\" printLog=\"1\" /&gt;\n        &lt;DiagonalMass name=\"mass\" massDensity=\"1\" printLog=\"0\" /&gt;\n        &lt;TriangleCollisionModel name=\"CM\" /&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n\n            &lt;OglShader fileVertexShaders=\"['shaders/tessellationPNTriangle.glsl']\"\n                       fileTessellationControlShaders=\"['shaders/tessellationPNTriangle.glsl']\"\n                       fileTessellationEvaluationShaders=\"['shaders/tessellationPNTriangle.glsl']\"\n                       fileGeometryShaders=\"['shaders/tessellationPNTriangle.glsl']\"\n                       fileFragmentShaders=\"['shaders/tessellationPNTriangle.glsl']\"\n                       printLog=\"1\" /&gt;\n            &lt;OglFloatVariable name=\"TessellationLevel\" value=\"6\" /&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@../loader\" color=\"white\" primitiveType=\"PATCHES\" /&gt;\n            &lt;IdentityMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('DiscreteIntersection')\n\n    Liver = root.addChild('Liver')\n    Liver.addObject('EulerImplicitSolver', name=\"cg_odesolver\", rayleighMass=\"0.1\", rayleighStiffness=\"0.2\", printLog=\"false\")\n    Liver.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Liver.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/sphere_02b.obj\", scale=\"0.25 0.25 0.25\", rotation=\"-90 0 0\", triangulate=\"1\")\n    Liver.addObject('TriangleSetTopologyContainer', src=\"@loader\")\n    Liver.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"DOFs\")\n    Liver.addObject('TriangleSetTopologyModifier')\n    Liver.addObject('TriangleSetGeometryAlgorithms')\n    Liver.addObject('BoxConstraint', box=\"-10 -10 -10  10 -5 10\")\n    Liver.addObject('TriangularFEMForceFieldOptim', name=\"FEM\", youngModulus=\"10000\", poissonRatio=\"0.4\", restScale=\"0.97\", method=\"large\")\n    Liver.addObject('FastTriangularBendingSprings', name=\"Bending\", bendingStiffness=\"100\")\n    Liver.addObject('TaitSurfacePressureForceField', name=\"Pressure\", gamma=\"5\", B=\"10000\", injectedVolume=\"100\", printLog=\"1\")\n    Liver.addObject('DiagonalMass', name=\"mass\", massDensity=\"1\", printLog=\"0\")\n    Liver.addObject('TriangleCollisionModel', name=\"CM\")\n\n    Visu = Liver.addChild('Visu')\n    Visu.addObject('OglShader', fileVertexShaders=\"['shaders/tessellationPNTriangle.glsl']\", fileTessellationControlShaders=\"['shaders/tessellationPNTriangle.glsl']\", fileTessellationEvaluationShaders=\"['shaders/tessellationPNTriangle.glsl']\", fileGeometryShaders=\"['shaders/tessellationPNTriangle.glsl']\", fileFragmentShaders=\"['shaders/tessellationPNTriangle.glsl']\", printLog=\"1\")\n    Visu.addObject('OglFloatVariable', name=\"TessellationLevel\", value=\"6\")\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@../loader\", color=\"white\", primitiveType=\"PATCHES\")\n    Visu.addObject('IdentityMapping')\n</code></pre>"},{"location":"30_Components/Shader/OglShaderDefineMacro/","title":"OglShaderDefineMacro","text":"<p>OglShaderDefineMacro</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglShaderMacro</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  Set a value for define macro  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglShaderVisualModel/","title":"OglShaderVisualModel","text":"<p>Visual model for OpenGL display using Glew extensions</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 initRestPositions  True if rest positions must be initialized with initial positions  0 useNormals  True if normal smoothing groups should be read from file  1 updateNormals  True if normals should be updated at each iteration  1 computeTangents  True if tangents should be computed at startup  0 updateTangents  True if tangents should be updated at each iteration  1 handleDynamicTopology  True if topological changes should be handled  1 fixMergedUVSeams  True if UV seams should be handled even when duplicate UVs are merged  1 keepLines  keep and draw lines (false by default)  0 vertPosIdx  If vertices have multiple normals/texcoords stores vertices position indices  vertNormIdx  If vertices have multiple normals/texcoords stores vertices normal indices  filename   Path to an ogl model  texturename  Name of the Texture  scaleTex  Scale of the texture  1 1 translationTex  Translation of the texture  0 0 material  Material  putOnlyTexCoords  Give Texture Coordinates without the texture binding  0 srgbTexturing  When sRGB rendering is enabled, is the texture in sRGB colorspace?  0 materials  List of materials  groups  Groups of triangles and quads using a given material  blendTranslucency  Blend transparent parts  1 premultipliedAlpha  is alpha premultiplied ?  0 writeZTransparent  Write into Z Buffer for Transparent Object  0 alphaBlend  Enable alpha blending  0 depthTest  Enable depth testing  1 cullFace  Face culling (0 = no culling, 1 = cull back faces, 2 = cull front faces)  0 lineWidth  Line width (set if != 1, only for lines rendering)  1 pointSize  Point size (set if != 1, only for points rendering)  1 lineSmooth  Enable smooth line rendering  0 pointSmooth  Enable smooth point rendering  0 isEnabled  Activate/deactive the component.  1 primitiveType  Select types of primitives to send (necessary for some shader types such as geometry or tesselation)  blendEquation  if alpha blending is enabled this specifies how source and destination colors are combined  sfactor  if alpha blending is enabled this specifies how the red, green, blue, and alpha source blending factors are computed  dfactor  if alpha blending is enabled this specifies how the red, green, blue, and alpha destination blending factors are computed  Transformation translation  Initial Translation of the object  0 0 0 rotation  Initial Rotation of the object  0 0 0 scale3d  Initial Scale of the object  1 1 1 Vector position  Vertices coordinates  restPosition  Vertices rest coordinates  normal  Normals of the model  vertices  vertices of the model (only if vertices have multiple normals/texcoords, otherwise positions are used)  texcoords  coordinates of the texture  tangents  tangents for normal mapping  bitangents  tangents for normal mapping  edges  edges of the model  triangles  triangles of the model  quads  quads of the model  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Shader/OglShadowShader/","title":"OglShadowShader","text":"<p>This component sets the shader system responsible of the shadowing.</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglShader</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 turnOn  Turn On the shader?  1 passive  Will this shader be activated manually or automatically?  0 fileVertexShaders  Set the vertex shader filename to load  [ 'shaders/toonShading.vert' ] fileFragmentShaders  Set the fragment shader filename to load  [ 'shaders/toonShading.frag' ] fileGeometryShaders  Set the geometry shader filename to load  fileTessellationControlShaders  Set the tessellation control filename to load  fileTessellationEvaluationShaders  Set the tessellation evaluation filename to load  geometryInputType  Set input types for the geometry shader  -1 geometryOutputType  Set output types for the geometry shader  -1 geometryVerticesOut  Set max number of vertices in output for the geometry shader  -1 tessellationOuterLevel  For tessellation without control shader: default outer level (edge subdivisions)  1 tessellationInnerLevel  For tessellation without control shader: default inner level (face subdivisions)  1 indexActiveShader  Set current active shader  0 backfaceWriting  it enables writing to gl_BackColor inside a GLSL vertex shader  0 clampVertexColor  clamp the vertex color between 0 and 1  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglShadowShader/#examples","title":"Examples","text":"<p>Component/Visual/OglShadowShader_Directional.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node    name=\"root\"  dt=\"0.02\"  &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Setting\"/&gt; &lt;!-- Needed to use components [BackgroundSetting] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [DirectionalLight LightManager OglShadowShader] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;BackgroundSetting color=\"0.5 0.5 0.5\" /&gt;\n    &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/dragon.obj\"  translation=\"0 0 -5\"  scale3d=\"0.3 0.3 0.3\" handleSeams=\"1\" /&gt;\n    &lt;OglModel template=\"Vec3\" name=\"VisualModel\" src=\"@meshLoader_0\"  material=\"Default Diffuse 1 0 1 0 1 Ambient 1 0 0.2 0 1 Specular 0 0 1 0 1 Emissive 0 0 1 0 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \"  blendEquation=\"GL_FUNC_ADD\"  sfactor=\"GL_SRC_ALPHA\"  dfactor=\"GL_ONE_MINUS_SRC_ALPHA\" /&gt;\n\n    &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/floor.obj\"  translation=\"0 -2.5 0\"  scale3d=\"0.5 0.5 0.5\" handleSeams=\"1\" /&gt;\n    &lt;OglModel template=\"Vec3\" name=\"FloorV\" src=\"@meshLoader_1\"  material=\"Default Diffuse 1 0.5 0.5 0.8 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \"  blendEquation=\"GL_FUNC_ADD\"  sfactor=\"GL_SRC_ALPHA\"  dfactor=\"GL_ONE_MINUS_SRC_ALPHA\" /&gt;\n    &lt;LightManager name=\"lightManager1\"  listening=\"1\"  shadows=\"1\"  softShadows=\"0\" /&gt;\n    &lt;OglShadowShader name=\"oglShadowShader1\" /&gt;\n    &lt;DirectionalLight name=\"spotLight1\"  shadowTextureSize=\"512\" direction=\"-0.5 -0.5 -0.5\"  shadowFactor=\"1\" /&gt;\n    &lt;!-- &lt;OglViewport screenPosition=\"0 0\" screenSize=\"250 250\" cameraPosition=\"-200 0 0\" cameraOrientation=\"0 0.707 0 -0.707\" zNear=\"1\" zFar=\"1000\" /&gt; --&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Setting\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('BackgroundSetting', color=\"0.5 0.5 0.5\")\n    root.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/dragon.obj\", translation=\"0 0 -5\", scale3d=\"0.3 0.3 0.3\", handleSeams=\"1\")\n    root.addObject('OglModel', template=\"Vec3\", name=\"VisualModel\", src=\"@meshLoader_0\", material=\"Default Diffuse 1 0 1 0 1 Ambient 1 0 0.2 0 1 Specular 0 0 1 0 1 Emissive 0 0 1 0 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \", blendEquation=\"GL_FUNC_ADD\", sfactor=\"GL_SRC_ALPHA\", dfactor=\"GL_ONE_MINUS_SRC_ALPHA\")\n    root.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/floor.obj\", translation=\"0 -2.5 0\", scale3d=\"0.5 0.5 0.5\", handleSeams=\"1\")\n    root.addObject('OglModel', template=\"Vec3\", name=\"FloorV\", src=\"@meshLoader_1\", material=\"Default Diffuse 1 0.5 0.5 0.8 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \", blendEquation=\"GL_FUNC_ADD\", sfactor=\"GL_SRC_ALPHA\", dfactor=\"GL_ONE_MINUS_SRC_ALPHA\")\n    root.addObject('LightManager', name=\"lightManager1\", listening=\"1\", shadows=\"1\", softShadows=\"0\")\n    root.addObject('OglShadowShader', name=\"oglShadowShader1\")\n    root.addObject('DirectionalLight', name=\"spotLight1\", shadowTextureSize=\"512\", direction=\"-0.5 -0.5 -0.5\", shadowFactor=\"1\")\n</code></pre> <p>Component/Visual/OglShadowShader_SpotLight2.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node    name=\"root\"  dt=\"0.02\"  &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Setting\"/&gt; &lt;!-- Needed to use components [BackgroundSetting] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [LightManager OglShaderDefineMacro OglShadowShader OglTexture SpotLight] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;BackgroundSetting color=\"0.8 0.8 0.8\" /&gt;\n    &lt;LightManager name=\"lightManager1\"  listening=\"1\"  shadows=\"1\"  softShadows=\"1\" /&gt;\n\n    &lt;SpotLight name=\"spotLight1\"  shadowTextureSize=\"2048\"  position=\"0 5 -15\"  direction=\"0 -0.2 1\"  cutoff=\"45\" /&gt;\n    &lt;SpotLight name=\"spotLight2\"  shadowTextureSize=\"128\"  position=\"0 5 10\"  direction=\"0 -0.2 -1\"  cutoff=\"45\"  /&gt;\n\n    &lt;Node name=\"shader1\"&gt;\n        &lt;OglShadowShader name=\"oglShadowShader1\" /&gt;\n\n        &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/dragon.obj\"  translation=\"0 0 -5\"  scale3d=\"0.3 0.3 0.3\" handleSeams=\"1\" /&gt;\n        &lt;OglModel template=\"Vec3\" name=\"VisualModel\" src=\"@meshLoader_0\"  material=\"Default Diffuse 1 0 1 0 1 Ambient 1 0 0.2 0 1 Specular 0 0 1 0 1 Emissive 0 0 1 0 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \"  blendEquation=\"GL_FUNC_ADD\"  sfactor=\"GL_SRC_ALPHA\"  dfactor=\"GL_ONE_MINUS_SRC_ALPHA\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"shader2\"&gt;\n        &lt;OglShadowShader name=\"oglShadowShader1\" /&gt;\n        &lt;OglTexture textureFilename=\"textures/ice_chess.bmp\" indexShader=\"0\" id=\"colorTexture\" textureUnit=\"0\"  repeat=\"true\" /&gt;\n        &lt;OglTexture textureFilename=\"textures/ice_chess.bmp\" indexShader=\"1\" id=\"colorTexture\" textureUnit=\"1\"  repeat=\"true\" /&gt;\n\n        &lt;OglShaderDefineMacro id=\"USE_TEXTURE\" indexShader=\"0\" /&gt;\n        &lt;OglShaderDefineMacro id=\"USE_TEXTURE\" indexShader=\"1\" /&gt;\n\n        &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/floor2.obj\"  translation=\"0 -2.5 0\"  scale3d=\"1 1 1\" handleSeams=\"1\" /&gt;\n        &lt;OglModel template=\"Vec3\"  putOnlyTexCoords=\"true\" name=\"FloorV\" src=\"@meshLoader_1\"  material=\"Default Diffuse 1 0.5 0.5 0.5 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \"  blendEquation=\"GL_FUNC_ADD\"  sfactor=\"GL_SRC_ALPHA\"  dfactor=\"GL_ONE_MINUS_SRC_ALPHA\" /&gt;   \n    &lt;/Node&gt;\n\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Setting\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('BackgroundSetting', color=\"0.8 0.8 0.8\")\n    root.addObject('LightManager', name=\"lightManager1\", listening=\"1\", shadows=\"1\", softShadows=\"1\")\n    root.addObject('SpotLight', name=\"spotLight1\", shadowTextureSize=\"2048\", position=\"0 5 -15\", direction=\"0 -0.2 1\", cutoff=\"45\")\n    root.addObject('SpotLight', name=\"spotLight2\", shadowTextureSize=\"128\", position=\"0 5 10\", direction=\"0 -0.2 -1\", cutoff=\"45\")\n\n    shader1 = root.addChild('shader1')\n    shader1.addObject('OglShadowShader', name=\"oglShadowShader1\")\n    shader1.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/dragon.obj\", translation=\"0 0 -5\", scale3d=\"0.3 0.3 0.3\", handleSeams=\"1\")\n    shader1.addObject('OglModel', template=\"Vec3\", name=\"VisualModel\", src=\"@meshLoader_0\", material=\"Default Diffuse 1 0 1 0 1 Ambient 1 0 0.2 0 1 Specular 0 0 1 0 1 Emissive 0 0 1 0 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \", blendEquation=\"GL_FUNC_ADD\", sfactor=\"GL_SRC_ALPHA\", dfactor=\"GL_ONE_MINUS_SRC_ALPHA\")\n\n    shader2 = root.addChild('shader2')\n    shader2.addObject('OglShadowShader', name=\"oglShadowShader1\")\n    shader2.addObject('OglTexture', textureFilename=\"textures/ice_chess.bmp\", indexShader=\"0\", id=\"colorTexture\", textureUnit=\"0\", repeat=\"true\")\n    shader2.addObject('OglTexture', textureFilename=\"textures/ice_chess.bmp\", indexShader=\"1\", id=\"colorTexture\", textureUnit=\"1\", repeat=\"true\")\n    shader2.addObject('OglShaderDefineMacro', id=\"USE_TEXTURE\", indexShader=\"0\")\n    shader2.addObject('OglShaderDefineMacro', id=\"USE_TEXTURE\", indexShader=\"1\")\n    shader2.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/floor2.obj\", translation=\"0 -2.5 0\", scale3d=\"1 1 1\", handleSeams=\"1\")\n    shader2.addObject('OglModel', template=\"Vec3\", putOnlyTexCoords=\"true\", name=\"FloorV\", src=\"@meshLoader_1\", material=\"Default Diffuse 1 0.5 0.5 0.5 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \", blendEquation=\"GL_FUNC_ADD\", sfactor=\"GL_SRC_ALPHA\", dfactor=\"GL_ONE_MINUS_SRC_ALPHA\")\n</code></pre> <p>Component/Visual/OglShadowShader_SpotLight.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node    name=\"root\"  dt=\"0.02\"  &gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [LightManager OglShadowShader SpotLight] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/dragon.obj\"  translation=\"0 0 -5\"  scale3d=\"0.3 0.3 0.3\" handleSeams=\"1\" /&gt;\n    &lt;OglModel template=\"Vec3\" name=\"VisualModel\" src=\"@meshLoader_0\"  material=\"Default Diffuse 1 0 1 0 1 Ambient 1 0 0.2 0 1 Specular 0 0 1 0 1 Emissive 0 0 1 0 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \"  blendEquation=\"GL_FUNC_ADD\"  sfactor=\"GL_SRC_ALPHA\"  dfactor=\"GL_ONE_MINUS_SRC_ALPHA\" /&gt;\n    &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/floor.obj\"  translation=\"0 -2.5 0\"  scale3d=\"1 1 1\" handleSeams=\"1\" /&gt;\n    &lt;OglModel template=\"Vec3\" name=\"FloorV\" src=\"@meshLoader_1\"  material=\"Default Diffuse 1 0.5 0.5 0.5 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \"  blendEquation=\"GL_FUNC_ADD\"  sfactor=\"GL_SRC_ALPHA\"  dfactor=\"GL_ONE_MINUS_SRC_ALPHA\" /&gt;\n    &lt;LightManager name=\"lightManager1\"  listening=\"1\"  shadows=\"1\"  softShadows=\"1\" /&gt;\n    &lt;OglShadowShader name=\"oglShadowShader1\" /&gt;\n    &lt;SpotLight name=\"spotLight1\"  shadowTextureSize=\"2048\"  position=\"0 5 -15\"  direction=\"0 -0.2 1\"  cutoff=\"45\" /&gt;\n    &lt;SpotLight name=\"spotLight2\"  shadowTextureSize=\"128\"  position=\"0 5 10\"  direction=\"0 -0.2 -1\"  cutoff=\"45\" /&gt;\n    &lt;SpotLight name=\"spotLight3\"  shadowTextureSize=\"512\"  position=\"-15 5 0\"  direction=\"1 -0.2 0\"  cutoff=\"45\" /&gt;\n    &lt;SpotLight name=\"spotLight4\"  shadowTextureSize=\"256\"  position=\"10 5 0\"  direction=\"-1 -0.2 0\"  cutoff=\"45\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/dragon.obj\", translation=\"0 0 -5\", scale3d=\"0.3 0.3 0.3\", handleSeams=\"1\")\n    root.addObject('OglModel', template=\"Vec3\", name=\"VisualModel\", src=\"@meshLoader_0\", material=\"Default Diffuse 1 0 1 0 1 Ambient 1 0 0.2 0 1 Specular 0 0 1 0 1 Emissive 0 0 1 0 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \", blendEquation=\"GL_FUNC_ADD\", sfactor=\"GL_SRC_ALPHA\", dfactor=\"GL_ONE_MINUS_SRC_ALPHA\")\n    root.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/floor.obj\", translation=\"0 -2.5 0\", scale3d=\"1 1 1\", handleSeams=\"1\")\n    root.addObject('OglModel', template=\"Vec3\", name=\"FloorV\", src=\"@meshLoader_1\", material=\"Default Diffuse 1 0.5 0.5 0.5 1 Ambient 1 0.1 0.1 0.1 1 Specular 0 0.5 0.5 0.5 1 Emissive 0 0.5 0.5 0.5 1 Shininess 0 45 No texture linked to the material No bump texture linked to the material \", blendEquation=\"GL_FUNC_ADD\", sfactor=\"GL_SRC_ALPHA\", dfactor=\"GL_ONE_MINUS_SRC_ALPHA\")\n    root.addObject('LightManager', name=\"lightManager1\", listening=\"1\", shadows=\"1\", softShadows=\"1\")\n    root.addObject('OglShadowShader', name=\"oglShadowShader1\")\n    root.addObject('SpotLight', name=\"spotLight1\", shadowTextureSize=\"2048\", position=\"0 5 -15\", direction=\"0 -0.2 1\", cutoff=\"45\")\n    root.addObject('SpotLight', name=\"spotLight2\", shadowTextureSize=\"128\", position=\"0 5 10\", direction=\"0 -0.2 -1\", cutoff=\"45\")\n    root.addObject('SpotLight', name=\"spotLight3\", shadowTextureSize=\"512\", position=\"-15 5 0\", direction=\"1 -0.2 0\", cutoff=\"45\")\n    root.addObject('SpotLight', name=\"spotLight4\", shadowTextureSize=\"256\", position=\"10 5 0\", direction=\"-1 -0.2 0\", cutoff=\"45\")\n</code></pre>"},{"location":"30_Components/Shader/OglTexture/","title":"OglTexture","text":"<p>OglTexture</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> <li><code>ShaderElement</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 filename  Texture Filename  textureUnit  Set the texture unit  1 enabled  enabled ?  1 repeat  Repeat Texture ?  0 linearInterpolation  Interpolate Texture ?  1 generateMipmaps  Generate mipmaps ?  1 srgbColorspace  SRGB colorspace ?  0 minLod  Minimum mipmap lod ?  -1000 maxLod  Maximum mipmap lod ?  1000 proceduralTextureWidth  Width of procedural Texture  0 proceduralTextureHeight  Height of procedural Texture  0 proceduralTextureNbBits  Nb bits per color  1 proceduralTextureData  Data of procedural Texture   cubemapFilenamePosX  Texture filename of positive-X cubemap face  cubemapFilenamePosY  Texture filename of positive-Y cubemap face  cubemapFilenamePosZ  Texture filename of positive-Z cubemap face  cubemapFilenameNegX  Texture filename of negative-X cubemap face  cubemapFilenameNegY  Texture filename of negative-Y cubemap face  cubemapFilenameNegZ  Texture filename of negative-Z cubemap face  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglTexture2D/","title":"OglTexture2D","text":"<p>OglTexture2D</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglTexture</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 filename  Texture Filename  textureUnit  Set the texture unit  1 enabled  enabled ?  1 repeat  Repeat Texture ?  0 linearInterpolation  Interpolate Texture ?  1 generateMipmaps  Generate mipmaps ?  1 srgbColorspace  SRGB colorspace ?  0 minLod  Minimum mipmap lod ?  -1000 maxLod  Maximum mipmap lod ?  1000 proceduralTextureWidth  Width of procedural Texture  0 proceduralTextureHeight  Height of procedural Texture  0 proceduralTextureNbBits  Nb bits per color  1 proceduralTextureData  Data of procedural Texture   cubemapFilenamePosX  Texture filename of positive-X cubemap face  cubemapFilenamePosY  Texture filename of positive-Y cubemap face  cubemapFilenamePosZ  Texture filename of positive-Z cubemap face  cubemapFilenameNegX  Texture filename of negative-X cubemap face  cubemapFilenameNegY  Texture filename of negative-Y cubemap face  cubemapFilenameNegZ  Texture filename of negative-Z cubemap face  texture2DFilename  Texture2D Filename  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglTexturePointer/","title":"OglTexturePointer","text":"<p>OglTexturePointer</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> <li><code>ShaderElement</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 textureUnit  Set the texture unit  1 enabled  enabled ?  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects oglTexture OglTexture"},{"location":"30_Components/Shader/OglUInt2Attribute/","title":"OglUInt2Attribute","text":"<p>OglUInt2Attribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglUInt3Attribute/","title":"OglUInt3Attribute","text":"<p>OglUInt3Attribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglUInt4Attribute/","title":"OglUInt4Attribute","text":"<p>OglUInt4Attribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OglUIntAttribute/","title":"OglUIntAttribute","text":"<p>OglUIntAttribute</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>OglAttribute</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 id  Set an ID name  indexShader  Set the index of the desired shader you want to apply this parameter  0 value  internal Data  handleDynamicTopology  Activate handling of topological changes on the values of this attribute (resizes only)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/OrderIndependentTransparencyManager/","title":"OrderIndependentTransparencyManager","text":"<p>OrderIndependentTransparencyManager</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>VisualManager</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 depthScale  Depth scale  0.01 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/PositionalLight/","title":"PositionalLight","text":"<p>A positional light illuminating the scene.The light has a location from which the ray are starting in all direction  (cannot cast shadows for now)</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>Light</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 color  Set the color of the light. (default=[1.0,1.0,1.0,1.0])  1 1 1 1 shadowTextureSize  [Shadowing] Set size for shadow texture   0 zNear  [Shadowing] Light's ZNear  zFar  [Shadowing] Light's ZFar  shadowsEnabled  [Shadowing] Enable Shadow from this light  1 softShadows  [Shadowing] Turn on Soft Shadow from this light  0 shadowFactor  [Shadowing] Shadow Factor (decrease/increase darkness)  1 VSMLightBleeding  [Shadowing] (VSM only) Light bleeding paramter  0.05 VSMMinVariance  [Shadowing] (VSM only) Minimum variance parameter  0.001 textureUnit  [Shadowing] Texture unit for the genereated shadow texture  1 modelViewMatrix  [Shadowing] ModelView Matrix  projectionMatrix  [Shadowing] Projection Matrix  fixed  Fix light position from the camera  0 position  Set the position of the light  -0.7 0.3 0 attenuation  Set the attenuation of the light  0 Visualization drawSource  Draw Light Source  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/PositionalLight/#examples","title":"Examples","text":"<p>Component/Visual/PositionalLight.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 0 -10\" showBoundingTree=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [LightManager PositionalLight] --&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.02\" contactDistance=\"0.02\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;LightManager /&gt;\n    &lt;PositionalLight name=\"light1\" color=\"1 0 0\" attenuation=\"0.4\" position=\"0.5 0.7 2\" /&gt;\n    &lt;PositionalLight name=\"light2\" color=\"0 1 0\" attenuation=\"0.4\" position=\"0.5 -0.7 2\" /&gt;\n    &lt;PositionalLight name=\"light3\" color=\"0 0 1\" attenuation=\"0.4\" position=\"-0.8 0 2\" /&gt;\n    &lt;include href=\"Objects/SaladBowl.xml\" /&gt;\n    &lt;include href=\"Objects/TorusRigid.xml\" scale=\"0.05\" rx=\"30\" ry=\"15\" dz=\"0.5\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 0 -10\", showBoundingTree=\"0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.02\", contactDistance=\"0.02\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('LightManager')\n    root.addObject('PositionalLight', name=\"light1\", color=\"1 0 0\", attenuation=\"0.4\", position=\"0.5 0.7 2\")\n    root.addObject('PositionalLight', name=\"light2\", color=\"0 1 0\", attenuation=\"0.4\", position=\"0.5 -0.7 2\")\n    root.addObject('PositionalLight', name=\"light3\", color=\"0 0 1\", attenuation=\"0.4\", position=\"-0.8 0 2\")\n    root.addObject('include', href=\"Objects/SaladBowl.xml\")\n    root.addObject('include', href=\"Objects/TorusRigid.xml\", scale=\"0.05\", rx=\"30\", ry=\"15\", dz=\"0.5\")\n</code></pre>"},{"location":"30_Components/Shader/PostProcessManager/","title":"PostProcessManager","text":"<p>PostProcessManager</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 zNear  Set zNear distance (for Depth Buffer)  1 zFar  Set zFar distance (for Depth Buffer)  100 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/PostProcessManager/#examples","title":"Examples","text":"<p>Component/Visual/PostProcessManager_DepthOfField.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [OglFloatVariable OglIntVariable OglShader PostProcessManager] --&gt;\n\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Liver\" depend=\"topo dofs\"&gt;\n        &lt;!--&lt;CGImplicit iterations=\"25\"/&gt;--&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/liver.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"dofs\" /&gt;\n        &lt;!-- Container for the tetrahedra--&gt;\n        &lt;TetrahedronSetTopologyContainer src=\"@loader\" name=\"topo\" /&gt;\n        &lt;!-- Algorithms: used in DiagonalMass to compute the mass --&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass massDensity=\"1\" name=\"computed using mass density\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"3000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;!-- Using material contained in liver-smooth.obj --&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@meshLoader_0\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualModel\" name=\"visual mapping\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n        &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping name=\"sphere mapping\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;MeshOBJLoader name='myLoaderDragon' filename='mesh/dragon.obj'/&gt;  \n    &lt;MeshOBJLoader name='myLoaderFloor' filename='mesh/floor.obj'/&gt;  \n    &lt;OglModel name=\"VisualModel\" src='@myLoaderDragon' color=\"green\" dz=\"-25.0\" scale=\"0.3 0.3 0.3\"/&gt;\n    &lt;OglModel name=\"FloorV\" src='@myLoaderFloor' color=\"0.5 0.5 0.5\" dy=\"-2.5\"/&gt;\n    &lt;!--&lt;LightManager listening=\"true\"/&gt;\n    &lt;SpotLight position=\"0 30 0.0001\" direction=\"0 -1 0\" /&gt;\n    &lt;SpotLight position=\"0 5 15\" direction=\"0 0 -1\" /&gt;\n    &lt;OglShadowShader/&gt;--&gt;\n    &lt;OglShader name=\"dof\" passive=\"true\" fileFragmentShaders=\"['shaders/depthOfField.frag']\" fileVertexShaders=\"['shaders/depthOfField.vert']\" /&gt;\n    &lt;OglFloatVariable id=\"blurIntensity\" value=\"0.2\" /&gt;\n    &lt;OglFloatVariable id=\"focusDistance\" value=\"0.9\" /&gt;\n    &lt;OglFloatVariable id=\"focusLength\" value=\"0.05\" /&gt;\n    &lt;OglIntVariable id=\"showDepthMap\" value=\"0\" /&gt;\n    &lt;PostProcessManager zFar=\"1000\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    Liver = root.addChild('Liver', depend=\"topo dofs\")\n    Liver.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Liver.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Liver.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/liver.msh\")\n    Liver.addObject('MechanicalObject', src=\"@loader\", name=\"dofs\")\n    Liver.addObject('TetrahedronSetTopologyContainer', src=\"@loader\", name=\"topo\")\n    Liver.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    Liver.addObject('DiagonalMass', massDensity=\"1\", name=\"computed using mass density\")\n    Liver.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"3000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"large\")\n    Liver.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n\n    Visu = Liver.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver-smooth.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@meshLoader_0\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualModel\", name=\"visual mapping\")\n\n    Surf = Liver.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Surf.addObject('MechanicalObject', position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', name=\"CollisionModel\", listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping', name=\"sphere mapping\")\n    root.addObject('MeshOBJLoader', name=\"myLoaderDragon\", filename=\"mesh/dragon.obj\")\n    root.addObject('MeshOBJLoader', name=\"myLoaderFloor\", filename=\"mesh/floor.obj\")\n    root.addObject('OglModel', name=\"VisualModel\", src=\"@myLoaderDragon\", color=\"green\", dz=\"-25.0\", scale=\"0.3 0.3 0.3\")\n    root.addObject('OglModel', name=\"FloorV\", src=\"@myLoaderFloor\", color=\"0.5 0.5 0.5\", dy=\"-2.5\")\n    root.addObject('OglShader', name=\"dof\", passive=\"true\", fileFragmentShaders=\"['shaders/depthOfField.frag']\", fileVertexShaders=\"['shaders/depthOfField.vert']\")\n    root.addObject('OglFloatVariable', id=\"blurIntensity\", value=\"0.2\")\n    root.addObject('OglFloatVariable', id=\"focusDistance\", value=\"0.9\")\n    root.addObject('OglFloatVariable', id=\"focusLength\", value=\"0.05\")\n    root.addObject('OglIntVariable', id=\"showDepthMap\", value=\"0\")\n    root.addObject('PostProcessManager', zFar=\"1000\")\n</code></pre>"},{"location":"30_Components/Shader/SpotLight/","title":"SpotLight","text":"<p>A spot light illuminating the scene.The light has a location and a illumination cone restricting the directionstaken by the rays of light  (can cast shadows).</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>PositionalLight</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 color  Set the color of the light. (default=[1.0,1.0,1.0,1.0])  1 1 1 1 shadowTextureSize  [Shadowing] Set size for shadow texture   0 zNear  [Shadowing] Light's ZNear  zFar  [Shadowing] Light's ZFar  shadowsEnabled  [Shadowing] Enable Shadow from this light  1 softShadows  [Shadowing] Turn on Soft Shadow from this light  0 shadowFactor  [Shadowing] Shadow Factor (decrease/increase darkness)  1 VSMLightBleeding  [Shadowing] (VSM only) Light bleeding paramter  0.05 VSMMinVariance  [Shadowing] (VSM only) Minimum variance parameter  0.001 textureUnit  [Shadowing] Texture unit for the genereated shadow texture  1 modelViewMatrix  [Shadowing] ModelView Matrix  projectionMatrix  [Shadowing] Projection Matrix  fixed  Fix light position from the camera  0 position  Set the position of the light  -0.7 0.3 0 attenuation  Set the attenuation of the light  0 direction  Set the direction of the light  0 0 -1 cutoff  Set the angle (cutoff) of the spot  30 exponent  Set the exponent of the spot  1 lookat  If true, direction specify the point at which the spotlight should be pointed to  0 Visualization drawSource  Draw Light Source  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/SpotLight/#examples","title":"Examples","text":"<p>Component/Visual/SpotLight.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 0 -10\" showBoundingTree=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [LightManager SpotLight] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.02\" contactDistance=\"0.02\" /&gt;\n    &lt;LightManager /&gt;\n    &lt;SpotLight name=\"light1\" color=\"1 0 0\" position=\"0.5 0.7 2\" cutoff=\"25\" exponent=\"1\" drawSource=\"false\" /&gt;\n    &lt;SpotLight name=\"light2\" color=\"0 1 0\" position=\"0.5 -0.7 2\" cutoff=\"25\" exponent=\"1\"  drawSource=\"false\"/&gt;\n    &lt;SpotLight name=\"light3\" color=\"0 0 1\" position=\"-0.8 0 2\" cutoff=\"25\" exponent=\"1\"  drawSource=\"false\"/&gt;\n    &lt;SpotLight name=\"light4\" color=\"1 1 1\" position=\"0 0 2\" cutoff=\"10\" exponent=\"1000\" drawSource=\"false\" /&gt;\n    &lt;include href=\"Objects/SaladBowl.xml\" /&gt;\n    &lt;include href=\"Objects/TorusRigid.xml\" scale=\"0.05\" rx=\"30\" ry=\"15\" dz=\"1\" /&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 0 -10\", showBoundingTree=\"0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.02\", contactDistance=\"0.02\")\n    root.addObject('LightManager')\n    root.addObject('SpotLight', name=\"light1\", color=\"1 0 0\", position=\"0.5 0.7 2\", cutoff=\"25\", exponent=\"1\", drawSource=\"false\")\n    root.addObject('SpotLight', name=\"light2\", color=\"0 1 0\", position=\"0.5 -0.7 2\", cutoff=\"25\", exponent=\"1\", drawSource=\"false\")\n    root.addObject('SpotLight', name=\"light3\", color=\"0 0 1\", position=\"-0.8 0 2\", cutoff=\"25\", exponent=\"1\", drawSource=\"false\")\n    root.addObject('SpotLight', name=\"light4\", color=\"1 1 1\", position=\"0 0 2\", cutoff=\"10\", exponent=\"1000\", drawSource=\"false\")\n    root.addObject('include', href=\"Objects/SaladBowl.xml\")\n    root.addObject('include', href=\"Objects/TorusRigid.xml\", scale=\"0.05\", rx=\"30\", ry=\"15\", dz=\"1\")\n</code></pre>"},{"location":"30_Components/Shader/VisualManagerPass/","title":"VisualManagerPass","text":"<p>VisualManagerPass</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>VisualManager</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 factor  set the resolution factor for the output pass. default value:1.0  1 renderToScreen  if true, this pass will be displayed on screen (only one renderPass in the scene must be defined as renderToScreen)  outputName  name the output texture  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Shader/VisualManagerSecondaryPass/","title":"VisualManagerSecondaryPass","text":"<p>VisualManagerSecondaryPass</p> <p>Target: <code>Sofa.GL.Component.Shader</code></p> <p>namespace: <code>sofa::gl::component::shader</code></p> <p>parents: </p> <ul> <li><code>VisualManagerPass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 factor  set the resolution factor for the output pass. default value:1.0  1 renderToScreen  if true, this pass will be displayed on screen (only one renderPass in the scene must be defined as renderToScreen)  outputName  name the output texture  input_tags  list of input passes used as source textures  output_tags  output reference tag (use it if the resulting fbo is used as a source for another secondary pass)  fragFilename  Set the fragment shader filename to load  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects shader Shader to apply for compositing"},{"location":"30_Components/StateContainer/MappedObject/","title":"MappedObject","text":"<p>Mapped state vectors Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.StateContainer</code></p> <p>namespace: <code>sofa::component::statecontainer</code></p> <p>parents: </p> <ul> <li><code>State</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 position  position vector  velocity  velocity vector  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/StateContainer/MechanicalObject/","title":"MechanicalObject","text":"<p>mechanical state vectors Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>Sofa.Component.StateContainer</code></p> <p>namespace: <code>sofa::component::statecontainer</code></p> <p>parents: </p> <ul> <li><code>MechanicalState</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 restScale  optional scaling of rest position coordinates (to simulated pre-existing internal tension).(default = 1.0)  1 useTopology  Shall this object rely on any active topology to initialize its size and positions  1 size  Size of the vectors  0 reserve  Size to reserve when creating vectors. (default=0)  0 Force force  force vector of the degrees of freedom  externalForce  externalForces vector of the degrees of freedom  Free Motion free_position  free position coordinates of the degrees of freedom  free_velocity  free velocity coordinates of the degrees of freedom  Jacobian constraint  constraints applied to the degrees of freedom  mappingJacobian  mappingJacobian applied to the degrees of freedom  Rest States rest_position  rest position coordinates of the degrees of freedom  States position  position coordinates of the degrees of freedom  velocity  velocity coordinates of the degrees of freedom  derivX  dx vector of the degrees of freedom  reset_position  reset position coordinates of the degrees of freedom  reset_velocity  reset velocity coordinates of the degrees of freedom  Transformation translation  Translation of the DOFs  0 0 0 rotation  Rotation of the DOFs  0 0 0 scale3d  Scale of the DOFs in 3 dimensions  1 1 1 translation2  Translation of the DOFs, applied after the rest position has been computed  0 0 0 rotation2  Rotation of the DOFs, applied the after the rest position has been computed  0 0 0 Visualization showObject  Show objects. (default=false)  0 showObjectScale  Scale for object display. (default=0.1)  0.1 showIndices  Show indices. (default=false)  0 showIndicesScale  Scale for indices display. (default=0.02)  0.02 showVectors  Show velocity. (default=false)  0 showVectorsScale  Scale for vectors display. (default=0.0001)  0.0001 drawMode  The way vectors will be drawn: - 0: Line - 1:Cylinder - 2: Arrow.  The DOFS will be drawn: - 0: point - &gt;1: sphere. (default=0)  0 showColor  Color for object display. (default=[1 1 1 1])  1 1 1 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology Link to the topology relevant for this object"},{"location":"30_Components/Topology/Container/Constant/CubeTopology/","title":"CubeTopology","text":"<p>Surface of a cube in 3D</p> <p>Target: <code>Sofa.Component.Topology.Container.Constant</code></p> <p>namespace: <code>sofa::component::topology::container::constant</code></p> <p>parents: </p> <ul> <li><code>MeshTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  nx  x grid resolution  0 ny  y grid resolution  0 nz  z grid resolution  0 internalPoints  include internal points (allow a one-to-one mapping between points from RegularGridTopology and CubeTopology)  0 splitNormals  split corner points to have planar normals  0 min  Min  0 0 0 max  Max  1 1 1 Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Constant/CubeTopology/#examples","title":"Examples","text":"<p>Component/Topology/Container/Constant/CubeTopology.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangleFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [CubeTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Quad2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Cubes\" &gt;\n    &lt;VisualStyle displayFlags=\"showForceFields\" /&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;CubeTopology internalPoints=\"0\" splitNormals=\"1\" name=\"cubeTopo\" nx=\"3\" ny=\"3\" nz=\"5\" min=\"-0.015 -0.015 -0.075\" max=\"0.015 0.015 0.075\" /&gt;\n        &lt;Node name=\"topoTriangle\" &gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@../cubeTopo\"/&gt;\n            &lt;Quad2TriangleTopologicalMapping input=\"@../cubeTopo\" output=\"@Container\"/&gt;\n            &lt;MechanicalObject name=\"dofs\" printLog=\"1\" position=\"@../cubeTopo.position\"/&gt;\n            &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n            &lt;TriangleFEMForceField name=\"FEM1\" youngModulus=\"500\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n            &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"3000\" damping=\"1.0\"/&gt;\n            &lt;UniformMass vertexMass=\"0.1\" /&gt;\n\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n                &lt;IdentityMapping input=\"@../dofs\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    Cubes = root.addChild('Cubes')\n    Cubes.addObject('VisualStyle', displayFlags=\"showForceFields\")\n    Cubes.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Cubes.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Cubes.addObject('CubeTopology', internalPoints=\"0\", splitNormals=\"1\", name=\"cubeTopo\", nx=\"3\", ny=\"3\", nz=\"5\", min=\"-0.015 -0.015 -0.075\", max=\"0.015 0.015 0.075\")\n\n    topoTriangle = Cubes.addChild('topoTriangle')\n    topoTriangle.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@../cubeTopo\")\n    topoTriangle.addObject('Quad2TriangleTopologicalMapping', input=\"@../cubeTopo\", output=\"@Container\")\n    topoTriangle.addObject('MechanicalObject', name=\"dofs\", printLog=\"1\", position=\"@../cubeTopo.position\")\n    topoTriangle.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n    topoTriangle.addObject('TriangleFEMForceField', name=\"FEM1\", youngModulus=\"500\", poissonRatio=\"0.3\", method=\"large\")\n    topoTriangle.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"3000\", damping=\"1.0\")\n    topoTriangle.addObject('UniformMass', vertexMass=\"0.1\")\n\n    Visu = topoTriangle.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"red\")\n    Visu.addObject('IdentityMapping', input=\"@../dofs\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/Topology/Container/Constant/MeshTopology/","title":"MeshTopology","text":"<p>Generic mesh topology</p> <p>Target: <code>Sofa.Component.Topology.Container.Constant</code></p> <p>namespace: <code>sofa::component::topology::container::constant</code></p> <p>parents: </p> <ul> <li><code>BaseMeshTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Constant/MeshTopology/#examples","title":"Examples","text":"<p>Component/Topology/Container/Constant/MeshTopology.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showVisual\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection/&gt;\n    &lt;Node name=\"TorusFEM\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;!-- or MeshTopology --&gt;\n        &lt;MechanicalObject src=\"@loader\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"0\" /&gt;\n        &lt;UniformMass totalMass=\"5\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\" method=\"large\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"red\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf2\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;!-- or MeshTopology --&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showVisual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n\n    TorusFEM = root.addChild('TorusFEM')\n    TorusFEM.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TorusFEM.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TorusFEM.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusFEM.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM.addObject('MechanicalObject', src=\"@loader\")\n    TorusFEM.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"0\")\n    TorusFEM.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.4\", computeGlobalMatrix=\"false\", method=\"large\")\n\n    Visu = TorusFEM.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"red\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n</code></pre>"},{"location":"30_Components/Topology/Container/Constant/SphereQuadTopology/","title":"SphereQuadTopology","text":"<p>Sphere topology constructed with deformed quads</p> <p>Target: <code>Sofa.Component.Topology.Container.Constant</code></p> <p>namespace: <code>sofa::component::topology::container::constant</code></p> <p>parents: </p> <ul> <li><code>CubeTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  nx  x grid resolution  0 ny  y grid resolution  0 nz  z grid resolution  0 internalPoints  include internal points (allow a one-to-one mapping between points from RegularGridTopology and CubeTopology)  0 splitNormals  split corner points to have planar normals  0 min  Min  0 0 0 max  Max  1 1 1 center  Center of the sphere  0 0 0 radius  Radius of the sphere  0 Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/DynamicSparseGridGeometryAlgorithms/","title":"DynamicSparseGridGeometryAlgorithms","text":"<p>Hexahedron set geometry algorithms</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>HexahedronSetGeometryAlgorithms</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 tagMechanics  Tag of the Mechanical Object  Visualization showIndicesScale  Debug : scale for view topology indices  0.02 showPointIndices  Debug : view Point indices  0 showEdgeIndices  Debug : view Edge indices.  0 drawEdges  if true, draw the edges in the topology.  0 drawColorEdges  RGB code color used to draw edges.  0.4 1 0.3 1 showQuadIndices  Debug : view Quad indices  0 drawQuads  if true, draw the quads in the topology  0 drawColorQuads  RGB code color used to draw quads.  0 0.4 0.4 1 showHexaIndices  Debug : view Hexa indices  0 drawHexahedra  if true, draw the Hexahedron in the topology  0 drawScaleHexahedra  Scale of the hexahedra (between 0 and 1; if &lt;1.0, it produces gaps between the hexahedra)  1 drawColorHexahedra  RGB code color used to draw hexahedra.  1 0.5 0 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Topology/Container/Dynamic/DynamicSparseGridTopologyContainer/","title":"DynamicSparseGridTopologyContainer","text":"<p>Hexahedron set topology container</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>HexahedronSetTopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 edges  List of edge indices  checkConnexity  It true, will check the connexity of the mesh.  0 quads  List of quad indices  createQuadArray  Force the creation of a set of quads associated with the hexahedra  0 hexahedra  List of hexahedron indices  valuesIndexedInTopology  values indexed in the topology  resolution  voxel grid resolution  0 0 0 valuesIndexedInRegularGrid  values indexed in the Regular Grid  valuesIndexedInTopology  values indexed in the topology  idxInRegularGrid  indices in the Regular Grid  idInRegularGrid2IndexInTopo  map between id in the Regular Grid and index in the topology  voxelSize  Size of the Voxels  1 1 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/DynamicSparseGridTopologyModifier/","title":"DynamicSparseGridTopologyModifier","text":"<p>Hexahedron set topology modifier</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>HexahedronSetTopologyModifier</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 propagateToDOF   propagate changes to MEchanical object DOFs if true  1 removeIsolated  remove Isolated dof  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/EdgeSetGeometryAlgorithms/","title":"EdgeSetGeometryAlgorithms","text":"<p>Edge set geometry algorithms</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>PointSetGeometryAlgorithms</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 tagMechanics  Tag of the Mechanical Object  Visualization showIndicesScale  Debug : scale for view topology indices  0.02 showPointIndices  Debug : view Point indices  0 showEdgeIndices  Debug : view Edge indices.  0 drawEdges  if true, draw the edges in the topology.  0 drawColorEdges  RGB code color used to draw edges.  0.4 1 0.3 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Topology/Container/Dynamic/EdgeSetTopologyContainer/","title":"EdgeSetTopologyContainer","text":"<p>Edge set topology container</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>PointSetTopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 edges  List of edge indices  checkConnexity  It true, will check the connexity of the mesh.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/EdgeSetTopologyModifier/","title":"EdgeSetTopologyModifier","text":"<p>Edge set topology modifier</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>PointSetTopologyModifier</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 propagateToDOF   propagate changes to MEchanical object DOFs if true  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/HexahedronSetGeometryAlgorithms/","title":"HexahedronSetGeometryAlgorithms","text":"<p>Hexahedron set geometry algorithms</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>QuadSetGeometryAlgorithms</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 tagMechanics  Tag of the Mechanical Object  Visualization showIndicesScale  Debug : scale for view topology indices  0.02 showPointIndices  Debug : view Point indices  0 showEdgeIndices  Debug : view Edge indices.  0 drawEdges  if true, draw the edges in the topology.  0 drawColorEdges  RGB code color used to draw edges.  0.4 1 0.3 1 showQuadIndices  Debug : view Quad indices  0 drawQuads  if true, draw the quads in the topology  0 drawColorQuads  RGB code color used to draw quads.  0 0.4 0.4 1 showHexaIndices  Debug : view Hexa indices  0 drawHexahedra  if true, draw the Hexahedron in the topology  0 drawScaleHexahedra  Scale of the hexahedra (between 0 and 1; if &lt;1.0, it produces gaps between the hexahedra)  1 drawColorHexahedra  RGB code color used to draw hexahedra.  1 0.5 0 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Topology/Container/Dynamic/HexahedronSetTopologyContainer/","title":"HexahedronSetTopologyContainer","text":"<p>Hexahedron set topology container</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>QuadSetTopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 edges  List of edge indices  checkConnexity  It true, will check the connexity of the mesh.  0 quads  List of quad indices  createQuadArray  Force the creation of a set of quads associated with the hexahedra  0 hexahedra  List of hexahedron indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/HexahedronSetTopologyModifier/","title":"HexahedronSetTopologyModifier","text":"<p>Hexahedron set topology modifier</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>QuadSetTopologyModifier</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 propagateToDOF   propagate changes to MEchanical object DOFs if true  1 removeIsolated  remove Isolated dof  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/MultilevelHexahedronSetTopologyContainer/","title":"MultilevelHexahedronSetTopologyContainer","text":"<p>Hexahedron set topology container</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>HexahedronSetTopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 edges  List of edge indices  checkConnexity  It true, will check the connexity of the mesh.  0 quads  List of quad indices  createQuadArray  Force the creation of a set of quads associated with the hexahedra  0 hexahedra  List of hexahedron indices  level  Number of resolution levels between the fine and coarse mesh  0 resolution  fine resolution  0 0 0 idxInRegularGrid  indices of the hexa in the grid.  coarseComponents  map between hexahedra and components - coarse  fineComponents  map between hexahedra and components - fine  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/PointSetGeometryAlgorithms/","title":"PointSetGeometryAlgorithms","text":"<p>Point set geometry algorithms</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>GeometryAlgorithms</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 tagMechanics  Tag of the Mechanical Object  Visualization showIndicesScale  Debug : scale for view topology indices  0.02 showPointIndices  Debug : view Point indices  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Topology/Container/Dynamic/PointSetTopologyContainer/","title":"PointSetTopologyContainer","text":"<p>Point set topology container</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>TopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/PointSetTopologyModifier/","title":"PointSetTopologyModifier","text":"<p>Point set topology modifier</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>TopologyModifier</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 propagateToDOF   propagate changes to MEchanical object DOFs if true  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/QuadSetGeometryAlgorithms/","title":"QuadSetGeometryAlgorithms","text":"<p>Quad set geometry algorithms</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>EdgeSetGeometryAlgorithms</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 tagMechanics  Tag of the Mechanical Object  Visualization showIndicesScale  Debug : scale for view topology indices  0.02 showPointIndices  Debug : view Point indices  0 showEdgeIndices  Debug : view Edge indices.  0 drawEdges  if true, draw the edges in the topology.  0 drawColorEdges  RGB code color used to draw edges.  0.4 1 0.3 1 showQuadIndices  Debug : view Quad indices  0 drawQuads  if true, draw the quads in the topology  0 drawColorQuads  RGB code color used to draw quads.  0 0.4 0.4 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Topology/Container/Dynamic/QuadSetTopologyContainer/","title":"QuadSetTopologyContainer","text":"<p>Quad set topology container</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>EdgeSetTopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 edges  List of edge indices  checkConnexity  It true, will check the connexity of the mesh.  0 quads  List of quad indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/QuadSetTopologyModifier/","title":"QuadSetTopologyModifier","text":"<p>Quad set topology modifier</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>EdgeSetTopologyModifier</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 propagateToDOF   propagate changes to MEchanical object DOFs if true  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/TetrahedronSetGeometryAlgorithms/","title":"TetrahedronSetGeometryAlgorithms","text":"<p>Tetrahedron set geometry algorithms</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>TriangleSetGeometryAlgorithms</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 tagMechanics  Tag of the Mechanical Object  recomputeTrianglesOrientation  if true, will recompute triangles orientation according to normals.  0 flipNormals  if true, will flip normal of the first triangle used to recompute triangle orientation.  0 Visualization showIndicesScale  Debug : scale for view topology indices  0.02 showPointIndices  Debug : view Point indices  0 showEdgeIndices  Debug : view Edge indices.  0 drawEdges  if true, draw the edges in the topology.  0 drawColorEdges  RGB code color used to draw edges.  0.4 1 0.3 1 showTriangleIndices  Debug : view Triangle indices  0 drawTriangles  if true, draw the triangles in the topology  0 drawColorTriangles  RGBA code color used to draw edges.  0.3 0.5 0.8 1 drawNormals  if true, draw the triangles in the topology  0 drawNormalLength  Fiber length visualisation.  10 showTetrahedraIndices  Debug : view Tetrahedrons indices  0 drawTetrahedra  if true, draw the tetrahedra in the topology  0 drawScaleTetrahedra  Scale of the terahedra (between 0 and 1; if &lt;1.0, it produces gaps between the tetrahedra)  1 drawColorTetrahedra  RGBA code color used to draw tetrahedra.  1 1 0 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Topology/Container/Dynamic/TetrahedronSetTopologyContainer/","title":"TetrahedronSetTopologyContainer","text":"<p>Tetrahedron set topology container</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>TriangleSetTopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 edges  List of edge indices  checkConnexity  It true, will check the connexity of the mesh.  0 triangles  List of triangle indices  createTriangleArray  Force the creation of a set of triangles associated with each tetrahedron  0 tetrahedra  List of tetrahedron indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/TetrahedronSetTopologyModifier/","title":"TetrahedronSetTopologyModifier","text":"<p>Tetrahedron set topology modifier</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>TriangleSetTopologyModifier</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 propagateToDOF   propagate changes to MEchanical object DOFs if true  1 list_Out  triangles with at least one null values.  removeIsolated  remove Isolated dof  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/TriangleSetGeometryAlgorithms/","title":"TriangleSetGeometryAlgorithms","text":"<p>Triangle set geometry algorithms</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>EdgeSetGeometryAlgorithms</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 tagMechanics  Tag of the Mechanical Object  recomputeTrianglesOrientation  if true, will recompute triangles orientation according to normals.  0 flipNormals  if true, will flip normal of the first triangle used to recompute triangle orientation.  0 Visualization showIndicesScale  Debug : scale for view topology indices  0.02 showPointIndices  Debug : view Point indices  0 showEdgeIndices  Debug : view Edge indices.  0 drawEdges  if true, draw the edges in the topology.  0 drawColorEdges  RGB code color used to draw edges.  0.4 1 0.3 1 showTriangleIndices  Debug : view Triangle indices  0 drawTriangles  if true, draw the triangles in the topology  0 drawColorTriangles  RGBA code color used to draw edges.  0.3 0.5 0.8 1 drawNormals  if true, draw the triangles in the topology  0 drawNormalLength  Fiber length visualisation.  10 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Topology/Container/Dynamic/TriangleSetTopologyContainer/","title":"TriangleSetTopologyContainer","text":"<p>Triangle set topology container</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>EdgeSetTopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 edges  List of edge indices  checkConnexity  It true, will check the connexity of the mesh.  0 triangles  List of triangle indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Dynamic/TriangleSetTopologyModifier/","title":"TriangleSetTopologyModifier","text":"<p>Triangle set topology modifier</p> <p>Target: <code>Sofa.Component.Topology.Container.Dynamic</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>EdgeSetTopologyModifier</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 propagateToDOF   propagate changes to MEchanical object DOFs if true  1 list_Out  triangles with at least one null values.  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Grid/CylinderGridTopology/","title":"CylinderGridTopology","text":"<p>Cylinder grid in 3D</p> <p>Target: <code>Sofa.Component.Topology.Container.Grid</code></p> <p>namespace: <code>sofa::component::topology::container::grid</code></p> <p>parents: </p> <ul> <li><code>GridTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  n  grid resolution. (default = 2 2 2)  2 2 2 computeHexaList  put true if the list of Hexahedra is needed during init (default=true)  1 computeQuadList  put true if the list of Quad is needed during init (default=true)  1 computeTriangleList  put true if the list of triangle is needed during init (default=true)  1 computeEdgeList  put true if the list of Lines is needed during init (default=true)  1 computePointList  put true if the list of Points is needed during init (default=true)  1 createTexCoords  If set to true, virtual texture coordinates will be generated using 3D interpolation (default=false).  0 center  Center of the cylinder  0 0 0 axis  Main direction of the cylinder  0 0 1 radius  Radius of the cylinder  1 length  Length of the cylinder along its axis  1 Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Grid/CylinderGridTopology/#examples","title":"Examples","text":"<p>Component/Topology/Container/Grid/CylinderGridTopology.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 0 100\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [CylinderGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showVisual\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"Reference\"&gt;\n        &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/truthcylinder1-bent.obj\" scale=\"0.95\" handleSeams=\"1\" /&gt;\n        &lt;OglModel src=\"@meshLoader_0\" dx=\"20\" dy=\"17\" dz=\"0\" color=\"green\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"CylinderFEMTetra\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"0.000001\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject dx=\"-10\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;CylinderGridTopology nx=\"5\" ny=\"5\" nz=\"20\" length=\"35.56\" radius=\"3.75\" axis=\"0 1 0\" /&gt;\n        &lt;BoxConstraint box=\"-14 -0.1 -4 -6 0.1 4\" fixAll=\"0\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.3\" method=\"polar\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"CylinderFEM\"&gt;\n        &lt;EulerImplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"0.000001\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;CylinderGridTopology nx=\"5\" ny=\"5\" nz=\"20\" length=\"35.56\" radius=\"3.75\" axis=\"0 1 0\" /&gt;\n        &lt;BoxConstraint box=\"-4 -0.1 -4 4 0.1 4\" fixAll=\"0\" /&gt;\n        &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"CylinderSpring\"&gt;\n        &lt;EulerImplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"0.000001\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject dx=\"10\" /&gt;\n        &lt;UniformMass totalMass=\"15\" /&gt;\n        &lt;CylinderGridTopology nx=\"5\" ny=\"5\" nz=\"20\" length=\"35.56\" radius=\"3.75\" axis=\"0 1 0\" /&gt;\n        &lt;BoxConstraint box=\"6 -0.1 -4 14 0.1 4\" fixAll=\"0\" /&gt;\n        &lt;MeshSpringForceField name=\"FEM\" stiffness=\"1000\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 0 100\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showVisual\")\n    root.addObject('DefaultAnimationLoop')\n\n    Reference = root.addChild('Reference')\n    Reference.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/truthcylinder1-bent.obj\", scale=\"0.95\", handleSeams=\"1\")\n    Reference.addObject('OglModel', src=\"@meshLoader_0\", dx=\"20\", dy=\"17\", dz=\"0\", color=\"green\")\n\n    CylinderFEMTetra = root.addChild('CylinderFEMTetra')\n    CylinderFEMTetra.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    CylinderFEMTetra.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"0.000001\", threshold=\"1e-5\")\n    CylinderFEMTetra.addObject('MechanicalObject', dx=\"-10\")\n    CylinderFEMTetra.addObject('UniformMass', totalMass=\"15\")\n    CylinderFEMTetra.addObject('CylinderGridTopology', nx=\"5\", ny=\"5\", nz=\"20\", length=\"35.56\", radius=\"3.75\", axis=\"0 1 0\")\n    CylinderFEMTetra.addObject('BoxConstraint', box=\"-14 -0.1 -4 -6 0.1 4\", fixAll=\"0\")\n    CylinderFEMTetra.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.3\", method=\"polar\")\n\n    CylinderFEM = root.addChild('CylinderFEM')\n    CylinderFEM.addObject('EulerImplicitSolver')\n    CylinderFEM.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"0.000001\", threshold=\"1e-5\")\n    CylinderFEM.addObject('MechanicalObject')\n    CylinderFEM.addObject('UniformMass', totalMass=\"15\")\n    CylinderFEM.addObject('CylinderGridTopology', nx=\"5\", ny=\"5\", nz=\"20\", length=\"35.56\", radius=\"3.75\", axis=\"0 1 0\")\n    CylinderFEM.addObject('BoxConstraint', box=\"-4 -0.1 -4 4 0.1 4\", fixAll=\"0\")\n    CylinderFEM.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.3\", method=\"large\")\n\n    CylinderSpring = root.addChild('CylinderSpring')\n    CylinderSpring.addObject('EulerImplicitSolver')\n    CylinderSpring.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"0.000001\", threshold=\"1e-5\")\n    CylinderSpring.addObject('MechanicalObject', dx=\"10\")\n    CylinderSpring.addObject('UniformMass', totalMass=\"15\")\n    CylinderSpring.addObject('CylinderGridTopology', nx=\"5\", ny=\"5\", nz=\"20\", length=\"35.56\", radius=\"3.75\", axis=\"0 1 0\")\n    CylinderSpring.addObject('BoxConstraint', box=\"6 -0.1 -4 14 0.1 4\", fixAll=\"0\")\n    CylinderSpring.addObject('MeshSpringForceField', name=\"FEM\", stiffness=\"1000\")\n</code></pre>"},{"location":"30_Components/Topology/Container/Grid/GridTopology/","title":"GridTopology","text":"<p>Base class fo a regular grid in 3D</p> <p>Target: <code>Sofa.Component.Topology.Container.Grid</code></p> <p>namespace: <code>sofa::component::topology::container::grid</code></p> <p>parents: </p> <ul> <li><code>MeshTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  n  grid resolution. (default = 2 2 2)  2 2 2 computeHexaList  put true if the list of Hexahedra is needed during init (default=true)  1 computeQuadList  put true if the list of Quad is needed during init (default=true)  1 computeTriangleList  put true if the list of triangle is needed during init (default=true)  1 computeEdgeList  put true if the list of Lines is needed during init (default=true)  1 computePointList  put true if the list of Points is needed during init (default=true)  1 createTexCoords  If set to true, virtual texture coordinates will be generated using 3D interpolation (default=false).  0 Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Grid/RegularGridTopology/","title":"RegularGridTopology","text":"<p>Regular grid in 3D</p> <p>Target: <code>Sofa.Component.Topology.Container.Grid</code></p> <p>namespace: <code>sofa::component::topology::container::grid</code></p> <p>parents: </p> <ul> <li><code>GridTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  n  grid resolution. (default = 2 2 2)  2 2 2 computeHexaList  put true if the list of Hexahedra is needed during init (default=true)  1 computeQuadList  put true if the list of Quad is needed during init (default=true)  1 computeTriangleList  put true if the list of triangle is needed during init (default=true)  1 computeEdgeList  put true if the list of Lines is needed during init (default=true)  1 computePointList  put true if the list of Points is needed during init (default=true)  1 createTexCoords  If set to true, virtual texture coordinates will be generated using 3D interpolation (default=false).  0 min  Min end of the diagonal  0 0 0 max  Max end of the diagonal  1 1 1 p0  Offset all the grid points  0 0 0 cellWidth  if &gt; 0 : dimension of each cell in the created grid. Otherwise, the cell size is computed based on min, max, and resolution n.  0 Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Grid/RegularGridTopology/#examples","title":"Examples","text":"<p>Component/Topology/Container/Grid/RegularGridTopology_TrianglesMesh.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 -9 5\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\"/&gt;\n        &lt;CGImplicit iterations=\"40\" tolerance=\"1e-6\" threshold=\"1e-10\" /&gt;\n\n        &lt;RegularGridTopology name=\"grid\" nx=\"10\" ny=\"10\" nz=\"1\" xmin=\"-5\" xmax=\"5\" ymin=\"-5\" ymax=\"5\" zmin=\"0\" zmax=\"0\"/&gt;\n\n        &lt;MechanicalObject src=\"@grid\" scale=\"10\" /&gt;\n\n        &lt;TriangleSetTopologyContainer  name=\"Container\" src=\"@grid\"/&gt;\n        &lt;TriangleSetTopologyModifier   name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" drawEdges=\"1\"/&gt;\n\n        &lt;DiagonalMass massDensity=\"0.15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1 8 9 10 19\" /&gt;\n\n\n        &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"60\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"300\" damping=\"1.0\" /&gt;\n\n        &lt;TriangleCollisionModel /&gt;\n\n        &lt;Node &gt;\n          &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n          &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 -9 5\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline')\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\")\n    SquareGravity.addObject('CGImplicit', iterations=\"40\", tolerance=\"1e-6\", threshold=\"1e-10\")\n    SquareGravity.addObject('RegularGridTopology', name=\"grid\", nx=\"10\", ny=\"10\", nz=\"1\", xmin=\"-5\", xmax=\"5\", ymin=\"-5\", ymax=\"5\", zmin=\"0\", zmax=\"0\")\n    SquareGravity.addObject('MechanicalObject', src=\"@grid\", scale=\"10\")\n    SquareGravity.addObject('TriangleSetTopologyContainer', name=\"Container\", src=\"@grid\")\n    SquareGravity.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\", drawEdges=\"1\")\n    SquareGravity.addObject('DiagonalMass', massDensity=\"0.15\")\n    SquareGravity.addObject('FixedProjectiveConstraint', indices=\"0 1 8 9 10 19\")\n    SquareGravity.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"60\", poissonRatio=\"0.3\", method=\"large\")\n    SquareGravity.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"300\", damping=\"1.0\")\n    SquareGravity.addObject('TriangleCollisionModel')\n\n    SquareGravity = SquareGravity.addChild('SquareGravity')\n    SquareGravity.addObject('OglModel', name=\"Visual\", color=\"red\")\n    SquareGravity.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre> <p>Component/Topology/Container/Grid/RegularGridTopology_dimension.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.01\"&gt;\n    &lt;Node name=\"RequiredPlugins\" &gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField TriangularFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RegularGridSpringForceField TriangularBendingSprings] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2QuadTopologicalMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;/Node&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;CollisionPipeline name=\"default21\" verbose=\"0\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default22\" response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n\n    &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"0\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver\" iterations=\"25\" tolerance=\"1e-09\" threshold=\"1e-09\" /&gt;\n\n\n    &lt;Node name=\"Cube\" gravity=\"0 -9.81 0\"&gt;\n        &lt;RegularGridTopology name=\"grid\" n=\"6 6 6\" min=\"-10 -10 -10\" max=\"10 10 10\" p0=\"-30 -10 -10\" computeHexaList=\"1\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"Hexa\" /&gt;\n        &lt;UniformMass template=\"Vec3\" name=\"default25\" vertexMass=\"10\" /&gt;\n        &lt;HexahedronFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"500\" /&gt;\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-31 9 -11 -9 11 11\" drawSize=\"0\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default27\" indices=\"@box_roi.indices\" drawSize=\"0\" /&gt;\n\n        &lt;Node name=\"Q\"&gt;\n            &lt;QuadSetTopologyContainer  name=\"Container\" /&gt;\n            &lt;QuadSetTopologyModifier   name=\"Modifier\" /&gt;\n            &lt;QuadSetGeometryAlgorithms name=\"GeomAlgo\"   template=\"Vec3\" /&gt;\n            &lt;Hexa2QuadTopologicalMapping input=\"@../grid\" output=\"@Container\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"Visual\" color=\"blue\" quads=\"@../Container.quads\" /&gt;\n                &lt;IdentityMapping input=\"@../../Hexa\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"Square\" gravity=\"0 -9.81 0\"&gt;\n        &lt;RegularGridTopology name=\"grid\" n=\"6 1 6\" min=\"-10 -10 -10\" max=\"10 10 10\" p0=\"-6 10 -10\" computeHexaList=\"0\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"Tri\" /&gt;\n        &lt;UniformMass template=\"Vec3\" name=\"default25\" vertexMass=\"10\" /&gt;\n        &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"600\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"300\" damping=\"1.0\" /&gt;\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-7 9 -11 17 11 -9\" drawBoxes=\"0\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default27\" indices=\"@box_roi.indices\" drawSize=\"0\" /&gt;\n\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"blue\" triangles=\"@../grid.triangles\" /&gt;\n            &lt;IdentityMapping input=\"@../Tri\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n\n    &lt;Node name=\"Line\" gravity=\"0 -9.81 0\"&gt;\n        &lt;RegularGridTopology name=\"grid\" n=\"1 1 6\" min=\"-10 -10 -10\" max=\"10 10 10\" p0=\"18 10 -10\" computeHexaList=\"0\"/&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"Edge\" /&gt;\n        &lt;UniformMass template=\"Vec3\" name=\"default25\" vertexMass=\"10\" /&gt;\n\n        &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"300\" damping=\"2\" /&gt;\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"17 9 -11 20 11 -9\" drawBoxes=\"0\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default27\" indices=\"@box_roi.indices\" drawSize=\"0\" /&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"white\" edges=\"@../grid.edges\" /&gt;\n            &lt;IdentityMapping input=\"@../Edge\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.01\")\n\n    RequiredPlugins = root.addChild('RequiredPlugins')\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', name=\"default21\", verbose=\"0\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"default22\", response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver\", iterations=\"25\", tolerance=\"1e-09\", threshold=\"1e-09\")\n\n    Cube = root.addChild('Cube', gravity=\"0 -9.81 0\")\n    Cube.addObject('RegularGridTopology', name=\"grid\", n=\"6 6 6\", min=\"-10 -10 -10\", max=\"10 10 10\", p0=\"-30 -10 -10\", computeHexaList=\"1\")\n    Cube.addObject('MechanicalObject', template=\"Vec3\", name=\"Hexa\")\n    Cube.addObject('UniformMass', template=\"Vec3\", name=\"default25\", vertexMass=\"10\")\n    Cube.addObject('HexahedronFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"500\")\n    Cube.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-31 9 -11 -9 11 11\", drawSize=\"0\")\n    Cube.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default27\", indices=\"@box_roi.indices\", drawSize=\"0\")\n\n    Q = Cube.addChild('Q')\n    Q.addObject('QuadSetTopologyContainer', name=\"Container\")\n    Q.addObject('QuadSetTopologyModifier', name=\"Modifier\")\n    Q.addObject('QuadSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    Q.addObject('Hexa2QuadTopologicalMapping', input=\"@../grid\", output=\"@Container\")\n    Q.addObject('TriangleCollisionModel')\n\n    Visu = Q.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"blue\", quads=\"@../Container.quads\")\n    Visu.addObject('IdentityMapping', input=\"@../../Hexa\", output=\"@Visual\")\n\n    Square = root.addChild('Square', gravity=\"0 -9.81 0\")\n    Square.addObject('RegularGridTopology', name=\"grid\", n=\"6 1 6\", min=\"-10 -10 -10\", max=\"10 10 10\", p0=\"-6 10 -10\", computeHexaList=\"0\")\n    Square.addObject('MechanicalObject', template=\"Vec3\", name=\"Tri\")\n    Square.addObject('UniformMass', template=\"Vec3\", name=\"default25\", vertexMass=\"10\")\n    Square.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"600\", poissonRatio=\"0.3\", method=\"large\")\n    Square.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"300\", damping=\"1.0\")\n    Square.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-7 9 -11 17 11 -9\", drawBoxes=\"0\")\n    Square.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default27\", indices=\"@box_roi.indices\", drawSize=\"0\")\n    Square.addObject('TriangleCollisionModel')\n\n    Visu = Square.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"blue\", triangles=\"@../grid.triangles\")\n    Visu.addObject('IdentityMapping', input=\"@../Tri\", output=\"@Visual\")\n\n    Line = root.addChild('Line', gravity=\"0 -9.81 0\")\n    Line.addObject('RegularGridTopology', name=\"grid\", n=\"1 1 6\", min=\"-10 -10 -10\", max=\"10 10 10\", p0=\"18 10 -10\", computeHexaList=\"0\")\n    Line.addObject('MechanicalObject', template=\"Vec3\", name=\"Edge\")\n    Line.addObject('UniformMass', template=\"Vec3\", name=\"default25\", vertexMass=\"10\")\n    Line.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"300\", damping=\"2\")\n    Line.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"17 9 -11 20 11 -9\", drawBoxes=\"0\")\n    Line.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default27\", indices=\"@box_roi.indices\", drawSize=\"0\")\n\n    Visu = Line.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"white\", edges=\"@../grid.edges\")\n    Visu.addObject('IdentityMapping', input=\"@../Edge\", output=\"@Visual\")\n</code></pre> <p>Component/Topology/Container/Grid/RegularGridTopology.scn</p> XMLPython <pre><code>&lt;!-- RegularGrid examples --&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [RegularGridSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DiscreteIntersection/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"LiverFFD-lowres\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-7\" threshold=\"1e-7\"/&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass totalMass=\"100.0\" /&gt;\n        &lt;RegularGridTopology nx=\"4\" ny=\"3\" nz=\"3\" xmin=\"-10.25\" xmax=\"-3.25\" ymin=\"0.25\" ymax=\"5.25\" zmin=\"-2\" zmax=\"3\" /&gt;\n        &lt;BoxConstraint box=\"-8.5 0 -2.5 -5 3 2\" /&gt;\n        &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"400\" damping=\"4\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" translation=\"-5 0 0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"red\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Collision Surface\"&gt;\n        &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject position=\"@[-1].position\" translation=\"-5 0 0\" /&gt;\n            &lt;SphereCollisionModel name=\"Surf\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@.\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"LiverFFD-hires\"&gt;\n        &lt;EulerImplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-7\" threshold=\"1e-7\"/&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass totalMass=\"100.0\" /&gt;\n        &lt;RegularGridTopology nx=\"8\" ny=\"6\" nz=\"6\" xmin=\"-0.25\" xmax=\"7.25\" ymin=\"0.25\" ymax=\"5.25\" zmin=\"-2\" zmax=\"3\" /&gt;\n        &lt;BoxConstraint box=\"2.5 0 -2.5 5 3 2\" /&gt;\n        &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"100\" damping=\"4\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/liver-smooth.obj\" translation=\"5 0 0\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"red\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Collision Surface\"&gt;\n        &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject position=\"@[-1].position\" translation=\"5 0 0\" /&gt;\n            &lt;SphereCollisionModel name=\"Surf\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@.\" /&gt;\n       &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    LiverFFD-lowres = root.addChild('LiverFFD-lowres')\n    LiverFFD-lowres.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    LiverFFD-lowres.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-7\", threshold=\"1e-7\")\n    LiverFFD-lowres.addObject('MechanicalObject')\n    LiverFFD-lowres.addObject('UniformMass', totalMass=\"100.0\")\n    LiverFFD-lowres.addObject('RegularGridTopology', nx=\"4\", ny=\"3\", nz=\"3\", xmin=\"-10.25\", xmax=\"-3.25\", ymin=\"0.25\", ymax=\"5.25\", zmin=\"-2\", zmax=\"3\")\n    LiverFFD-lowres.addObject('BoxConstraint', box=\"-8.5 0 -2.5 -5 3 2\")\n    LiverFFD-lowres.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"400\", damping=\"4\")\n\n    Visu = LiverFFD-lowres.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver-smooth.obj\", translation=\"-5 0 0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"red\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Collision Surface = LiverFFD-lowres.addChild('Collision Surface')\n    Collision Surface.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Collision Surface.addObject('MechanicalObject', position=\"@[-1].position\", translation=\"-5 0 0\")\n    Collision Surface.addObject('SphereCollisionModel', name=\"Surf\", listRadius=\"@[-2].listRadius\")\n    Collision Surface.addObject('BarycentricMapping', input=\"@..\", output=\"@.\")\n\n    LiverFFD-hires = root.addChild('LiverFFD-hires')\n    LiverFFD-hires.addObject('EulerImplicitSolver')\n    LiverFFD-hires.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-7\", threshold=\"1e-7\")\n    LiverFFD-hires.addObject('MechanicalObject')\n    LiverFFD-hires.addObject('UniformMass', totalMass=\"100.0\")\n    LiverFFD-hires.addObject('RegularGridTopology', nx=\"8\", ny=\"6\", nz=\"6\", xmin=\"-0.25\", xmax=\"7.25\", ymin=\"0.25\", ymax=\"5.25\", zmin=\"-2\", zmax=\"3\")\n    LiverFFD-hires.addObject('BoxConstraint', box=\"2.5 0 -2.5 5 3 2\")\n    LiverFFD-hires.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"100\", damping=\"4\")\n\n    Visu = LiverFFD-hires.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/liver-smooth.obj\", translation=\"5 0 0\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"red\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Collision Surface = LiverFFD-hires.addChild('Collision Surface')\n    Collision Surface.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Collision Surface.addObject('MechanicalObject', position=\"@[-1].position\", translation=\"5 0 0\")\n    Collision Surface.addObject('SphereCollisionModel', name=\"Surf\", listRadius=\"@[-2].listRadius\")\n    Collision Surface.addObject('BarycentricMapping', input=\"@..\", output=\"@.\")\n</code></pre>"},{"location":"30_Components/Topology/Container/Grid/SparseGridMultipleTopology/","title":"SparseGridMultipleTopology","text":"<p>Sparse grid in 3D</p> <p>Target: <code>Sofa.Component.Topology.Container.Grid</code></p> <p>namespace: <code>sofa::component::topology::container::grid</code></p> <p>parents: </p> <ul> <li><code>SparseGridRamificationTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  fillWeighted  Is quantity of matter inside a cell taken into account? (.5 for boundary, 1 for inside)  1 onlyInsideCells  Select only inside cells (exclude boundary cells)  0 n  grid resolution  2 2 2 min  Min  0 0 0 max  Max  0 0 0 cellWidth  if &gt; 0 : dimension of each cell in the created grid  0 nbVirtualFinerLevels  create virtual (not in the animation tree) finer sparse grids in order to dispose of finest information (usefull to compute better mechanical properties for example)  0 dataResolution  Dimension of the voxel File  0 0 0 voxelSize  Dimension of one voxel  1 1 1 marchingCubeStep  Step of the Marching Cube algorithm  1 convolutionSize  Dimension of the convolution kernel to smooth the voxels. 0 if no smoothing is required.  0 facets  Input mesh facets  finestConnectivity  Test for connectivity at the finest level? (more precise but slower by testing all intersections between the model mesh and the faces between boundary cubes)  1 fileTopologies  All topology filenames  [] stiffnessCoefs  A stiffness coefficient for each topology filename  massCoefs  A mass coefficient for each topology filename  computeRamifications  Are ramifications wanted?  1 erasePreviousCoef  Does a new stiffness/mass coefficient replace the previous or blend half/half with it?  0 Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Grid/SparseGridMultipleTopology/#examples","title":"Examples","text":"<p>Component/Topology/Container/Grid/SparseGridMultipleTopology.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 0 0\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridMultipleTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.3\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"frog with several stiffnesses\"&gt;\n        &lt;SparseGridMultipleTopology n=\"9 9 7\" fileTopology=\"mesh/frog_body.obj\" fileTopologies=\"mesh/frog_body.obj mesh/frog_eyes.obj mesh/frog_eyebrows.obj mesh/frog_lips.obj\" stiffnessCoefs=\"10 100 100 .2\" massCoefs=\"1 1 1 1\" nbVirtualFinerLevels=\"1\" /&gt;\n        &lt;!-- body=soft, lips=very soft, eyes=very stiff--&gt;\n        &lt;!-- the order is important: included elements must appear after (lips is included in boby so it appears after)--&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"10\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"1\" /&gt;\n        &lt;HexahedronFEMForceField youngModulus=\"3000\" poissonRatio=\"0.3\" method=\"large\" updateStiffnessMatrix=\"false\" printLog=\"0\" /&gt;\n        &lt;Node name=\"Visu1\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/frog_body.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualBody\" src=\"@meshLoader_0\" normals=\"0\" color=\"0.17 0.70 0.05\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualBody\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Visu2\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/frog_eyes.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualEyes\" src=\"@meshLoader_2\" normals=\"0\" color=\"0.04 0.19 0.52\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualEyes\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Visu3\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/frog_eyebrows.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualEyebrows\" src=\"@meshLoader_3\" normals=\"0\" color=\"0.44 0.43 0.00\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualEyebrows\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Visu4\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/frog_lips.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"VisualLips\" src=\"@meshLoader_1\" normals=\"0\" color=\"0.47 0.25 0.03\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@VisualLips\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/frog-push25.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;LineCollisionModel /&gt;\n            &lt;PointCollisionModel /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 0\", dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.3\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n    root.addObject('DefaultAnimationLoop')\n\n    frog with several stiffnesses = root.addChild('frog with several stiffnesses')\n    frog with several stiffnesses.addObject('SparseGridMultipleTopology', n=\"9 9 7\", fileTopology=\"mesh/frog_body.obj\", fileTopologies=\"mesh/frog_body.obj mesh/frog_eyes.obj mesh/frog_eyebrows.obj mesh/frog_lips.obj\", stiffnessCoefs=\"10 100 100 .2\", massCoefs=\"1 1 1 1\", nbVirtualFinerLevels=\"1\")\n    frog with several stiffnesses.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    frog with several stiffnesses.addObject('CGLinearSolver', iterations=\"10\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    frog with several stiffnesses.addObject('MechanicalObject')\n    frog with several stiffnesses.addObject('UniformMass', vertexMass=\"1\")\n    frog with several stiffnesses.addObject('HexahedronFEMForceField', youngModulus=\"3000\", poissonRatio=\"0.3\", method=\"large\", updateStiffnessMatrix=\"false\", printLog=\"0\")\n\n    Visu1 = frog with several stiffnesses.addChild('Visu1')\n    Visu1.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/frog_body.obj\", handleSeams=\"1\")\n    Visu1.addObject('OglModel', name=\"VisualBody\", src=\"@meshLoader_0\", normals=\"0\", color=\"0.17 0.70 0.05\")\n    Visu1.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualBody\")\n\n    Visu2 = frog with several stiffnesses.addChild('Visu2')\n    Visu2.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/frog_eyes.obj\", handleSeams=\"1\")\n    Visu2.addObject('OglModel', name=\"VisualEyes\", src=\"@meshLoader_2\", normals=\"0\", color=\"0.04 0.19 0.52\")\n    Visu2.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualEyes\")\n\n    Visu3 = frog with several stiffnesses.addChild('Visu3')\n    Visu3.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/frog_eyebrows.obj\", handleSeams=\"1\")\n    Visu3.addObject('OglModel', name=\"VisualEyebrows\", src=\"@meshLoader_3\", normals=\"0\", color=\"0.44 0.43 0.00\")\n    Visu3.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualEyebrows\")\n\n    Visu4 = frog with several stiffnesses.addChild('Visu4')\n    Visu4.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/frog_lips.obj\", handleSeams=\"1\")\n    Visu4.addObject('OglModel', name=\"VisualLips\", src=\"@meshLoader_1\", normals=\"0\", color=\"0.47 0.25 0.03\")\n    Visu4.addObject('BarycentricMapping', input=\"@..\", output=\"@VisualLips\")\n\n    Surf = frog with several stiffnesses.addChild('Surf')\n    Surf.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/frog-push25.obj\")\n    Surf.addObject('MeshTopology', src=\"@loader\")\n    Surf.addObject('MechanicalObject', src=\"@loader\")\n    Surf.addObject('TriangleCollisionModel')\n    Surf.addObject('LineCollisionModel')\n    Surf.addObject('PointCollisionModel')\n    Surf.addObject('BarycentricMapping')\n</code></pre>"},{"location":"30_Components/Topology/Container/Grid/SparseGridRamificationTopology/","title":"SparseGridRamificationTopology","text":"<p>Sparse grid in 3D (modified)</p> <p>Target: <code>Sofa.Component.Topology.Container.Grid</code></p> <p>namespace: <code>sofa::component::topology::container::grid</code></p> <p>parents: </p> <ul> <li><code>SparseGridTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  fillWeighted  Is quantity of matter inside a cell taken into account? (.5 for boundary, 1 for inside)  1 onlyInsideCells  Select only inside cells (exclude boundary cells)  0 n  grid resolution  2 2 2 min  Min  0 0 0 max  Max  0 0 0 cellWidth  if &gt; 0 : dimension of each cell in the created grid  0 nbVirtualFinerLevels  create virtual (not in the animation tree) finer sparse grids in order to dispose of finest information (usefull to compute better mechanical properties for example)  0 dataResolution  Dimension of the voxel File  0 0 0 voxelSize  Dimension of one voxel  1 1 1 marchingCubeStep  Step of the Marching Cube algorithm  1 convolutionSize  Dimension of the convolution kernel to smooth the voxels. 0 if no smoothing is required.  0 facets  Input mesh facets  finestConnectivity  Test for connectivity at the finest level? (more precise but slower by testing all intersections between the model mesh and the faces between boundary cubes)  1 Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Grid/SparseGridRamificationTopology/#examples","title":"Examples","text":"<p>Component/Topology/Container/Grid/SparseGridRamificationTopology.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" gravity=\"0 0 -9\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceFieldAndMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridRamificationTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.3\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"UniformC Rough\"&gt;\n        &lt;SparseGridRamificationTopology n=\"5 2 2\" fileTopology=\"mesh/c.obj\" nbVirtualFinerLevels=\"3\" finestConnectivity=\"0\" /&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"10\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;HexahedronFEMForceFieldAndMass youngModulus=\"100000\" poissonRatio=\"0.3\" method=\"large\" density=\"3\" updateStiffnessMatrix=\"false\" printLog=\"0\" /&gt;\n        &lt;BoxConstraint box=\"-16 -10 -3 -14 10 3\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/c.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"blue\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/c.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;PointCollisionModel /&gt;\n            &lt;LineCollisionModel /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"UniformC\"&gt;\n        &lt;SparseGridRamificationTopology n=\"5 2 2\" fileTopology=\"mesh/c.obj\" nbVirtualFinerLevels=\"3\" finestConnectivity=\"0\" /&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"10\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject dx=\"40\" /&gt;\n        &lt;HexahedronFEMForceFieldAndMass youngModulus=\"100000\" poissonRatio=\"0.3\" method=\"large\" density=\"3\" updateStiffnessMatrix=\"false\" printLog=\"0\" /&gt;\n        &lt;BoxConstraint box=\"24 -10 -3 26 10 3\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/c.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"red\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/c.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;PointCollisionModel /&gt;\n            &lt;LineCollisionModel /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"UniformC and finestConnectivity\"&gt;\n        &lt;SparseGridRamificationTopology n=\"5 3 3\" fileTopology=\"mesh/c.obj\" nbVirtualFinerLevels=\"0\" finestConnectivity=\"1\" /&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"10\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject dx=\"80\" /&gt;\n        &lt;HexahedronFEMForceFieldAndMass youngModulus=\"100000\" poissonRatio=\"0.3\" method=\"large\" density=\"3\" updateStiffnessMatrix=\"false\" printLog=\"0\" /&gt;\n        &lt;BoxConstraint box=\"64 -10 -3 66 10 3\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/c.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"yellow\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/c.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;PointCollisionModel /&gt;\n            &lt;LineCollisionModel /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 -9\", dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.3\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    UniformC Rough = root.addChild('UniformC Rough')\n    UniformC Rough.addObject('SparseGridRamificationTopology', n=\"5 2 2\", fileTopology=\"mesh/c.obj\", nbVirtualFinerLevels=\"3\", finestConnectivity=\"0\")\n    UniformC Rough.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    UniformC Rough.addObject('CGLinearSolver', iterations=\"10\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    UniformC Rough.addObject('MechanicalObject')\n    UniformC Rough.addObject('HexahedronFEMForceFieldAndMass', youngModulus=\"100000\", poissonRatio=\"0.3\", method=\"large\", density=\"3\", updateStiffnessMatrix=\"false\", printLog=\"0\")\n    UniformC Rough.addObject('BoxConstraint', box=\"-16 -10 -3 -14 10 3\")\n\n    Visu = UniformC Rough.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/c.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"blue\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf = UniformC Rough.addChild('Surf')\n    Surf.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/c.obj\")\n    Surf.addObject('MeshTopology', src=\"@loader\")\n    Surf.addObject('MechanicalObject', src=\"@loader\")\n    Surf.addObject('TriangleCollisionModel')\n    Surf.addObject('PointCollisionModel')\n    Surf.addObject('LineCollisionModel')\n    Surf.addObject('BarycentricMapping')\n\n    UniformC = root.addChild('UniformC')\n    UniformC.addObject('SparseGridRamificationTopology', n=\"5 2 2\", fileTopology=\"mesh/c.obj\", nbVirtualFinerLevels=\"3\", finestConnectivity=\"0\")\n    UniformC.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    UniformC.addObject('CGLinearSolver', iterations=\"10\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    UniformC.addObject('MechanicalObject', dx=\"40\")\n    UniformC.addObject('HexahedronFEMForceFieldAndMass', youngModulus=\"100000\", poissonRatio=\"0.3\", method=\"large\", density=\"3\", updateStiffnessMatrix=\"false\", printLog=\"0\")\n    UniformC.addObject('BoxConstraint', box=\"24 -10 -3 26 10 3\")\n\n    Visu = UniformC.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/c.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"red\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf = UniformC.addChild('Surf')\n    Surf.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/c.obj\")\n    Surf.addObject('MeshTopology', src=\"@loader\")\n    Surf.addObject('MechanicalObject', src=\"@loader\")\n    Surf.addObject('TriangleCollisionModel')\n    Surf.addObject('PointCollisionModel')\n    Surf.addObject('LineCollisionModel')\n    Surf.addObject('BarycentricMapping')\n\n    UniformC and finestConnectivity = root.addChild('UniformC and finestConnectivity')\n    UniformC and finestConnectivity.addObject('SparseGridRamificationTopology', n=\"5 3 3\", fileTopology=\"mesh/c.obj\", nbVirtualFinerLevels=\"0\", finestConnectivity=\"1\")\n    UniformC and finestConnectivity.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    UniformC and finestConnectivity.addObject('CGLinearSolver', iterations=\"10\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    UniformC and finestConnectivity.addObject('MechanicalObject', dx=\"80\")\n    UniformC and finestConnectivity.addObject('HexahedronFEMForceFieldAndMass', youngModulus=\"100000\", poissonRatio=\"0.3\", method=\"large\", density=\"3\", updateStiffnessMatrix=\"false\", printLog=\"0\")\n    UniformC and finestConnectivity.addObject('BoxConstraint', box=\"64 -10 -3 66 10 3\")\n\n    Visu = UniformC and finestConnectivity.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/c.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf = UniformC and finestConnectivity.addChild('Surf')\n    Surf.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/c.obj\")\n    Surf.addObject('MeshTopology', src=\"@loader\")\n    Surf.addObject('MechanicalObject', src=\"@loader\")\n    Surf.addObject('TriangleCollisionModel')\n    Surf.addObject('PointCollisionModel')\n    Surf.addObject('LineCollisionModel')\n    Surf.addObject('BarycentricMapping')\n</code></pre>"},{"location":"30_Components/Topology/Container/Grid/SparseGridTopology/","title":"SparseGridTopology","text":"<p>Sparse grid in 3D</p> <p>Target: <code>Sofa.Component.Topology.Container.Grid</code></p> <p>namespace: <code>sofa::component::topology::container::grid</code></p> <p>parents: </p> <ul> <li><code>MeshTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  fillWeighted  Is quantity of matter inside a cell taken into account? (.5 for boundary, 1 for inside)  1 onlyInsideCells  Select only inside cells (exclude boundary cells)  0 n  grid resolution  2 2 2 min  Min  0 0 0 max  Max  0 0 0 cellWidth  if &gt; 0 : dimension of each cell in the created grid  0 nbVirtualFinerLevels  create virtual (not in the animation tree) finer sparse grids in order to dispose of finest information (usefull to compute better mechanical properties for example)  0 dataResolution  Dimension of the voxel File  0 0 0 voxelSize  Dimension of one voxel  1 1 1 marchingCubeStep  Step of the Marching Cube algorithm  1 convolutionSize  Dimension of the convolution kernel to smooth the voxels. 0 if no smoothing is required.  0 facets  Input mesh facets  Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Grid/SparseGridTopology/#examples","title":"Examples","text":"<p>Component/Topology/Container/Grid/SparseGridTopology.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;!-- SparseGrid examples --&gt;\n&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 -9 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showVisual\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"Response\"/&gt;\n    &lt;DiscreteIntersection/&gt;\n\n    &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/dragon.obj\" /&gt;\n\n    &lt;Node name=\"DragonCoarse\"&gt;\n        &lt;SparseGridTopology n=\"6 5 4\" fileTopology=\"mesh/dragon.obj\" /&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass vertexMass=\"0.5\" /&gt;\n        &lt;MeshSpringForceField name=\"Springs\" stiffness=\"500\" damping=\"10\" /&gt;\n        &lt;BoxConstraint box=\"10 -10 -6 12 10 6\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" src=\"@../../loader\" color=\"blue\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n        &lt;SphereLoader filename=\"mesh/dragon.sph\" /&gt;\n            &lt;MechanicalObject position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"DragonMiddle\"&gt;\n        &lt;SparseGridTopology n=\"12 9 6\" fileTopology=\"mesh/dragon.obj\" /&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject dz=\"15\" /&gt;\n        &lt;UniformMass vertexMass=\"0.5\" /&gt;\n        &lt;MeshSpringForceField name=\"Springs\" stiffness=\"500\" damping=\"10\" /&gt;\n        &lt;BoxConstraint box=\"10 -10 10 12 10 22\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" src=\"@../../loader\" color=\"white\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n        &lt;SphereLoader filename=\"mesh/dragon.sph\" /&gt;\n            &lt;MechanicalObject position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"DragonFine\"&gt;\n        &lt;SparseGridTopology n=\"25 20 9\" fileTopology=\"mesh/dragon.obj\" /&gt;\n        &lt;EulerImplicitSolver rayleighStiffness=\"0.1\" rayleighMass=\"0.1\"/&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject dz=\"30\" /&gt;\n        &lt;UniformMass vertexMass=\"0.5\" /&gt;\n        &lt;MeshSpringForceField name=\"Springs\" stiffness=\"500\" damping=\"10\" /&gt;\n        &lt;BoxConstraint box=\"10 -10 26 12 10 38\" /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" src=\"@../../loader\" color=\"red\" /&gt;\n            &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n        &lt;SphereLoader filename=\"mesh/dragon.sph\" /&gt;\n            &lt;MechanicalObject position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 -9 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showVisual\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"Response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/dragon.obj\")\n\n    DragonCoarse = root.addChild('DragonCoarse')\n    DragonCoarse.addObject('SparseGridTopology', n=\"6 5 4\", fileTopology=\"mesh/dragon.obj\")\n    DragonCoarse.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    DragonCoarse.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    DragonCoarse.addObject('MechanicalObject')\n    DragonCoarse.addObject('UniformMass', vertexMass=\"0.5\")\n    DragonCoarse.addObject('MeshSpringForceField', name=\"Springs\", stiffness=\"500\", damping=\"10\")\n    DragonCoarse.addObject('BoxConstraint', box=\"10 -10 -6 12 10 6\")\n\n    Visu = DragonCoarse.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@../../loader\", color=\"blue\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf = DragonCoarse.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/dragon.sph\")\n    Surf.addObject('MechanicalObject', position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping')\n\n    DragonMiddle = root.addChild('DragonMiddle')\n    DragonMiddle.addObject('SparseGridTopology', n=\"12 9 6\", fileTopology=\"mesh/dragon.obj\")\n    DragonMiddle.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    DragonMiddle.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    DragonMiddle.addObject('MechanicalObject', dz=\"15\")\n    DragonMiddle.addObject('UniformMass', vertexMass=\"0.5\")\n    DragonMiddle.addObject('MeshSpringForceField', name=\"Springs\", stiffness=\"500\", damping=\"10\")\n    DragonMiddle.addObject('BoxConstraint', box=\"10 -10 10 12 10 22\")\n\n    Visu = DragonMiddle.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@../../loader\", color=\"white\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf = DragonMiddle.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/dragon.sph\")\n    Surf.addObject('MechanicalObject', position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping')\n\n    DragonFine = root.addChild('DragonFine')\n    DragonFine.addObject('SparseGridTopology', n=\"25 20 9\", fileTopology=\"mesh/dragon.obj\")\n    DragonFine.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    DragonFine.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    DragonFine.addObject('MechanicalObject', dz=\"30\")\n    DragonFine.addObject('UniformMass', vertexMass=\"0.5\")\n    DragonFine.addObject('MeshSpringForceField', name=\"Springs\", stiffness=\"500\", damping=\"10\")\n    DragonFine.addObject('BoxConstraint', box=\"10 -10 26 12 10 38\")\n\n    Visu = DragonFine.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@../../loader\", color=\"red\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf = DragonFine.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/dragon.sph\")\n    Surf.addObject('MechanicalObject', position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping')\n</code></pre>"},{"location":"30_Components/Topology/Container/Grid/SphereGridTopology/","title":"SphereGridTopology","text":"<p>Sphere grid in 3D</p> <p>Target: <code>Sofa.Component.Topology.Container.Grid</code></p> <p>namespace: <code>sofa::component::topology::container::grid</code></p> <p>parents: </p> <ul> <li><code>GridTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  n  grid resolution. (default = 2 2 2)  2 2 2 computeHexaList  put true if the list of Hexahedra is needed during init (default=true)  1 computeQuadList  put true if the list of Quad is needed during init (default=true)  1 computeTriangleList  put true if the list of triangle is needed during init (default=true)  1 computeEdgeList  put true if the list of Lines is needed during init (default=true)  1 computePointList  put true if the list of Points is needed during init (default=true)  1 createTexCoords  If set to true, virtual texture coordinates will be generated using 3D interpolation (default=false).  0 center  Center of the cylinder  0 0 0 axis  Main direction of the cylinder  0 0 1 radius  Radius of the cylinder  1 Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"30_Components/Topology/Container/Grid/SphereGridTopology/#examples","title":"Examples","text":"<p>Component/Topology/Container/Grid/SphereGridTopology.scn</p> XMLPython <pre><code>&lt;!-- SphereGrid examples --&gt;\n&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 -10 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SphereGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showVisual\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"SphereFEMTetra\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"0.000001\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject dx=\"-10\" /&gt;\n        &lt;UniformMass totalMass=\"100\" /&gt;\n        &lt;SphereGridTopology nx=\"10\" ny=\"10\" nz=\"10\" radius=\"4.0\" axis=\"0 1 0\" /&gt;\n        &lt;BoxConstraint box=\"-14 0.5 2.5 -8 4 4\" fixAll=\"0\"/&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.3\" method=\"polar\" /&gt;\n    &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"red\" translation=\"-5 0 0\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"SphereFEM\"&gt;\n        &lt;EulerImplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"0.000001\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject /&gt;\n        &lt;UniformMass totalMass=\"100\" /&gt;\n        &lt;SphereGridTopology nx=\"10\" ny=\"10\" nz=\"10\" radius=\"4.0\" axis=\"0 1 0\" /&gt;\n        &lt;BoxConstraint box=\"-4 0.5 2.5 4 4 4\" fixAll=\"0\"/&gt;\n        &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"1116\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"SphereSpring\"&gt;\n        &lt;EulerImplicitSolver /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"0.000001\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject dx=\"10\" /&gt;\n        &lt;UniformMass totalMass=\"100\" /&gt;\n        &lt;SphereGridTopology nx=\"10\" ny=\"10\" nz=\"10\" radius=\"4.0\" axis=\"0 1 0\" /&gt;\n        &lt;BoxConstraint box=\"8 0.5 2.5 14 4 4\" fixAll=\"0\"/&gt;\n        &lt;MeshSpringForceField name=\"FEM\" stiffness=\"1000\" /&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 -10 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showVisual\")\n    root.addObject('DefaultAnimationLoop')\n\n    SphereFEMTetra = root.addChild('SphereFEMTetra')\n    SphereFEMTetra.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SphereFEMTetra.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"0.000001\", threshold=\"1e-5\")\n    SphereFEMTetra.addObject('MechanicalObject', dx=\"-10\")\n    SphereFEMTetra.addObject('UniformMass', totalMass=\"100\")\n    SphereFEMTetra.addObject('SphereGridTopology', nx=\"10\", ny=\"10\", nz=\"10\", radius=\"4.0\", axis=\"0 1 0\")\n    SphereFEMTetra.addObject('BoxConstraint', box=\"-14 0.5 2.5 -8 4 4\", fixAll=\"0\")\n    SphereFEMTetra.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.3\", method=\"polar\")\n\n    Visu = SphereFEMTetra.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"red\", translation=\"-5 0 0\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    SphereFEM = root.addChild('SphereFEM')\n    SphereFEM.addObject('EulerImplicitSolver')\n    SphereFEM.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"0.000001\", threshold=\"1e-5\")\n    SphereFEM.addObject('MechanicalObject')\n    SphereFEM.addObject('UniformMass', totalMass=\"100\")\n    SphereFEM.addObject('SphereGridTopology', nx=\"10\", ny=\"10\", nz=\"10\", radius=\"4.0\", axis=\"0 1 0\")\n    SphereFEM.addObject('BoxConstraint', box=\"-4 0.5 2.5 4 4 4\", fixAll=\"0\")\n    SphereFEM.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"1116\", poissonRatio=\"0.3\", method=\"large\")\n\n    SphereSpring = root.addChild('SphereSpring')\n    SphereSpring.addObject('EulerImplicitSolver')\n    SphereSpring.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"0.000001\", threshold=\"1e-5\")\n    SphereSpring.addObject('MechanicalObject', dx=\"10\")\n    SphereSpring.addObject('UniformMass', totalMass=\"100\")\n    SphereSpring.addObject('SphereGridTopology', nx=\"10\", ny=\"10\", nz=\"10\", radius=\"4.0\", axis=\"0 1 0\")\n    SphereSpring.addObject('BoxConstraint', box=\"8 0.5 2.5 14 4 4\", fixAll=\"0\")\n    SphereSpring.addObject('MeshSpringForceField', name=\"FEM\", stiffness=\"1000\")\n</code></pre>"},{"location":"30_Components/Topology/Mapping/CenterPointTopologicalMapping/","title":"CenterPointTopologicalMapping","text":"<p>Target: <code>Sofa.Component.Topology.Mapping</code></p> <p>namespace: <code>sofa::component::topology::mapping</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/Topology/Mapping/Edge2QuadTopologicalMapping/","title":"Edge2QuadTopologicalMapping","text":"<p>Special case of mapping where EdgeSetTopology is converted to QuadSetTopology.</p> <p>Target: <code>Sofa.Component.Topology.Mapping</code></p> <p>namespace: <code>sofa::component::topology::mapping</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 nbPointsOnEachCircle  Discretization of created circles  radius  Radius of created circles in yz plan  1 radiusFocal  If greater than 0., radius in focal axis of created ellipses  0 focalAxis  In case of ellipses  0 0 1 edgeList  list of input edges for the topological mapping: by default, all considered  flipNormals  Flip Normal ? (Inverse point order when creating quad)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map toQuadContainer Output container storing Quads toQuadModifier Output modifier handling Quads"},{"location":"30_Components/Topology/Mapping/Edge2QuadTopologicalMapping/#examples","title":"Examples","text":"<p>Component/Topology/Mapping/Edge2QuadTopologicalMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.01\" showBoundingTree=\"0\" gravity=\"0 -9 0\"&gt;\n    &lt;Node name=\"RequiredPlugins\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [TubularMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [BeamFEMForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Edge2QuadTopologicalMapping] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;/Node&gt;\n\n    &lt;DefaultAnimationLoop /&gt;\n    &lt;CollisionPipeline /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.02\"/&gt;\n\n    &lt;Node name=\"Beam\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"125\" tolerance=\"1e-16\" threshold=\"1e-16\" /&gt;\n\n        &lt;RegularGridTopology name=\"MeshLines\" nx=\"100\" ny=\"1\" nz=\"1\" xmax=\"100\" xmin=\"0\" ymin=\"0\" ymax=\"0\" zmax=\"0\" zmin=\"0\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" name=\"BeamDof\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"fix\" indices=\"0\" /&gt;\n        &lt;UniformMass totalMass=\"0.1\" /&gt;\n        &lt;BeamFEMForceField name=\"BeamFEM\" radius=\"1.0\" youngModulus=\"1000\" poissonRatio=\"0.45\" /&gt;\n\n\n        &lt;Node name=\"VisuBeam\" activated=\"true\"&gt;\n            &lt;OglModel template=\"Vec3\" name=\"SurfDof\" color=\"0.7 0.7 0.7\" /&gt;\n            &lt;QuadSetTopologyContainer  name=\"Container\" /&gt;\n            &lt;QuadSetTopologyModifier   name=\"Modifier\" /&gt;\n            &lt;QuadSetGeometryAlgorithms name=\"GeomAlgo\"  template=\"Vec3\" drawQuads=\"1\"/&gt;\n            &lt;Edge2QuadTopologicalMapping nbPointsOnEachCircle=\"10\" radius=\"2\" input=\"@../MeshLines\" output=\"@Container\" flipNormals=\"true\"/&gt;\n            &lt;TubularMapping nbPointsOnEachCircle=\"10\" radius=\"2\" input=\"@../BeamDof\" output=\"@SurfDof\" /&gt;\n\n        &lt;/Node&gt;\n    &lt;/Node&gt;  \n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", showBoundingTree=\"0\", gravity=\"0 -9 0\")\n\n    RequiredPlugins = root.addChild('RequiredPlugins')\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    RequiredPlugins.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline')\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.02\")\n\n    Beam = root.addChild('Beam')\n    Beam.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Beam.addObject('CGLinearSolver', iterations=\"125\", tolerance=\"1e-16\", threshold=\"1e-16\")\n    Beam.addObject('RegularGridTopology', name=\"MeshLines\", nx=\"100\", ny=\"1\", nz=\"1\", xmax=\"100\", xmin=\"0\", ymin=\"0\", ymax=\"0\", zmax=\"0\", zmin=\"0\")\n    Beam.addObject('MechanicalObject', template=\"Rigid3\", name=\"BeamDof\")\n    Beam.addObject('FixedProjectiveConstraint', name=\"fix\", indices=\"0\")\n    Beam.addObject('UniformMass', totalMass=\"0.1\")\n    Beam.addObject('BeamFEMForceField', name=\"BeamFEM\", radius=\"1.0\", youngModulus=\"1000\", poissonRatio=\"0.45\")\n\n    VisuBeam = Beam.addChild('VisuBeam', activated=\"true\")\n    VisuBeam.addObject('OglModel', template=\"Vec3\", name=\"SurfDof\", color=\"0.7 0.7 0.7\")\n    VisuBeam.addObject('QuadSetTopologyContainer', name=\"Container\")\n    VisuBeam.addObject('QuadSetTopologyModifier', name=\"Modifier\")\n    VisuBeam.addObject('QuadSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\", drawQuads=\"1\")\n    VisuBeam.addObject('Edge2QuadTopologicalMapping', nbPointsOnEachCircle=\"10\", radius=\"2\", input=\"@../MeshLines\", output=\"@Container\", flipNormals=\"true\")\n    VisuBeam.addObject('TubularMapping', nbPointsOnEachCircle=\"10\", radius=\"2\", input=\"@../BeamDof\", output=\"@SurfDof\")\n</code></pre>"},{"location":"30_Components/Topology/Mapping/Hexa2QuadTopologicalMapping/","title":"Hexa2QuadTopologicalMapping","text":"<p>Special case of mapping where HexahedronSetTopology is converted to QuadSetTopology</p> <p>Target: <code>Sofa.Component.Topology.Mapping</code></p> <p>namespace: <code>sofa::component::topology::mapping</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 flipNormals  Flip Normal ? (Inverse point order when creating triangle)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/Topology/Mapping/Hexa2QuadTopologicalMapping/#examples","title":"Examples","text":"<p>Component/Topology/Mapping/Hexa2QuadTopologicalMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 -9.81 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedralFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [QuadularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetGeometryAlgorithms HexahedronSetTopologyContainer HexahedronSetTopologyModifier QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2QuadTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"H\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"meshLoader\" filename=\"mesh/nine_hexa.msh\" /&gt;\n        &lt;MechanicalObject name=\"Hexa\" src=\"@meshLoader\" /&gt;\n        &lt;include href=\"Objects/HexahedronSetTopology.xml\" src=\"@meshLoader\" drawHexa=\"1\" /&gt;\n        &lt;HexahedralFEMForceField name=\"FEM\" youngModulus=\"100\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.5\" /&gt;\n        &lt;!-- &lt;FixedProjectiveConstraint indices=\"12 15 28 31\" /&gt; --&gt;\n        &lt;BoxConstraint box=\"0 3 0 0 3 1 3 3 0 3 3 1\" /&gt;\n        &lt;Node name=\"Q\"&gt;\n            &lt;QuadSetTopologyContainer  name=\"Container\" /&gt;\n            &lt;QuadSetTopologyModifier   name=\"Modifier\" /&gt;\n            &lt;QuadSetGeometryAlgorithms name=\"GeomAlgo\"   template=\"Vec3\" /&gt;\n            &lt;Hexa2QuadTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;QuadularBendingSprings name=\"FEM-Bend\" stiffness=\"3000\" damping=\"1.0\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"Visual\" color=\"blue\" quads=\"@../Container.quads\" /&gt;\n                &lt;IdentityMapping input=\"@../../Hexa\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 -9.81 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    H = root.addChild('H')\n    H.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    H.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    H.addObject('MeshGmshLoader', name=\"meshLoader\", filename=\"mesh/nine_hexa.msh\")\n    H.addObject('MechanicalObject', name=\"Hexa\", src=\"@meshLoader\")\n    H.addObject('include', href=\"Objects/HexahedronSetTopology.xml\", src=\"@meshLoader\", drawHexa=\"1\")\n    H.addObject('HexahedralFEMForceField', name=\"FEM\", youngModulus=\"100\", poissonRatio=\"0.3\", method=\"large\")\n    H.addObject('DiagonalMass', massDensity=\"0.5\")\n    H.addObject('BoxConstraint', box=\"0 3 0 0 3 1 3 3 0 3 3 1\")\n\n    Q = H.addChild('Q')\n    Q.addObject('QuadSetTopologyContainer', name=\"Container\")\n    Q.addObject('QuadSetTopologyModifier', name=\"Modifier\")\n    Q.addObject('QuadSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    Q.addObject('Hexa2QuadTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n    Q.addObject('QuadularBendingSprings', name=\"FEM-Bend\", stiffness=\"3000\", damping=\"1.0\")\n    Q.addObject('TriangleCollisionModel')\n\n    Visu = Q.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"blue\", quads=\"@../Container.quads\")\n    Visu.addObject('IdentityMapping', input=\"@../../Hexa\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/Topology/Mapping/Hexa2TetraTopologicalMapping/","title":"Hexa2TetraTopologicalMapping","text":"<p>Special case of mapping where HexahedronSetTopology is converted to TetrahedronSetTopology</p> <p>Target: <code>Sofa.Component.Topology.Mapping</code></p> <p>namespace: <code>sofa::component::topology::mapping</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 swapping  Boolean enabling to swapp hexa-edges  in order to avoid bias effect  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/Topology/Mapping/Hexa2TetraTopologicalMapping/#examples","title":"Examples","text":"<p>Component/Topology/Mapping/Hexa2TetraTopologicalMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline name=\"default21\" verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default22\" response=\"PenalityContactForceField\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"Cube\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"0\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver\" iterations=\"25\" tolerance=\"1e-09\" threshold=\"1e-09\" /&gt;\n        &lt;RegularGridTopology name=\"grid\" n=\"6 6 6\" min=\"-10 -10 -10\" max=\"10 10 10\" p0=\"-10 -10 -10\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"default24\" /&gt;\n        &lt;UniformMass template=\"Vec3\" name=\"default25\" vertexMass=\"0.25\" /&gt;\n        &lt;TetrahedronFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.4\" youngModulus=\"1000\" assembling=\"0\" /&gt;\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-11 -11 -11 11 -9 11\" indices=\"0\" drawSize=\"0\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default27\" indices=\"@box_roi.indices\" drawSize=\"0\" /&gt;\n        &lt;Node name=\"Tetra\" gravity=\"0 -9.81 0\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\" /&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../grid\" output=\"@Container\" /&gt;\n            &lt;Node name=\"Triangles\" gravity=\"0 -9.81 0\"&gt;\n                &lt;TriangleSetTopologyContainer name=\"Container\" /&gt;\n                &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n                &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n                &lt;Tetra2TriangleTopologicalMapping name=\"default29\" input=\"@../Container\" output=\"@Container\" /&gt;\n                &lt;TriangleCollisionModel name=\"default30\" /&gt;\n                &lt;LineCollisionModel name=\"default31\" /&gt;\n                &lt;PointCollisionModel name=\"default32\" /&gt;\n                &lt;Node name=\"Visu\" gravity=\"0 -9.81 0\"&gt;\n                    &lt;OglModel template=\"Vec3\" name=\"Visual\" material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n                    &lt;IdentityMapping template=\"Vec3,Vec3\" name=\"default33\" input=\"@..\" output=\"@Visual\" /&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', name=\"default21\", verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"default22\", response=\"PenalityContactForceField\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    Cube = root.addChild('Cube', gravity=\"0 -9.81 0\")\n    Cube.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Cube.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver\", iterations=\"25\", tolerance=\"1e-09\", threshold=\"1e-09\")\n    Cube.addObject('RegularGridTopology', name=\"grid\", n=\"6 6 6\", min=\"-10 -10 -10\", max=\"10 10 10\", p0=\"-10 -10 -10\")\n    Cube.addObject('MechanicalObject', template=\"Vec3\", name=\"default24\")\n    Cube.addObject('UniformMass', template=\"Vec3\", name=\"default25\", vertexMass=\"0.25\")\n    Cube.addObject('TetrahedronFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.4\", youngModulus=\"1000\", assembling=\"0\")\n    Cube.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-11 -11 -11 11 -9 11\", indices=\"0\", drawSize=\"0\")\n    Cube.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default27\", indices=\"@box_roi.indices\", drawSize=\"0\")\n\n    Tetra = Cube.addChild('Tetra', gravity=\"0 -9.81 0\")\n    Tetra.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    Tetra.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Tetra.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Tetra.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../grid\", output=\"@Container\")\n\n    Triangles = Tetra.addChild('Triangles', gravity=\"0 -9.81 0\")\n    Triangles.addObject('TriangleSetTopologyContainer', name=\"Container\")\n    Triangles.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Triangles.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Triangles.addObject('Tetra2TriangleTopologicalMapping', name=\"default29\", input=\"@../Container\", output=\"@Container\")\n    Triangles.addObject('TriangleCollisionModel', name=\"default30\")\n    Triangles.addObject('LineCollisionModel', name=\"default31\")\n    Triangles.addObject('PointCollisionModel', name=\"default32\")\n\n    Visu = Triangles.addChild('Visu', gravity=\"0 -9.81 0\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visu.addObject('IdentityMapping', template=\"Vec3,Vec3\", name=\"default33\", input=\"@..\", output=\"@Visual\")\n</code></pre> <p>Component/Topology/Mapping/Hexa2TetraTopologicalMapping_export.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshExporter VisualModelOBJExporter] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline name=\"default21\" verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default22\" response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"Cube\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"0\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver\" iterations=\"25\" tolerance=\"1e-09\" threshold=\"1e-09\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"dofs\" /&gt;\n        &lt;UniformMass template=\"Vec3\" name=\"default25\" vertexMass=\"0.25\" /&gt;\n        &lt;RegularGridTopology name=\"grid\" n=\"6 6 6\" min=\"-10 0 -10\" max=\"10 20 10\" /&gt;\n        &lt;TetrahedronFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.4\" youngModulus=\"1000\" assembling=\"0\" /&gt;\n        &lt;BoxROI template=\"Vec3\" name=\"box_roi\" box=\"-11 -11 -11 11 -9 11\" indices=\"0\" drawSize=\"0\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default27\" indices=\"@box_roi.indices\" drawSize=\"0\" /&gt;\n        &lt;Node name=\"Tetra\" gravity=\"0 -9.81 0\"&gt;\n            &lt;TetrahedronSetTopologyContainer name=\"Container\" /&gt;\n            &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n            &lt;Hexa2TetraTopologicalMapping name=\"default28\" input=\"@../grid\" output=\"@Container\" /&gt;\n            &lt;MeshExporter filename=\"cube5x5x5\" format=\"vtk\" position=\"@../dofs.rest_position\" edges=\"0\" triangles=\"0\" tetras=\"1\" listening=\"true\" exportAtBegin=\"true\" /&gt;\n            &lt;Node name=\"Triangles\" gravity=\"0 -9.81 0\"&gt;\n                &lt;TriangleSetTopologyContainer name=\"Container\" /&gt;\n                &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n                &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n                &lt;Tetra2TriangleTopologicalMapping name=\"default29\" input=\"@../Container\" output=\"@Container\" /&gt;\n                &lt;!--&lt;MeshExporter filename=\"cube5x5x5-surface\" position=\"@../../dofs.rest_position\" edges=\"0\" triangles=\"1\" tetras=\"0\" listening=\"true\" exportAtBegin=\"true\" /&gt;--&gt;\n                &lt;TriangleCollisionModel name=\"default30\" /&gt;\n                &lt;LineCollisionModel name=\"default31\" /&gt;\n                &lt;PointCollisionModel name=\"default32\" /&gt;\n                &lt;Node name=\"Visu\" gravity=\"0 -9.81 0\"&gt;\n                    &lt;OglModel template=\"Vec3\" name=\"Visual\" material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n                    &lt;IdentityMapping template=\"Vec3,Vec3\" name=\"default33\" input=\"@..\" output=\"@Visual\" /&gt;\n                    &lt;VisualModelOBJExporter filename=\"cube5x5x5-surface\" exportAtBegin=\"true\" /&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', name=\"default21\", verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"default22\", response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    Cube = root.addChild('Cube', gravity=\"0 -9.81 0\")\n    Cube.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Cube.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver\", iterations=\"25\", tolerance=\"1e-09\", threshold=\"1e-09\")\n    Cube.addObject('MechanicalObject', template=\"Vec3\", name=\"dofs\")\n    Cube.addObject('UniformMass', template=\"Vec3\", name=\"default25\", vertexMass=\"0.25\")\n    Cube.addObject('RegularGridTopology', name=\"grid\", n=\"6 6 6\", min=\"-10 0 -10\", max=\"10 20 10\")\n    Cube.addObject('TetrahedronFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.4\", youngModulus=\"1000\", assembling=\"0\")\n    Cube.addObject('BoxROI', template=\"Vec3\", name=\"box_roi\", box=\"-11 -11 -11 11 -9 11\", indices=\"0\", drawSize=\"0\")\n    Cube.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default27\", indices=\"@box_roi.indices\", drawSize=\"0\")\n\n    Tetra = Cube.addChild('Tetra', gravity=\"0 -9.81 0\")\n    Tetra.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    Tetra.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Tetra.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Tetra.addObject('Hexa2TetraTopologicalMapping', name=\"default28\", input=\"@../grid\", output=\"@Container\")\n    Tetra.addObject('MeshExporter', filename=\"cube5x5x5\", format=\"vtk\", position=\"@../dofs.rest_position\", edges=\"0\", triangles=\"0\", tetras=\"1\", listening=\"true\", exportAtBegin=\"true\")\n\n    Triangles = Tetra.addChild('Triangles', gravity=\"0 -9.81 0\")\n    Triangles.addObject('TriangleSetTopologyContainer', name=\"Container\")\n    Triangles.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Triangles.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Triangles.addObject('Tetra2TriangleTopologicalMapping', name=\"default29\", input=\"@../Container\", output=\"@Container\")\n    Triangles.addObject('TriangleCollisionModel', name=\"default30\")\n    Triangles.addObject('LineCollisionModel', name=\"default31\")\n    Triangles.addObject('PointCollisionModel', name=\"default32\")\n\n    Visu = Triangles.addChild('Visu', gravity=\"0 -9.81 0\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    Visu.addObject('IdentityMapping', template=\"Vec3,Vec3\", name=\"default33\", input=\"@..\", output=\"@Visual\")\n    Visu.addObject('VisualModelOBJExporter', filename=\"cube5x5x5-surface\", exportAtBegin=\"true\")\n</code></pre>"},{"location":"30_Components/Topology/Mapping/IdentityTopologicalMapping/","title":"IdentityTopologicalMapping","text":"<p>This class is a specific implementation of TopologicalMapping where the destination topology should be kept identical to the source topology. The implementation currently assumes that both topology have been initialized identically.</p> <p>Target: <code>Sofa.Component.Topology.Mapping</code></p> <p>namespace: <code>sofa::component::topology::mapping</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/Topology/Mapping/Quad2TriangleTopologicalMapping/","title":"Quad2TriangleTopologicalMapping","text":"<p>Special case of mapping where QuadSetTopology is converted to TriangleSetTopology</p> <p>Target: <code>Sofa.Component.Topology.Mapping</code></p> <p>namespace: <code>sofa::component::topology::mapping</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/Topology/Mapping/Quad2TriangleTopologicalMapping/#examples","title":"Examples","text":"<p>Component/Topology/Mapping/Quad2TriangleTopologicalMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 -9.81 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [QuadularBendingSprings TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Quad2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"Q\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"meshLoader\" filename=\"mesh/nine_quads.msh\" /&gt;\n        &lt;include href=\"Objects/QuadSetTopology.xml\" src=\"@meshLoader\" tags=\" \" /&gt;\n        &lt;MechanicalObject name=\"Quads\" /&gt;\n        &lt;QuadularBendingSprings name=\"FEM-Bend\" stiffness=\"3000\" damping=\"1.0\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.5\" /&gt;\n        &lt;!--&lt;FixedProjectiveConstraint indices=\"12 15\" /&gt;--&gt;\n        &lt;BoxConstraint box=\"0 3 0 0 3 0 3 3 0 3 3 0\" /&gt;\n        &lt;Node name=\"T\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@../meshLoader\" tags=\" \" /&gt;\n            &lt;Quad2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n            &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"3000\" damping=\"1.0\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n                &lt;IdentityMapping input=\"@../../Quads\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 -9.81 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    Q = root.addChild('Q')\n    Q.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Q.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    Q.addObject('MeshGmshLoader', name=\"meshLoader\", filename=\"mesh/nine_quads.msh\")\n    Q.addObject('include', href=\"Objects/QuadSetTopology.xml\", src=\"@meshLoader\", tags=\" \")\n    Q.addObject('MechanicalObject', name=\"Quads\")\n    Q.addObject('QuadularBendingSprings', name=\"FEM-Bend\", stiffness=\"3000\", damping=\"1.0\")\n    Q.addObject('DiagonalMass', massDensity=\"0.5\")\n    Q.addObject('BoxConstraint', box=\"0 3 0 0 3 0 3 3 0 3 3 0\")\n\n    T = Q.addChild('T')\n    T.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@../meshLoader\", tags=\" \")\n    T.addObject('Quad2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n    T.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", method=\"large\")\n    T.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"3000\", damping=\"1.0\")\n    T.addObject('TriangleCollisionModel')\n\n    Visu = T.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"red\")\n    Visu.addObject('IdentityMapping', input=\"@../../Quads\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/Topology/Mapping/SubsetTopologicalMapping/","title":"SubsetTopologicalMapping","text":"<p>This class is a specific implementation of TopologicalMapping where the destination topology is a subset of the source topology. The implementation currently assumes that both topologies have been initialized correctly.</p> <p>Target: <code>Sofa.Component.Topology.Mapping</code></p> <p>namespace: <code>sofa::component::topology::mapping</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 samePoints  True if the same set of points is used in both topologies  0 handleEdges  True if edges events and mapping should be handled  0 handleTriangles  True if triangles events and mapping should be handled  0 handleQuads  True if quads events and mapping should be handled  0 handleTetrahedra  True if tetrahedra events and mapping should be handled  0 handleHexahedra  True if hexahedra events and mapping should be handled  0 pointS2D  Internal source -&gt; destination topology points map  pointD2S  Internal destination -&gt; source topology points map (link to SubsetMapping::indices to handle the mechanical-side of the mapping  edgeS2D  Internal source -&gt; destination topology edges map  edgeD2S  Internal destination -&gt; source topology edges map  triangleS2D  Internal source -&gt; destination topology triangles map  triangleD2S  Internal destination -&gt; source topology triangles map  quadS2D  Internal source -&gt; destination topology quads map  quadD2S  Internal destination -&gt; source topology quads map  tetrahedronS2D  Internal source -&gt; destination topology tetrahedra map  tetrahedronD2S  Internal destination -&gt; source topology tetrahedra map  hexahedronS2D  Internal source -&gt; destination topology hexahedra map  hexahedronD2S  Internal destination -&gt; source topology hexahedra map  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/Topology/Mapping/SubsetTopologicalMapping/#examples","title":"Examples","text":"<p>Component/Topology/Mapping/SubsetTopologicalMapping2.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TaitSurfacePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceFieldOptim] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [FastTriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [SubsetTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showCollisionModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n&lt;!--    &lt;SplitAndAttachBodyButtonSetting button=\"Middle\" stiffness=\"5000\" arrowSize=\"0.2\" snapDistance=\"2\" /&gt;--&gt;\n    &lt;Node name=\"FullTopology\"&gt;\n        &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/sphere_05.obj\" /&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"Container1\" src=\"@loader\" /&gt;\n        &lt;TriangleSetTopologyModifier /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" /&gt;\n        &lt;BoxROI name=\"roi1\" box=\"-55 -55 -55 55 55 -25\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"@roi1.indices\" /&gt;\n        &lt;DiagonalMass massDensity=\"1\" name=\"computed using mass density\" /&gt;\n        &lt;TriangleCollisionModel group=\"1\" printLog=\"1\" /&gt;\n        &lt;TaitSurfacePressureForceField name=\"Pressure\" gamma=\"5\" B=\"10000\" injectedVolume=\"0\" printLog=\"1\" /&gt;\n        &lt;Node name=\"SubsetTopology1\"&gt;\n            &lt;BoxROI name=\"subsetROI\" position=\"@../loader.position\" triangles=\"@../loader.triangles\" computeEdges=\"0\" computeTetrahedra=\"0\" box=\"-55 -55 25 55 55 55\" /&gt;\n            &lt;TriangleSetTopologyContainer name=\"Container2\" position=\"@../loader.position\" triangles=\"@subsetROI.trianglesInROI\" /&gt;\n            &lt;TriangleSetTopologyModifier /&gt;\n            &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n            &lt;SubsetTopologicalMapping input=\"@Container1\" output=\"@Container2\" samePoints=\"true\" handleTriangles=\"true\" printLog=\"1\" /&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;IdentityMapping /&gt;\n            &lt;TriangularFEMForceFieldOptim name=\"FEM1\" youngModulus=\"1000\" poissonRatio=\"0.3\" /&gt;\n            &lt;FastTriangularBendingSprings name=\"Bending\" bendingStiffness=\"100\" /&gt;\n            &lt;!--&lt;TriangleCollisionModel color=\"1 0 0 1\" group=\"1\" printLog=\"1\" /&gt;--&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"SubsetTopology2\"&gt;\n            &lt;BoxROI name=\"subsetROI\" position=\"@../loader.position\" triangles=\"@../loader.triangles\" computeEdges=\"0\" computeTetrahedra=\"0\" box=\"-55 -55 -55 55 55 25\" /&gt;\n            &lt;TriangleSetTopologyContainer name=\"Container2\" position=\"@../loader.position\" triangles=\"@subsetROI.trianglesInROI\" /&gt;\n            &lt;TriangleSetTopologyModifier /&gt;\n            &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n            &lt;SubsetTopologicalMapping input=\"@Container1\" output=\"@Container2\" samePoints=\"true\" handleTriangles=\"true\" printLog=\"1\" /&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;IdentityMapping /&gt;\n            &lt;TriangularFEMForceFieldOptim name=\"FEM2\" youngModulus=\"10000\" poissonRatio=\"0.4\" /&gt;\n            &lt;FastTriangularBendingSprings name=\"Bending\" bendingStiffness=\"1000\" /&gt;\n            &lt;!--&lt;TriangleCollisionModel group=\"1\" printLog=\"1\" /&gt;--&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showCollisionModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    FullTopology = root.addChild('FullTopology')\n    FullTopology.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/sphere_05.obj\")\n    FullTopology.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    FullTopology.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    FullTopology.addObject('TriangleSetTopologyContainer', name=\"Container1\", src=\"@loader\")\n    FullTopology.addObject('TriangleSetTopologyModifier')\n    FullTopology.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\")\n    FullTopology.addObject('MechanicalObject', name=\"dofs\")\n    FullTopology.addObject('BoxROI', name=\"roi1\", box=\"-55 -55 -55 55 55 -25\")\n    FullTopology.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"@roi1.indices\")\n    FullTopology.addObject('DiagonalMass', massDensity=\"1\", name=\"computed using mass density\")\n    FullTopology.addObject('TriangleCollisionModel', group=\"1\", printLog=\"1\")\n    FullTopology.addObject('TaitSurfacePressureForceField', name=\"Pressure\", gamma=\"5\", B=\"10000\", injectedVolume=\"0\", printLog=\"1\")\n\n    SubsetTopology1 = FullTopology.addChild('SubsetTopology1')\n    SubsetTopology1.addObject('BoxROI', name=\"subsetROI\", position=\"@../loader.position\", triangles=\"@../loader.triangles\", computeEdges=\"0\", computeTetrahedra=\"0\", box=\"-55 -55 25 55 55 55\")\n    SubsetTopology1.addObject('TriangleSetTopologyContainer', name=\"Container2\", position=\"@../loader.position\", triangles=\"@subsetROI.trianglesInROI\")\n    SubsetTopology1.addObject('TriangleSetTopologyModifier')\n    SubsetTopology1.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\")\n    SubsetTopology1.addObject('SubsetTopologicalMapping', input=\"@Container1\", output=\"@Container2\", samePoints=\"true\", handleTriangles=\"true\", printLog=\"1\")\n    SubsetTopology1.addObject('MechanicalObject')\n    SubsetTopology1.addObject('IdentityMapping')\n    SubsetTopology1.addObject('TriangularFEMForceFieldOptim', name=\"FEM1\", youngModulus=\"1000\", poissonRatio=\"0.3\")\n    SubsetTopology1.addObject('FastTriangularBendingSprings', name=\"Bending\", bendingStiffness=\"100\")\n\n    SubsetTopology2 = FullTopology.addChild('SubsetTopology2')\n    SubsetTopology2.addObject('BoxROI', name=\"subsetROI\", position=\"@../loader.position\", triangles=\"@../loader.triangles\", computeEdges=\"0\", computeTetrahedra=\"0\", box=\"-55 -55 -55 55 55 25\")\n    SubsetTopology2.addObject('TriangleSetTopologyContainer', name=\"Container2\", position=\"@../loader.position\", triangles=\"@subsetROI.trianglesInROI\")\n    SubsetTopology2.addObject('TriangleSetTopologyModifier')\n    SubsetTopology2.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\")\n    SubsetTopology2.addObject('SubsetTopologicalMapping', input=\"@Container1\", output=\"@Container2\", samePoints=\"true\", handleTriangles=\"true\", printLog=\"1\")\n    SubsetTopology2.addObject('MechanicalObject')\n    SubsetTopology2.addObject('IdentityMapping')\n    SubsetTopology2.addObject('TriangularFEMForceFieldOptim', name=\"FEM2\", youngModulus=\"10000\", poissonRatio=\"0.4\")\n    SubsetTopology2.addObject('FastTriangularBendingSprings', name=\"Bending\", bendingStiffness=\"1000\")\n</code></pre> <p>Component/Topology/Mapping/SubsetTopologicalMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [SubsetTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showCollisionModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"FullTopology\"&gt;\n        &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/sphere_05.obj\" /&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;TriangleSetTopologyContainer name=\"Container1\" src=\"@loader\" /&gt;\n        &lt;TriangleSetTopologyModifier /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;MechanicalObject name=\"dofs\" /&gt;\n        &lt;BoxROI name=\"roi1\" box=\"-55 -55 -55 55 55 -25\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"@roi1.indices\" /&gt;\n        &lt;DiagonalMass massDensity=\"1\" name=\"computed using mass density\" /&gt;\n        &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"3000\" poissonRatio=\"0.4\" /&gt;\n        &lt;Node name=\"SubsetTopology1\"&gt;\n            &lt;BoxROI name=\"subsetROI\" position=\"@../loader.position\" triangles=\"@../loader.triangles\" computeEdges=\"0\" computeTetrahedra=\"0\" box=\"-55 -55 25 55 55 55\" /&gt;\n            &lt;TriangleSetTopologyContainer name=\"Container2\" position=\"@../loader.position\" triangles=\"@subsetROI.trianglesInROI\" /&gt;\n            &lt;TriangleSetTopologyModifier /&gt;\n            &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n            &lt;SubsetTopologicalMapping input=\"@Container1\" output=\"@Container2\" samePoints=\"true\" /&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;IdentityMapping /&gt;\n            &lt;TriangleCollisionModel color=\"1 0 0 1\" group=\"1\" printLog=\"1\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"SubsetTopology2\"&gt;\n            &lt;BoxROI name=\"subsetROI\" position=\"@../loader.position\" triangles=\"@../loader.triangles\" computeEdges=\"0\" computeTetrahedra=\"0\" box=\"-55 -55 -55 55 55 25\" /&gt;\n            &lt;TriangleSetTopologyContainer name=\"Container2\" position=\"@../loader.position\" triangles=\"@subsetROI.trianglesInROI\" /&gt;\n            &lt;TriangleSetTopologyModifier /&gt;\n            &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n            &lt;SubsetTopologicalMapping input=\"@Container1\" output=\"@Container2\" samePoints=\"true\" /&gt;\n            &lt;MechanicalObject /&gt;\n            &lt;IdentityMapping /&gt;\n            &lt;TriangleCollisionModel group=\"1\" printLog=\"1\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showCollisionModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n\n    FullTopology = root.addChild('FullTopology')\n    FullTopology.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/sphere_05.obj\")\n    FullTopology.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    FullTopology.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    FullTopology.addObject('TriangleSetTopologyContainer', name=\"Container1\", src=\"@loader\")\n    FullTopology.addObject('TriangleSetTopologyModifier')\n    FullTopology.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\")\n    FullTopology.addObject('MechanicalObject', name=\"dofs\")\n    FullTopology.addObject('BoxROI', name=\"roi1\", box=\"-55 -55 -55 55 55 -25\")\n    FullTopology.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"@roi1.indices\")\n    FullTopology.addObject('DiagonalMass', massDensity=\"1\", name=\"computed using mass density\")\n    FullTopology.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"3000\", poissonRatio=\"0.4\")\n\n    SubsetTopology1 = FullTopology.addChild('SubsetTopology1')\n    SubsetTopology1.addObject('BoxROI', name=\"subsetROI\", position=\"@../loader.position\", triangles=\"@../loader.triangles\", computeEdges=\"0\", computeTetrahedra=\"0\", box=\"-55 -55 25 55 55 55\")\n    SubsetTopology1.addObject('TriangleSetTopologyContainer', name=\"Container2\", position=\"@../loader.position\", triangles=\"@subsetROI.trianglesInROI\")\n    SubsetTopology1.addObject('TriangleSetTopologyModifier')\n    SubsetTopology1.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\")\n    SubsetTopology1.addObject('SubsetTopologicalMapping', input=\"@Container1\", output=\"@Container2\", samePoints=\"true\")\n    SubsetTopology1.addObject('MechanicalObject')\n    SubsetTopology1.addObject('IdentityMapping')\n    SubsetTopology1.addObject('TriangleCollisionModel', color=\"1 0 0 1\", group=\"1\", printLog=\"1\")\n\n    SubsetTopology2 = FullTopology.addChild('SubsetTopology2')\n    SubsetTopology2.addObject('BoxROI', name=\"subsetROI\", position=\"@../loader.position\", triangles=\"@../loader.triangles\", computeEdges=\"0\", computeTetrahedra=\"0\", box=\"-55 -55 -55 55 55 25\")\n    SubsetTopology2.addObject('TriangleSetTopologyContainer', name=\"Container2\", position=\"@../loader.position\", triangles=\"@subsetROI.trianglesInROI\")\n    SubsetTopology2.addObject('TriangleSetTopologyModifier')\n    SubsetTopology2.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\")\n    SubsetTopology2.addObject('SubsetTopologicalMapping', input=\"@Container1\", output=\"@Container2\", samePoints=\"true\")\n    SubsetTopology2.addObject('MechanicalObject')\n    SubsetTopology2.addObject('IdentityMapping')\n    SubsetTopology2.addObject('TriangleCollisionModel', group=\"1\", printLog=\"1\")\n</code></pre>"},{"location":"30_Components/Topology/Mapping/Tetra2TriangleTopologicalMapping/","title":"Tetra2TriangleTopologicalMapping","text":"<p>Special case of mapping where TetrahedronSetTopology is converted to TriangleSetTopology</p> <p>Target: <code>Sofa.Component.Topology.Mapping</code></p> <p>namespace: <code>sofa::component::topology::mapping</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 flipNormals  Flip Normal ? (Inverse point order when creating triangle)  0 noNewTriangles  If true no new triangles are being created  0 noInitialTriangles  If true the list of initial triangles is initially empty. Only additional triangles will be added in the list  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/Topology/Mapping/Tetra2TriangleTopologicalMapping/#examples","title":"Examples","text":"<p>Component/Topology/Mapping/Tetra2TriangleTopologicalMapping_NoInitialTriangle_option.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedPlaneProjectiveConstraint FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"TT\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/cylinder.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"Volume\" /&gt;\n        &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" tags=\" \" /&gt;\n        &lt;DiagonalMass massDensity=\"0.5\" /&gt;\n        &lt;FixedPlaneProjectiveConstraint direction=\"0 0 1\" dmin=\"-0.1\" dmax=\"0.1\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"360\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node name=\"T1\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@../loader\" tags=\" \" /&gt;\n            &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" noNewTriangles=\"1\" /&gt;\n            &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"60\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n            &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"300\" damping=\"1.0\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"Visual\" color=\"blue\" /&gt;\n                &lt;IdentityMapping input=\"@../../Volume\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"T2\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@../Container\" tags=\" \" /&gt;\n            &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" noInitialTriangles=\"1\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n                &lt;IdentityMapping input=\"@../../Volume\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    TT = root.addChild('TT')\n    TT.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TT.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TT.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/cylinder.msh\")\n    TT.addObject('MechanicalObject', src=\"@loader\", name=\"Volume\")\n    TT.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\", tags=\" \")\n    TT.addObject('DiagonalMass', massDensity=\"0.5\")\n    TT.addObject('FixedPlaneProjectiveConstraint', direction=\"0 0 1\", dmin=\"-0.1\", dmax=\"0.1\")\n    TT.addObject('FixedProjectiveConstraint', indices=\"0\")\n    TT.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"360\", poissonRatio=\"0.3\", method=\"large\")\n    TT.addObject('TriangleCollisionModel')\n\n    T1 = TT.addChild('T1')\n    T1.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@../loader\", tags=\" \")\n    T1.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\", noNewTriangles=\"1\")\n    T1.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"60\", poissonRatio=\"0.3\", method=\"large\")\n    T1.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"300\", damping=\"1.0\")\n\n    Visu = T1.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"blue\")\n    Visu.addObject('IdentityMapping', input=\"@../../Volume\", output=\"@Visual\")\n\n    T2 = TT.addChild('T2')\n    T2.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@../Container\", tags=\" \")\n    T2.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\", noInitialTriangles=\"1\")\n\n    Visu = T2.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"red\")\n    Visu.addObject('IdentityMapping', input=\"@../../Volume\", output=\"@Visual\")\n</code></pre> <p>Component/Topology/Mapping/Tetra2TriangleTopologicalMapping_with_TetrahedronModel.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 0 0\" dt=\"0.05\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TetrahedronCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedPlaneProjectiveConstraint FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TrianglePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline name=\"default0\" verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default1\" response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"TT\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"0\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver\" iterations=\"25\" tolerance=\"1e-09\" threshold=\"1e-09\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/cylinder.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"Volume\" restScale=\"1\" /&gt;\n        &lt;TetrahedronSetTopologyContainer src=\"@loader\" name=\"Container\" /&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass template=\"Vec3,Vec3\" name=\"default3\" massDensity=\"0.5\" /&gt;\n        &lt;FixedPlaneProjectiveConstraint template=\"Vec3\" name=\"default4\" direction=\"0 0 1\" dmin=\"-0.1\" dmax=\"0.1\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default5\" indices=\"0\" /&gt;\n        &lt;TetrahedronCollisionModel /&gt;\n        &lt;TetrahedralCorotationalFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"360\" assembling=\"0\" /&gt;\n        &lt;Node name=\"T\" gravity=\"0 -9.81 0\"&gt;\n            &lt;TriangleSetTopologyContainer name=\"Container\" tags=\"meca\" /&gt;\n            &lt;TriangleSetTopologyModifier name=\"Modifier\" tags=\"meca\" /&gt;\n            &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" tags=\"meca\" /&gt;\n            &lt;Tetra2TriangleTopologicalMapping name=\"default6\" input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;TriangularFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"60\" /&gt;\n            &lt;TriangularBendingSprings template=\"Vec3\" name=\"FEM-Bend\" stiffness=\"300\" damping=\"1\" /&gt;\n            &lt;TrianglePressureForceField template=\"Vec3\" name=\"default7\" pressure=\"0.4 0 0\" normal=\"0 0 1\" dmin=\"0.9\" dmax=\"1.1\" /&gt;\n            &lt;Node name=\"Visu\" gravity=\"0 -9.81 0\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" material=\"Default Diffuse 1 0 0 1 1 Ambient 1 0 0 0.2 1 Specular 0 0 0 1 1 Emissive 0 0 0 1 1 Shininess 0 45\" /&gt;\n                &lt;IdentityMapping template=\"Vec3,Vec3\" name=\"default9\" input=\"@../../Volume\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 0 0\", dt=\"0.05\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', name=\"default0\", verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"default1\", response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    TT = root.addChild('TT', gravity=\"0 -9.81 0\")\n    TT.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"0\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TT.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver\", iterations=\"25\", tolerance=\"1e-09\", threshold=\"1e-09\")\n    TT.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/cylinder.msh\")\n    TT.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"Volume\", restScale=\"1\")\n    TT.addObject('TetrahedronSetTopologyContainer', src=\"@loader\", name=\"Container\")\n    TT.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    TT.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    TT.addObject('DiagonalMass', template=\"Vec3,Vec3\", name=\"default3\", massDensity=\"0.5\")\n    TT.addObject('FixedPlaneProjectiveConstraint', template=\"Vec3\", name=\"default4\", direction=\"0 0 1\", dmin=\"-0.1\", dmax=\"0.1\")\n    TT.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default5\", indices=\"0\")\n    TT.addObject('TetrahedronCollisionModel')\n    TT.addObject('TetrahedralCorotationalFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"360\", assembling=\"0\")\n\n    T = TT.addChild('T', gravity=\"0 -9.81 0\")\n    T.addObject('TriangleSetTopologyContainer', name=\"Container\", tags=\"meca\")\n    T.addObject('TriangleSetTopologyModifier', name=\"Modifier\", tags=\"meca\")\n    T.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\", tags=\"meca\")\n    T.addObject('Tetra2TriangleTopologicalMapping', name=\"default6\", input=\"@../Container\", output=\"@Container\")\n    T.addObject('TriangularFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"60\")\n    T.addObject('TriangularBendingSprings', template=\"Vec3\", name=\"FEM-Bend\", stiffness=\"300\", damping=\"1\")\n    T.addObject('TrianglePressureForceField', template=\"Vec3\", name=\"default7\", pressure=\"0.4 0 0\", normal=\"0 0 1\", dmin=\"0.9\", dmax=\"1.1\")\n\n    Visu = T.addChild('Visu', gravity=\"0 -9.81 0\")\n    Visu.addObject('OglModel', template=\"Vec3\", name=\"Visual\", material=\"Default Diffuse 1 0 0 1 1 Ambient 1 0 0 0.2 1 Specular 0 0 0 1 1 Emissive 0 0 0 1 1 Shininess 0 45\")\n    Visu.addObject('IdentityMapping', template=\"Vec3,Vec3\", name=\"default9\", input=\"@../../Volume\", output=\"@Visual\")\n</code></pre> <p>Component/Topology/Mapping/Tetra2TriangleTopologicalMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedPlaneProjectiveConstraint FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [TrianglePressureForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"TT\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/cylinder.msh\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"Volume\" /&gt;\n        &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" tags=\" \" /&gt;\n        &lt;DiagonalMass massDensity=\"0.5\" /&gt;\n        &lt;FixedPlaneProjectiveConstraint direction=\"0 0 1\" dmin=\"-0.1\" dmax=\"0.1\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField name=\"FEM\" youngModulus=\"360\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;Node name=\"T\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@\" tags=\" \" /&gt;\n            &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" /&gt;\n            &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"60\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n            &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"300\" damping=\"1.0\" /&gt;\n            &lt;TrianglePressureForceField normal=\"0 0 1\" dmin=\"0.9\" dmax=\"1.1\" pressure=\"0.4 0 0\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;OglModel name=\"Visual\" color=\"blue\" /&gt;\n                &lt;IdentityMapping input=\"@../../Volume\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    TT = root.addChild('TT')\n    TT.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TT.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    TT.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/cylinder.msh\")\n    TT.addObject('MechanicalObject', src=\"@loader\", name=\"Volume\")\n    TT.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\", tags=\" \")\n    TT.addObject('DiagonalMass', massDensity=\"0.5\")\n    TT.addObject('FixedPlaneProjectiveConstraint', direction=\"0 0 1\", dmin=\"-0.1\", dmax=\"0.1\")\n    TT.addObject('FixedProjectiveConstraint', indices=\"0\")\n    TT.addObject('TetrahedralCorotationalFEMForceField', name=\"FEM\", youngModulus=\"360\", poissonRatio=\"0.3\", method=\"large\")\n\n    T = TT.addChild('T')\n    T.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@\", tags=\" \")\n    T.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\")\n    T.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"60\", poissonRatio=\"0.3\", method=\"large\")\n    T.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"300\", damping=\"1.0\")\n    T.addObject('TrianglePressureForceField', normal=\"0 0 1\", dmin=\"0.9\", dmax=\"1.1\", pressure=\"0.4 0 0\")\n    T.addObject('TriangleCollisionModel')\n\n    Visu = T.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"blue\")\n    Visu.addObject('IdentityMapping', input=\"@../../Volume\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/Topology/Mapping/Triangle2EdgeTopologicalMapping/","title":"Triangle2EdgeTopologicalMapping","text":"<p>Special case of mapping where TriangleSetTopology is converted to EdgeSetTopology</p> <p>Target: <code>Sofa.Component.Topology.Mapping</code></p> <p>namespace: <code>sofa::component::topology::mapping</code></p> <p>parents: </p> <ul> <li><code>TopologicalMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input topology to map output Output topology to map"},{"location":"30_Components/Topology/Mapping/Triangle2EdgeTopologicalMapping/#examples","title":"Examples","text":"<p>Component/Topology/Mapping/Triangle2EdgeTopologicalMapping.scn</p> XMLPython <pre><code>&lt;!-- Mechanical MassSpring Group Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.05\" showBoundingTree=\"0\" gravity=\"0 -9 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [StiffSpringForceField TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [EdgeSetGeometryAlgorithms EdgeSetTopologyContainer EdgeSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Triangle2EdgeTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;CGImplicit iterations=\"40\" tolerance=\"1e-6\" threshold=\"1e-10\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"true\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" scale=\"10\" /&gt;\n        &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;DiagonalMass massDensity=\"0.15\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"0 1\" /&gt;\n        &lt;StiffSpringForceField name=\"FF\" /&gt;\n        &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"60\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"300\" damping=\"1.0\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n\n        &lt;Node &gt;\n          &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n          &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"Edge Mesh\"&gt;\n            &lt;EdgeSetTopologyContainer name=\"Container\" /&gt;\n            &lt;EdgeSetTopologyModifier name=\"Modifier\" /&gt;\n            &lt;EdgeSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" drawEdges=\"1\" /&gt;\n            &lt;Triangle2EdgeTopologicalMapping name=\"Mapping\" input=\"@../Container\" output=\"@Container\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.05\", showBoundingTree=\"0\", gravity=\"0 -9 1\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('CGImplicit', iterations=\"40\", tolerance=\"1e-6\", threshold=\"1e-10\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', src=\"@loader\", scale=\"10\")\n    SquareGravity.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@loader\")\n    SquareGravity.addObject('DiagonalMass', massDensity=\"0.15\")\n    SquareGravity.addObject('FixedProjectiveConstraint', indices=\"0 1\")\n    SquareGravity.addObject('StiffSpringForceField', name=\"FF\")\n    SquareGravity.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"60\", poissonRatio=\"0.3\", method=\"large\")\n    SquareGravity.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"300\", damping=\"1.0\")\n    SquareGravity.addObject('TriangleCollisionModel')\n\n    SquareGravity = SquareGravity.addChild('SquareGravity')\n    SquareGravity.addObject('OglModel', name=\"Visual\", color=\"red\")\n    SquareGravity.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n\n    Edge Mesh = SquareGravity.addChild('Edge Mesh')\n    Edge Mesh.addObject('EdgeSetTopologyContainer', name=\"Container\")\n    Edge Mesh.addObject('EdgeSetTopologyModifier', name=\"Modifier\")\n    Edge Mesh.addObject('EdgeSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\", drawEdges=\"1\")\n    Edge Mesh.addObject('Triangle2EdgeTopologicalMapping', name=\"Mapping\", input=\"@../Container\", output=\"@Container\")\n</code></pre>"},{"location":"30_Components/Topology/Utility/TopologicalChangeProcessor/","title":"TopologicalChangeProcessor","text":"<p>Read topological Changes and process them.</p> <p>Target: <code>Sofa.Component.Topology.Utility</code></p> <p>namespace: <code>sofa::component::topology::utility</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  input file name for topological changes.  listChanges  0 for adding, 1 for removing, 2 for cutting and associated indices.  interval  time duration between 2 actions  0 shift  shift between times in the file and times when they will be read  0 loop  set to 'true' to re-read the file when reaching the end  0 useDataInputs  If true, will perform operation using Data input lists rather than text file.  0 timeToRemove  If using option useDataInputs, time at which will be done the operations. Possibility to use the interval Data also.  0 pointsToRemove  List of point IDs to be removed.  edgesToRemove  List of edge IDs to be removed.  trianglesToRemove  List of triangle IDs to be removed.  quadsToRemove  List of quad IDs to be removed.  tetrahedraToRemove  List of tetrahedron IDs to be removed.  hexahedraToRemove  List of hexahedron IDs to be removed.  saveIndicesAtInit  set to 'true' to save the incision to do in the init to incise even after a movement  0 epsilonSnapPath  epsilon snap path  0.1 epsilonSnapBorder  epsilon snap path  0.25 Visualization draw  draw information  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Topology/Utility/TopologicalChangeProcessor/#examples","title":"Examples","text":"<p>Component/Topology/Utility/TopologicalChangeProcessor_useDataInputs_option.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 -9 0\" dt=\"0.01\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Utility\"/&gt; &lt;!-- Needed to use components [TopologicalChangeProcessor] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline name=\"default0\" verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default1\" response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"SquareGravity\" gravity=\"0 -9.81 0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"true\"/&gt;\n        &lt;MechanicalObject name=\"mecaObj\" src=\"@loader\" template=\"Vec3\" scale3d=\"10 10 10\" restScale=\"1\" /&gt;\n        &lt;TriangleSetTopologyContainer src=\"@loader\" name=\"Container\" /&gt;\n        &lt;TriangleSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass name=\"default5\" massDensity=\"0.15\" /&gt;\n        &lt;TriangularFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.3\" youngModulus=\"60\" /&gt;\n        &lt;TriangularBendingSprings template=\"Vec3\" name=\"FEM-Bend\" stiffness=\"300\" damping=\"1\" /&gt;\n        &lt;TriangleCollisionModel name=\"default7\" /&gt;\n\n        &lt;Node &gt;\n            &lt;OglModel name=\"Visual\" material=\"Default Diffuse 1 0 0 1 0.6 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n            &lt;IdentityMapping name=\"default8\" input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n\n        &lt;BoxROI template=\"Vec3\" box=\"2 0 -1 8 -3 1\" drawBoxes=\"1\" position=\"@mecaObj.position\" drawTriangles=\"1\" triangles=\"@Container.triangles\" name=\"trash\" /&gt;\n        &lt;TopologicalChangeProcessor listening=\"1\" useDataInputs=\"1\" trianglesToRemove=\"@trash.triangleIndices\" timeToRemove=\"0.1\" interval=\"0.05\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9 0\", dt=\"0.01\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Utility\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', name=\"default0\", verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', name=\"default1\", response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    SquareGravity = root.addChild('SquareGravity', gravity=\"0 -9.81 0\")\n    SquareGravity.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    SquareGravity.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', name=\"mecaObj\", src=\"@loader\", template=\"Vec3\", scale3d=\"10 10 10\", restScale=\"1\")\n    SquareGravity.addObject('TriangleSetTopologyContainer', src=\"@loader\", name=\"Container\")\n    SquareGravity.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    SquareGravity.addObject('DiagonalMass', name=\"default5\", massDensity=\"0.15\")\n    SquareGravity.addObject('TriangularFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.3\", youngModulus=\"60\")\n    SquareGravity.addObject('TriangularBendingSprings', template=\"Vec3\", name=\"FEM-Bend\", stiffness=\"300\", damping=\"1\")\n    SquareGravity.addObject('TriangleCollisionModel', name=\"default7\")\n\n    SquareGravity = SquareGravity.addChild('SquareGravity')\n    SquareGravity.addObject('OglModel', name=\"Visual\", material=\"Default Diffuse 1 0 0 1 0.6 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    SquareGravity.addObject('IdentityMapping', name=\"default8\", input=\"@..\", output=\"@Visual\")\n    SquareGravity.addObject('BoxROI', template=\"Vec3\", box=\"2 0 -1 8 -3 1\", drawBoxes=\"1\", position=\"@mecaObj.position\", drawTriangles=\"1\", triangles=\"@Container.triangles\", name=\"trash\")\n    SquareGravity.addObject('TopologicalChangeProcessor', listening=\"1\", useDataInputs=\"1\", trianglesToRemove=\"@trash.triangleIndices\", timeToRemove=\"0.1\", interval=\"0.05\")\n</code></pre>"},{"location":"30_Components/Topology/Utility/TopologyBoundingTrasher/","title":"TopologyBoundingTrasher","text":"<p>A class to remove all elements going outside from the given Bounding Box.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Sofa.Component.Topology.Utility</code></p> <p>namespace: <code>sofa::component::topology::utility</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 position  position coordinates of the topology object to interact with.  box  List of boxes defined by xmin,ymin,zmin, xmax,ymax,zmax  -1000 -1000 -1000 1000 1000 1000 Visualization drawBox  Draw Boxes. (default = false)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"30_Components/Topology/Utility/TopologyBoundingTrasher/#examples","title":"Examples","text":"<p>Component/Topology/Utility/TopologyBoundingTrasher.scn</p> XMLPython <pre><code>&lt;!-- Mechanical MassSpring Group Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.01\" showBoundingTree=\"0\" gravity=\"0 -1 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangularFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [StiffSpringForceField TriangularBendingSprings] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Utility\"/&gt; &lt;!-- Needed to use components [TopologyBoundingTrasher] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showVisual\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"SquareGravity\"&gt;\n        &lt;CGImplicit iterations=\"40\" tolerance=\"1e-6\" threshold=\"1e-10\" /&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/square3.msh\" createSubelements=\"true\" /&gt;\n        &lt;MechanicalObject name=\"Volume\" src=\"@loader\" scale=\"10\" /&gt;\n        &lt;TriangleSetTopologyContainer  name=\"Container\" src=\"@loader\" /&gt;\n        &lt;TriangleSetTopologyModifier   name=\"Modifier\" /&gt;\n        &lt;TriangleSetGeometryAlgorithms name=\"GeomAlgo\" template=\"Vec3\" /&gt;\n        &lt;DiagonalMass massDensity=\"1\" /&gt;\n        &lt;StiffSpringForceField name=\"FF\" /&gt;\n        &lt;TriangularFEMForceField name=\"FEM\" youngModulus=\"60\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangularBendingSprings name=\"FEM-Bend\" stiffness=\"300\" damping=\"1.0\" /&gt;\n\n        &lt;TopologyBoundingTrasher box=\"-10 -10 -10 11 11 11\" topology=\"@Container\" drawBox=\"1\" position=\"@Volume.position\"/&gt;\n        &lt;Node &gt;\n            &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", showBoundingTree=\"0\", gravity=\"0 -1 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Utility\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showVisual\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n    root.addObject('DefaultAnimationLoop')\n\n    SquareGravity = root.addChild('SquareGravity')\n    SquareGravity.addObject('CGImplicit', iterations=\"40\", tolerance=\"1e-6\", threshold=\"1e-10\")\n    SquareGravity.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/square3.msh\", createSubelements=\"true\")\n    SquareGravity.addObject('MechanicalObject', name=\"Volume\", src=\"@loader\", scale=\"10\")\n    SquareGravity.addObject('TriangleSetTopologyContainer', name=\"Container\", src=\"@loader\")\n    SquareGravity.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    SquareGravity.addObject('TriangleSetGeometryAlgorithms', name=\"GeomAlgo\", template=\"Vec3\")\n    SquareGravity.addObject('DiagonalMass', massDensity=\"1\")\n    SquareGravity.addObject('StiffSpringForceField', name=\"FF\")\n    SquareGravity.addObject('TriangularFEMForceField', name=\"FEM\", youngModulus=\"60\", poissonRatio=\"0.3\", method=\"large\")\n    SquareGravity.addObject('TriangularBendingSprings', name=\"FEM-Bend\", stiffness=\"300\", damping=\"1.0\")\n    SquareGravity.addObject('TopologyBoundingTrasher', box=\"-10 -10 -10 11 11 11\", topology=\"@Container\", drawBox=\"1\", position=\"@Volume.position\")\n\n    SquareGravity = SquareGravity.addChild('SquareGravity')\n    SquareGravity.addObject('OglModel', name=\"Visual\", color=\"red\")\n    SquareGravity.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"30_Components/Topology/Utility/TopologyChecker/","title":"TopologyChecker","text":"<p>Read topological Changes and process them.</p> <p>Target: <code>Sofa.Component.Topology.Utility</code></p> <p>namespace: <code>sofa::component::topology::utility</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 eachStep  Check topology at each step  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"35_Plugins/10_What_is_a_plugin/","title":"What is a Plugin?","text":"<p>SOFA allows to extend its feature with a plugin mechanism. A plugin is a shared library that can be loaded dynamically at run-time by SOFA. More features become available, such as new components or alternative scene loaders.</p>"},{"location":"35_Plugins/10_What_is_a_plugin/#marketplace","title":"Marketplace","text":"<p>The Marketplace lists some SOFA plugins.</p>"},{"location":"35_Plugins/10_What_is_a_plugin/#plugin-loading","title":"Plugin Loading","text":"<p>In order to use the features of a plugin, it must be loaded first. SOFA offers multiple ways to load a plugin.</p>"},{"location":"35_Plugins/10_What_is_a_plugin/#command-line-argument","title":"Command-line Argument","text":"<p>The application <code>runSofa</code> accepts an optional argument <code>-l,--load</code> to specify a list of plugins to load. A plugin can be provided as a full path, or as a name. In the latter case, the plugin library will be searched in known folders for a match.</p>"},{"location":"35_Plugins/10_What_is_a_plugin/#automatic-loading","title":"Automatic Loading","text":"<p>By default, the application <code>runSofa</code> reads the content of a configuration file to load automatically a list of plugins. This list can be edited to add the plugin you need. The file is either <code>plugin_list.conf</code> or <code>plugin_list.conf.default</code>. <code>plugin_list.conf.default</code> is generated automatically at compile-time and is not meant to be edited. To edit a list of plugins, <code>plugin_list.conf</code> must be used. If the file does not exist, it must be created based on <code>plugin_list.conf.default</code>.</p>"},{"location":"35_Plugins/10_What_is_a_plugin/#gui-plugin-manager","title":"GUI: Plugin Manager","text":"<p>The Qt-based GUI allows to load a plugin through a graphical user interface. Go to <code>Edit &gt; Plugin Manager ...</code>. You will see the list of already loaded plugins. Click on <code>Add...</code> to load another plugin.</p>"},{"location":"35_Plugins/20_Build_a_plugin_from_sources/","title":"Build a plugin","text":"<p>This page presents how to build an external plugin, i.e. a plugin which is not provided in the source code of SOFA.</p> <p>\u26a0\ufe0f WARNING: In most cases, the version of a plugin follows the version of SOFA. For compatibility reasons, it is preferable to compile the version of the plugin corresponding to your SOFA version. For example, if you have the SOFA v23.06 binaries, you will need to compile plugins using their v23.06 version (i.e. their v23.06 branch).</p> <p>Two ways of building a plugin are possible:</p> <ul> <li>you are compiling SOFA and you integrate your plugin project along SOFA (aka in-tree build).</li> <li>you have an install of SOFA (either you downloaded a pre-built configuration, or you installed by yourself from a SOFA build), and you want to use this installation to build your plugin (aka out-of-tree build)</li> </ul>"},{"location":"35_Plugins/20_Build_a_plugin_from_sources/#in-tree-build","title":"In-tree build","text":""},{"location":"35_Plugins/20_Build_a_plugin_from_sources/#preferred-file-architecture","title":"Preferred file architecture","text":"<p>If you use the source code of SOFA, you want compile and use one or more external plugins it is preferred to create one specific repository outside SOFA where you can checkout all these external plugins. This structure is preferred since it will allow a clean organization of external plugins in one single repository. Let's note the path to this repository /ext_plugin_repo/.</p> <p>In this directory, the structure is:</p> <ul> <li>ext_plugin_repo/<ul> <li>plugin1/</li> <li>plugin2/</li> <li>...</li> </ul> </li> </ul>"},{"location":"35_Plugins/20_Build_a_plugin_from_sources/#cmakelist-of-the-repository","title":"CMakeList of the repository","text":"<p>In order to handle this repository as one single set of external plugins, you need to write a short CMakeList.txt file as follows:</p> <pre><code>cmake_minimum_required(VERSION 2.8.12)\n\nfind_package(SofaFramework)\n\nsofa_add_subdirectory(plugin path_to_plugin1/  name_of_project_plugin1)\nsofa_add_subdirectory(plugin path_to_plugin2/  name_of_project_plugin2)\n</code></pre>"},{"location":"35_Plugins/20_Build_a_plugin_from_sources/#cmake-option-in-sofa","title":"CMake option in SOFA","text":"<p>To compile all the external plugins located in this repository, all you need to do is to set the path to this repository (/ext_plugin_repo/) in the CMake variable: SOFA_EXTERNAL_DIRECTORIES.</p> <p>This will directly configure and allow to compile all specified plugins from SOFA.</p>"},{"location":"35_Plugins/20_Build_a_plugin_from_sources/#out-of-tree-build","title":"Out-of-tree build","text":"<p>Your plugin will be considered as a standalone project, and SOFA will be simply a dependency for your CMake project.</p>"},{"location":"35_Plugins/20_Build_a_plugin_from_sources/#cmake-configuration","title":"CMake configuration","text":"<p>The main CMakeFile.txt of the plugin will not be different from the in-tree way.</p> <p>Afterwards, in CMake (cmake, ccmake, cmake-gui), you just set the source to the root of your plugin, as any project based on CMake.</p> <p>The only mandatory requirement for your project to find SOFA is to edit the CMake variable CMAKE_PREFIX_PATH and set the value to the path of the lib/cmake directory of your SOFA installation:</p> <p></p> <p>After setting the eventual third-party libraries (Qt, Eigen, etc), you will be able to build your plugin.</p> <p>Finally, you are advised to install directly your plugin into the SOFA installation, essentially to load it more easily with runSofa. This is possible by setting the CMake variable CMAKE_INSTALL_PREFIX in your plugin configuration.</p>"},{"location":"35_Plugins/25_Fetch_plugin_code_source/","title":"Fetch plugin code source","text":"<p>\ufeff# Fetch Plugin Code Source</p> <p>A few number of plugins are directly embedded in SOFA repository, under <code>applications/plugins</code>. Most of them are deactivated by default, and it is up to the developer to activate the compilation in CMake through a corresponding CMake variable.</p> <p>However, some plugins can also be found in other repositories. For example, here is a list of important plugins with their corresponding repository:</p> Plugin Repository SofaPython3 https://github.com/sofa-framework/SofaPython3 SofaGLFW https://github.com/sofa-framework/SofaGLFW CGALPlugin https://github.com/sofa-framework/CGALPlugin SoftRobots https://github.com/SofaDefrost/SoftRobots ModelOrderReduction https://github.com/SofaDefrost/ModelOrderReduction Caribou https://github.com/mimesis-inria/caribou <p>Some of those external plugins (from other repositories) can be directly fetched and downloaded in SOFA sources at the configuration stage with CMake. To fetch the source code of a plugin, follow these steps: 1) In CMake, activate the variable <code>SOFA_FETCH_{PLUGINNAME}</code>. 2) Configure. After the configuration, the variable <code>SOFA_FETCH_{PLUGINNAME}</code> is automatically unchecked. The log output should confirm that. 3) A new CMake variable <code>PLUGIN_{PLUGINNAME}</code> becomes available. Activate it. 4) Configure and generate. The plugin will be compiled along with SOFA.</p> <p></p> <p>Fetching the source code of a plugin uses git to clone a repository (usually the master branch) in the SOFA build directory. It is done one time, and it is then up to the developer to update and manage the git directory. For developing on a plugin repository, it is advised to follow these steps rather than fetching the code source. </p>"},{"location":"35_Plugins/30_Use_a_plugin_binaries/","title":"Use a plugin binaries","text":"<p>Coming soon ...</p>"},{"location":"35_Plugins/40_Create_your_plugin_/","title":"Create your plugin","text":"<p>See Programming with SOFA &gt; Create your plugin.</p>"},{"location":"35_Plugins/50_Usual_plugins/10_CGAL_library/","title":"CGAL library","text":"<p>CGAL is a C++ library specialized on geometric computations. CGAL is a big project, therefore it is not included natively into SOFA extlibs' directory. Here is the way to compile it for SOFA using CMake.</p>"},{"location":"35_Plugins/50_Usual_plugins/10_CGAL_library/#install-the-cgal-plugin-linux","title":"Install the CGAL plugin - Linux","text":"<p>With Linux, follow the next steps to install CGAL:</p> <ul> <li>Install     Boost for     use with Sofa. Note that Sofa with CMake requires the compiled     libraries,</li> <li>Install GMP and MPFR libraries,</li> <li>Install CGAL</li> <li>With CMake, set the SOFA-PLUGIN_CGALPLUGIN option to On,</li> <li>Configure. Set GMP_DIR and MPFR_DIR to the location that you     installed GMP and MPFR. Configure again and generate.</li> </ul> <p>You can now compile CGalPlugin.</p>"},{"location":"35_Plugins/50_Usual_plugins/10_CGAL_library/#install-the-cgal-plugin-macos","title":"Install the CGAL plugin - MacOS","text":"<p>With MacOS, follow the next steps to install CGAL:</p> <ul> <li> <p>Install Boost, GMP and MPFR libraries with Homebrew</p> <pre><code>brew install boost, gmp, mpfr\n</code></pre> </li> <li> <p>Download the sources of CGAL version 4.7 (last stable version for SOFA) here</p> </li> <li> <p>Create a folder in your Homebrew directory to build the plugin</p> <pre><code>cd /usr/local/Cellar/\nmkdir cgal4.7\ncd cgal4.7\n</code></pre> </li> <li> <p>Build the plugin with Cmake (redirect to the folder you downloaded before)</p> <pre><code>cmake ~/Downloads/CGAL-4.7/\nmake\n</code></pre> </li> <li> <p>Go to the build directory of your SOFA install and open CMake GUI</p> <pre><code>cd ~/path_to_sofa/sofa/build/buildv17.12/\ncmake-gui ../../\n</code></pre> <ul> <li>Set the PLUGIN_CGALPLUGIN variable and put the path <code>/usr/local/Cellar/cgal4.7/</code> in the CGAL_DIR in the Cmake GUI</li> <li>Create the GMP_DIR variable and set the path <code>/usr/local/Cellar/gmp</code></li> <li>Create the MPFR_DIR variable and set the path <code>/usr/local/Cellar/mpfr</code></li> <li>Set the PLUGIN_IMAGE variable (for the example, see after), configure, generate and compile</li> </ul> </li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/10_CGAL_library/#install-the-cgal-plugin-windows","title":"Install the CGAL plugin - Windows","text":"<p>Downloads You will need to download the following:</p> <ul> <li>CGal: This     tutorial will describe how to set up CGal using the installer     provided by CGal, which is bundled with some additional     required libraries.</li> <li>Boost: This     is required for a number of Sofa plugins</li> </ul> <p>Installing</p> <ul> <li>Boost: To use the version of Boost you downloaded, set the     SOFA-EXTERNAL_BOOST_PATH cmake variable to its directory, for     example:     <code>SOFA-EXTERNAL_BOOST_PATH = \"C:Program Files (x86)boostboost_1_46_1\"</code></li> <li>CGAL: Run the installer that you downloaded above. At some     point, there will be a dialog box asking about additional libraries     that can be installed with your CGAL installation. Be sure that     GMP/MPFR is selected.</li> </ul> <p>Compiling CGAL Libraries</p> <ul> <li>Open the CMake Gui</li> <li>Set Where is the source code to the location that you installed CGAL     in (example C:Program FilesCGAL-4.1)</li> <li>Set Where to build the libraries to the same location</li> <li>Press Configure. You shouldn't have to make any changes to     the configuration. Keep pressing Configure until none of the values     show up red.</li> <li>Press Generate.</li> <li>Open the newly created solution file (found in the CGAL directory)     in Visual Studio</li> <li>If needed, set the Build Configuration to Release. Compile.</li> </ul> <p>Compiling CGalPlugin</p> <ul> <li>Open the CMake Gui, and point it to your Sofa source and build</li> <li>Check the SOFA-PLUGIN_CGALPLUGIN option</li> <li>If you haven't already done so, set SOFA-EXTERNAL_BOOST_PATH     to your Boost directory</li> <li>Press Configure. Keep pressuring Configure until none of the values     show up red.</li> </ul> <p>Note: If you have used the CGAL installer to install GMP and MPFR, it should find the directories for those libraries automatically. If for some reason GMP_DIR and MPFR_DIR are not set, you can direct set them to the appropriate directory. They are both located in your CGal directory under auxiliary/gmp. You can now open your Sofa solution and compile CGalPlugin.</p>"},{"location":"35_Plugins/50_Usual_plugins/10_CGAL_library/#test-your-plugin-on-the-examples","title":"Test your plugin on the examples","text":"<p>You can launch one of the example scenes available from the root (source directory): <code>runSofa applications/plugins/CGALPlugin/scenes/MeshGenerationFromImage.scn</code> This scene takes as input an Image representing a rectangular parallelepiped with 3 different label in the image. The CGAL library allows to mesh the image using different parameters (e.g. element size) depending on the label. The middle zone (blue) has very fine elements, the purple area has medium-size elements and finally the red area includes coarse tetrahedra. The generated mesh can finally be exported. [caption id=\"attachment_1717\" align=\"aligncenter\" width=\"600\"]{.wp-image-1717 width=\"600\" height=\"401\"} Screenshot from the scene MeshGenerationFromImage.scn[/caption]</p>"},{"location":"35_Plugins/50_Usual_plugins/30_Python_scripting/","title":"Python scripting","text":""},{"location":"35_Plugins/50_Usual_plugins/30_Python_scripting/#sofapython3","title":"SofaPython3","text":"<p>Since the v20.12 release of SOFA, the official SOFA plugin for python is the SofaPython3 plugin. A dedicated documentation for the plugin is available on this readthedoc. \u00a0</p>"},{"location":"35_Plugins/50_Usual_plugins/30_Python_scripting/#sofapython27-deprecated","title":"SofaPython(2.7): deprecated","text":"<p>Compatible with python2.7, the previous SofaPython plugin is now deprecated and its maintenance is dropped since the v20.12 release. Associated documentation pages remain accessible:</p> <ul> <li>Python2 scripting</li> <li>Python2 Data wrapping</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/50_Using_CUDA/","title":"Using CUDA","text":""},{"location":"35_Plugins/50_Usual_plugins/50_Using_CUDA/#cuda-compilation","title":"CUDA Compilation","text":""},{"location":"35_Plugins/50_Usual_plugins/50_Using_CUDA/#linux","title":"Linux","text":"<p>To use CUDA in SOFA under Linux, you need to follow these steps:</p> <ul> <li>Get the required files from     NVIDIA{.external     .text}. For Cuda 5.0, there is only one file to download     and install. If you are using an earlier version, you need to     download and install three files, and in the correct order.<ul> <li>Cuda Toolkit</li> <li>The appropriate Cuda driver for your system</li> <li>Cuda SDK</li> </ul> </li> <li>Set the environment variables CUDA_HOME to the location of cuda,     for example: export CUDA_HOME=\"/usr/local/cuda\"</li> <li>Add cuda to your path: export PATH=\\${CUDA_HOME}/bin:\\${PATH}</li> <li>In CMake, turn on the SOFA-PLUGIN_SOFACUDA option, and     reconfigure<ul> <li>New options relating to Cuda will appear, some with the prefix     \"SOFA-CUDA\" and some with the prefix \"CUDA\". The SOFA-CUDA     options include:<ul> <li>SOFA-CUDA_DOUBLE: Option to activate double-precision     support in CUDA (requires GT200+ GPU and -arch sm_13 flag)</li> <li>SOFA-CUDA_PRECISE: Option to use IEEE 754-compliant     floating point operations</li> <li>SOFA-CUDA_DOUBLE_PRECISE: Option to get     double-precision for sqrt/div (requires compute     capability &gt;= 2 and CUDA_VERSION &gt; 3.0) (with     SOFA_GPU_CUDA_PRECISE and SOFA_GPU_CUDA_DOUBLE you get     IEEE 754-compliant floating point operations for addition     and multiplication only</li> <li>SOFA-CUDA_CUBLAS: Option to activate cublas support in     CUDA (requires SOFA_GPU_CUDA_DOUBLE)</li> <li>SOFA-CUDA_CUDPP: Option to activate CUDPP     (for RadixSort)</li> <li>SOFA-CUDA_THRUST: Option to activate THRUST     (for RadixSort) Note: THRUST is included in CUDA SDK 4.0+,     it is recommended to use it if available</li> </ul> </li> <li>If you want to use some of the more advanced features of Cuda,     such as atomics for floats, you should can set the     CUDA_NVCC_FLAGS option to --ptxas-options=-v -arch sm_12,     changing sm_12 to whatever Compute Capabilities you graphics     card supports. See     (link) for a table of     Compute Capabilities.</li> </ul> </li> <li>Configure, Generate, and compile</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/50_Using_CUDA/#windows","title":"Windows","text":"<p>To use CUDA in SOFA under Windows, you need to follow these steps:</p> <ul> <li>Get the required files from     NVIDIA.     For Cuda 5.0, there is only one file to download and install. If you     are using an earlier version, you need to download and install three     files, and in the correct order<ul> <li>Cuda Toolkit</li> <li>The appropriate Cuda driver for your system</li> <li>Cuda SDK</li> </ul> </li> <li>Check that the path to Cuda has been added to your system path. (for     example, <code>C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.5\\bin</code>)<ul> <li>Right click the My Computer icon on the desktop</li> <li>Select Properties</li> <li>Select Advanced System Settings from the left hand panel</li> <li>Select the Adcanced tab</li> <li>Press Environment Variables...</li> <li>Under System Variables, scroll until you find Path</li> <li>If the above path is not part of the Path variable, add a     semicolon after the last path in the list, and add the     above path.</li> </ul> </li> <li>In CMake, turn on the PLUGIN_SOFACUDA option, and     reconfigure<ul> <li>New options relating to Cuda will appear, some with the prefix     \"SOFA-CUDA\" and some with the prefix \"CUDA\". The SOFA-CUDA     options include:<ul> <li>SOFA-CUDA_DOUBLE: Option to activate double-precision     support in CUDA (requires GT200+ GPU and -arch sm_13 flag)</li> <li>The appropriate Cuda driver for your system</li> <li>SOFA-CUDA_PRECISE: Option to use IEEE 754-compliant     floating point operations</li> <li>SOFA-CUDA_DOUBLE_PRECISE: Option to get     double-precision for sqrt/div (requires compute     capability &gt;= 2 and CUDA_VERSION &gt; 3.0) (with     SOFA_GPU_CUDA_PRECISE and SOFA_GPU_CUDA_DOUBLE you get     IEEE 754-compliant floating point operations for addition     and multiplication only</li> <li>SOFA-CUDA_CUBLAS: Option to activate cublas support in     CUDA (requires SOFA_GPU_CUDA_DOUBLE)</li> <li>SOFA-CUDA_CUDPP: Option to activate CUDPP     (for RadixSort)</li> <li>SOFA-CUDA_THRUST: Option to activate THRUST     (for RadixSort) Note: THRUST is included in CUDA SDK 4.0+,     it is recommended to use it if available</li> </ul> </li> <li>If you want to use some of the more advanced features of Cuda,     such as atomics for floats, you can set the     CUDA_NVCC_FLAGS option to --ptxas-options=-v -arch sm_12,     changing sm_12 to whatever Compute Capabilities you graphics     card supports. See     (link) for a table of     Compute Capabilities.</li> </ul> </li> <li>Configure, Generate, and compile</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/50_Using_CUDA/#sofacuda","title":"SofaCUDA","text":"<p>SofaCUDA is a plugin that provides a number of Sofa components that have been implemented using CUDA, which allows the graphics card to be used for multithreaded programming. This can significantly improve the performance of your scene when working with large meshes. To include this plugin, first follow the compilation instructions define above.</p>"},{"location":"35_Plugins/50_Usual_plugins/50_Using_CUDA/#cuda-scene-file","title":"CUDA scene file","text":"<p>To begin using the Cuda components, you need to change the template of the Mechanical Object in your scene. Consider the following scene:</p> <pre><code>&lt;Node name=\"root\" dt=\"0.04\" showBehaviorModels=\"0\" showCollisionModels=\"0\" showMappings=\"0\" showForceFields=\"1\"&gt;\n  &lt;Node name=\"M1\"&gt;\n    &lt;MeshVTKLoader name=\"volume\" filename=\"mesh/raptorTetra_19409.vtu\" onlyAttachedPoints=\"false\" /&gt;\n    &lt;EulerImplicit rayleighMass=\"0.01\" rayleighStiffness=\"0.01\" /&gt;\n    &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-6\" threshold=\"1e-20\"/&gt;\n    &lt;MeshTopology src=\"@volume\" /&gt;\n    &lt;MechanicalObject template=\"Vec3f\" /&gt;\n    &lt;UniformMass vertexMass=\"0.01\" /&gt;\n    &lt;BoxROI name=\"box0\" box=\"-2.2 -1 -10 2.2  10  10\" drawBoxes=\"1\" /&gt;\n    &lt;BoxROI name=\"box1\" box=\"-2.2 -1  -1 2.2 2.5 1.5\" drawBoxes=\"1\" /&gt;\n    &lt;IndexValueMapper name=\"ind_box0\"                                      indices=\"@box0.tetrahedronIndices\" value=\"100000\" /&gt;\n    &lt;IndexValueMapper name=\"ind_box1\" inputValues=\"@ind_box0.outputValues\" indices=\"@box1.tetrahedronIndices\" value=\"1000000\" /&gt;\n    &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"@ind_box1.outputValues\" poissonRatio=\"0.4\" listening=\"true\" /&gt;\n    &lt;BoxROI name=\"box3\" box=\"-2.2 -0.3 -9.2    2.2 0.110668 2.88584\" drawBoxes=\"1\" drawSize=\"2\" /&gt;\n    &lt;FixedConstraint indices=\"@box3.indices\" /&gt;\n    &lt;BoxROI name=\"boxF\" box=\"-2.2 -1 6.88 2.2  10  10\" drawBoxes=\"true\" /&gt;\n    &lt;ConstantForceField points=\"@boxF.indices\" force=\"7.5 -6.63 -15\" arrowSizeCoef=\"0.1\" /&gt;\n    &lt;PlaneForceField normal=\"0 1 0\" d=\"-0.2\" stiffness=\"100\"  draw=\"1\" drawSize=\"20\" /&gt;\n  &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>To use the Cuda components that are available for this scene, there are two steps: Add:</p> <pre><code>&lt;RequiredPlugin name=\"CUDA computing\" pluginName=\"SofaCUDA\" /&gt;\n</code></pre> <p>near the top of the scene. This indicates that the SofaCUDA plugin is needed, and will automatically load the plugin if it is not already loaded in the Plugin Manager. Change the MechanicalObject template from Vec3f to CudaVec3f. This will cause all of the components which have been implemented in Cuda to use that implementation, rather than the standard cpu implementation. In this scene, this includes components such as BoxROI, TetrahedronFEMForceField and UniformMass. This leaves us with the scene:</p> <pre><code>&lt;Node name=\"root\" dt=\"0.04\" showBehaviorModels=\"0\" showCollisionModels=\"0\" showMappings=\"0\" showForceFields=\"1\"&gt;\n    &lt;RequiredPlugin name=\"CUDA computing\" pluginName=\"SofaCUDA\" /&gt;\n  &lt;Node name=\"M1\"&gt;\n    &lt;MeshVTKLoader name=\"volume\" filename=\"mesh/raptorTetra_19409.vtu\" onlyAttachedPoints=\"false\" /&gt;\n    &lt;EulerImplicit rayleighMass=\"0.01\" rayleighStiffness=\"0.01\" /&gt;\n    &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-6\" threshold=\"1e-20\"/&gt;\n    &lt;MeshTopology src=\"@volume\" /&gt;\n    &lt;MechanicalObject template=\"CudaVec3f\" /&gt;\n    &lt;UniformMass vertexMass=\"0.01\" /&gt;\n    &lt;BoxROI name=\"box0\" box=\"-2.2 -1 -10 2.2  10  10\" drawBoxes=\"1\" /&gt;\n    &lt;BoxROI name=\"box1\" box=\"-2.2 -1  -1 2.2 2.5 1.5\" drawBoxes=\"1\" /&gt;\n    &lt;IndexValueMapper name=\"ind_box0\"                                      indices=\"@box0.tetrahedronIndices\" value=\"100000\" /&gt;\n    &lt;IndexValueMapper name=\"ind_box1\" inputValues=\"@ind_box0.outputValues\" indices=\"@box1.tetrahedronIndices\" value=\"1000000\" /&gt;\n    &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"@ind_box1.outputValues\" poissonRatio=\"0.4\" listening=\"true\" /&gt;\n    &lt;BoxROI name=\"box3\" box=\"-2.2 -0.3 -9.2    2.2 0.110668 2.88584\" drawBoxes=\"1\" drawSize=\"2\" /&gt;\n    &lt;FixedConstraint indices=\"@box3.indices\" /&gt;\n    &lt;BoxROI name=\"boxF\" box=\"-2.2 -1 6.88 2.2  10  10\" drawBoxes=\"true\" /&gt;\n    &lt;ConstantForceField points=\"@boxF.indices\" force=\"7.5 -6.63 -15\" arrowSizeCoef=\"0.1\" /&gt;\n    &lt;PlaneForceField normal=\"0 1 0\" d=\"-0.2\" stiffness=\"100\"  draw=\"1\" drawSize=\"20\" /&gt;\n\n  &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/50_Using_CUDA/#cuda-coding","title":"CUDA coding","text":"<p>How to access a data from the MechanicalState and use it in CUDA: n CUDA code, you cannot use the usual Accessor as for CPU coding. To access and use a vector from the MechanicalState inside your kernel, two steps are required: Reading access First, you need to access the vector:</p> <pre><code>const VecCoord&amp; myPositions = this-&gt;getMState()-&gt;read(core::VecCoordId:: position())-&gt;getValue();\n</code></pre> <p>Then, to send the recovered vector to your kernel, you need to give as argument:</p> <pre><code>myPositions.deviceRead();\n</code></pre> <p>Writing-Reading access In a similar way, you need to write it as follows:</p> <pre><code>VecCoord&amp; myPositions = *(this-&gt;getMState()-&gt;write(core::VecCoordId:: position()).beginEdit());\nmyPositions.deviceWrite();\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/","title":"Sensable","text":""},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#installing-the-sensable-plugin","title":"Installing the Sensable Plugin","text":"<ul> <li>Download Geomagic drivers and SDK: OpenHaptics for Windows Developer Edition v3.4 OpenHaptics for Linux Developer Edition v3.4</li> <li>The OpenHaptics SDK comes with both the Phantom Drivers and the     OpenHaptics libraries. First install the drivers, then the SDK.</li> <li>Run the Phantom Test program that came with the SDK, and use it to     check that the Omni is working. It is also recommended that you use     it to calibrate your Omni.</li> <li>In your Sofa CMake configuration, select SOFA-PLUGIN_SENSABLE     and configure. If you installed OpenHaptics in the default location,     CMake should find all the libraries and directories automatically.</li> </ul> <p>If CMake doesn't find them for you, it will return an error and you can set them manually. The HD and HL libraries are found in OpenHaptics/Academic/3.1/lib/\"your system's subdirectories\", while the HDU library is found in OpenHaptics/Academic/3.1/utilities/lib/\"your system's subdirectories\". Once all the variables are set, you can Configure, Generate and compile as usual.</p>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#using-the-plugin","title":"Using the Plugin","text":""},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#method-1","title":"Method 1","text":"<p>One method of using the Omni in a scene is to control a rigid object directly with the Omni, and compute the force feedback based on the penetration of that rigid object with any other object in the scene. The Senable Plugin contains two important components. The NewOmniDriver interfaces with the Omni device, getting the tool's location and sending it the appropriate force feedback. The EnslavementForceFeedback computes the force feedback values, based on the collision detection that Sofa already does in a scene.</p>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#example-scene-1-using-the-distancegrid-collision-model","title":"Example Scene 1 - Using the DistanceGrid Collision Model","text":"<p>In the examples directory of the Sensable Plugin, there are a number of example scenes. We will examine SimpleBox-DistanceGrid.scn. This scene has two main objects. A long curved tool is controlled by the Omni, and a simple box serves as something for us to feel. Taking a look at the scene in more detail, we see our collision pipeline:</p> <pre><code>&lt;CollisionPipeline name=\"pipeline\" depth=\"6\" verbose=\"0\"/&gt;\n&lt;BruteForceDetection name=\"detection\" /&gt;\n&lt;CollisionResponse name=\"response\" response=\"default\" /&gt;\n&lt;MinProximityIntersection name=\"proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n</code></pre> <p>This is what does the collision detection for the scene. Next, we see our NewOmniDriver:</p> <pre><code>&lt;NewOmniDriver name=\"Omni Driver\"  listening=\"true\" tags=\"Omni\" forceScale=\"0.5\" scale=\"500\"  permanent=\"true\" /&gt;\n</code></pre> <p>We will discuss all the attributes in more detail later, but the important one to note now is the tags attribute. The NewOmniDriver needs to find the MechanicalObject that it will control, and the ForceFeedback that will calculate the feedback for it. It will do this by looking for the components that have the same tag as in, in this case Omni. Next we see the Instrument node. First we see the MechanicalObject:</p> <pre><code>&lt;MechanicalObject template=\"Rigid\" name=\"instrumentState\" tags=\"Omni\"  /&gt;\n</code></pre> <p>Here, the template type is important. The NewOmniDriver is looking for a MechanicalObject with the template Rigid. Also, we see that it has the matching tag, so that the NewOmniDriver knows that this is the MechanicalObject that it should be controlling. The UniformMass object simply gives the MechanicalObject some mass. In the VisualModel node, the OglModel loads the mesh that is used to visualize the instrument.</p> <pre><code>&lt;OglModel template=\"ExtVec3f\" name=\"InstrumentVisualModel\"  fileMesh=\"data/mesh/dental_instrument.obj\" scale3d=\"10 10 10\" translation=\"-2.12256 1.32361 35.5\" rotation=\"180 0 150\" material=\"Default Diffuse 1 1 0.2 0.2 1 Ambient 1 0.2 0.04 0.04 1 Specular 0 1 0.2 0.2 1 Emissive 0 1 0.2 0.2 1 Shininess 0 45\" /&gt;\n</code></pre> <p>Note the translation and rotation attributes. We will come back to them later. The material attribute just gives the instrument a different look than the box. The RigidMapping connects the MechanicalObject we saw earlier with the OglModel. This keeps the visualization of the instrument in sync with the movement of the Omni. In the Collision Model node, there are a number of important details.</p> <pre><code>&lt;MechanicalObject template=\"Vec3d\" name=\"Particle\" position=\"0 0 0\" /&gt;\n&lt;Point name=\"ParticleModel\" contactStiffness=\"2\" /&gt;\n&lt;RigidMapping template=\"MechanicalMapping&amp;lt;Rigid,Vec3d&amp;gt;\" name=\"MM-&gt;CM mapping\"  object1=\"instrumentState\"  object2=\"Particles\" /&gt;\n    &lt;EnslavementForceFeedback name=\"forcefeedback\" tags=\"Omni\" collisionModel1=\"@ParticleModel\" collisionModel2=\"\" relativeStiffness=\"4\" attractionDistance=\"0.3\" normalsPointOut=\"false\"/&gt;\n</code></pre> <p>First, we see the MechanicalObject named Particle, and the attribute position with the value \"0 0 0\". Here we are making defining a single point that will be used for our collisions. This point represents the tip of the Omni. We place it at \"0 0 0\" because this lines it up with the Omni properly. We then give our particle a Point collision model. The RigidMapping, like the earlier one, keeps are particle in sync with the movement of the Omni. The visual model is also in sync with the motion, and we want to tip of the instrument to correspond with our particle, so that the tip of the instrument is where the collision occurs. That is what the translation and rotation attribute in InstrumentVisualModel are for. They line the visual model of the tool up with the particle. We put the translation in the visual model instead of in the particle so that the tip lines up with the movement and rotation of the Omni. The EnslavementForceFeedback listens for any contact that our Particle Model makes with any other model in the scene, then calculates the force feedback for the Omni accordingly. We will look into all the attributes in detail later, but for now notice that again the tag attribute matches that of the NewOmniDriver. The Box node also has a visual model and a collision model. In this case, the same mesh is used in both models. Here, the DistanceGrid is the collision model for the box.</p>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#example-scene-2-using-the-triangle-collision-model","title":"Example Scene 2 - Using the Triangle Collision Model","text":"<p>The example scene SimpleBox-TriangleModel.scn sets up the same scene as SimpleBox-DistanceGrid.scn, but using a different collision model type. There are two key differences in this example:</p> <ul> <li> <p>The DistanceGrid component is replaced by</p> <pre><code>&lt;Triangle /&gt;\n</code></pre> </li> <li> <p>In the component MinProximityIntersection has the the attribute     useSurfaceNormals set to true</p> </li> </ul> <p>The useSurfaceNormals attribute tells the MinProximityIntersection to use normals from the Triangle collision model when creating the collision information, which is then used by the EnslavementForceFeedback to correctly compute the force feedback.</p>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#method-2","title":"Method 2","text":"<p>Another way to set up the scene is to indirectly control a rigid object, by attaching it to the position of the Omni using a spring.</p>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#example-3-using-a-spring","title":"Example 3 Using a Spring","text":"<p>The example scene SimpleBox-Method2.scn sets up the same type of scene as the above examples, but using a spring to link the rigid body and the Omni instead of directly controlling it. The Collision Pipeline is slightly different:</p> <pre><code>&lt;CollisionPipeline depth=\"8\" /&gt;\n&lt;BruteForceDetection name=\"N2\" /&gt;\n&lt;LocalMinDistance name=\"Proximity\" alarmDistance=\"0.6\" contactDistance=\"0.3\" /&gt;\n&lt;RuleBasedContactManager name=\"Response\" response=\"FrictionContact\"\n                            rules=\"1 * FrictionContact?mu=0.01\n                            \" /&gt;\n&lt;DefaultVisualManagerLoop /&gt;\n</code></pre> <p>We first create the representation of the Omni's actual position. In contains the NewOmniDriver. Just like in Method 1, we use the tags attribute to match up the NewOmniDriver, the mechanical object, and the ForceFeedback (which will show up later).</p> <pre><code>&lt;Node name=\"OmniObject\"&gt;\n    &lt;Node name=\"RigidLayer\"&gt;\n        &lt;MechanicalObject name=\"ToolRealPosition\" tags=\"Omni\" template=\"Rigid\" /&gt;\n        &lt;NewOmniDriver name=\"omniDriver1\" tags=\"Omni\" scale=\"300\" permanent=\"true\" listening=\"true\"/&gt;\n        &lt;Node name=\"Tool1\"&gt;\n            &lt;MechanicalObject template=\"Rigid\" name=\"RealPosition\"/&gt;\n            &lt;SubsetMapping indices=\"0\"/&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>Then we create our actual tool that will interact with the scene. First we need solvers to allow for collision detection:</p> <pre><code>&lt;Node name=\"Tool\"&gt;\n    &lt;EulerImplicit /&gt;\n    &lt;CGLinearSolver /&gt;\n</code></pre> <p>Next we create our rigid object:</p> <pre><code>&lt;MechanicalObject name=\"ms\" template=\"Rigid\"/&gt;\n&lt;UniformMass totalmass=\"0.1\" /&gt;\n</code></pre> <p>And we provide a ForceFeedback component to calculate the force feedback to the Omni:</p> <pre><code>&lt;LCPForceFeedback activate=\"true\" tags=\"Omni\" forceCoef=\"0.001\" /&gt;\n</code></pre> <p>Next we create the Collision Model, and map it to the rigid model we created above:</p> <pre><code>&lt;Node name=\"ToolCollision\"&gt;\n    &lt;MechanicalObject name=\"CM\" position=\"0 0 0\"/&gt;\n    &lt;Point bothSide=\"true\" group=\"1\" /&gt;\n    &lt;RigidMapping /&gt;\n&lt;/Node&gt;\n</code></pre> <p>Now we need a Visual Model, also mapped to the rigid model we create above:</p> <pre><code>&lt;Node name=\"ToolVisual\"&gt;\n    &lt;OglModel template=\"ExtVec3f\" name=\"VisualModel\" fileMesh=\"data/mesh/dental_instrument.obj\" scale3d=\"10 10 10\" translation=\"-2.12256 1.32361 35.5\" rotation=\"180 0 150\" /&gt;\n    &lt;RigidMapping template=\"Mapping&lt;Rigid,ExtVec3f&gt;\" name=\"MM-&gt;VM mapping\" object1=\"ms\" object2=\"VisualModel\" /&gt;\n&lt;/Node&gt;\n</code></pre> <p>Finally, we add the components to link the tool we created with the representation of the Omni's position:</p> <pre><code>    &lt;RestShapeSpringsForceField template=\"Rigid\" stiffness=\"1000000\" angularStiffness=\"200000000\" external_rest_shape=\"../OmniObject/RigidLayer/Tool1/RealPosition\" /&gt;\n    &lt;UncoupledConstraintCorrection compliance=\"0.001   0.00003 0 0   0.00003 0   0.00003\" /&gt;\n&lt;/Node&gt;\n</code></pre> <p>The rest of the scene contains the box, which is created just as it was in the other scenes.</p>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#newomnidriver-attributes","title":"NewOmniDriver Attributes","text":"<ul> <li>listening - When true, the NewOmniDriver will listen to the     ForceFeedback for the computation of the feedback.</li> <li>tags - The NewOmniDriver will look for a MechanicalObject with     template Rigid with a matching tag, and a ForceFeedback with a     matching tag.</li> <li>forceScale - scales the force feedback given to the Omni. This     attribute will involve a balance in your scene. If it is too high,     you will feel a lot of oscillations and vibrations. Too low and you     will be able to push through your surfaces easily.</li> <li>scale - scales the motion from the Omni. This changes how much     motion on the physical Omni it takes to move the tool in the scene.</li> <li>permanent - True if the force feedback will be     applied permanently.</li> <li>alignOmniWithCamera - True if the object controlled by the Omni,     and the direction of motion from the Omni, should remain lined up     with the camera. This means that as you change the camera's view,     moving the Omni arm up will always make your object move up in     the view. By default, the scene's default Camera is used, but if you     wish to specify a camera, you can do so by matching the camera's     tags with the NewOmniDriver's tags. See Example scene     CameraAlignment.scn and SpecifyingCamera.scn.</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#enslavementforcefeedback-attributes","title":"EnslavementForceFeedback Attributes","text":"<ul> <li>tags - should correspond with the tags attribute in the     NewOmniDriver</li> <li>collisionModel1 - The collision model that the Omni controls.     The EnslavementForceFeedback will then gather the collision     information for every collision this model has in the scene</li> <li>collisionModel2 - If you are only interested in the collision     between collisionModel1 and one other collision model in the scene,     you can specify that other model here. The EnslavementForceFeedback     will then only gather the collision information for collisions     involving both models. Note: if you do not want to specify     another model, it is important that you specify the attribute as     collisionModel2=\"\".</li> <li>relativeStiffness - To reduce oscillations when contact is made     with a surface, the force applied when the instrument is found to be     inside the other object is higher than when it is outside. The ratio     of these forces is specified by the relativeStiffness. This value     will also involve a balance in your scene. If it is too high, you     will feel a lot of oscillations and vibrations. Too low and you will     be able to push through your surfaces easily.</li> <li>attractionDistance - To reduce oscillation when contact is made     with a surface, as the instrument gets very close to making contact,     it is slightly attracted to the contact point. Once it reaches the     contact point, the force feedback will push away from the object, to     prevent the instrument from entering. The distance from contact at     which this attraction starts is given with attractionDistance.</li> <li>normalsPointOut - In order for the force feedback to be applied     in the appropriate direction, the EnslavementForceField must know if     the normals of the other objects in the scene point towards the     inside of the object or towards the outside. If they point towards     the outside, normalsPointOut should be true, and false in the     normals point towards the inside. Note: All the objects (other than     the once being controlled by the Omni) need to have their normals     pointing in the same direction.</li> <li>contactScale - This scales the strength of the force feedback     depending on the size of the objects in your scene. Larger objects     will require a larger contactScale in order for the force feedback     to be felt.</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#scenes-at-different-scales","title":"Scenes at different scales","text":"<p>The forces computed in your scene will vary depending on the scale of the objects in your scene. For example, the box in SimpleBox.scn is 10x10x10, while the box in SimpleBoxLarge.scn is scaled to be 10 times bigger than that. At larger and smaller scales, a number of your attributes will need to become larger and smaller as well. The attributes that are sensitive to scale are:</p> <ul> <li>MinProximityIntersection: alarmDistance</li> <li>MinProximityIntersection: contactDistance</li> <li>NewOmniDriver: scale</li> <li>EnslavementForceFeedback: attractionDistance</li> <li>EnslavementForceFeedback: contactScale</li> </ul> <p>Look at the differences between these attributes in SimpleBox.scn and SimpleBoxLarge.scn to learn more.</p>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#scenes-with-translated-objects","title":"Scenes with translated objects","text":"<p>One of the downsides of the DistanceGrid collision models is that it doesn't allow the EnslavementForceFeedback to correctly compute the force feedback on an mesh that has been translated in the scene. There are two ways to deal with this:</p> <ul> <li>Use software such as     Blender{.external     .text} to create a new mesh that has the translation built into the     mesh file. See example scene TwoTeeth-DistanceGrid.scn</li> <li>Use the Triangle collision model instead of the DistanceGrid.     See example scene TwoTeeth-TriangleModel.scn</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/55_Sensable/#rotating-the-scene","title":"Rotating the scene","text":"<p>By default, when you rotate a scene with the NewOmniDriver, the tool being controlled by the Omni follows this rotation. In this way, no matter how you are viewing the scene, moving the Omni arm up will move the tool up in the view. This behavior can be turned off by setting the attribute alignOmniWithCamera to false. See the example scene CameraAlignment.scn. The tool aligns to the view of a specific camera. Usually, a scene won't have a camera specified, and the NewOmniDriver will align the tool to the default view. If you do have a camera specified, it will align with that camera. If you have more than one camera specified, you can specify the camera that the tool will be aligned to by setting the tags attribute to match the tags of the NewOmniDriver. See the example scene SpecifyingCamera.scn.</p>"},{"location":"35_Plugins/50_Usual_plugins/60_Xitact/","title":"Xitact","text":"<p>Xitact are haptic device product by Mentice, two models are handle in SOFA:</p> <ul> <li>Xitact\u2122 IHP: a haptic device designed to track the motion of a     surgical instrument and to provide realistic force feedback during     the simulation of a minimally invasive surgical procedure.</li> <li>Xitact\u2122 ITP: a device designed to track the motion of an instrument     during the simulation of a minimally invasive surgical procedure.</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/60_Xitact/#install","title":"Install","text":"<p>Here is a walkthrough on how to install, compile and use in SOFA:</p> <ul> <li>Activate the plugin Xitact: SOFA-PLUGIN_XITACT,</li> <li>Compile Sofa again,</li> <li>This is it.</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/65_HAPI/","title":"HAPI","text":""},{"location":"35_Plugins/50_Usual_plugins/65_HAPI/#configuring","title":"Configuring","text":"<ul> <li>Install     HAPI{.external     .text}, using either an installer or with the source code (For     VS2010, see below). If you use the installer and keep it in the     default directory, it should install to C:/HAPI. If you use the     source, it will be in the directory that you specify. From this     point forward, we will refer to this directory     as MyHAPIInstallation.</li> <li>Turn on the option SOFA-PLUGIN_SOFAHAPI in CMake,     and configure.</li> <li>Likely, CMake will report that HAPI was not found. You can manually     set:</li> </ul> <p><code>HAPI_INCLUDE_DIR = MyHAPIInstallation/HAPI/include</code> <code>HAPI_LIBRARY = MyHAPIInstallation/lib/HAPI_vc9.lib</code> If you are not compiling in Visual Studio 2008, change the _vc9.lib suffix to whatever version is appropriate. HAPI_DEBUG_LIBRARY is optional. Configure again.</p> <ul> <li>Next, you will probably get an error that H3DUTIL was not found. You     can manually set:</li> </ul> <p><code>H3DUTIL_INCLUDE_DIR = MyHAPIInstallation/H3DUtil/include</code> <code>H3DUTIL_LIBRARY = MyHAPIInstallation/lib/H3DUtil_vc9.lib</code> Again, changing the library suffix if needed. H3DUTIL_DEBUG_LIBRARY is optional. Configure again.</p> <ul> <li>Finally, you will probably get an error that PTHREAD was not found.     You can manually set:</li> </ul> <p><code>PTHREAD_INCLUDE_DIR = MyHAPIInstallation/External/include/pthread</code> <code>PTHREAD_LIBRARY = MyHAPIInstallation/External/lib/pthreadVC2.lib</code> Note that pthreadVC2.lib is not in the same directory as the previous two libraries. Configure again.</p> <ul> <li>You should now be able to Generate and compile without problems.</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/65_HAPI/#hapi-for-vs2010","title":"HAPI for VS2010","text":"<p>The HAPI installer doesn't include libraries for VS2010, so you will have to build them yourself.</p> <ul> <li>Start by using the installer, as it will get you the source code and     Pthread, a required library.</li> <li>Using CMake, set the Source Code to     MyHAPIInstallation/HAPI/build.</li> <li>Set the Build to where you want to source to be built.</li> <li>Press Configure, and choose Visual Studio 10 as the     desired compiler.</li> <li>Press Configure until all the red highlighted things are gone.</li> <li>Press Generate.</li> <li>Open the resulting Solution file in Visual Studio 2010, and compile.</li> <li>Once everything finishes compiling, you can find     H3DUtil_vc10.lib in     MyHAPIInstallation/H3DUtil/build/Release and HAPI_vc10.lib     in MyHAPIInstallation/HAPI/build/Release. You can either leave     them where they are and point CMake to them when configuring, or     copy them toMyHAPIInstallation/lib with the libraries for the     other versions of Visual Studio.</li> <li>Repeat the compilation is debug mode if desired.</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/70_Geomagic/","title":"Geomagic","text":""},{"location":"35_Plugins/50_Usual_plugins/70_Geomagic/#installing-the-openhaptics-sdk","title":"Installing the OpenHaptics SDK","text":"<p>The Geomagic drivers and SDK can be directly downloaded from the 3DSystem website:</p> <ul> <li>OpenHaptics for Windows Developer Edition v3.4 </li> <li>OpenHaptics for Linux Developer Edition v3.4</li> </ul> <p>Following the above-mentioned links, you should find a programmers guide for assistance. The installation directory should be:</p> <ul> <li><code>C:/OpenHaptics</code> for Windows</li> <li><code>/opt/OpenHaptics/Developer/3.4-0/</code> for Linux</li> </ul> <p>You can check the install by running the Geomagic_Touch_Setup and Geomagic_Touch_Diagnostic applications (located in <code>/opt/geomagic_touch_device_driver/</code> for Linux). To do so, your Geomagic device must now be connected. If you are using Ethernet connection, make sure the address assignment of the wired connection is set to \"Link-Local Only\" instead of \"Automatic\".</p> <p>NB : for Linux, after the installation, if you already had a version of Qt installed, you might face a conflict with Qt versions. This is due to a script named geomagic.sh created at the Geomagic installation (in /etc/profile.d/). To fix this, you can remove or comment the two following lines in the geomagic.sh file: <pre><code>export LD_LIBRARY_PATH=/opt/geomagic_touch_device_driver/lib\nexport QT_PLUGIN_PATH=/opt/geomagic_touch_device_driver/lib/plugins\n</code></pre></p>"},{"location":"35_Plugins/50_Usual_plugins/70_Geomagic/#compilation-in-sofa","title":"Compilation in SOFA","text":"<p>Now in SOFA:</p> <ul> <li>activate the plugin in cmake-gui by setting the flag PLUGIN_GEOMGIC to true.  NB: Make sure to have closed CMake after the installation of the OpenHaptics libary, described above.</li> <li>compile SOFA, which should trigger the compilation of the Geomagic plugin</li> <li>enjoy the power of the Geomagic haptic interfaces with SOFA and give a try to the example scene (examples/DemoGeomagic.scn)</li> </ul> <p>And let us know about your Geomagic simulations!</p>"},{"location":"35_Plugins/50_Usual_plugins/70_Geomagic/#using-the-plugin-in-a-simulation","title":"Using the plugin in a simulation","text":""},{"location":"35_Plugins/50_Usual_plugins/70_Geomagic/#load-the-plugin","title":"Load the plugin","text":"<p>Like any other plugin in SOFA, you need to load it dynamically in your scene if you want to use classes defined in this plugin. For the Geomagic plugin, to benefit from the GeomagicDriver, you need to add in your root node:</p> <pre><code>&lt;RequiredPlugin name=\"Geomagic plugin\" pluginName=\"Geomagic\" /&gt;\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/70_Geomagic/#add-the-geomagicdriver","title":"Add the GeomagicDriver","text":"<p>To interface the Geomagic device with the simulation, all you need is to add the GeomagicDriver class into your scene: <pre><code>&lt;GeomagicDriver name=\"GeomagicDevice\" deviceName=\"Default Device\" scale=\"1\" drawDeviceFrame=\"1\" positionBase=\"0 0 0\"  orientationBase=\"0 0 0 1\"/&gt;\n</code></pre></p> <p>This class will recover the motion of the device and allow for communication with the simulation.</p>"},{"location":"35_Plugins/50_Usual_plugins/70_Geomagic/#control-an-object-in-the-scene","title":"Control an object in the scene","text":"<p>The use of the GeomagicDriver in a scene could be to control a rigid object in a simulation. For install, let's control one rigid point with <pre><code>&lt;GeomagicDriver name=\"GeomagicDevice\" deviceName=\"Default Device\" scale=\"1\" drawDeviceFrame=\"1\" positionBase=\"0 0 0\" orientationBase=\"0 0 0 1\"/&gt;\n&lt;MechanicalObject template=\"Rigid\" name=\"GeomagicMO\" position=\"@GeomagicDevice.positionDevice\" /&gt;\n</code></pre></p> <p>Then, as in any SOFA simulation, you can map this rigid point to any other object (visual, mechanical or collision model).</p>"},{"location":"35_Plugins/50_Usual_plugins/70_Geomagic/#get-haptic-feedback","title":"Get haptic feedback","text":"<p>Now, if you wan to control an object and get haptic feedback due to collision, the scene becomes more complicated. You will need to set up the entire collision pipeline in order to solve the Linear Complementary Problem (LCP), thus finding its solutions: the Lagrange multipliers.</p> <p>In the root node, the collision pipeline needs to be defined with: <pre><code>&lt;RequiredPlugin name=\"Geomagic plugin\" pluginName=\"Geomagic\" /&gt;\n\n&lt;CollisionPipeline name=\"pipeline\" depth=\"6\" verbose=\"0\"/&gt;\n&lt;BruteForceDetection name=\"detection\" /&gt;\n&lt;CollisionResponse name=\"response\" response=\"FrictionContact\" /&gt;\n&lt;LocalMinDistance name=\"proximity\" /&gt;\n&lt;FreeMotionAnimationLoop/&gt;\n&lt;LCPConstraintSolver tolerance=\"0.001\" maxIt=\"1000\"/&gt;\n&lt;GeomagicDriver name=\"GeomagicDevice\" deviceName=\"Default Device\" scale=\"1\" drawDeviceFrame=\"1\" positionBase=\"0 0 0\" orientationBase=\"0 0 0 1\" /&gt;\n</code></pre></p> <p>In the node describing your object on which you want to recover the force feedback, you need to add a LCPForceFeedback. This class computes the force applied on the object based on the constraint problem. During the simulation, the GeomagicDriver will look for a pointer to a LCPForceFeedback to get the force value to return to the haptic interface. The node therefore can be written:</p> <pre><code>&lt;Node name=\"Instrument-1\" &gt;\n    &lt;EulerImplicitSolver name=\"ODE solver\" rayleighStiffness=\"0.05\" rayleighMass=\"1.0\" /&gt;\n    &lt;CGLinearSolver name=\"linear solver\" iterations=\"25\" tolerance=\"1e-10\" threshold=\"10e-10\" /&gt; \n    &lt;MechanicalObject name=\"instrumentState\" position=\"@PATH_TO_GEOMAGICDRIVER/GeomagicDevice.positionDevice\" template=\"Rigid\" /&gt;\n    &lt;UniformMass name=\"mass\" totalmass=\"0.005\" /&gt;\n    &lt;LCPForceFeedback activate=\"true\" forceCoef=\"0.005\"/&gt; &lt;!-- this class computes the force to return back --&gt;\n    &lt;UncoupledConstraintCorrection/&gt;\n\n    &lt;!-- This node is the collision model associated to our controlled object --&gt;\n    &lt;Node name=\"CollisionModel\" &gt;\n        &lt;MeshObjLoader filename=\"MY_COLLISION_SURFACE_MODEL.obj\"  name=\"loader\"/&gt;\n        &lt;Mesh src=\"@loader\" name=\"InstrumentCollisionModel\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" name=\"instrumentCollisionState\"  /&gt;\n        &lt;Line name=\"instrument\" /&gt;\n        &lt;Point name=\"instrument\"  /&gt; \n        &lt;RigidMapping name=\"CollisionMapping\" input=\"@instrumentState\" output=\"@instrumentCollisionState\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/75_SofaCarving/","title":"SofaCarving","text":"<p>The SofaCarving plugin provides basic functionality for removing tetrahedra from a mesh. This can be used to simulate tissue destruction in medical simulations. </p>"},{"location":"35_Plugins/50_Usual_plugins/75_SofaCarving/#loading-the-plugin","title":"Loading the Plugin","text":"<p>To load the SofaCarving plugin, select SOFA-PLUGIN_SOFACARVING in your Cmake configuration. Reconfigure, generate and build. </p>"},{"location":"35_Plugins/50_Usual_plugins/75_SofaCarving/#carvingmanager","title":"CarvingManager","text":"<p>The plugin provides one component, the CarvingManager. When added to a scene, it automatically looks for a collision model that will acts as the tool from removing tetrahedra, and a surface model that will have its tetrahedra removed by the tool. If your scene has many possible collision or surface models, you can specify the ones that the CarvingManager will use by giving those components the tags CarvingTool and CarvingSurface. See the example scene SofaCarving/SimpleCarving.scn.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/","title":"MultiThreading","text":"<p>SOFA has some multithreading capabilities in its core, but more features are available in the MultiThreading plugin.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#plugin-compilation","title":"Plugin Compilation","text":"<ol> <li>Enable <code>PLUGIN_MULTITHREADING</code> in your CMake configuration. It is disabled by default.</li> <li>Configure, Generate and build.</li> </ol>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#parallel-collision-detection","title":"Parallel Collision Detection","text":"<p>Most SOFA scenes use a component defining the collision pipeline. This pipeline requires two components for the broad phase collision detection, and the narrow phase collision detection. A usual choice for the broad phase is BruteForceBroadPhase, and BVHNarrowPhase for the narrow phase.</p> <p>In the MultiThreading plugin, two components can replace BruteForceBroadPhase and BVHNarrowPhase.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#parallelbruteforcebroadphase","title":"ParallelBruteForceBroadPhase","text":"<p>This component is a parallel implementation of BruteForceBroadPhase using a global thread pool. It means the result of a simulation with BruteForceBroadPhase or with ParallelBruteForceBroadPhase is expected to be equal. ParallelBruteForceBroadPhase is the most efficient compared to BruteForceBroadPhase when there is a lot of objects in the scene.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#examples","title":"Examples","text":"<p>Examples of ParallelBruteForceBroadPhase can be found in:</p> <ul> <li>ParallelBruteForceBroadPhase.scn</li> <li>ParallelCollisionDetection.scn</li> <li>5DeformableCubesConstraints.scn</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#parallelbvhnarrowphase","title":"ParallelBVHNarrowPhase","text":"<p>This component is a parallel implementation of BVHNarrowPhase using a global thread pool. It means the result of a simulation with BVHNarrowPhase or with ParallelBVHNarrowPhase is expected to be equal.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#examples_1","title":"Examples","text":"<p>Examples of ParallelBruteForceBroadPhase can be found in:</p> <ul> <li>ParallelBruteForceBroadPhase.scn</li> <li>ParallelCollisionDetection.scn</li> <li>5DeformableCubesConstraints.scn</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#physics","title":"Physics","text":""},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#parallel-fem","title":"Parallel FEM","text":""},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#paralleltetrahedronfemforcefield","title":"ParallelTetrahedronFEMForceField","text":"<p>ParallelTetrahedronFEMForceField is the multi-threaded equivalent of TetrahedronFEMForceField.</p> <p>This implementation is the most efficient when the number of tetrahedron is large (&gt; 1000).</p> <p>The following methods are executed in parallel: - <code>addDForce</code> - <code>addKToMatrix</code></p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#examples_2","title":"Examples","text":"<p>Examples of ParallelTetrahedronFEMForceField can be found in:</p> <ul> <li>ParallelTetrahedronFEMForceField.scn</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#parallelhexahedronfemforcefield","title":"ParallelHexahedronFEMForceField","text":"<p>ParallelHexahedronFEMForceField is the multi-threaded equivalent of HexahedronFEMForceField.</p> <p>This implementation is the most efficient when:</p> <p>1) the number of hexahedron is large (&gt; 1000) 2) the global system matrix is not assembled. It is usually the case with a CGLinearSolver templated with GraphScattered types. 3) the method is 'large'. If the method is 'polar' or 'small', <code>addForce</code> is executed sequentially, but <code>addDForce</code> in parallel.</p> <p>The following methods are executed in parallel:</p> <ul> <li><code>addForce</code> for method 'large'.</li> <li><code>addDForce</code></li> </ul> <p>The method <code>addKToMatrix</code> is not executed in parallel. This method is called with an assembled system, usually with a direct solver or a CGLinearSolver templated with types different from GraphScattered. In this case, the most time-consuming step is to invert the matrix. This is where efforts should be put to accelerate the simulation.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#examples_3","title":"Examples","text":"<p>Examples of ParallelHexahedronFEMForceField can be found in:</p> <ul> <li>ParallelHexahedronFEMForceField.scn</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#beamlinearmapping_mt","title":"BeamLinearMapping_mt","text":"<p>This component inherits all the functionality from the BeamLinearMapping component and overrides three virtual functions that contain a <code>for</code> loop: <code>apply()</code>, <code>applyJ()</code> and <code>applyJT()</code>. It adds only one data attribute, the granularity. This attribute sets the number of iterations of the <code>for</code> loop, corresponding to the number of points along the beam elements that must be assigned and executed for each task. If this number is lower than the number of iterations the loop won't be parallelized, and the corresponding BeamLinearMapping function is called. If this number is greater than the number of iterations of the loop the tasks are created, and each task executes the granularity value of iterations of the loop.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#examples_4","title":"Examples","text":"<p>Examples of BeamLinearMapping_mt can be found in:</p> <ul> <li>BeamLinearMapping_mt.scn</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#springs","title":"Springs","text":""},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#parallelstiffspringforcefield","title":"ParallelStiffSpringForceField","text":"<p>ParallelStiffSpringForceField is the multi-threaded equivalent of StiffSpringForceField.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#parallelmeshspringforcefield","title":"ParallelMeshSpringForceField","text":"<p>ParallelMeshSpringForceField is the multi-threaded equivalent of MeshSpringForceField.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#examples_5","title":"Examples","text":"<p>Examples of ParallelMeshSpringForceField can be found in:</p> <ul> <li>ParallelMeshSpringForceField.scn</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#independent-sofa-scenes","title":"Independent SOFA Scenes","text":"<p>The AnimationLoopParallelScheduler component was implemented to run the physics simulation of independent scenes in parallel. The component looks for BaseAnimationLoop components in all its child nodes and executes the <code>step()</code> function of each AnimationLoop in parallel.</p> <p>The DataExchange component can manage the sharing of data between all the concurrent scenes without being bound by synchronization locks. To avoid the use of synchronization locks, each component in different scenes must have its own copy of the same data to share, and the data synchronization is executed serially. After the data synchronization the VisualLoop is executed in serial. Each child node of the node where the AnimationLoopParallelScheduler is placed must be seen as an independent scene and there should be no physics interaction or collision detection between these scenes. When all the <code>step()</code> functions return, the visual loop (graphics rendering) is executed serially throughout the scene.</p> <p>The DataExchange component must be placed in the same node where the AnimationLoopParallelScheduler is, and the path links to the source and destination data to copy must be defined. The data template of the source and destination path links must be the same. This data synchronization is executed serially before the VisualLoop is executed. A common use of the AnimationLoopParallelScheduler component is to place it in the root node of the scene hierarchy and add a AnimationLoop to all the child nodes you want to be executed independently.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#tips-and-limitations","title":"Tips and Limitations","text":"<p>To get the best performance with the AnimationLoopParallelScheduler component, the execution time of each animation loop should be manually balanced to get almost the same time length. If in the scene an animation loop is computationally more expensive, the MultiStepAnimationLoop component can be useful not to limit the speed of execution of a potentially faster AnimationLoop step function. This will improve the synchronization between threads, minimizing the waiting time for all animation loops completion. The scene should be split into as many independent scenes as possible. An independent scene is considered as a scene where the physics simulated objects are never supposed to collide with the objects of another scene during the whole simulation time length.</p> <p>The main limitation using the AnimationLoopParallelScheduler is that interaction with the mouse with the objects in the scene crashes the simulation.</p>"},{"location":"35_Plugins/50_Usual_plugins/80_MultiThreading/#examples_6","title":"Examples","text":"<p>Examples of AnimationLoopParallelScheduler and DataExchange can be found in:</p> <ul> <li>TriangularForceFieldComparison.scn</li> <li>livers.scn</li> </ul>"},{"location":"35_Plugins/50_Usual_plugins/ArticulatedSystemPlugin/ArticulatedHierarchyBVHController/","title":"ArticulatedHierarchyBVHController","text":"<p>Implements a handler that controls the values of the articulations of an articulated hierarchy container using a .bvh file.</p> <p>Target: <code>ArticulatedSystemPlugin</code></p> <p>namespace: <code>sofa::component::controller</code></p> <p>parents: </p> <ul> <li><code>ArticulatedHierarchyController</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 articulationsIndices  Indices of articulations controlled by the keyboard  bindingKeys  Keys to press to control the articulations  angleDelta  Angle incrementation due to each user interaction  0.01 propagateUserInteraction  Says wether or not the user interaction is local on the articulations, or must be propagated to children recursively  0 useExternalTime  use the external time line  0 externalTime   value of the External Time  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/ArticulatedSystemPlugin/ArticulatedHierarchyContainer/","title":"ArticulatedHierarchyContainer","text":"<p>This class allow to store and retrieve all the articulation centers from an articulated rigid object</p> <p>Target: <code>ArticulatedSystemPlugin</code></p> <p>namespace: <code>sofa::component::container</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  BVH File to load the articulation  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/ArticulatedSystemPlugin/ArticulatedHierarchyController/","title":"ArticulatedHierarchyController","text":"<p>Implements an user interaction handler that controls the values of the articulations of an articulated hierarchy container.</p> <p>Target: <code>ArticulatedSystemPlugin</code></p> <p>namespace: <code>sofa::component::controller</code></p> <p>parents: </p> <ul> <li><code>Controller</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 articulationsIndices  Indices of articulations controlled by the keyboard  bindingKeys  Keys to press to control the articulations  angleDelta  Angle incrementation due to each user interaction  0.01 propagateUserInteraction  Says wether or not the user interaction is local on the articulations, or must be propagated to children recursively  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/ArticulatedSystemPlugin/ArticulatedSystemMapping/","title":"ArticulatedSystemMapping","text":"<p>Mapping between a set of 6D DOF's and a set of angles (\u00b5) using an articulated hierarchy container. </p> <p>Templates:</p> <ul> <li><code>Vec1d,Rigid3d,Rigid3d</code></li> </ul> <p>Target: <code>ArticulatedSystemPlugin</code></p> <p>namespace: <code>sofa::component::mapping</code></p> <p>parents: </p> <ul> <li><code>Multi2Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 indexInput2  Corresponding index if the base of the articulated system is attached to input2. Default is last index.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input1 Input Object(s) (1st Data type) input2 Input Object(s) (2st Data type) output Output Object(s) container Path to ArticulatedHierarchyContainer."},{"location":"35_Plugins/50_Usual_plugins/ArticulatedSystemPlugin/Articulation/","title":"Articulation","text":"<p>This class defines an articulation by an axis, an orientation and an index.</p> <p>Target: <code>ArticulatedSystemPlugin</code></p> <p>namespace: <code>sofa::component::container</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 axis  Set the rotation axis for the articulation  1 0 0 rotation  Rotation  0 translation  Translation  0 articulationIndex  Articulation index  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/ArticulatedSystemPlugin/ArticulationCenter/","title":"ArticulationCenter","text":"<p>This class defines an articulation center. This contains a set of articulations.</p> <p>Target: <code>ArticulatedSystemPlugin</code></p> <p>namespace: <code>sofa::component::container</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parentIndex  Parent of the center articulation  childIndex  Child of the center articulation  globalPosition  Global position of the articulation center  posOnParent  Parent position of the articulation center  posOnChild  Child position of the articulation center  articulationProcess   0 - (default) hierarchy between articulations (euler angles)  1- ( on Parent) no hierarchy - axis are attached to the parent  2- (attached on Child) no hierarchy - axis are attached to the child  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/AdaptiveBeamController/","title":"AdaptiveBeamController","text":"<p>Adaptive beam controller</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::controller::_adaptivebeamcontroller_</code></p> <p>parents: </p> <ul> <li><code>MechanicalStateController</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 index  Index of the controlled DOF  0 onlyTranslation  Controlling the DOF only in translation  0 buttonDeviceState  state of ths device button  0 mainDirection  Main direction and orientation of the controlled DOF  0 0 -1 interpolation  Path to the Interpolation component on scene  controlledInstrument  provide the id of the interventional radiology instrument which is under control: press contr + number to change it  0 xtip  curvilinear abscissa of the tip of each interventional radiology instrument  rotationInstrument  angle of rotation for each interventional radiology instrument  step  base step when changing beam length  0.1 angularStep  base step when changing beam angle  0.15708 speed  continuous beam length increase/decrease  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/AdaptiveBeamForceFieldAndMass/","title":"AdaptiveBeamForceFieldAndMass","text":"<p>Adaptive Beam finite elements</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::forcefield::_adaptivebeamforcefieldandmass_</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 computeMass  if false, only compute the stiff elastic model  1 massDensity  Density of the mass (usually in kg/m^3)  1 shearStressComputation  if false, suppress the shear stress in the computation  1 reinforceLength  if true, a separate computation for the error in elongation is peformed  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component interpolation Path to the Interpolation component on scene instrumentParameters link to an object specifying physical parameters based on abscissa"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/AdaptiveBeamLengthConstraint/","title":"AdaptiveBeamLengthConstraint","text":"<p>Constrain the length of a beam.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::constraintset::_adaptivebeamlengthconstraint_</code></p> <p>parents: </p> <ul> <li><code>Constraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 alarmLength  Elongation before creating a constraint (default=1.02)  1.02 constrainedLength  Allowed elongation of a beam (default=1.05  1.05 maxBendingAngle  max bending criterion (in rad) for one constraint interval (default=0.1)  0.1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component interpolation link to the interpolation component in the scene"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/AdaptiveBeamMapping/","title":"AdaptiveBeamMapping","text":"<p>Set the positions and velocities of points attached to a beam using linear interpolation between DOFs</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Rigid3d</code></li> <li><code>Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::mapping::_adaptivebeammapping_</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 useCurvAbs  true if the curvilinear abscissa of the points remains the same during the simulation if not the curvilinear abscissa moves with adaptivity and the num of segment per beam is always the same  1 points  defines the mapped points along the beam axis (in beam frame local coordinates)  proximity  if positive, the mapping is modified for the constraints to take into account the lever created by the proximity  0 contactDuplicate  if true, this mapping is a copy of an input mapping and is used to gather contact points (ContinuousFrictionContact Response)  0 nameOfInputMap  if contactDuplicate==true, it provides the name of the input mapping  nbPointsPerBeam  if non zero, we will adapt the points depending on the discretization, with this num of points per beam (compatible with useCurvAbs)  0 segmentsCurvAbs  the abscissa of each point on the collision model  parallelMapping  flag to enable parallel internal computation  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map interpolation Path to the Interpolation component on scene"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/AdaptiveBeamSlidingConstraint/","title":"AdaptiveBeamSlidingConstraint","text":"<p>Constrain a rigid to be attached to a beam (only in position, not the orientation)</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::constraintset::_adaptiveBeamSlidingConstraint_</code></p> <p>parents: </p> <ul> <li><code>PairInteractionConstraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component interpolation link to the WireBeamInterpolation component in the scene"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/AdaptiveInflatableBeamForceField/","title":"AdaptiveInflatableBeamForceField","text":"<p>Adaptive Beam finite elements</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::forcefield::_AdaptiveInflatableBeamForceField_</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 computeMass  if false, only compute the stiff elastic model  1 massDensity  Density of the mass (usually in kg/m^3)  1 reinforceLength  if true, a separate computation for the error in elongation is peformed  0 pressure  pressure inside the inflatable Beam  0 dataG  Gravity 3d vector  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component interpolation Path to the Interpolation component on scene instrumentParameters link to an object specifying physical parameters based on abscissa"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/BeamAdapterActionController/","title":"BeamAdapterActionController","text":"<p>BeamAdapterActionController</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::controller</code></p> <p>parents: </p> <ul> <li><code>MechanicalStateController</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 index  Index of the controlled DOF  0 onlyTranslation  Controlling the DOF only in translation  0 buttonDeviceState  state of ths device button  0 mainDirection  Main direction and orientation of the controlled DOF  0 0 -1 writeMode  If true, will accumulate actions from keyboard and dump the actions and times when key 'E' is pressed.  1 actions  List of actions to script the BeamAdapter  actionString  List of actions as string to script the BeamAdapter  timeSteps  List of key times corresponding to the actions  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects interventionController Path to the InterventionalRadiologyController component on scene"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/BeamInterpolation/","title":"BeamInterpolation","text":"<p>Adaptive Beam Interpolation</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::fem::_beaminterpolation_</code></p> <p>parents: </p> <ul> <li><code>BaseBeamInterpolation</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 edgeList  list of the edge in the topology that are concerned by the Interpolation  lengthList  list of the length of each beam  DOF0TransformNode0  Optional rigid transformation between the degree of Freedom and the first node of the beam  DOF1TransformNode1  Optional rigid transformation between the degree of Freedom and the second node of the beam  curvAbsList beamCollision  list of beam (in edgeList) that needs to be considered for collision  dofsAndBeamsAligned  if false, a transformation for each beam is computed between the DOF and the beam nodes  1 crossSectionShape  shape of the cross-section. Can be: circular, elliptic, square, rectangular. Default is circular  circular radius  radius of the beam (if circular cross-section is considered)  1 innerRadius  inner radius of the beam if it applies  0 sideLength  side length of the beam (if square cross-section is considered)  1 smallRadius  small radius of the beam (if elliptic cross-section is considered)  1 largeRadius  large radius of the beam (if elliptic cross-section is considered)  1 lengthY  length of the beam section along Y (if rectangular cross-section is considered)  1 lengthZ  length of the beam section along Z (if rectangular cross-section is considered)  1 defaultYoungModulus  value of the young modulus if not defined in an other component  100000 defaultPoissonRatio  value of the poisson ratio if not defined in an other component  0.4 straight  If true, will consider straight beams for the rest position  1 vecID  input pos and vel (current, free pos/vel, rest pos)  current InterpolationInputs  vector containing (beamID, baryCoord)  InterpolatedPos  output Interpolated Position  InterpolatedVel  output Interpolated Velocity  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/BeamLengthMapping/","title":"BeamLengthMapping","text":"<p>computes the lengths of the beams</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec1d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::mapping::_beamlengthmapping_</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 geometricStiffness  0 -&gt; no GS, 1 -&gt; exact GS, 2 -&gt; stabilized GS (default)  2 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map interpolation Path to the Interpolation component on scene"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/BeamProjectionDifferenceMultiMapping/","title":"BeamProjectionDifferenceMultiMapping","text":"<p>Computes the difference between given points and their projection on a beam.</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Rigid3d,Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>beamadapter::mapping</code></p> <p>parents: </p> <ul> <li><code>Multi2Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 indicesInput1  Indices of model1 to project on model2 (beams)  directions  Directions to project (in the local frame).  updateProjectionPosition  Update the projection on the beam at each time step even when direction[0]=1.  0 updateProjectionOrientation  Update the projection on the beam at each time step even when direction[0]=1.  0 Visualization draw  Draw projection points and directions  drawSize 3 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input1 Input Object(s) (1st Data type) input2 Input Object(s) (2st Data type) output Output Object(s) topologyInput2 link to input2's topology container (beams to project on) interpolationInput2 link to input2's interpolation component (BeamInterpolation)"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/InterventionalRadiologyController/","title":"InterventionalRadiologyController","text":"<p>Provides a Mouse &amp; Keyboard user control on an EdgeSet Topology.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::controller::_interventionalradiologycontroller_</code></p> <p>parents: </p> <ul> <li><code>MechanicalStateController</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 index  Index of the controlled DOF  0 onlyTranslation  Controlling the DOF only in translation  0 buttonDeviceState  state of ths device button  0 mainDirection  Main direction and orientation of the controlled DOF  0 0 -1 instruments  List of paths to WireInterpolation components on the scene  controlledInstrument  provide the id of the interventional radiology instrument which is under control: press contr + number to change it  0 xtip  curvilinear abscissa of the tip of each interventional radiology instrument  rotationInstrument  angle of rotation for each interventional radiology instrument  step  base step when changing beam length  0.1 angularStep  base step when changing beam angle  0.15708 speed  continuous beam length increase/decrease  0 startingPos  starting pos for inserting the instrument  0 0 0 0 0 0 1 threshold  threshold for controller precision which is homogeneous to the unit of length used in the simulation  0.01 rigidCurvAbs  pairs of curv abs for beams we want to rigidify  motionFilename  text file that includes tracked motion from optical sensor  indexFirstNode  first node (should be fixed with restshape)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/MultiAdaptiveBeamMapping/","title":"MultiAdaptiveBeamMapping","text":"<p>Set the positions and velocities of points attached to a beam using linear interpolation between DOFs</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::mapping</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 useCurvAbs  true if the curvilinear abscissa of the points remains the same during the simulation if not the curvilinear abscissa moves with adaptivity and the num of segment per beam is always the same  1 ircontroller  Path to the ircontroller component on scene  parallelMapping  flag to enable parallel internal computation in all the submappings  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/RodMeshSection/","title":"RodMeshSection","text":"<p>Class defining a Rod Section using a MeshLoader and material parameters.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::beamadapter</code></p> <p>parents: </p> <ul> <li><code>BaseRodSectionMaterial</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 poissonRatio  Poisson Ratio of this section  0.49 youngModulus  Young Modulus of this section  5000 massDensity  Density of the mass (usually in kg/m^3)  1 radius  Full radius of this section  1 innerRadius  Inner radius of this section if hollow  0 length  Total length of this section  1 nbEdgesVisu  number of Edges for the visual model  10 nbEdgesCollis  number of Edges for the collision model  20 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects loader link to the MeshLoader"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/RodSpireSection/","title":"RodSpireSection","text":"<p>Class defining a rod spire section, defining material and geometry parameters.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::beamadapter</code></p> <p>parents: </p> <ul> <li><code>BaseRodSectionMaterial</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 poissonRatio  Poisson Ratio of this section  0.49 youngModulus  Young Modulus of this section  5000 massDensity  Density of the mass (usually in kg/m^3)  1 radius  Full radius of this section  1 innerRadius  Inner radius of this section if hollow  0 length  Total length of this section  1 nbEdgesVisu  number of Edges for the visual model  10 nbEdgesCollis  number of Edges for the collision model  20 spireDiameter  diameter of the spire  0.1 spireHeight  height between each spire  0.01 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/RodStraightSection/","title":"RodStraightSection","text":"<p>Class defining a rod straight section Material, defining material and geometry parameters.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::beamadapter</code></p> <p>parents: </p> <ul> <li><code>BaseRodSectionMaterial</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 poissonRatio  Poisson Ratio of this section  0.49 youngModulus  Young Modulus of this section  5000 massDensity  Density of the mass (usually in kg/m^3)  1 radius  Full radius of this section  1 innerRadius  Inner radius of this section if hollow  0 length  Total length of this section  1 nbEdgesVisu  number of Edges for the visual model  10 nbEdgesCollis  number of Edges for the collision model  20 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/SteerableCatheter/","title":"SteerableCatheter","text":"<p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>WireRestShape</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 densityOfBeams  density of beams between key points  keyPoints  key points of the shape (curv absc)  activeBending  Boolean activating the bending of the steerable catheter  0 deactiveBending  Boolean deactivating the bending of the steerable catheter  0 angleMax  Maximum angle that the catheter can reach   (in degree [0-360])  180 flatAngle  Angle below which we consider the catheter as flat/n (Can't be zero)  1 bendingRate  Nb of step needed to reach the maximum bending angle /n (the lower, the faster)  10 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects wireMaterials link to Wire Section Materials (to be ordered according to the instrument, from handle to tip) topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/SutureController/","title":"SutureController","text":"<p>Provides a Mouse &amp; Keyboard user control on an EdgeSet Topology.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::controller::_suturecontroller_</code></p> <p>parents: </p> <ul> <li><code>MechanicalStateController</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 index  Index of the controlled DOF  0 onlyTranslation  Controlling the DOF only in translation  0 buttonDeviceState  state of ths device button  0 mainDirection  Main direction and orientation of the controlled DOF  0 0 -1 startingPos  starting pos for inserting the instrument  0 0 0 0 0 0 1 threshold  threshold for controller precision which is homogeneous to the unit of length  1e-06 maxBendingAngle  max bending criterion (in rad) for one beam  0.1 useDummyController   use a very simple controller of adaptativity (use for debug)  0 fixRigidTransforms  fix the sampling and transformations of rigid segments  0 rigidCurvAbs  pairs of curv abs for beams we want to rigidify  nodeCurvAbs curvatureList  List of the beams curvature (abscissa - curvature)  controlPoints  List of the spline control points positions  updateOnBeginAnimationStep  If true update interpolation and subgraph on beginAnimationStep  0 applyOrientationFirstInCreateNeedle  if true, it sets first the orientation, then the rotation for a init node of the needle  0 reinitilizeWireOnInit   reinitialize the wire everytime init() is called (for planning purposes)  0 m_actualStepNoticeablePoints  points (as curv. absc.) that are to be considered when computing a new sampling in the actual time step  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects interpolation Path to the Interpolation component on scene"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/WireBeamInterpolation/","title":"WireBeamInterpolation","text":"<p>Adaptive Beam Interpolation on Wire rest Shape</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::fem::_wirebeaminterpolation_</code></p> <p>parents: </p> <ul> <li><code>BaseBeamInterpolation</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 edgeList  list of the edge in the topology that are concerned by the Interpolation  lengthList  list of the length of each beam  DOF0TransformNode0  Optional rigid transformation between the degree of Freedom and the first node of the beam  DOF1TransformNode1  Optional rigid transformation between the degree of Freedom and the second node of the beam  curvAbsList beamCollision  list of beam (in edgeList) that needs to be considered for collision  dofsAndBeamsAligned  if false, a transformation for each beam is computed between the DOF and the beam nodes  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects WireRestShape link to the component on the scene"},{"location":"35_Plugins/50_Usual_plugins/BeamAdapter/WireRestShape/","title":"WireRestShape","text":"<p>Describe the shape functions on multiple segments using curvilinear abscissa</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>BeamAdapter</code></p> <p>namespace: <code>sofa::component::engine::_wirerestshape_</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 densityOfBeams  density of beams between key points  keyPoints  key points of the shape (curv absc)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects wireMaterials link to Wire Section Materials (to be ordered according to the instrument, from handle to tip) topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/CGALPlugin/BooleanOperations/","title":"BooleanOperations","text":"<p>Functions to corefine triangulated surface meshes and compute triangulated surface meshes of the union, difference and intersection of the bounded volumes.</p> <p>Target: <code>CGALPlugin</code></p> <p>namespace: <code>cgal</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 operation  Boolean operation  union Inputs position1  Input positions of the first mesh  position2  Input positions of the second mesh  triangles1  Input triangles of the first mesh  triangles2  Input triangles of the second mesh  computeDistrubution  If true, computes outputIndices1 and outputIndices2  1 Outputs outputPosition  Output positions of the surface mesh  outputTriangles  Output triangles of the surface mesh  outputPosition1  Output positions of transformation on the first surface mesh  outputTriangles1  Output triangles of transformation on the first surface mesh  outputPosition2  Output positions of transformation on the second surface mesh  outputTriangles2  Output triangles of transformation on the second surface mesh  outputIndices1  Indices of the surface mesh points that are on the first object  outputIndices2  Indices of the surface mesh points that are on the second object  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/CGALPlugin/CylinderMesh/","title":"CylinderMesh","text":"<p>Generate a regular tetrahedron mesh of a cylinder</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>CGALPlugin</code></p> <p>namespace: <code>cgal</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 diameter  Diameter  5 length  Length  50 number  Number of intervals  5 scale  Scale or not  1 viewPoints  Display Points  1 viewTetras  Display Tetrahedra  1 outputPoints  Points  outputTetras  Tetrahedra  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/CGALPlugin/DecimateMesh/","title":"DecimateMesh","text":"<p>Simplification of a mesh by the process of reducing the number of faces</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>CGALPlugin</code></p> <p>namespace: <code>cgal</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 inputVertices  List of vertices  inputTriangles  List of triangles  targetedNumberOfEdges  Desired number of edges after simplification  targetedRatioOfEdges  Ratio between the number of edges and number of initial edges  outputPoints  New vertices after decimation  outputTriangles  New triangles after decimation  outputNormals  New normals after decimation  writeToFile  Writes the decimated mesh into a file  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/CGALPlugin/FrontSurfaceReconstruction/","title":"FrontSurfaceReconstruction","text":"<p>Generate triangular surface mesh from point cloud</p> <p>Target: <code>CGALPlugin</code></p> <p>namespace: <code>cgal</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs position  Input point cloud positions  radiusRatioBound  Candidates incident to surface triangles which are not in the beta-wedge are discarded, if the ratio of their radius and the radius of the surface triangle is larger than radius_ratio_bound  5 beta  Half the angle of the wedge in which only the radius of triangles counts for the plausibility of candidates.  0.52 Outputs outputPosition  Output position of the surface mesh  outputTriangles  Output triangles of the surface mesh  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/CGALPlugin/MeshGenerationFromImage/","title":"MeshGenerationFromImage","text":"<p>Generate tetrahedral mesh from image</p> <p>Templates:</p> <ul> <li><code>Vec3d,ImageUC</code></li> </ul> <p>Target: <code>CGALPlugin</code></p> <p>namespace: <code>cgal</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Image file  image  image input  0 0 0 0 0 transform  12-param vector for trans, rot, scale, ...  features  features (1D) that will be preserved in the mesh  outputPoints  New Rest position coordinates from the tetrahedral generation  outputTetras  List of tetrahedra  outputTetrasDomains  domain of each tetrahedron  outputCellData  Output cell data  frozen  true to prohibit recomputations of the mesh  0 edgeSize  Edge size criterium (needed for polyline features  2 facetAngle  Lower bound for the angle in degrees of the surface mesh facets  25 facetSize  Uniform upper bound for the radius of the surface Delaunay balls  0.15 facetApproximation  Upper bound for the center-center distances of the surface mesh facets  0.008 cellRatio  Upper bound for the radius-edge ratio of the tetrahedra  4 cellSize  Uniform upper bound for the circumradii of the tetrahedra in the mesh  1 label  label to be resized to a specific cellSize  labelCellSize  Uniform upper bound for the circumradii of the tetrahedra in the mesh by label  labelCellData  1D cell data by label  odt  activate odt optimization  0 lloyd  activate lloyd optimization  0 perturb  activate perturb optimization  0 exude  activate exude optimization  0 odt_max_it  odt max iteration number  200 lloyd_max_it  lloyd max iteration number  200 perturb_max_time  perturb maxtime  20 exude_max_time  exude max time  20 ordering  Output points and elements ordering (0 = none, 1 = longest bbox axis)  0 Visualization drawTetras  display generated tetra mesh  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/CGALPlugin/MeshGenerationFromPolyhedron/","title":"MeshGenerationFromPolyhedron","text":"<p>Generate tetrahedral mesh from triangular mesh</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>CGALPlugin</code></p> <p>namespace: <code>cgal</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 inputPoints  Rest position coordinates of the degrees of freedom  inputTriangles  List of triangles  inputQuads  List of quads (if no triangles)   outputPoints  New Rest position coordinates from the tetrahedral generation  outputTetras  List of tetrahedra  frozen  true to prohibit recomputations of the mesh  0 facetAngle  Lower bound for the angle in degrees of the surface mesh facets  25 facetSize  Uniform upper bound for the radius of the surface Delaunay balls  0.15 facetApproximation  Upper bound for the center-center distances of the surface mesh facets  0.008 cellRatio  Upper bound for the radius-edge ratio of the tetrahedra  4 cellSize  Uniform upper bound for the circumradii of the tetrahedra in the mesh  0.2 sharpEdgeAngle  Threshold angle to detect sharp edges in input surface (activated with CGAL 3.8+ if sharpEdgeSize &gt; 0)  120 sharpEdgeSize  Meshing size for sharp feature edges (activated with CGAL 3.8+ if sharpEdgeSize &gt; 0)  0 odt  activate odt optimization  0 lloyd  activate lloyd optimization  0 perturb  activate perturb optimization  0 exude  activate exude optimization  0 odt_max_it  odt max iteration number  200 lloyd_max_it  lloyd max iteration number  200 perturb_max_time  perturb maxtime  20 exude_max_time  exude max time  20 ordering  output points and elements ordering (0 = none, 1 = longest bbox axis)  0 constantMeshProcess  deterministic choice of first point used in meshing process (true = constant output / false = variable output)  0 meshingSeed  seed used when picking first point in meshing process  0 Visualization drawTetras  display generated tetra mesh  0 drawSurface  display input surface mesh  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/CGALPlugin/PoissonSurfaceReconstruction/","title":"PoissonSurfaceReconstruction","text":"<p>Generate triangular surface mesh from point cloud</p> <p>Target: <code>CGALPlugin</code></p> <p>namespace: <code>cgal</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs position  Input point cloud positions  normals  Input point cloud normals  angle  Bound for the minimum facet angle in degrees  20 radius  Bound for the radius of the surface Delaunay balls (relatively to the average_spacing)  30 distance  Bound for the center-center distances (relatively to the average_spacing)  0.375 Outputs outputPosition  Output position of the surface mesh  outputTriangles  Output triangles of the surface mesh  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/CGALPlugin/Refine2DMesh/","title":"Refine2DMesh","text":"<p>Refine 2D mesh using Delaunay triangulation</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>CGALPlugin</code></p> <p>namespace: <code>cgal</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 inputPoints  Position coordinates (3D, z=0)  inputEdges  Constraints (edges)  inputEdgesData1  Data values defined on constrained edges  inputEdgesData2  Data values defined on constrained edges  seedPoints  Seed Points (3D, z=0)  regionPoints  Region Points (3D, z=0)  useInteriorPoints  should inputs points not on boundaries be input to the meshing algorithm  1 outputPoints  New Positions coordinates (3D, z=0)  outputTriangles  List of triangles  outputEdges  New constraints (edges)  outputEdgesData1  Data values defined on new constrained edges  outputEdgesData2  Data values defined on new constrained edges  trianglesRegion  Region for each Triangle  outputBdPoints  Indices of points on the boundary  shapeCriteria  Shape Criteria  0.125 sizeCriteria  Size Criteria  0.5 viewSeedPoints  Display Seed Points  0 viewRegionPoints  Display Region Points  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/CGALPlugin/TriangularConvexHull3D/","title":"TriangularConvexHull3D","text":"<p>Generate triangular convex hull around points</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>CGALPlugin</code></p> <p>namespace: <code>cgal</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 inputPoints  Rest position coordinates of the degrees of freedom  outputPoints  New Rest position coordinates  outputTriangles  List of triangles  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/CGALPlugin/UpsamplePointCloud/","title":"UpsamplePointCloud","text":"<p>Generates a denser point cloud from an input point cloud</p> <p>Target: <code>CGALPlugin</code></p> <p>namespace: <code>cgal</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Inputs position  Input point cloud positions  normals  Input point cloud normals  Outputs outputPosition  Output denser point cloud positions  outputNormals  Output normals of denser point cloud  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/CSparseSolvers/SparseCholeskySolver/","title":"SparseCholeskySolver","text":"<p>Direct linear solver based on Sparse Cholesky factorization, implemented with the CSPARSE library</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>CSparseSolvers</code></p> <p>namespace: <code>csparsesolvers</code></p> <p>parents: </p> <ul> <li><code>OrderingMethodAccessor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve orderingMethod Ordering method used by this component"},{"location":"35_Plugins/50_Usual_plugins/CSparseSolvers/SparseLUSolver/","title":"SparseLUSolver","text":"<p>Direct linear solver based on Sparse LU factorization, implemented with the CSPARSE library</p> <p>Templates:</p> <ul> <li><code>CompressedRowSparseMatrixMat3x3d</code></li> <li><code>CompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>CSparseSolvers</code></p> <p>namespace: <code>csparsesolvers</code></p> <p>parents: </p> <ul> <li><code>OrderingMethodAccessor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 tolerance  tolerance of factorization  0.001 L_nnz  Number of non-zero values in the lower triangular matrix of the factorization. The lower, the faster the system is solved.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve orderingMethod Ordering method used by this component"},{"location":"35_Plugins/50_Usual_plugins/CollisionOBBCapsule/OBBCollisionModel/","title":"OBBCollisionModel","text":"<p>Collision model which represents a set of OBBs</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>CollisionOBBCapsule</code></p> <p>namespace: <code>collisionobbcapsule::geometry</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 extents  Extents in x,y and z directions  defaultExtent  Default extent  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution"},{"location":"35_Plugins/50_Usual_plugins/Geomagic/GeomagicDriver/","title":"GeomagicDriver","text":"<p>Driver allowing interfacing with Geomagic haptic devices.</p> <p>Target: <code>Geomagic</code></p> <p>namespace: <code>sofa::component::controller</code></p> <p>parents: </p> <ul> <li><code>Controller</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 deviceName  Name of device Configuration  Default Device positionBase  Position of the device base in the SOFA scene world coordinates  0 0 0 orientationBase  Orientation of the device base in the SOFA scene world coordinates  0 0 0 1 orientationTool  Orientation of the tool in the SOFA scene world coordinates  0 0 0 1 scale  Default scale applied to the Device coordinates  1 forceScale  Default forceScale applied to the force feedback.   1 maxInputForceFeedback  Maximum value of the normed input force feedback for device security  1 inputForceFeedback  Input force feedback in case of no LCPForceFeedback is found (manual setting)  0 0 0 manualStart  If true, will not automatically initDevice at component init phase.  0 emitButtonEvent  If true, will send event through the graph when button are pushed/released  0 positionDevice  position of the base of the part of the device  angle  Angluar values of joint (rad)  button1  Button state 1  button2  Button state 2  Visualization drawDeviceFrame  Visualize the frame corresponding to the device tooltip  0 drawDevice  Visualize the Geomagic device in the virtual scene  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects forceFeedBack link to the forceFeedBack component, if not set will search through graph and take first one encountered."},{"location":"35_Plugins/50_Usual_plugins/Geomagic/GeomagicEmulator/","title":"GeomagicEmulator","text":"<p>Driver allowing interfacing with Geomagic haptic devices.</p> <p>Target: <code>Geomagic</code></p> <p>namespace: <code>sofa::component::controller</code></p> <p>parents: </p> <ul> <li><code>GeomagicDriver</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 deviceName  Name of device Configuration  Default Device positionBase  Position of the device base in the SOFA scene world coordinates  0 0 0 orientationBase  Orientation of the device base in the SOFA scene world coordinates  0 0 0 1 orientationTool  Orientation of the tool in the SOFA scene world coordinates  0 0 0 1 scale  Default scale applied to the Device coordinates  1 forceScale  Default forceScale applied to the force feedback.   1 maxInputForceFeedback  Maximum value of the normed input force feedback for device security  1 inputForceFeedback  Input force feedback in case of no LCPForceFeedback is found (manual setting)  0 0 0 manualStart  If true, will not automatically initDevice at component init phase.  0 emitButtonEvent  If true, will send event through the graph when button are pushed/released  0 positionDevice  position of the base of the part of the device  angle  Angluar values of joint (rad)  button1  Button state 1  button2  Button state 2  speedFactor  factor to increase/decrease the movements speed  0.1 Visualization drawDeviceFrame  Visualize the frame corresponding to the device tooltip  0 drawDevice  Visualize the Geomagic device in the virtual scene  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects forceFeedBack link to the forceFeedBack component, if not set will search through graph and take first one encountered."},{"location":"35_Plugins/50_Usual_plugins/InvertibleFVM/InvertibleFVMForceField/","title":"InvertibleFVMForceField","text":"<p>Invertible Finite Volume Method</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>InvertibleFVM</code></p> <p>namespace: <code>sofa::component::forcefield</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 initialPoints  Initial Position  poissonRatio  FEM Poisson Ratio [0,0.5[  0.45 youngModulus  FEM Young Modulus  localStiffnessFactor  Allow specification of different stiffness per element. If there are N element and M values are specified, the youngModulus factor for element i would be localStiffnessFactor[i*M/N]  verbose  Print debug stuff  0 Visualization drawHeterogeneousTetra  Draw Heterogeneous Tetra in different color  0 drawAsEdges  Draw as edges instead of tetrahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/ManifoldTopologies/ManifoldEdgeSetGeometryAlgorithms/","title":"ManifoldEdgeSetGeometryAlgorithms","text":"<p>ManifoldEdge set geometry algorithms</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ManifoldTopologies</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>EdgeSetGeometryAlgorithms</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 tagMechanics  Tag of the Mechanical Object  Visualization showIndicesScale  Debug : scale for view topology indices  0.02 showPointIndices  Debug : view Point indices  0 showEdgeIndices  Debug : view Edge indices.  0 drawEdges  if true, draw the edges in the topology.  0 drawColorEdges  RGB code color used to draw edges.  0.4 1 0.3 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/ManifoldTopologies/ManifoldEdgeSetTopologyContainer/","title":"ManifoldEdgeSetTopologyContainer","text":"<p>ManifoldEdge set topology container</p> <p>Target: <code>ManifoldTopologies</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>EdgeSetTopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 edges  List of edge indices  checkConnexity  It true, will check the connexity of the mesh.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/ManifoldTopologies/ManifoldEdgeSetTopologyModifier/","title":"ManifoldEdgeSetTopologyModifier","text":"<p>ManifoldEdge set topology modifier</p> <p>Target: <code>ManifoldTopologies</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>EdgeSetTopologyModifier</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 propagateToDOF   propagate changes to MEchanical object DOFs if true  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/ManifoldTopologies/ManifoldTetrahedronSetTopologyContainer/","title":"ManifoldTetrahedronSetTopologyContainer","text":"<p>Manifold Tetrahedron set topology container</p> <p>Target: <code>ManifoldTopologies</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>TetrahedronSetTopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 edges  List of edge indices  checkConnexity  It true, will check the connexity of the mesh.  0 triangles  List of triangle indices  createTriangleArray  Force the creation of a set of triangles associated with each tetrahedron  0 tetrahedra  List of tetrahedron indices  debugViewTriangleIndices  Debug : view triangles indices  0 debugViewTetraIndices  Debug : view tetra indices  0 debugViewShells  Debug : view shells tetra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/ManifoldTopologies/ManifoldTriangleSetGeometryAlgorithms/","title":"ManifoldTriangleSetGeometryAlgorithms","text":"<p>ManifoldTriangle set topology algorithms</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ManifoldTopologies</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>TriangleSetGeometryAlgorithms</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 tagMechanics  Tag of the Mechanical Object  recomputeTrianglesOrientation  if true, will recompute triangles orientation according to normals.  0 flipNormals  if true, will flip normal of the first triangle used to recompute triangle orientation.  0 swap 2 triangles by their index  Debug : Test swap function (only while animate).  Mesh Optimization  If true, optimize the mesh only by swapping edges  0 Visualization showIndicesScale  Debug : scale for view topology indices  0.02 showPointIndices  Debug : view Point indices  0 showEdgeIndices  Debug : view Edge indices.  0 drawEdges  if true, draw the edges in the topology.  0 drawColorEdges  RGB code color used to draw edges.  0.4 1 0.3 1 showTriangleIndices  Debug : view Triangle indices  0 drawTriangles  if true, draw the triangles in the topology  0 drawColorTriangles  RGBA code color used to draw edges.  0.3 0.5 0.8 1 drawNormals  if true, draw the triangles in the topology  0 drawNormalLength  Fiber length visualisation.  10 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/ManifoldTopologies/ManifoldTriangleSetTopologyContainer/","title":"ManifoldTriangleSetTopologyContainer","text":"<p>Manifold Triangle set topology container</p> <p>Target: <code>ManifoldTopologies</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>TriangleSetTopologyContainer</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Filename of the mesh  position  Initial position of points  checkTopology  Parameter to activate internal topology checks (might slow down the simulation)  0 nbPoints  Number of points  0 edges  List of edge indices  checkConnexity  It true, will check the connexity of the mesh.  0 triangles  List of triangle indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/ManifoldTopologies/ManifoldTriangleSetTopologyModifier/","title":"ManifoldTriangleSetTopologyModifier","text":"<p>Triangle set topology manifold modifier</p> <p>Target: <code>ManifoldTopologies</code></p> <p>namespace: <code>sofa::component::topology::container::dynamic</code></p> <p>parents: </p> <ul> <li><code>TriangleSetTopologyModifier</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 propagateToDOF   propagate changes to MEchanical object DOFs if true  1 list_Out  triangles with at least one null values.  swap 2 triangles by their index  Debug : Test swap function (only while animate).  Mesh Optimization  If true, optimize the mesh only by swapping edges  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/ModelOrderReduction/HyperReducedHexahedronFEMForceField/","title":"HyperReducedHexahedronFEMForceField","text":"<p>Hexahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ModelOrderReduction</code></p> <p>namespace: <code>sofa::component::forcefield</code></p> <p>parents: </p> <ul> <li><code>HexahedronFEMForceField</code></li> <li><code>HyperReducedHelper</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 method  \"large\" or \"polar\" or \"small\" displacements  large poissonRatio  FEM Poisson Ratio in Hooke's law [0,0.5[  0.45 youngModulus  FEM Young's modulus in Hooke's law  5000 updateStiffnessMatrix 0 gatherPt  number of dof accumulated per threads during the gather operation (Only use in GPU version)  gatherBsize  number of dof accumulated per threads during the gather operation (Only use in GPU version)  stiffnessMatrices  Stiffness matrices per element (K_i)  initialPoints  Initial Position  HyperReduction prepareECSW  Save data necessary for the construction of the reduced model  0 nbModes  Number of modes when preparing the ECSW method only  3 modesPath  Path to the file containing the modes (useful only for preparing ECSW)  modes.txt nbTrainingSet  When preparing the ECSW, size of the training set  40 periodSaveGIE  When prepareECSW is true, the values of Gie are taken every periodSaveGIE timesteps.  5 performECSW  Use the reduced model with the ECSW method  0 RIDPath  Path to the Reduced Integration domain when performing the ECSW method  reducedIntegrationDomain.txt weightsPath  Path to the weights when performing the ECSW method  weights.txt Visualization drawing  draw the forcefield if true  1 drawPercentageOffset  size of the hexa  0.15 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/ModelOrderReduction/HyperReducedRestShapeSpringsForceField/","title":"HyperReducedRestShapeSpringsForceField","text":"<p>Simple elastic springs applied to given degrees of freedom between their current and rest shape position</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ModelOrderReduction</code></p> <p>namespace: <code>sofa::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>RestShapeSpringsForceField</code></li> <li><code>HyperReducedHelper</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 points  points controlled by the rest shape springs  stiffness  stiffness values between the actual position and the rest shape position  angularStiffness  angularStiffness assigned when controlling the rotation of the points  pivot_points  global pivot points used when translations instead of the rigid mass centers  external_points  points from the external Mechancial State that define the rest shape springs  recompute_indices  Recompute indices (should be false for BBOX)  1 springColor  spring color. (default=[0.0,1.0,0.0,1.0])  0 1 0 1 activeDirections  Directions in which the spring is active (default=[1,1,1])  1 1 1 HyperReduction prepareECSW  Save data necessary for the construction of the reduced model  0 nbModes  Number of modes when preparing the ECSW method only  3 modesPath  Path to the file containing the modes (useful only for preparing ECSW)  modes.txt nbTrainingSet  When preparing the ECSW, size of the training set  40 periodSaveGIE  When prepareECSW is true, the values of Gie are taken every periodSaveGIE timesteps.  5 performECSW  Use the reduced model with the ECSW method  0 RIDPath  Path to the Reduced Integration domain when performing the ECSW method  reducedIntegrationDomain.txt weightsPath  Path to the weights when performing the ECSW method  weights.txt Visualization drawSpring  draw Spring  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component external_rest_shape rest_shape can be defined by the position of an external Mechanical State topology Link to be set to the topology container in the component graph"},{"location":"35_Plugins/50_Usual_plugins/ModelOrderReduction/HyperReducedTetrahedralCorotationalFEMForceField/","title":"HyperReducedTetrahedralCorotationalFEMForceField","text":"<p>Corotational FEM Tetrahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ModelOrderReduction</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>TetrahedralCorotationalFEMForceField</code></li> <li><code>HyperReducedHelper</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 tetrahedronInfo  Internal tetrahedron data  method  \"small\", \"large\" (by QR) or \"polar\" displacements  large poissonRatio  FEM Poisson Ratio  0.45 youngModulus  FEM Young Modulus  5000 localStiffnessFactor  Allow specification of different stiffness per element. If there are N element and M values are specified, the youngModulus factor for element i would be localStiffnessFactor[i*M/N]  updateStiffnessMatrix 0 computeGlobalMatrix 0 HyperReduction prepareECSW  Save data necessary for the construction of the reduced model  0 nbModes  Number of modes when preparing the ECSW method only  3 modesPath  Path to the file containing the modes (useful only for preparing ECSW)  modes.txt nbTrainingSet  When preparing the ECSW, size of the training set  40 periodSaveGIE  When prepareECSW is true, the values of Gie are taken every periodSaveGIE timesteps.  5 performECSW  Use the reduced model with the ECSW method  0 RIDPath  Path to the Reduced Integration domain when performing the ECSW method  reducedIntegrationDomain.txt weightsPath  Path to the weights when performing the ECSW method  weights.txt Visualization drawing   draw the forcefield if true  1 drawColor1   draw color for faces 1  0 0 1 1 drawColor2   draw color for faces 2  0 0.5 1 1 drawColor3   draw color for faces 3  0 1 1 1 drawColor4   draw color for faces 4  0.5 1 1 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/ModelOrderReduction/HyperReducedTetrahedronFEMForceField/","title":"HyperReducedTetrahedronFEMForceField","text":"<p>Tetrahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ModelOrderReduction</code></p> <p>namespace: <code>sofa::component::forcefield</code></p> <p>parents: </p> <ul> <li><code>TetrahedronFEMForceField</code></li> <li><code>HyperReducedHelper</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 initialPoints  Initial Position  method  \"small\", \"large\" (by QR), \"polar\" or \"svd\" displacements  large poissonRatio  FEM Poisson Ratio in Hooke's law [0,0.5[  0.45 youngModulus  FEM Young's Modulus in Hooke's law  localStiffnessFactor  Allow specification of different stiffness per element. If there are N element and M values are specified, the youngModulus factor for element i would be localStiffnessFactor[i*M/N]  updateStiffnessMatrix 0 computeGlobalMatrix 0 plasticMaxThreshold  Plastic Max Threshold (2-norm of the strain)  0 plasticYieldThreshold  Plastic Yield Threshold (2-norm of the strain)  0.0001 plasticCreep  Plastic Creep Factor * dt [0,1]. Warning this factor depends on dt.  0.9 gatherPt  number of dof accumulated per threads during the gather operation (Only use in GPU version)  gatherBsize  number of dof accumulated per threads during the gather operation (Only use in GPU version)  computeVonMisesStress  compute and display von Mises stress: 0: no computations, 1: using corotational strain, 2: using full Green strain. Set listening=1  0 vonMisesPerElement  von Mises Stress per element  vonMisesPerNode  von Mises Stress per node  vonMisesStressColors  Vector of colors describing the VonMises stress  updateStiffness  udpate structures (precomputed in init) using stiffness parameters in each iteration (set listening=1)  0 HyperReduction prepareECSW  Save data necessary for the construction of the reduced model  0 nbModes  Number of modes when preparing the ECSW method only  3 modesPath  Path to the file containing the modes (useful only for preparing ECSW)  modes.txt nbTrainingSet  When preparing the ECSW, size of the training set  40 periodSaveGIE  When prepareECSW is true, the values of Gie are taken every periodSaveGIE timesteps.  5 performECSW  Use the reduced model with the ECSW method  0 RIDPath  Path to the Reduced Integration domain when performing the ECSW method  reducedIntegrationDomain.txt weightsPath  Path to the weights when performing the ECSW method  weights.txt Visualization drawHeterogeneousTetra  Draw Heterogeneous Tetra in different color  0 showStressColorMap  Color map used to show stress values  Blue to Red showStressAlpha  Alpha for vonMises visualisation  1 showVonMisesStressPerNode  draw points showing vonMises stress interpolated in nodes  0 showVonMisesStressPerNodeColorMap  draw elements showing vonMises stress interpolated in nodes  0 showVonMisesStressPerElement  draw triangles showing vonMises stress interpolated in elements  0 showElementGapScale  draw gap between elements (when showWireFrame is disabled) [0,1]: 0: no gap, 1: no element  0.333 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the tetrahedron topology container"},{"location":"35_Plugins/50_Usual_plugins/ModelOrderReduction/HyperReducedTetrahedronHyperelasticityFEMForceField/","title":"HyperReducedTetrahedronHyperelasticityFEMForceField","text":"<p>Generic Tetrahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ModelOrderReduction</code></p> <p>namespace: <code>sofa::component::forcefield</code></p> <p>parents: </p> <ul> <li><code>TetrahedronHyperelasticityFEMForceField</code></li> <li><code>HyperReducedHelper</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 matrixRegularization  Regularization of the Stiffness Matrix (between true or false)  0 materialName  the name of the material to be used  ArrudaBoyce ParameterSet  The global parameters specifying the material  AnisotropyDirections  The global directions of anisotropy of the material  tetrahedronInfo  Internal tetrahedron data  edgeInfo  Internal edge data  HyperReduction prepareECSW  Save data necessary for the construction of the reduced model  0 nbModes  Number of modes when preparing the ECSW method only  3 modesPath  Path to the file containing the modes (useful only for preparing ECSW)  modes.txt nbTrainingSet  When preparing the ECSW, size of the training set  40 periodSaveGIE  When prepareECSW is true, the values of Gie are taken every periodSaveGIE timesteps.  5 performECSW  Use the reduced model with the ECSW method  0 RIDPath  Path to the Reduced Integration domain when performing the ECSW method  reducedIntegrationDomain.txt weightsPath  Path to the weights when performing the ECSW method  weights.txt <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/ModelOrderReduction/HyperReducedTriangleFEMForceField/","title":"HyperReducedTriangleFEMForceField","text":"<p>Triangular finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ModelOrderReduction</code></p> <p>namespace: <code>sofa::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>TriangleFEMForceField</code></li> <li><code>HyperReducedHelper</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 initialPoints  Initial Position  method  large: large displacements, small: small displacements  large poissonRatio  Poisson ratio in Hooke's law  0.3 youngModulus  Young modulus in Hooke's law  1000 thickness  Thickness of the elements  1 planeStrain  Plane strain or plane stress assumption  0 HyperReduction prepareECSW  Save data necessary for the construction of the reduced model  0 nbModes  Number of modes when preparing the ECSW method only  3 modesPath  Path to the file containing the modes (useful only for preparing ECSW)  modes.txt nbTrainingSet  When preparing the ECSW, size of the training set  40 periodSaveGIE  When prepareECSW is true, the values of Gie are taken every periodSaveGIE timesteps.  5 performECSW  Use the reduced model with the ECSW method  0 RIDPath  Path to the Reduced Integration domain when performing the ECSW method  reducedIntegrationDomain.txt weightsPath  Path to the weights when performing the ECSW method  weights.txt <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/ModelOrderReduction/MORContactMapping/","title":"MORContactMapping","text":"<p>Special case of mapping where the child points are the same as the parent points</p> <p>Templates:</p> <ul> <li><code>Vec1d,Vec1d</code></li> <li><code>Vec2d,Vec2d</code></li> <li><code>Vec3d,Vec3d</code></li> </ul> <p>Target: <code>ModelOrderReduction</code></p> <p>namespace: <code>sofa::component::mapping</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 modesPath  Path to the file containing the modes. REQUIRED  contactIndicesPath  Path to the file containing the modes. REQUIRED  lambdaIndicesPath  Path to the file where contact indices will be stored.  storeLambda  Boolean to say if we store lambda  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"35_Plugins/50_Usual_plugins/ModelOrderReduction/MORPointCollisionModel/","title":"MORPointCollisionModel","text":"<p>Collision model which represents a set of points</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ModelOrderReduction</code></p> <p>namespace: <code>sofa::component::collision::geometry</code></p> <p>parents: </p> <ul> <li><code>PointCollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 bothSide  activate collision on both side of the point model (when surface normals are defined on these points)  0 computeNormals  activate computation of normal vectors (required for some collision detection algorithms)  0 displayFreePosition  Display Collision Model Points free position(in green)  0 displayContactModes  display Contact Modes  0 lambdaModesPath  path to the file containing the lambda modes  lambdaModesCoeffsPath  path to the file containing the coefficients of lambda modes  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/ModelOrderReduction/ModelOrderReductionMapping/","title":"ModelOrderReductionMapping","text":"<p>Reduced model</p> <p>Templates:</p> <ul> <li><code>Vec1d,Vec3d</code></li> </ul> <p>Target: <code>ModelOrderReduction</code></p> <p>namespace: <code>sofa::component::mapping</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 rotation  Rotation of the modes  modesPath  Path to the file containing the modes. REQUIRED  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/AnimationLoopParallelScheduler/","title":"AnimationLoopParallelScheduler","text":"<p>parallel animation loop, using intel tbb library</p> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>multithreading::component::animationloop</code></p> <p>parents: </p> <ul> <li><code>BaseAnimationLoop</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 computeBoundingBox  If true, compute the global bounding box of the scene at each time step. Used mostly for rendering.  1 nbThreads  If not yet initialized, the main task scheduler is initialized with this number of threads. 0 corresponds to the number of available cores on the CPU. -n (minus) corresponds to the number of available cores on the CPU minus the provided number.  0 taskSchedulerType  Type of task scheduler to use.  _default <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects targetNode Link to the scene's node that will be processed by the loop"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/BeamLinearMapping_mt/","title":"BeamLinearMapping_mt","text":"<p>Set the positions and velocities of points attached to a beam using linear interpolation between DOFs</p> <p>Templates:</p> <ul> <li><code>Rigid3d,Vec3d</code></li> </ul> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>multithreading::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>BeamLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 localCoord  true if initial coordinates are in the beam local coordinate system (i.e. a point at (10,0,0) is on the DOF number 10, whereas if this is false it is at whatever position on the beam where the distance from the initial DOF is 10)  1 granularity  minimum number of Beam points for task creation  32 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/DataExchange/","title":"DataExchange","text":"<p>DataExchange DataExchange</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> <li><code>Vec3f</code></li> <li><code>bool</code></li> <li><code>d</code></li> <li><code>f</code></li> <li><code>vector&lt;I&gt;</code></li> <li><code>vector&lt;Vec2d&gt;</code></li> <li><code>vector&lt;Vec2f&gt;</code></li> <li><code>vector&lt;Vec3d&gt;</code></li> <li><code>vector&lt;Vec3f&gt;</code></li> <li><code>vector&lt;d&gt;</code></li> <li><code>vector&lt;f&gt;</code></li> <li><code>vector&lt;i&gt;</code></li> </ul> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>sofa::core</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 from  source object to copy  to  destination object to copy  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/MeanComputation/","title":"MeanComputation","text":"<p>Compute the mean of the input elements</p> <p>Templates:</p> <ul> <li><code>Rigid2d</code></li> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 result  Result: mean computed from the input values  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/ParallelBVHNarrowPhase/","title":"ParallelBVHNarrowPhase","text":"<p>Narrow phase collision detection based on boundary volume hierarchy</p> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>multithreading::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>BVHNarrowPhase</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 nbThreads  If not yet initialized, the main task scheduler is initialized with this number of threads. 0 corresponds to the number of available cores on the CPU. -n (minus) corresponds to the number of available cores on the CPU minus the provided number.  0 taskSchedulerType  Type of task scheduler to use.  _default <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/ParallelBruteForceBroadPhase/","title":"ParallelBruteForceBroadPhase","text":"<p>Collision detection using extensive pair-wise tests performed in parallel</p> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>multithreading::component::collision::detection::algorithm</code></p> <p>parents: </p> <ul> <li><code>BruteForceBroadPhase</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 box  if not empty, objects that do not intersect this bounding-box will be ignored  nbThreads  If not yet initialized, the main task scheduler is initialized with this number of threads. 0 corresponds to the number of available cores on the CPU. -n (minus) corresponds to the number of available cores on the CPU minus the provided number.  0 taskSchedulerType  Type of task scheduler to use.  _default <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/ParallelCGLinearSolver/","title":"ParallelCGLinearSolver","text":"<p>Linear system solver using the conjugate gradient iterative algorithm in parallel</p> <p>Templates:</p> <ul> <li><code>ParallelCompressedRowSparseMatrixMat3x3d</code></li> <li><code>ParallelCompressedRowSparseMatrixd</code></li> </ul> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>multithreading::component::linearsolver::iterative</code></p> <p>parents: </p> <ul> <li><code>CGLinearSolver</code></li> <li><code>Base</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 parallelInverseProduct  Parallelize the computation of the product J*M^{-1}*J^T where M is the matrix of the linear system and J is any matrix with compatible dimensions  0 iterations  Maximum number of iterations of the Conjugate Gradient solution  25 tolerance  Desired accuracy of the Conjugate Gradient solution evaluating: |r|\u00b2/|b|\u00b2 (ratio of current residual norm over initial residual norm)  1e-05 threshold  Minimum value of the denominator (pT A p)^ in the conjugate Gradient solution  1e-05 warmStart  Use previous solution as initial solution  0 graph  Graph of residuals at each iteration  nbThreads  If not yet initialized, the main task scheduler is initialized with this number of threads. 0 corresponds to the number of available cores on the CPU. -n (minus) corresponds to the number of available cores on the CPU minus the provided number.  0 taskSchedulerType  Type of task scheduler to use.  _default <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem The linear system to solve"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/ParallelHexahedronFEMForceField/","title":"ParallelHexahedronFEMForceField","text":"<p>Parallel hexahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>multithreading::component::forcefield::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>HexahedronFEMForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 method  \"large\" or \"polar\" or \"small\" displacements  large poissonRatio  FEM Poisson Ratio in Hooke's law [0,0.5[  0.45 youngModulus  FEM Young's modulus in Hooke's law  5000 updateStiffnessMatrix 0 gatherPt  number of dof accumulated per threads during the gather operation (Only use in GPU version)  gatherBsize  number of dof accumulated per threads during the gather operation (Only use in GPU version)  stiffnessMatrices  Stiffness matrices per element (K_i)  initialPoints  Initial Position  nbThreads  If not yet initialized, the main task scheduler is initialized with this number of threads. 0 corresponds to the number of available cores on the CPU. -n (minus) corresponds to the number of available cores on the CPU minus the provided number.  0 taskSchedulerType  Type of task scheduler to use.  _default Visualization drawing  draw the forcefield if true  1 drawPercentageOffset  size of the hexa  0.15 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/ParallelMeshSpringForceField/","title":"ParallelMeshSpringForceField","text":"<p>Parallel stiff springs acting along the edges of a mesh</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>multithreading::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>MeshSpringForceField</code></li> <li><code>ParallelStiffSpringForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100 damping  uniform damping for the all springs  5 spring  pairs of indices, stiffness, damping, rest length  springsIndices1  List of indices in springs from the first mstate  springsIndices2  List of indices in springs from the second mstate  indices1  Indices of the source points on the first model  indices2  Indices of the fixed points on the second model  lengths  List of lengths to create the springs. Must have the same than indices1 &amp; indices2, or if only one element, it will be applied to all springs. If empty, 0 will be applied everywhere  linesStiffness  Stiffness for the Lines  0 linesDamping  Damping for the Lines  0 trianglesStiffness  Stiffness for the Triangles  0 trianglesDamping  Damping for the Triangles  0 quadsStiffness  Stiffness for the Quads  0 quadsDamping  Damping for the Quads  0 tetrahedraStiffness  Stiffness for the Tetrahedra  0 tetrahedraDamping  Damping for the Tetrahedra  0 cubesStiffness  Stiffness for the Cubes  0 cubesDamping  Damping for the Cubes  0 noCompression  Only consider elongation  0 localRange  optional range of local DOF indices. Any computation involving only indices outside of this range are discarded (useful for parallelization using mesh partitionning)  4294967295 4294967295 nbThreads  If not yet initialized, the main task scheduler is initialized with this number of threads. 0 corresponds to the number of available cores on the CPU. -n (minus) corresponds to the number of available cores on the CPU minus the provided number.  0 taskSchedulerType  Type of task scheduler to use.  _default Visualization showArrowSize  size of the axis  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 drawMinElongationRange  Min range of elongation (red eongation - blue neutral - green compression)  8 drawMaxElongationRange  Max range of elongation (red eongation - blue neutral - green compression)  15 drawSpringSize  Size of drawed lines  8 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/ParallelStiffSpringForceField/","title":"ParallelStiffSpringForceField","text":"<p>Parallel stiff springs</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>multithreading::component::solidmechanics::spring</code></p> <p>parents: </p> <ul> <li><code>StiffSpringForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs  100 damping  uniform damping for the all springs  5 spring  pairs of indices, stiffness, damping, rest length  springsIndices1  List of indices in springs from the first mstate  springsIndices2  List of indices in springs from the second mstate  indices1  Indices of the source points on the first model  indices2  Indices of the fixed points on the second model  lengths  List of lengths to create the springs. Must have the same than indices1 &amp; indices2, or if only one element, it will be applied to all springs. If empty, 0 will be applied everywhere  nbThreads  If not yet initialized, the main task scheduler is initialized with this number of threads. 0 corresponds to the number of available cores on the CPU. -n (minus) corresponds to the number of available cores on the CPU minus the provided number.  0 taskSchedulerType  Type of task scheduler to use.  _default Visualization showArrowSize  size of the axis  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"35_Plugins/50_Usual_plugins/MultiThreading/ParallelTetrahedronFEMForceField/","title":"ParallelTetrahedronFEMForceField","text":"<p>Parallel tetrahedral finite elements</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>MultiThreading</code></p> <p>namespace: <code>multithreading::component::solidmechanics::fem::elastic</code></p> <p>parents: </p> <ul> <li><code>TetrahedronFEMForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 initialPoints  Initial Position  method  \"small\", \"large\" (by QR), \"polar\" or \"svd\" displacements  large poissonRatio  FEM Poisson Ratio in Hooke's law [0,0.5[  0.45 youngModulus  FEM Young's Modulus in Hooke's law  localStiffnessFactor  Allow specification of different stiffness per element. If there are N element and M values are specified, the youngModulus factor for element i would be localStiffnessFactor[i*M/N]  updateStiffnessMatrix 0 computeGlobalMatrix 0 plasticMaxThreshold  Plastic Max Threshold (2-norm of the strain)  0 plasticYieldThreshold  Plastic Yield Threshold (2-norm of the strain)  0.0001 plasticCreep  Plastic Creep Factor * dt [0,1]. Warning this factor depends on dt.  0.9 gatherPt  number of dof accumulated per threads during the gather operation (Only use in GPU version)  gatherBsize  number of dof accumulated per threads during the gather operation (Only use in GPU version)  computeVonMisesStress  compute and display von Mises stress: 0: no computations, 1: using corotational strain, 2: using full Green strain. Set listening=1  0 vonMisesPerElement  von Mises Stress per element  vonMisesPerNode  von Mises Stress per node  vonMisesStressColors  Vector of colors describing the VonMises stress  updateStiffness  udpate structures (precomputed in init) using stiffness parameters in each iteration (set listening=1)  0 nbThreads  If not yet initialized, the main task scheduler is initialized with this number of threads. 0 corresponds to the number of available cores on the CPU. -n (minus) corresponds to the number of available cores on the CPU minus the provided number.  0 taskSchedulerType  Type of task scheduler to use.  _default Visualization drawHeterogeneousTetra  Draw Heterogeneous Tetra in different color  0 showStressColorMap  Color map used to show stress values  Blue to Red showStressAlpha  Alpha for vonMises visualisation  1 showVonMisesStressPerNode  draw points showing vonMises stress interpolated in nodes  0 showVonMisesStressPerNodeColorMap  draw elements showing vonMises stress interpolated in nodes  0 showVonMisesStressPerElement  draw triangles showing vonMises stress interpolated in elements  0 showElementGapScale  draw gap between elements (when showWireFrame is disabled) [0,1]: 0: no gap, 1: no element  0.333 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the tetrahedron topology container"},{"location":"35_Plugins/50_Usual_plugins/PluginExample/MyBehaviorModel/","title":"MyBehaviorModel","text":"<p>Dummy component with a custom widget.</p> <p>Target: <code>PluginExample</code></p> <p>namespace: <code>sofa::component::behaviormodel</code></p> <p>parents: </p> <ul> <li><code>BehaviorModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Custom Unsigned Data  Example of unsigned data with custom widget  1 Unsigned Data  Example of unsigned data with standard widget  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/PluginExample/MyMappingPendulumInPlane/","title":"MyMappingPendulumInPlane","text":"<p>Mapping from an angle to a point in 2D</p> <p>Templates:</p> <ul> <li><code>Vec1d,Vec2d</code></li> <li><code>Vec1d,Vec3d</code></li> </ul> <p>Target: <code>PluginExample</code></p> <p>namespace: <code>sofa::component::mapping</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 lengths  distances from the fixed point to the end of the pendulum  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"35_Plugins/50_Usual_plugins/PluginExample/MyProjectiveConstraintSet/","title":"MyProjectiveConstraintSet","text":"<p>just an example of templated component</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec1d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>PluginExample</code></p> <p>namespace: <code>sofa::component::projectiveconstraintset</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/PluginExample/MyVisualModel/","title":"MyVisualModel","text":"<p>Dummy visual component.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>PluginExample</code></p> <p>namespace: <code>sofa::component::visual</code></p> <p>parents: </p> <ul> <li><code>VisualModelImpl</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 initRestPositions  True if rest positions must be initialized with initial positions  0 useNormals  True if normal smoothing groups should be read from file  1 updateNormals  True if normals should be updated at each iteration  1 computeTangents  True if tangents should be computed at startup  0 updateTangents  True if tangents should be updated at each iteration  1 handleDynamicTopology  True if topological changes should be handled  1 fixMergedUVSeams  True if UV seams should be handled even when duplicate UVs are merged  1 keepLines  keep and draw lines (false by default)  0 vertPosIdx  If vertices have multiple normals/texcoords stores vertices position indices  vertNormIdx  If vertices have multiple normals/texcoords stores vertices normal indices  filename   Path to an ogl model  texturename  Name of the Texture  scaleTex  Scale of the texture  1 1 translationTex  Translation of the texture  0 0 material  Material  putOnlyTexCoords  Give Texture Coordinates without the texture binding  0 srgbTexturing  When sRGB rendering is enabled, is the texture in sRGB colorspace?  0 materials  List of materials  groups  Groups of triangles and quads using a given material  Transformation translation  Initial Translation of the object  0 0 0 rotation  Initial Rotation of the object  0 0 0 scale3d  Initial Scale of the object  1 1 1 Vector position  Vertices coordinates  restPosition  Vertices rest coordinates  normal  Normals of the model  vertices  vertices of the model (only if vertices have multiple normals/texcoords, otherwise positions are used)  texcoords  coordinates of the texture  tangents  tangents for normal mapping  bitangents  tangents for normal mapping  edges  edges of the model  triangles  triangles of the model  quads  quads of the model  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/Registration/ClosestPointRegistrationForceField/","title":"ClosestPointRegistrationForceField","text":"<p>Compute forces based on closest points from/to a target surface/point set</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Registration</code></p> <p>namespace: <code>sofa::component::forcefield</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  uniform stiffness for the all springs.  100 damping  uniform damping for the all springs.  0 cacheSize  number of closest points used in the cache to speed up closest point computation.  5 blendingFactor  blending between projection (=0) and attraction (=1) forces.  0 outlierThreshold  suppress outliers when distance &gt; (meandistance + threshold*stddev).  0 normalThreshold  suppress outliers when normal.closestPointNormal &lt; threshold.  0.5 projectToPlane  project closest points in the plane defined by the normal.  1 rejectBorders  ignore border vertices.  1 rejectOutsideBbox  ignore source points outside bounding box of target points.  0 sourceTriangles  Triangles of the source mesh.  sourceNormals  Normals of the source mesh.  position  Vertices of the target mesh.  normals  Normals of the target mesh.  triangles  Triangles of the target mesh.  theCloserTheStiffer  Modify stiffness according to distance  0 Visualization showArrowSize  size of the axis.  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow.  0 drawColorMap  Hue mapping of distances to closest point  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/Registration/GroupwiseRegistrationEngine/","title":"GroupwiseRegistrationEngine","text":"<p>Register a set of meshes of similar topology</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Registration</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 nbInputs  Number of input vectors  2 Inputs input1  input vector (1)  input2  input vector (2)  Outputs output1  output vector(1)  output2  output vector(2)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/Registration/InertiaAlign/","title":"InertiaAlign","text":"<p>An engine computing inertia matrix and the principal direction of a mesh.</p> <p>Target: <code>Registration</code></p> <p>namespace: <code>sofa::component</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 targetCenter  input: the gravity center of the target mesh  sourceCenter  input: the gravity center of the source mesh  targetInertiaMatrix  input: the inertia matrix of the target mesh  sourceInertiaMatrix  input: the inertia matrix of the source mesh  targetPosition  input: positions of the target vertices  sourcePosition  input: positions of the source vertices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/Registration/IntensityProfileCreator/","title":"IntensityProfileCreator","text":"<p>Create reference intensity profiles from custom values</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageS</code></li> <li><code>ImageUC</code></li> <li><code>ImageUS</code></li> </ul> <p>Target: <code>Registration</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 image 0 0 0 0 0 values  intensity values for each line  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/Registration/IntensityProfileRegistrationForceField/","title":"IntensityProfileRegistrationForceField","text":"<p>Compute normal forces on a point set based on the closest intensity profile in the target image</p> <p>Templates:</p> <ul> <li><code>Vec3d,ImageB</code></li> <li><code>Vec3d,ImageC</code></li> <li><code>Vec3d,ImageD</code></li> <li><code>Vec3d,ImageF</code></li> <li><code>Vec3d,ImageI</code></li> <li><code>Vec3d,ImageL</code></li> <li><code>Vec3d,ImageS</code></li> <li><code>Vec3d,ImageUC</code></li> <li><code>Vec3d,ImageUI</code></li> <li><code>Vec3d,ImageUL</code></li> <li><code>Vec3d,ImageUS</code></li> </ul> <p>Target: <code>Registration</code></p> <p>namespace: <code>sofa::component::forcefield</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 maskOutside  discard profiles outside images  0 useAnisotropicStiffness  use more accurate but non constant stiffness matrix.  0 sizes  Inwards/outwards profile size.  5 5 step  Spacing of the profile discretization.  0.01 interpolation  Interpolation method.  measure  Similarity measure.  threshold  threshold for the distance minimization.  1 searchRange  Number of inwards/outwards steps for searching the most similar profiles.  10 stiffness  uniform stiffness for the all springs  100 damping  uniform damping for the all springs  5 Inputs refImage 0 0 0 0 0 image 0 0 0 0 0 refTransform 0 0 0 0 0 0 1 1 1 0 1 0 transform 0 0 0 0 0 0 1 1 1 0 1 0 refDirections  Profile reference directions.  directions  Profile directions.  Outputs refProfiles  reference intensity profiles  0 0 0 0 0 profiles  computed intensity profiles  0 0 0 0 0 similarity  similarity image  0 0 0 0 0 Visualization showArrowSize  size of the axis  0.01 drawMode  The way springs will be drawn: - 0: Line - 1:Cylinder - 2: Arrow  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/Registration/RegistrationContactForceField/","title":"RegistrationContactForceField","text":"<p>Contact using attractive springs</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>Registration</code></p> <p>namespace: <code>sofa::component::interactionforcefield</code></p> <p>parents: </p> <ul> <li><code>PairInteractionForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component"},{"location":"35_Plugins/50_Usual_plugins/Registration/RegistrationExporter/","title":"RegistrationExporter","text":"<p>Replicate loaded obj files into path, with current positions</p> <p>Target: <code>Registration</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 path  output path  position  points position (will use mechanical state if this is empty)  applyInverseTransform  apply inverse transform specified in loaders  0 exportEveryNumberOfSteps  export file only at specified number of steps (0=disable)  0 exportAtBegin  export file at the initialization  0 exportAtEnd  export file when the simulation is finished  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SensableEmulation/OmniDriverEmu/","title":"OmniDriverEmu","text":"<p>Solver to test compliance computation for new articulated system objects</p> <p>Target: <code>SensableEmulation</code></p> <p>namespace: <code>sofa::component::controller</code></p> <p>parents: </p> <ul> <li><code>Controller</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 forceScale  Default forceScale applied to the force feedback.   1 scale  Default scale applied to the Phantom Coordinates.   1 positionBase  Position of the interface base in the scene world coordinates  0 0 0 orientationBase  Orientation of the interface base in the scene world coordinates  0 0 0 1 positionTool  Position of the tool in the omni end effector frame  0 0 0 orientationTool  Orientation of the tool in the omni end effector frame  0 0 0 1 permanent  Apply the force feedback permanently  0 omniVisu  Visualize the position of the interface in the virtual scene  0 simuFreq  frequency of the \"simulated Omni\"  1000 simulateTranslation  do very naive \"translation simulation\" of omni, with constant orientation &lt;0 0 0 1&gt;  0 trajPoints  Trajectory positions  trajTiming  Trajectory timing  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/ShapeMatchingPlugin/ShapeMatchingForceField/","title":"ShapeMatchingForceField","text":"<p>Meshless deformations based on shape matching</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ShapeMatchingPlugin</code></p> <p>namespace: <code>sofa::component::forcefield</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 stiffness  force stiffness  500 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component rotationFinder link to the rotation finder"},{"location":"35_Plugins/50_Usual_plugins/ShapeMatchingPlugin/ShapeMatchingRotationFinder/","title":"ShapeMatchingRotationFinder","text":"<p>ShapeMatchingRotationFinder</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>ShapeMatchingPlugin</code></p> <p>namespace: <code>sofa::component::container</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 axisToFlip  Flip Axis  -1 neighborhoodLevel  Neighborhood level  1 numOfClusters  Number of clusters  1 maxIter  Number of iterations to build the neighborhood  500 epsilon  epsilon  1e-10 radius  radius between Cm and point position  0.001 Visualization showRotations  Show Rotations  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalState link to the mechanical state topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/BarycentricMapping/","title":"BarycentricMapping","text":"<p>Mapping using barycentric coordinates of the child with respect to cells of its parent Supports GPU-side computations using CUDA Supports GPU-side computations using CUDA Supports GPU-side computations using CUDA Supports GPU-side computations using CUDA Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>CudaVec3f,CudaVec3f</code></li> <li><code>CudaVec3f,CudaVec3f1</code></li> <li><code>CudaVec3f,Rigid3d</code></li> <li><code>CudaVec3f,Vec3d</code></li> <li><code>CudaVec3f1,CudaVec3f</code></li> <li><code>CudaVec3f1,CudaVec3f1</code></li> <li><code>CudaVec3f1,Vec3d</code></li> <li><code>Vec3d,CudaVec3f</code></li> <li><code>Vec3d,CudaVec3f1</code></li> </ul> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 useRestPosition  Use the rest position of the input and output models to initialize the mapping  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map mapper Internal mapper created depending on the type of topology input_topology Input topology container (usually the surrounding domain). output_topology Output topology container (usually the immersed domain)."},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/BarycentricMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/BarycentricMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [MeshSpringForceField RegularGridSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showMappings\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;Node name=\"Chain\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_19\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_19\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\"  rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" /&gt;\n            &lt;UniformMass vertexMass=\"0.1\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"red\" dx=\"2.5\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"5\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"4\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_8\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_8\" dx=\"5\" color=\"green\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"5\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject dx=\"7.5\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"2\" nz=\"5\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-0.5\" ymax=\"0.5\" zmin=\"-2\" zmax=\"2\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_13\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_13\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"10\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus2.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_17\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_17\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"ChainFEM\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dz=\"6\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_21\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_21\" color=\"gray\" dz=\"6\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM1\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" dz=\"6\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_23\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_23\" color=\"red\" dx=\"2.5\" dz=\"6\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" dz=\"6\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM2\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"5\" dz=\"6\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"red\" dx=\"5\" dz=\"6\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"5\" dz=\"6\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM3\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" dz=\"6\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_6\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_6\" color=\"red\" dx=\"7.5\" dz=\"6\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" dz=\"6\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFEM4\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"10\" dz=\"6\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1000\" poissonRatio=\"0.3\" computeGlobalMatrix=\"false\" method=\"polar\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_10\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_10\" color=\"red\" dx=\"10\" dz=\"6\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"10\" dz=\"6\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"ChainSpring\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dz=\"12\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_14\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_14\" dz=\"12\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring1\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" dz=\"12\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"4\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_18\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_18\" dx=\"2.5\" dz=\"12\" color=\"green\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"2.5\" dz=\"12\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring2\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"5\" dz=\"12\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"4\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_22\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_22\" dx=\"5\" dz=\"12\" color=\"green\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"5\" dz=\"12\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring3\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" dz=\"12\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"4\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" dx=\"7.5\" dz=\"12\" color=\"green\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"7.5\" dz=\"12\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusSpring4\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/torus2_low_res.msh\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dx=\"10\" dz=\"12\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;MeshSpringForceField name=\"Springs\" tetrasStiffness=\"400\" tetrasDamping=\"4\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_5\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_5\" dx=\"10\" dz=\"12\" color=\"green\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" dx=\"10\" dz=\"12\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"ChainFFD\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dz=\"18\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_9\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_9\" dz=\"18\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD1\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject dx=\"2.5\" dz=\"18\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"2\" nz=\"5\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-0.5\" ymax=\"0.5\" zmin=\"-2\" zmax=\"2\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_11\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_11\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD2\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject dx=\"5\" dz=\"18\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"5\" nz=\"2\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-2\" ymax=\"2\" zmin=\"-0.5\" zmax=\"0.5\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_15\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_15\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD3\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject dx=\"7.5\" dz=\"18\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"2\" nz=\"5\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-0.5\" ymax=\"0.5\" zmin=\"-2\" zmax=\"2\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_20\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_20\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusFFD4\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0.01\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject dx=\"10\" dz=\"18\" /&gt;\n            &lt;UniformMass totalMass=\"5\" /&gt;\n            &lt;RegularGridTopology nx=\"6\" ny=\"5\" nz=\"2\" xmin=\"-2.5\" xmax=\"2.5\" ymin=\"-2\" ymax=\"2\" zmin=\"-0.5\" zmax=\"0.5\" /&gt;\n            &lt;RegularGridSpringForceField name=\"Springs\" stiffness=\"200\" damping=\"2\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_24\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_24\" color=\"yellow\" /&gt;\n                &lt;BarycentricMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;BarycentricMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n    &lt;Node name=\"ChainRigid\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" dz=\"24\" /&gt;\n            &lt;TriangleCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;LineCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;PointCollisionModel simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" dz=\"24\" color=\"gray\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid1\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"2.5\" dz=\"24\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_4\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_4\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid2\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"5\" dz=\"24\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus2.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_7\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_7\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid3\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"7.5\" dz=\"24\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_12\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_12\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid4\"&gt;\n            &lt;EulerImplicitSolver rayleighStiffness=\"0\" /&gt;\n            &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"10\" dz=\"24\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus2.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_16\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_16\" color=\"gray\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;LineCollisionModel /&gt;\n                &lt;PointCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showMappings\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n\n    Chain = root.addChild('Chain')\n\n    TorusFixed = Chain.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_19\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_19\", color=\"gray\")\n\n    TorusFEM = Chain.addChild('TorusFEM')\n    TorusFEM.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\", rayleighMass=\"0.1\")\n    TorusFEM.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFEM.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusFEM.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\")\n    TorusFEM.addObject('UniformMass', vertexMass=\"0.1\")\n    TorusFEM.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"red\", dx=\"2.5\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusSpring = Chain.addChild('TorusSpring')\n    TorusSpring.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusSpring.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusSpring.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusSpring.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring.addObject('MechanicalObject', src=\"@loader\", dx=\"5\")\n    TorusSpring.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"4\")\n\n    Visu = TorusSpring.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_8\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_8\", dx=\"5\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD = Chain.addChild('TorusFFD')\n    TorusFFD.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFFD.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFFD.addObject('MechanicalObject', dx=\"7.5\")\n    TorusFFD.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD.addObject('RegularGridTopology', nx=\"6\", ny=\"2\", nz=\"5\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-0.5\", ymax=\"0.5\", zmin=\"-2\", zmax=\"2\")\n    TorusFFD.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_13\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_13\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusRigid = Chain.addChild('TorusRigid')\n    TorusRigid.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusRigid.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid.addObject('MechanicalObject', template=\"Rigid3\", dx=\"10\")\n    TorusRigid.addObject('UniformMass', filename=\"BehaviorModels/torus2.rigid\")\n\n    Visu = TorusRigid.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_17\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_17\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    ChainFEM = root.addChild('ChainFEM')\n\n    TorusFixed = ChainFEM.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\", dz=\"6\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_21\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_21\", color=\"gray\", dz=\"6\")\n\n    TorusFEM1 = ChainFEM.addChild('TorusFEM1')\n    TorusFEM1.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFEM1.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFEM1.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusFEM1.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM1.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\", dz=\"6\")\n    TorusFEM1.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM1.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_23\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_23\", color=\"red\", dx=\"2.5\", dz=\"6\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\", dz=\"6\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFEM2 = ChainFEM.addChild('TorusFEM2')\n    TorusFEM2.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFEM2.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFEM2.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusFEM2.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\", dz=\"6\")\n    TorusFEM2.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM2.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"red\", dx=\"5\", dz=\"6\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\", dz=\"6\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFEM3 = ChainFEM.addChild('TorusFEM3')\n    TorusFEM3.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFEM3.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFEM3.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusFEM3.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM3.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\", dz=\"6\")\n    TorusFEM3.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM3.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_6\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_6\", color=\"red\", dx=\"7.5\", dz=\"6\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\", dz=\"6\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFEM4 = ChainFEM.addChild('TorusFEM4')\n    TorusFEM4.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFEM4.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFEM4.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusFEM4.addObject('MeshTopology', src=\"@loader\")\n    TorusFEM4.addObject('MechanicalObject', src=\"@loader\", dx=\"10\", dz=\"6\")\n    TorusFEM4.addObject('UniformMass', totalMass=\"5\")\n    TorusFEM4.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"1000\", poissonRatio=\"0.3\", computeGlobalMatrix=\"false\", method=\"polar\")\n\n    Visu = TorusFEM4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_10\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_10\", color=\"red\", dx=\"10\", dz=\"6\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFEM4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"10\", dz=\"6\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    ChainSpring = root.addChild('ChainSpring')\n\n    TorusFixed = ChainSpring.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\", dz=\"12\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_14\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_14\", dz=\"12\", color=\"gray\")\n\n    TorusSpring1 = ChainSpring.addChild('TorusSpring1')\n    TorusSpring1.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusSpring1.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusSpring1.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusSpring1.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring1.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\", dz=\"12\")\n    TorusSpring1.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring1.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"4\")\n\n    Visu = TorusSpring1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_18\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_18\", dx=\"2.5\", dz=\"12\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"2.5\", dz=\"12\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusSpring2 = ChainSpring.addChild('TorusSpring2')\n    TorusSpring2.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusSpring2.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusSpring2.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusSpring2.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\", dz=\"12\")\n    TorusSpring2.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring2.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"4\")\n\n    Visu = TorusSpring2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_22\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_22\", dx=\"5\", dz=\"12\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"5\", dz=\"12\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusSpring3 = ChainSpring.addChild('TorusSpring3')\n    TorusSpring3.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusSpring3.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusSpring3.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus_low_res.msh\")\n    TorusSpring3.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring3.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\", dz=\"12\")\n    TorusSpring3.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring3.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"4\")\n\n    Visu = TorusSpring3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", dx=\"7.5\", dz=\"12\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"7.5\", dz=\"12\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusSpring4 = ChainSpring.addChild('TorusSpring4')\n    TorusSpring4.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusSpring4.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusSpring4.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/torus2_low_res.msh\")\n    TorusSpring4.addObject('MeshTopology', src=\"@loader\")\n    TorusSpring4.addObject('MechanicalObject', src=\"@loader\", dx=\"10\", dz=\"12\")\n    TorusSpring4.addObject('UniformMass', totalMass=\"5\")\n    TorusSpring4.addObject('MeshSpringForceField', name=\"Springs\", tetrasStiffness=\"400\", tetrasDamping=\"4\")\n\n    Visu = TorusSpring4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_5\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_5\", dx=\"10\", dz=\"12\", color=\"green\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusSpring4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\", dx=\"10\", dz=\"12\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    ChainFFD = root.addChild('ChainFFD')\n\n    TorusFixed = ChainFFD.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\", dz=\"18\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_9\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_9\", dz=\"18\", color=\"gray\")\n\n    TorusFFD1 = ChainFFD.addChild('TorusFFD1')\n    TorusFFD1.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFFD1.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFFD1.addObject('MechanicalObject', dx=\"2.5\", dz=\"18\")\n    TorusFFD1.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD1.addObject('RegularGridTopology', nx=\"6\", ny=\"2\", nz=\"5\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-0.5\", ymax=\"0.5\", zmin=\"-2\", zmax=\"2\")\n    TorusFFD1.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_11\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_11\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD2 = ChainFFD.addChild('TorusFFD2')\n    TorusFFD2.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFFD2.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFFD2.addObject('MechanicalObject', dx=\"5\", dz=\"18\")\n    TorusFFD2.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD2.addObject('RegularGridTopology', nx=\"6\", ny=\"5\", nz=\"2\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-2\", ymax=\"2\", zmin=\"-0.5\", zmax=\"0.5\")\n    TorusFFD2.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_15\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_15\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD3 = ChainFFD.addChild('TorusFFD3')\n    TorusFFD3.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFFD3.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFFD3.addObject('MechanicalObject', dx=\"7.5\", dz=\"18\")\n    TorusFFD3.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD3.addObject('RegularGridTopology', nx=\"6\", ny=\"2\", nz=\"5\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-0.5\", ymax=\"0.5\", zmin=\"-2\", zmax=\"2\")\n    TorusFFD3.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_20\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_20\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    TorusFFD4 = ChainFFD.addChild('TorusFFD4')\n    TorusFFD4.addObject('EulerImplicitSolver', rayleighStiffness=\"0.01\")\n    TorusFFD4.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusFFD4.addObject('MechanicalObject', dx=\"10\", dz=\"18\")\n    TorusFFD4.addObject('UniformMass', totalMass=\"5\")\n    TorusFFD4.addObject('RegularGridTopology', nx=\"6\", ny=\"5\", nz=\"2\", xmin=\"-2.5\", xmax=\"2.5\", ymin=\"-2\", ymax=\"2\", zmin=\"-0.5\", zmax=\"0.5\")\n    TorusFFD4.addObject('RegularGridSpringForceField', name=\"Springs\", stiffness=\"200\", damping=\"2\")\n\n    Visu = TorusFFD4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_24\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_24\", color=\"yellow\")\n    Visu.addObject('BarycentricMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusFFD4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('BarycentricMapping')\n\n    ChainRigid = root.addChild('ChainRigid')\n\n    TorusFixed = ChainRigid.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\", dz=\"24\")\n    TorusFixed.addObject('TriangleCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('LineCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('PointCollisionModel', simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", dz=\"24\", color=\"gray\")\n\n    TorusRigid1 = ChainRigid.addChild('TorusRigid1')\n    TorusRigid1.addObject('EulerImplicitSolver', rayleighStiffness=\"0\")\n    TorusRigid1.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid1.addObject('MechanicalObject', template=\"Rigid3\", dx=\"2.5\", dz=\"24\")\n    TorusRigid1.addObject('UniformMass', filename=\"BehaviorModels/torus.rigid\")\n\n    Visu = TorusRigid1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_4\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_4\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid2 = ChainRigid.addChild('TorusRigid2')\n    TorusRigid2.addObject('EulerImplicitSolver', rayleighStiffness=\"0\")\n    TorusRigid2.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid2.addObject('MechanicalObject', template=\"Rigid3\", dx=\"5\", dz=\"24\")\n    TorusRigid2.addObject('UniformMass', filename=\"BehaviorModels/torus2.rigid\")\n\n    Visu = TorusRigid2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_7\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_7\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid3 = ChainRigid.addChild('TorusRigid3')\n    TorusRigid3.addObject('EulerImplicitSolver', rayleighStiffness=\"0\")\n    TorusRigid3.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid3.addObject('MechanicalObject', template=\"Rigid3\", dx=\"7.5\", dz=\"24\")\n    TorusRigid3.addObject('UniformMass', filename=\"BehaviorModels/torus.rigid\")\n\n    Visu = TorusRigid3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_12\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_12\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid4 = ChainRigid.addChild('TorusRigid4')\n    TorusRigid4.addObject('EulerImplicitSolver', rayleighStiffness=\"0\")\n    TorusRigid4.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    TorusRigid4.addObject('MechanicalObject', template=\"Rigid3\", dx=\"10\", dz=\"24\")\n    TorusRigid4.addObject('UniformMass', filename=\"BehaviorModels/torus2.rigid\")\n\n    Visu = TorusRigid4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_16\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_16\", color=\"gray\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('LineCollisionModel')\n    Surf2.addObject('PointCollisionModel')\n    Surf2.addObject('RigidMapping')\n</code></pre> <p>Component/Mapping/Linear/BarycentricMappingTrussBeam.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" dt=\"0.01\" showBoundingTree=\"0\" gravity=\"0 0 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [LocalMinDistance] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping IdentityMapping TubularMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [BeamFEMForceField TetrahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Edge2QuadTopologicalMapping Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showBehaviorModels showCollisionModels\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;LocalMinDistance name=\"Proximity\" alarmDistance=\"0.5\" contactDistance=\"0.05\" /&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;!-- A deformable square mesh --&gt;\n    &lt;Node name=\"Truss\" activated=\"true\" gravity=\"0 0 0\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"125\" tolerance=\"1e-16\" threshold=\"1e-16\" /&gt;\n        &lt;MeshGmshLoader name=\"meshLoader0\" filename=\"mesh/truss_tetra.msh\" /&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"Container\" src=\"@meshLoader0\" /&gt;\n        &lt;TetrahedronSetTopologyModifier name=\"Modifier\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\" name=\"TrussMO\" /&gt;\n        &lt;UniformMass totalMass=\"0.05\" /&gt;\n        &lt;BoxConstraint box=\"-0.001 -0.001 -0.001 0.001 0.011 0.011\" /&gt;\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"300000\" poissonRatio=\"0.45\" method=\"large\" /&gt;\n        &lt;BoxROI box=\"0.099 -0.001 -0.001 0.11 0.011 0.011\"/&gt;\n        &lt;ConstantForceField forces=\"0 -0.1 0\" /&gt;\n\n        &lt;Node name=\"Triangle\"&gt;\n            &lt;include href=\"Objects/TriangleSetTopology.xml\" /&gt;\n            &lt;Tetra2TriangleTopologicalMapping input=\"@/Truss/Container\" output=\"@Container\" /&gt;\n            &lt;TriangleCollisionModel /&gt;\n            &lt;Node name=\"TriangleVisual\"&gt;\n                &lt;OglModel template=\"Vec3\" name=\"Visual\" material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\" /&gt;\n                &lt;IdentityMapping template=\"Vec3,Vec3\" name=\"default12\" input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Beam\"&gt;\n            &lt;MechanicalObject template=\"Rigid3\" name=\"BeamMO\" position=\"0 0 0  0 0 0 1  0.02 0 0  0 0 0 1  0.04 0 0  0 0 0 1   0.06 0 0  0 0 0 1  0.08 0 0  0 0 0 1   0.1 0 0  0 0 0 1\" /&gt;\n            &lt;MeshTopology name=\"BeamMesh\" lines=\"0 1 1 2 2 3 3 4 4 5\" /&gt;\n            &lt;FixedProjectiveConstraint name=\"BeamFixedProjectiveConstraint\" indices=\"0\" /&gt;\n            &lt;UniformMass vertexMass=\"0.001 0.001 [0.0001 0 0 0 0.0001 0 0 0 0.0001]\" /&gt;\n            &lt;BeamFEMForceField name=\"BeamFEM\" radius=\"0.005\" youngModulus=\"3000000000\" poissonRatio=\"0.45\" /&gt;\n            &lt;ConstantForceField indices=\"5\" forces=\"0 0 0 -10 0 0\" /&gt;\n            &lt;BarycentricMapping isMechanical=\"true\" input=\"@TrussMO\" output=\"@BeamMO\" /&gt;\n            &lt;Node name=\"VisuThread\"&gt;\n                &lt;MechanicalObject name=\"Quads\" /&gt;\n                &lt;include href=\"Objects/QuadSetTopology.xml\" /&gt;\n                &lt;Edge2QuadTopologicalMapping nbPointsOnEachCircle=\"10\" radius=\"0.005\" input=\"@BeamMesh\" output=\"@Container\" /&gt;\n                &lt;TubularMapping nbPointsOnEachCircle=\"10\" radius=\"0.005\" input=\"@BeamMO\" output=\"@Quads\" /&gt;\n                &lt;Node name=\"VisuOgl\"&gt;\n                    &lt;OglModel name=\"Visual\" color=\"0.5 0.5 1.0\" /&gt;\n                    &lt;IdentityMapping input=\"@Quads\" output=\"@Visual\" /&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", showBoundingTree=\"0\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showVisual showBehaviorModels showCollisionModels\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('LocalMinDistance', name=\"Proximity\", alarmDistance=\"0.5\", contactDistance=\"0.05\")\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('DefaultAnimationLoop')\n\n    Truss = root.addChild('Truss', activated=\"true\", gravity=\"0 0 0\")\n    Truss.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    Truss.addObject('CGLinearSolver', iterations=\"125\", tolerance=\"1e-16\", threshold=\"1e-16\")\n    Truss.addObject('MeshGmshLoader', name=\"meshLoader0\", filename=\"mesh/truss_tetra.msh\")\n    Truss.addObject('TetrahedronSetTopologyContainer', name=\"Container\", src=\"@meshLoader0\")\n    Truss.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Truss.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Truss.addObject('MechanicalObject', template=\"Vec3\", name=\"TrussMO\")\n    Truss.addObject('UniformMass', totalMass=\"0.05\")\n    Truss.addObject('BoxConstraint', box=\"-0.001 -0.001 -0.001 0.001 0.011 0.011\")\n    Truss.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"300000\", poissonRatio=\"0.45\", method=\"large\")\n    Truss.addObject('BoxROI', box=\"0.099 -0.001 -0.001 0.11 0.011 0.011\")\n    Truss.addObject('ConstantForceField', forces=\"0 -0.1 0\")\n\n    Triangle = Truss.addChild('Triangle')\n    Triangle.addObject('include', href=\"Objects/TriangleSetTopology.xml\")\n    Triangle.addObject('Tetra2TriangleTopologicalMapping', input=\"@/Truss/Container\", output=\"@Container\")\n    Triangle.addObject('TriangleCollisionModel')\n\n    TriangleVisual = Triangle.addChild('TriangleVisual')\n    TriangleVisual.addObject('OglModel', template=\"Vec3\", name=\"Visual\", material=\"Default Diffuse 1 1 0 0 1 Ambient 1 0.2 0 0 1 Specular 0 1 0 0 1 Emissive 0 1 0 0 1 Shininess 0 45\")\n    TriangleVisual.addObject('IdentityMapping', template=\"Vec3,Vec3\", name=\"default12\", input=\"@..\", output=\"@Visual\")\n\n    Beam = Truss.addChild('Beam')\n    Beam.addObject('MechanicalObject', template=\"Rigid3\", name=\"BeamMO\", position=\"0 0 0  0 0 0 1  0.02 0 0  0 0 0 1  0.04 0 0  0 0 0 1   0.06 0 0  0 0 0 1  0.08 0 0  0 0 0 1   0.1 0 0  0 0 0 1\")\n    Beam.addObject('MeshTopology', name=\"BeamMesh\", lines=\"0 1 1 2 2 3 3 4 4 5\")\n    Beam.addObject('FixedProjectiveConstraint', name=\"BeamFixedProjectiveConstraint\", indices=\"0\")\n    Beam.addObject('UniformMass', vertexMass=\"0.001 0.001 [0.0001 0 0 0 0.0001 0 0 0 0.0001]\")\n    Beam.addObject('BeamFEMForceField', name=\"BeamFEM\", radius=\"0.005\", youngModulus=\"3000000000\", poissonRatio=\"0.45\")\n    Beam.addObject('ConstantForceField', indices=\"5\", forces=\"0 0 0 -10 0 0\")\n    Beam.addObject('BarycentricMapping', isMechanical=\"true\", input=\"@TrussMO\", output=\"@BeamMO\")\n\n    VisuThread = Beam.addChild('VisuThread')\n    VisuThread.addObject('MechanicalObject', name=\"Quads\")\n    VisuThread.addObject('include', href=\"Objects/QuadSetTopology.xml\")\n    VisuThread.addObject('Edge2QuadTopologicalMapping', nbPointsOnEachCircle=\"10\", radius=\"0.005\", input=\"@BeamMesh\", output=\"@Container\")\n    VisuThread.addObject('TubularMapping', nbPointsOnEachCircle=\"10\", radius=\"0.005\", input=\"@BeamMO\", output=\"@Quads\")\n\n    VisuOgl = VisuThread.addChild('VisuOgl')\n    VisuOgl.addObject('OglModel', name=\"Visual\", color=\"0.5 0.5 1.0\")\n    VisuOgl.addObject('IdentityMapping', input=\"@Quads\", output=\"@Visual\")\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/BeamLinearMapping/","title":"BeamLinearMapping","text":"<p>Set the positions and velocities of points attached to a beam using linear interpolation between DOFs Set the positions and velocities of points attached to a beam using linear interpolation between DOFs</p> <p>Templates:</p> <ul> <li><code>Rigid3d,CudaVec3d</code></li> <li><code>Rigid3d,CudaVec3f</code></li> </ul> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 localCoord  true if initial coordinates are in the beam local coordinate system (i.e. a point at (10,0,0) is on the DOF number 10, whereas if this is false it is at whatever position on the beam where the distance from the initial DOF is 10)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/CudaCollisionDetection/","title":"CudaCollisionDetection","text":"<p>GPU-based collision detection using CUDA</p> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::gpu::cuda</code></p> <p>parents: </p> <ul> <li><code>BruteForceBroadPhase</code></li> <li><code>NarrowPhaseDetection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 box  if not empty, objects that do not intersect this bounding-box will be ignored  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/CudaHexahedronTLEDForceField/","title":"CudaHexahedronTLEDForceField","text":"<p>GPU-side TLED hexahedron forcefield using CUDA</p> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::gpu::cuda</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 poissonRatio  Poisson ratio in Hooke's law  0.45 youngModulus  Young modulus in Hooke's law  3000 timestep  Simulation timestep  0.001 isViscoelastic  Viscoelasticity flag  0 isAnisotropic  Anisotropy flag  0 preferredDirection  Transverse isotropy direction  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/CudaPointCollisionModel/","title":"CudaPointCollisionModel","text":"<p>GPU-based point collision model using CUDA</p> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::gpu::cuda</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 groupSize  number of point per collision element  64 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/CudaProximityIntersection/","title":"CudaProximityIntersection","text":"<p>GPGPU Proximity Intersection based on CUDA</p> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::gpu::cuda</code></p> <p>parents: </p> <ul> <li><code>NewProximityIntersection</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 alarmDistance  Proximity detection distance  1 contactDistance  Distance below which a contact is created  0.5 useLineLine  Line-line collision detection enabled  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/CudaRigidDistanceGridCollisionModel/","title":"CudaRigidDistanceGridCollisionModel","text":"<p>GPU-based grid distance field using CUDA</p> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::gpu::cuda</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 fileCudaRigidDistanceGrid  load distance grid from specified file  scale  scaling factor for input file  1 sampling  if not zero: sample the surface with points approximately separated by the given sampling distance (expressed in voxels if the value is negative)  0 box  Field bounding box defined by xmin,ymin,zmin, xmax,ymax,zmax  nx  number of values on X axis  64 ny  number of values on Y axis  64 nz  number of values on Z axis  64 dumpfilename  write distance grid to specified file  usePoints  use mesh vertices for collision detection  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/CudaTetrahedronTLEDForceField/","title":"CudaTetrahedronTLEDForceField","text":"<p>GPU TLED tetrahedron forcefield using CUDA</p> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::gpu::cuda</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 poissonRatio  Poisson ratio in Hooke's law  0.45 youngModulus  Young modulus in Hooke's law  3000 timestep  Simulation timestep  0.001 isViscoelastic  Viscoelasticity flag  0 isAnisotropic  Anisotropy flag  0 preferredDirection  Transverse isotropy direction  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/DiagonalMass/","title":"DiagonalMass","text":"<p>Define a specific mass for each particle Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>CudaVec3d,CudaVec3d</code></li> <li><code>CudaVec3f,CudaVec3f</code></li> </ul> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::component::mass</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 vertexMass  Specify a vector giving the mass of each vertex.  If unspecified or wrongly set, the massDensity or totalMass information is used.  massDensity  Specify one single real and positive value for the mass density.  If unspecified or wrongly set, the totalMass information is used.  1 totalMass  Specify the total mass resulting from all particles.  If unspecified or wrongly set, the default value is used: totalMass = 1.0  1 computeMassOnRest  If true, the mass of every element is computed based on the rest position rather than the position  1 filename  Xsp3.0 file to specify the mass parameters  Visualization showGravityCenter  Display the center of gravity of the system  0 showAxisSizeFactor  Factor length of the axis displayed (only used for rigids)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container geometryState link to the MechanicalObject associated with the geometry"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/DiagonalMass/#examples","title":"Examples","text":"<p>Component/Mass/DiagonalMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.005\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [DiagonalMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/liver.msh\" /&gt;\n    &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/liver-smooth.obj\" handleSeams=\"1\" /&gt;\n\n    &lt;Node name=\"Liver\" depend=\"topo dofs\"&gt;\n        &lt;EulerImplicitSolver name=\"integration scheme\" /&gt;\n        &lt;CGLinearSolver name=\"linear solver\" iterations=\"1000\" tolerance=\"1e-9\" threshold=\"1e-9\"/&gt;\n        &lt;MechanicalObject name=\"dofs\" src=\"@../loader\" /&gt;\n        &lt;!-- Container for the tetrahedra--&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"TetraTopo\" src=\"@../loader\" /&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;DiagonalMass totalMass=\"60\" name=\"diagonalMass\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.45\" youngModulus=\"5000\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"VisualModel\" src=\"@../../meshLoader_0\" color=\"red\" /&gt;\n            &lt;BarycentricMapping name=\"VisualMapping\" input=\"@../dofs\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\"&gt;\n            &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject name=\"spheres\" position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\" /&gt;\n            &lt;BarycentricMapping name=\"CollisionMapping\" input=\"@../dofs\" output=\"@spheres\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/liver.msh\")\n    root.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/liver-smooth.obj\", handleSeams=\"1\")\n\n    Liver = root.addChild('Liver', depend=\"topo dofs\")\n    Liver.addObject('EulerImplicitSolver', name=\"integration scheme\")\n    Liver.addObject('CGLinearSolver', name=\"linear solver\", iterations=\"1000\", tolerance=\"1e-9\", threshold=\"1e-9\")\n    Liver.addObject('MechanicalObject', name=\"dofs\", src=\"@../loader\")\n    Liver.addObject('TetrahedronSetTopologyContainer', name=\"TetraTopo\", src=\"@../loader\")\n    Liver.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    Liver.addObject('DiagonalMass', totalMass=\"60\", name=\"diagonalMass\")\n    Liver.addObject('TetrahedralCorotationalFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.45\", youngModulus=\"5000\")\n    Liver.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n\n    Visu = Liver.addChild('Visu')\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@../../meshLoader_0\", color=\"red\")\n    Visu.addObject('BarycentricMapping', name=\"VisualMapping\", input=\"@../dofs\", output=\"@VisualModel\")\n\n    Surf = Liver.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Surf.addObject('MechanicalObject', name=\"spheres\", position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', name=\"CollisionModel\", listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping', name=\"CollisionMapping\", input=\"@../dofs\", output=\"@spheres\")\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/IdentityMapping/","title":"IdentityMapping","text":"<p>Special case of mapping where the child points are the same as the parent points Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>CudaVec3d,CudaVec3d</code></li> <li><code>CudaVec3d,CudaVec3f</code></li> <li><code>CudaVec3d,Vec3d</code></li> <li><code>CudaVec3f,CudaVec3d</code></li> <li><code>CudaVec3f,CudaVec3f</code></li> <li><code>CudaVec3f,CudaVec3f1</code></li> <li><code>CudaVec3f,Vec3d</code></li> <li><code>CudaVec3f1,CudaVec3f</code></li> <li><code>CudaVec3f1,CudaVec3f1</code></li> <li><code>CudaVec3f1,Vec3d</code></li> <li><code>Vec3d,CudaVec3d</code></li> <li><code>Vec3d,CudaVec3f</code></li> <li><code>Vec3d,CudaVec3f1</code></li> </ul> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/IdentityMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/IdentityMapping.scn</p> XMLPython <pre><code>&lt;!-- Mechanical MassSpring Group Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TriangleFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showMappings\" /&gt;\n    &lt;CollisionPipeline verbose=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;MinProximityIntersection name=\"Proximity\" alarmDistance=\"0.8\" contactDistance=\"0.5\" /&gt;\n    &lt;Node name=\"tshirt\"&gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/tshirt_0.msh\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" scale=\"10\" /&gt;\n        &lt;include href=\"Objects/TriangleSetTopology.xml\" src=\"@loader\" /&gt;\n        &lt;UniformMass vertexMass=\"1\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"38 39 40 41 42 43 123 124 137\" /&gt;\n        &lt;TriangleFEMForceField name=\"FEM\" youngModulus=\"50000\" poissonRatio=\"0.3\" method=\"large\" /&gt;\n        &lt;TriangleCollisionModel /&gt;\n        &lt;Node name=\"Visu\"&gt;\n            &lt;OglModel name=\"Visual\" color=\"red\" /&gt;\n            &lt;IdentityMapping input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showMappings\")\n    root.addObject('CollisionPipeline', verbose=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('MinProximityIntersection', name=\"Proximity\", alarmDistance=\"0.8\", contactDistance=\"0.5\")\n\n    tshirt = root.addChild('tshirt')\n    tshirt.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    tshirt.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    tshirt.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/tshirt_0.msh\")\n    tshirt.addObject('MeshTopology', src=\"@loader\")\n    tshirt.addObject('MechanicalObject', src=\"@loader\", scale=\"10\")\n    tshirt.addObject('include', href=\"Objects/TriangleSetTopology.xml\", src=\"@loader\")\n    tshirt.addObject('UniformMass', vertexMass=\"1\")\n    tshirt.addObject('FixedProjectiveConstraint', indices=\"38 39 40 41 42 43 123 124 137\")\n    tshirt.addObject('TriangleFEMForceField', name=\"FEM\", youngModulus=\"50000\", poissonRatio=\"0.3\", method=\"large\")\n    tshirt.addObject('TriangleCollisionModel')\n\n    Visu = tshirt.addChild('Visu')\n    Visu.addObject('OglModel', name=\"Visual\", color=\"red\")\n    Visu.addObject('IdentityMapping', input=\"@..\", output=\"@Visual\")\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/MeshMatrixMass/","title":"MeshMatrixMass","text":"<p>Define a specific mass for each particle Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>CudaVec1d,CudaVec1d</code></li> <li><code>CudaVec1d,CudaVec2d</code></li> <li><code>CudaVec1d,CudaVec3d</code></li> <li><code>CudaVec1f,CudaVec1f</code></li> <li><code>CudaVec1f,CudaVec2f</code></li> <li><code>CudaVec1f,CudaVec3f</code></li> <li><code>CudaVec2d,CudaVec2d</code></li> <li><code>CudaVec2d,CudaVec3d</code></li> <li><code>CudaVec2f,CudaVec2f</code></li> <li><code>CudaVec2f,CudaVec3f</code></li> <li><code>CudaVec3d,CudaVec3d</code></li> <li><code>CudaVec3f,CudaVec3f</code></li> </ul> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::component::mass</code></p> <p>parents: </p> <ul> <li><code>Mass</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 separateGravity  add separately gravity to velocity computation  0 rayleighMass  Rayleigh damping - mass matrix coefficient  0 massDensity  Specify real and strictly positive value(s) for the mass density.  If unspecified or wrongly set, the totalMass information is used.  totalMass  Specify the total mass resulting from all particles.  If unspecified or wrongly set, the default value is used: totalMass = 1.0  1 vertexMass  internal values of the particles masses on vertices, supporting topological changes  edgeMass  internal values of the particles masses on edges, supporting topological changes  computeMassOnRest  If true, the mass of every element is computed based on the rest position rather than the position  0 lumping  boolean if you need to use a lumped mass matrix  0 printMass  boolean if you want to check the mass conservation  0 graph  Graph of the controlled potential  Visualization showGravityCenter  display the center of gravity of the system  0 showAxisSizeFactor  factor length of the axis displayed (only used for rigids)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container geometryState link to the MechanicalObject associated with the geometry"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/MeshMatrixMass/#examples","title":"Examples","text":"<p>Component/Mass/MeshMatrixMass.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.005\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader MeshOBJLoader SphereLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [BarycentricMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [MeshMatrixMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [TetrahedralCorotationalFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;CollisionPipeline verbose=\"0\" name=\"CollisionPipeline\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" name=\"collision response\" /&gt;\n    &lt;DiscreteIntersection /&gt;\n\n    &lt;MeshGmshLoader name=\"MeshLoader\" filename=\"mesh/liver.msh\" /&gt;\n    &lt;MeshOBJLoader name=\"LiverSurface\" filename=\"mesh/liver-smooth.obj\" /&gt;\n\n    &lt;Node name=\"Liver\"&gt;\n        &lt;EulerImplicitSolver name=\"integration scheme\" /&gt;\n        &lt;CGLinearSolver name=\"linear solver\" iterations=\"1000\" tolerance=\"1e-9\" threshold=\"1e-9\"/&gt;\n        &lt;MechanicalObject name=\"dofs\" src=\"@../MeshLoader\"/&gt;\n        &lt;!-- Container for the tetrahedra--&gt;\n        &lt;TetrahedronSetTopologyContainer name=\"TetraTopo\" src=\"@../MeshLoader\"/&gt;\n        &lt;TetrahedronSetGeometryAlgorithms name=\"GeomAlgo\" /&gt;\n        &lt;MeshMatrixMass totalMass=\"60\" name=\"SparseMass\" topology=\"@TetraTopo\" /&gt;\n        &lt;TetrahedralCorotationalFEMForceField template=\"Vec3\" name=\"FEM\" method=\"large\" poissonRatio=\"0.45\" youngModulus=\"5000\" /&gt;\n        &lt;FixedProjectiveConstraint name=\"FixedProjectiveConstraint\" indices=\"3 39 64\" /&gt;\n\n        &lt;Node name=\"Visu\" &gt;\n            &lt;OglModel  name=\"VisualModel\" src=\"@../../LiverSurface\" color=\"cyan\"/&gt;\n            &lt;BarycentricMapping name=\"VisualMapping\" input=\"@../dofs\" output=\"@VisualModel\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"Surf\" &gt;\n            &lt;SphereLoader filename=\"mesh/liver.sph\" /&gt;\n            &lt;MechanicalObject name=\"spheres\" position=\"@[-1].position\" /&gt;\n            &lt;SphereCollisionModel name=\"CollisionModel\" listRadius=\"@[-2].listRadius\"/&gt;\n            &lt;BarycentricMapping name=\"CollisionMapping\" input=\"@../dofs\" output=\"@spheres\" /&gt;\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.005\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('CollisionPipeline', verbose=\"0\", name=\"CollisionPipeline\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\", name=\"collision response\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('MeshGmshLoader', name=\"MeshLoader\", filename=\"mesh/liver.msh\")\n    root.addObject('MeshOBJLoader', name=\"LiverSurface\", filename=\"mesh/liver-smooth.obj\")\n\n    Liver = root.addChild('Liver')\n    Liver.addObject('EulerImplicitSolver', name=\"integration scheme\")\n    Liver.addObject('CGLinearSolver', name=\"linear solver\", iterations=\"1000\", tolerance=\"1e-9\", threshold=\"1e-9\")\n    Liver.addObject('MechanicalObject', name=\"dofs\", src=\"@../MeshLoader\")\n    Liver.addObject('TetrahedronSetTopologyContainer', name=\"TetraTopo\", src=\"@../MeshLoader\")\n    Liver.addObject('TetrahedronSetGeometryAlgorithms', name=\"GeomAlgo\")\n    Liver.addObject('MeshMatrixMass', totalMass=\"60\", name=\"SparseMass\", topology=\"@TetraTopo\")\n    Liver.addObject('TetrahedralCorotationalFEMForceField', template=\"Vec3\", name=\"FEM\", method=\"large\", poissonRatio=\"0.45\", youngModulus=\"5000\")\n    Liver.addObject('FixedProjectiveConstraint', name=\"FixedProjectiveConstraint\", indices=\"3 39 64\")\n\n    Visu = Liver.addChild('Visu')\n    Visu.addObject('OglModel', name=\"VisualModel\", src=\"@../../LiverSurface\", color=\"cyan\")\n    Visu.addObject('BarycentricMapping', name=\"VisualMapping\", input=\"@../dofs\", output=\"@VisualModel\")\n\n    Surf = Liver.addChild('Surf')\n    Surf.addObject('SphereLoader', filename=\"mesh/liver.sph\")\n    Surf.addObject('MechanicalObject', name=\"spheres\", position=\"@[-1].position\")\n    Surf.addObject('SphereCollisionModel', name=\"CollisionModel\", listRadius=\"@[-2].listRadius\")\n    Surf.addObject('BarycentricMapping', name=\"CollisionMapping\", input=\"@../dofs\", output=\"@spheres\")\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/RigidMapping/","title":"RigidMapping","text":"<p>Set the positions and velocities of points attached to a rigid parent Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>CudaRigid3f,CudaVec3d</code></li> <li><code>CudaRigid3f,CudaVec3d1</code></li> <li><code>CudaRigid3f,CudaVec3f</code></li> <li><code>CudaRigid3f,CudaVec3f1</code></li> <li><code>Rigid3d,CudaVec3d</code></li> <li><code>Rigid3d,CudaVec3d1</code></li> <li><code>Rigid3d,CudaVec3f</code></li> <li><code>Rigid3d,CudaVec3f1</code></li> <li><code>Rigid3f,CudaVec3d</code></li> <li><code>Rigid3f,CudaVec3d1</code></li> <li><code>Rigid3f,CudaVec3f</code></li> <li><code>Rigid3f,CudaVec3f1</code></li> </ul> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::component::mapping::nonlinear</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 geometricStiffness  Method used to compute the geometric stiffness: -None: geometric stiffness is not computed -Exact: the exact geometric stiffness is computed -Stabilized: the exact geometric stiffness is approximated in order to improve stability  Stabilized initialPoints  Local Coordinates of the points  index  input DOF index  0 filename  Xsp file where rigid mapping information can be loaded from.  useX0  Use x0 instead of local copy of initial positions (to support topo changes)  0 indexFromEnd  input DOF index starts from the end of input DOFs vector  0 rigidIndexPerPoint  For each mapped point, the index of the Rigid it is mapped from  globalToLocalCoords  are the output DOFs initially expressed in global coordinates  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/RigidMapping/#examples","title":"Examples","text":"<p>Component/Mapping/NonLinear/RigidMapping-basic.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"Root\" gravity=\"0 0 0\" time=\"0\" animate=\"0\" bbox=\"-1 -1 -1 1 1 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [PartialFixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [StaticSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showMapping\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"parent node with independent DOFs\"&gt;\n        &lt;StaticSolver name=\"ODE solver\" printLog=\"0\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver used by implicit ODE solvers\" printLog=\"0\" iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid3\" /&gt;\n        &lt;PartialFixedProjectiveConstraint fixedDirections=\"1 1 1 0 0 0\" /&gt;\n        &lt;UniformMass template=\"Rigid3\" name=\"mass\" /&gt;\n        &lt;Node name=\"child node with DOFs mapped from the parent\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"endpoint coordinates\" position=\"1 -0.0 0\"  /&gt;\n            &lt;RigidMapping name=\"angle-coord mapping\" input=\"@..\" output=\"@.\" index=\"0\" /&gt;\n            &lt;ConstantForceField forces=\"1 -1 0\" indices=\"0\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", time=\"0\", animate=\"0\", bbox=\"-1 -1 -1 1 1 1\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showMapping\")\n    Root.addObject('DefaultAnimationLoop')\n\n    parent node with independent DOFs = Root.addChild('parent node with independent DOFs')\n    parent node with independent DOFs.addObject('StaticSolver', name=\"ODE solver\", printLog=\"0\")\n    parent node with independent DOFs.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver used by implicit ODE solvers\", printLog=\"0\", iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    parent node with independent DOFs.addObject('MechanicalObject', template=\"Rigid3\")\n    parent node with independent DOFs.addObject('PartialFixedProjectiveConstraint', fixedDirections=\"1 1 1 0 0 0\")\n    parent node with independent DOFs.addObject('UniformMass', template=\"Rigid3\", name=\"mass\")\n\n    child node with DOFs mapped from the parent = parent node with independent DOFs.addChild('child node with DOFs mapped from the parent')\n    child node with DOFs mapped from the parent.addObject('MechanicalObject', template=\"Vec3\", name=\"endpoint coordinates\", position=\"1 -0.0 0\")\n    child node with DOFs mapped from the parent.addObject('RigidMapping', name=\"angle-coord mapping\", input=\"@..\", output=\"@.\", index=\"0\")\n    child node with DOFs mapped from the parent.addObject('ConstantForceField', forces=\"1 -1 0\", indices=\"0\")\n</code></pre> <p>Component/Mapping/NonLinear/RigidMapping2d-basic.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"Root\" gravity=\"0 0 0\" time=\"0\" animate=\"0\" bbox=\"-1 -1 -1 1 1 1\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [PartialFixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [StaticSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showMapping\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"parent node with independent DOFs\"&gt;\n        &lt;!--        &lt;EulerImplicitSolver name=\"ODE solver\" printLog=\"0\"  verbose=\"0\" rayleighStiffness=\"0.0\" rayleighMass=\"0\"/&gt; --&gt;\n        &lt;StaticSolver name=\"ODE solver\" printLog=\"0\" /&gt;\n        &lt;CGLinearSolver template=\"GraphScattered\" name=\"linear solver used by implicit ODE solvers\" printLog=\"0\" iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n        &lt;MechanicalObject template=\"Rigid2\" /&gt;\n        &lt;PartialFixedProjectiveConstraint fixedDirections=\"1 1 0\" /&gt;\n        &lt;UniformMass template=\"Rigid2\" name=\"mass\" /&gt;\n        &lt;Node name=\"child node with DOFs mapped from the parent\"&gt;\n            &lt;MechanicalObject template=\"Vec2\" name=\"endpoint coordinates\" position=\"1 0 \"  /&gt;\n            &lt;RigidMapping template=\"\" name=\"angle-coord mapping\" input=\"@..\" output=\"@.\" index=\"0\" /&gt;\n            &lt;ConstantForceField forces=\"1 -1\" indices=\"0\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    Root = rootNode.addChild('Root', gravity=\"0 0 0\", time=\"0\", animate=\"0\", bbox=\"-1 -1 -1 1 1 1\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    Root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    Root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showMapping\")\n    Root.addObject('DefaultAnimationLoop')\n\n    parent node with independent DOFs = Root.addChild('parent node with independent DOFs')\n    parent node with independent DOFs.addObject('StaticSolver', name=\"ODE solver\", printLog=\"0\")\n    parent node with independent DOFs.addObject('CGLinearSolver', template=\"GraphScattered\", name=\"linear solver used by implicit ODE solvers\", printLog=\"0\", iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n    parent node with independent DOFs.addObject('MechanicalObject', template=\"Rigid2\")\n    parent node with independent DOFs.addObject('PartialFixedProjectiveConstraint', fixedDirections=\"1 1 0\")\n    parent node with independent DOFs.addObject('UniformMass', template=\"Rigid2\", name=\"mass\")\n\n    child node with DOFs mapped from the parent = parent node with independent DOFs.addChild('child node with DOFs mapped from the parent')\n    child node with DOFs mapped from the parent.addObject('MechanicalObject', template=\"Vec2\", name=\"endpoint coordinates\", position=\"1 0 \")\n    child node with DOFs mapped from the parent.addObject('RigidMapping', template=\"\", name=\"angle-coord mapping\", input=\"@..\", output=\"@.\", index=\"0\")\n    child node with DOFs mapped from the parent.addObject('ConstantForceField', forces=\"1 -1\", indices=\"0\")\n</code></pre> <p>Component/Mapping/NonLinear/RigidMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\" ?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [NewProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshOBJLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;NewProximityIntersection name=\"Proximity\" alarmDistance=\"0.3\" contactDistance=\"0.2\" /&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"PenalityContactForceField\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;Node name=\"ChainRigid\"&gt;\n        &lt;Node name=\"TorusFixed\"&gt;\n            &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" /&gt;\n            &lt;TriangleCollisionModel contactStiffness=\"1000\" simulated=\"0\" moving=\"0\" /&gt;\n            &lt;MeshOBJLoader name=\"meshLoader_3\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n            &lt;OglModel name=\"Visual\" src=\"@meshLoader_3\" color=\"gray\" texturename=\"textures/brushed_metal.bmp\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid1\"&gt;\n            &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"2.5\" /&gt;\n            &lt;UniformMass filename=\"BehaviorModels/torus.rigid\" /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_2\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_2\" color=\"gray\" texturename=\"textures/brushed_metal.bmp\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid2\"&gt;\n            &lt;EulerImplicitSolver /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"5\" /&gt;\n            &lt;UniformMass /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_4\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_4\" color=\"gray\" texturename=\"textures/brushed_metal.bmp\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid3\"&gt;\n            &lt;EulerImplicitSolver /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"7.5\" /&gt;\n            &lt;UniformMass /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_0\" filename=\"mesh/torus.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_0\" color=\"gray\" texturename=\"textures/brushed_metal.bmp\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"TorusRigid4\"&gt;\n            &lt;EulerImplicitSolver /&gt;\n            &lt;CGLinearSolver iterations=\"25\" threshold=\"0.000000000001\" tolerance=\"0.000001\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" dx=\"10\" /&gt;\n            &lt;UniformMass /&gt;\n            &lt;Node name=\"Visu\"&gt;\n                &lt;MeshOBJLoader name=\"meshLoader_1\" filename=\"mesh/torus2.obj\" handleSeams=\"1\" /&gt;\n                &lt;OglModel name=\"Visual\" src=\"@meshLoader_1\" color=\"gray\" texturename=\"textures/brushed_metal.bmp\" /&gt;\n                &lt;RigidMapping input=\"@..\" output=\"@Visual\" /&gt;\n            &lt;/Node&gt;\n            &lt;Node name=\"Surf2\"&gt;\n                &lt;MeshOBJLoader name=\"loader\" filename=\"mesh/torus2_for_collision.obj\" /&gt;\n                &lt;MeshTopology src=\"@loader\" /&gt;\n                &lt;MechanicalObject src=\"@loader\" /&gt;\n                &lt;TriangleCollisionModel /&gt;\n                &lt;RigidMapping /&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('NewProximityIntersection', name=\"Proximity\", alarmDistance=\"0.3\", contactDistance=\"0.2\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"PenalityContactForceField\")\n    root.addObject('DefaultAnimationLoop')\n\n    ChainRigid = root.addChild('ChainRigid')\n\n    TorusFixed = ChainRigid.addChild('TorusFixed')\n    TorusFixed.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    TorusFixed.addObject('MeshTopology', src=\"@loader\")\n    TorusFixed.addObject('MechanicalObject', src=\"@loader\")\n    TorusFixed.addObject('TriangleCollisionModel', contactStiffness=\"1000\", simulated=\"0\", moving=\"0\")\n    TorusFixed.addObject('MeshOBJLoader', name=\"meshLoader_3\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    TorusFixed.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_3\", color=\"gray\", texturename=\"textures/brushed_metal.bmp\")\n\n    TorusRigid1 = ChainRigid.addChild('TorusRigid1')\n    TorusRigid1.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    TorusRigid1.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid1.addObject('MechanicalObject', template=\"Rigid3\", dx=\"2.5\")\n    TorusRigid1.addObject('UniformMass', filename=\"BehaviorModels/torus.rigid\")\n\n    Visu = TorusRigid1.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_2\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_2\", color=\"gray\", texturename=\"textures/brushed_metal.bmp\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid1.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid2 = ChainRigid.addChild('TorusRigid2')\n    TorusRigid2.addObject('EulerImplicitSolver')\n    TorusRigid2.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid2.addObject('MechanicalObject', template=\"Rigid3\", dx=\"5\")\n    TorusRigid2.addObject('UniformMass')\n\n    Visu = TorusRigid2.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_4\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_4\", color=\"gray\", texturename=\"textures/brushed_metal.bmp\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid2.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid3 = ChainRigid.addChild('TorusRigid3')\n    TorusRigid3.addObject('EulerImplicitSolver')\n    TorusRigid3.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid3.addObject('MechanicalObject', template=\"Rigid3\", dx=\"7.5\")\n    TorusRigid3.addObject('UniformMass')\n\n    Visu = TorusRigid3.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_0\", filename=\"mesh/torus.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_0\", color=\"gray\", texturename=\"textures/brushed_metal.bmp\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid3.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n\n    TorusRigid4 = ChainRigid.addChild('TorusRigid4')\n    TorusRigid4.addObject('EulerImplicitSolver')\n    TorusRigid4.addObject('CGLinearSolver', iterations=\"25\", threshold=\"0.000000000001\", tolerance=\"0.000001\")\n    TorusRigid4.addObject('MechanicalObject', template=\"Rigid3\", dx=\"10\")\n    TorusRigid4.addObject('UniformMass')\n\n    Visu = TorusRigid4.addChild('Visu')\n    Visu.addObject('MeshOBJLoader', name=\"meshLoader_1\", filename=\"mesh/torus2.obj\", handleSeams=\"1\")\n    Visu.addObject('OglModel', name=\"Visual\", src=\"@meshLoader_1\", color=\"gray\", texturename=\"textures/brushed_metal.bmp\")\n    Visu.addObject('RigidMapping', input=\"@..\", output=\"@Visual\")\n\n    Surf2 = TorusRigid4.addChild('Surf2')\n    Surf2.addObject('MeshOBJLoader', name=\"loader\", filename=\"mesh/torus2_for_collision.obj\")\n    Surf2.addObject('MeshTopology', src=\"@loader\")\n    Surf2.addObject('MechanicalObject', src=\"@loader\")\n    Surf2.addObject('TriangleCollisionModel')\n    Surf2.addObject('RigidMapping')\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/SubsetMapping/","title":"SubsetMapping","text":"<p>TODO-SubsetMappingClass Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>CudaVec3f,CudaVec3f</code></li> <li><code>CudaVec3f,CudaVec3f1</code></li> <li><code>CudaVec3f1,CudaVec3f</code></li> <li><code>CudaVec3f1,CudaVec3f1</code></li> </ul> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 indices  list of input indices  first  first index (use if indices are sequential)  4294967295 last  last index (use if indices are sequential)  4294967295 radius  search radius to find corresponding points in case no indices are given  1e-05 handleTopologyChange  Enable support of topological changes for indices (disable if it is linked from SubsetTopologicalMapping::d_pointD2S)  1 ignoreNotFound  True to ignore points that are not found in the input model, they will be treated as fixed points  0 resizeToModel  True to resize the output MechanicalState to match the size of indices  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/SubsetMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/SubsetMapping.scn</p> XMLPython <pre><code>&lt;!-- Mechanical SubsetMapping Group Basic Example --&gt;\n&lt;Node name=\"root\" dt=\"0.01\" gravity=\"0 -9.6 0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [LocalMinDistance] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [LineCollisionModel PointCollisionModel TriangleCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Engine.Select\"/&gt; &lt;!-- Needed to use components [BoxROI] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [IdentityMapping SubsetMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.FEM.Elastic\"/&gt; &lt;!-- Needed to use components [HexahedronFEMForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms TetrahedronSetTopologyContainer TetrahedronSetTopologyModifier TriangleSetGeometryAlgorithms TriangleSetTopologyContainer TriangleSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [RegularGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Mapping\"/&gt; &lt;!-- Needed to use components [Hexa2TetraTopologicalMapping Tetra2TriangleTopologicalMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n\n\n    &lt;VisualStyle displayFlags=\"hideBehaviorModels hideCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe\" /&gt;\n    &lt;CollisionPipeline depth=\"6\" verbose=\"0\" draw=\"0\"/&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;LocalMinDistance name=\"Proximity\"  alarmDistance=\"0.006\" contactDistance=\"0.001\" coneFactor=\"0.3\" angleCone=\"0.01\" filterIntersection=\"true\"/&gt;\n    &lt;CollisionResponse name=\"Response\" response=\"NeedleContact\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"sutureSoftCubes\"&gt;\n        &lt;EulerImplicitSolver name=\"TissueSolver\" printLog=\"false\" rayleighStiffness=\"0.3\" rayleighMass=\"0.2\"/&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\"/&gt;\n        &lt;UniformMass vertexMass=\"0.001\"/&gt;\n        &lt;RegularGridTopology name=\"grid\"\n                nx=\"10\" ny=\"4\" nz=\"10\"\n                xmin=\"-0.05\" xmax=\"0.05\"\n                ymin=\"0.0\" ymax=\"0.03\"\n                zmin=\"-0.05\" zmax=\"0.05\"\n        /&gt;\n        &lt;!--&lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"1e3\" poissonRatio=\"0.4\" computeGlobalMatrix=\"false\" method=\"large\"/&gt;--&gt;\n        &lt;BoxROI name=\"box_roi\" box=\"-0.06 -0.001 -0.06 0.06 0.001 0.06   -0.052 -0.001 -0.06 -0.048 0.011 0.06    0.048 -0.001 -0.06 0.052 0.011 0.06\" /&gt;\n        &lt;FixedProjectiveConstraint indices=\"@box_roi.indices\" /&gt;\n\n        &lt;Node name=\"subCube1\"&gt;\n            &lt;MechanicalObject template=\"Vec3\"/&gt;\n            &lt;RegularGridTopology name=\"grid\"\n                nx=\"5\" ny=\"2\" nz=\"10\"\n                xmin=\"-0.05\" xmax=\"-0.00555555555555555555555\"\n                ymin=\"0.02\" ymax=\"0.03\"\n                zmin=\"-0.05\" zmax=\"0.05\"\n            /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"3e5\" poissonRatio=\"0.4\" method=\"large\"/&gt;\n            &lt;SubsetMapping /&gt;\n            &lt;Node name=\"Tetra1\"&gt;\n                &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n                &lt;TetrahedronSetTopologyModifier name=\"Modifier\"/&gt;\n                &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                &lt;Hexa2TetraTopologicalMapping input=\"@../grid\" output=\"@Container\"/&gt;\n                &lt;Node name=\"Visu1\"&gt;\n                    &lt;TriangleSetTopologyContainer name=\"Container\"/&gt;\n                    &lt;TriangleSetTopologyModifier name=\"Modifier\"/&gt;\n                    &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                    &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" flipNormals=\"1\" /&gt;\n&lt;!--                    &lt;OglModel name=\"Visual\" filename=\"mesh/suture.obj\" putOnlyTexCoords=\"true\"  dx=\"-0.055\" material=\"texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 0.8 0.7 1.0 Specular 1 0.1 0.1 0.1 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20\" /&gt;\n                    &lt;OglShadowShader/&gt;\n                    &lt;OglShaderDefineMacro id=\"USE_TEXTURE\" /&gt;\n                    &lt;OglTexture2D id=\"colorTexture\" texture2DFilename=\"textures/skin2.png\" textureUnit=\"1\" repeat=\"true\" /&gt;\n                    &lt;BarycentricMapping input=\"@../..\" output=\"@Visual\"/&gt;\n--&gt;\n                    &lt;OglModel name=\"Visual1\" color=\"0.3 1 0.3 1\"/&gt;\n                    &lt;IdentityMapping input=\"@../..\" output=\"@Visual1\"/&gt;\n\n                    &lt;TriangleCollisionModel group=\"2\" name=\"cube1_collis_tri\"/&gt;\n                    &lt;LineCollisionModel group=\"2\"  name=\"cube1_collis_line\"/&gt;\n                    &lt;PointCollisionModel group=\"2\" name=\"cube2_collis_point\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"subCube2\"&gt;\n            &lt;MechanicalObject template=\"Vec3\"/&gt;\n            &lt;RegularGridTopology name=\"grid\"\n                nx=\"5\" ny=\"2\" nz=\"10\"\n                xmin=\"0.00555555555555555555555\" xmax=\"0.05\"\n                ymin=\"0.02\" ymax=\"0.03\"\n                zmin=\"-0.05\" zmax=\"0.05\"\n            /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"3e5\" poissonRatio=\"0.4\" method=\"large\"/&gt;\n            &lt;SubsetMapping /&gt;\n            &lt;Node name=\"Tetra2\"&gt;\n                &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n                &lt;TetrahedronSetTopologyModifier name=\"Modifier\"/&gt;\n                &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                &lt;Hexa2TetraTopologicalMapping input=\"@../grid\" output=\"@Container\"/&gt;\n                &lt;Node name=\"Visu2\"&gt;\n                    &lt;TriangleSetTopologyContainer name=\"Container\"/&gt;\n                    &lt;TriangleSetTopologyModifier name=\"Modifier\"/&gt;\n                    &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                    &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" flipNormals=\"1\" /&gt;\n&lt;!--                    &lt;OglModel name=\"Visual\" filename=\"mesh/suture.obj\" putOnlyTexCoords=\"true\"  dx=\"0.00\" material=\"texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 0.8 0.7 1.0 Specular 1 0.1 0.1 0.1 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20\" /&gt;\n                    &lt;OglShadowShader/&gt;\n                    &lt;OglShaderDefineMacro id=\"USE_TEXTURE\" /&gt;\n                    &lt;OglTexture2D id=\"colorTexture\" texture2DFilename=\"textures/skin2.png\" textureUnit=\"1\" repeat=\"true\" /&gt;\n                    &lt;BarycentricMapping input=\"@../..\" output=\"@Visual\"/&gt;\n --&gt;\n                    &lt;OglModel name=\"Visual2\" color=\"0.3 0.3 1 1\"/&gt;\n                    &lt;IdentityMapping input=\"@../..\" output=\"@Visual2\"/&gt;\n\n                    &lt;TriangleCollisionModel group=\"3\" name=\"cube2_collis_tri\"/&gt;\n                    &lt;LineCollisionModel group=\"3\"  name=\"cube2_collis_line\"/&gt;\n                    &lt;PointCollisionModel group=\"3\" name=\"cube2_collis_point\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n\n        &lt;Node name=\"subCube3\"&gt;\n            &lt;MechanicalObject template=\"Vec3\"/&gt;\n            &lt;RegularGridTopology name=\"grid\"\n                nx=\"10\" ny=\"3\" nz=\"10\"\n                xmin=\"-0.05\" xmax=\"0.05\"\n                ymin=\"0.0\" ymax=\"0.02\"\n                zmin=\"-0.05\" zmax=\"0.05\"\n            /&gt;\n            &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"2e3\" poissonRatio=\"0.4\" method=\"large\"/&gt;\n            &lt;SubsetMapping /&gt;\n            &lt;Node name=\"Tetra3\"&gt;\n                &lt;TetrahedronSetTopologyContainer name=\"Container\"/&gt;\n                &lt;TetrahedronSetTopologyModifier name=\"Modifier\"/&gt;\n                &lt;TetrahedronSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                &lt;Hexa2TetraTopologicalMapping input=\"@../grid\" output=\"@Container\"/&gt;\n                &lt;Node name=\"Visu3\"&gt;\n                    &lt;TriangleSetTopologyContainer name=\"Container\"/&gt;\n                    &lt;TriangleSetTopologyModifier name=\"Modifier\"/&gt;\n                    &lt;TriangleSetGeometryAlgorithms template=\"Vec3\" name=\"GeomAlgo\"/&gt;\n                    &lt;Tetra2TriangleTopologicalMapping input=\"@../Container\" output=\"@Container\" flipNormals=\"1\" /&gt;\n                    &lt;OglModel name=\"Visual3\" color=\"1 0.3 0.1 1\"/&gt;\n                    &lt;IdentityMapping input=\"@../..\" output=\"@Visual3\"/&gt;\n                &lt;/Node&gt;\n            &lt;/Node&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.01\", gravity=\"0 -9.6 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Engine.Select\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.FEM.Elastic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Mapping\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\n    root.addObject('VisualStyle', displayFlags=\"hideBehaviorModels hideCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe\")\n    root.addObject('CollisionPipeline', depth=\"6\", verbose=\"0\", draw=\"0\")\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('LocalMinDistance', name=\"Proximity\", alarmDistance=\"0.006\", contactDistance=\"0.001\", coneFactor=\"0.3\", angleCone=\"0.01\", filterIntersection=\"true\")\n    root.addObject('CollisionResponse', name=\"Response\", response=\"NeedleContact\")\n    root.addObject('DefaultAnimationLoop')\n\n    sutureSoftCubes = root.addChild('sutureSoftCubes')\n    sutureSoftCubes.addObject('EulerImplicitSolver', name=\"TissueSolver\", printLog=\"false\", rayleighStiffness=\"0.3\", rayleighMass=\"0.2\")\n    sutureSoftCubes.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\n    sutureSoftCubes.addObject('MechanicalObject', template=\"Vec3\")\n    sutureSoftCubes.addObject('UniformMass', vertexMass=\"0.001\")\n    sutureSoftCubes.addObject('RegularGridTopology', name=\"grid\", nx=\"10\", ny=\"4\", nz=\"10\", xmin=\"-0.05\", xmax=\"0.05\", ymin=\"0.0\", ymax=\"0.03\", zmin=\"-0.05\", zmax=\"0.05\")\n    sutureSoftCubes.addObject('BoxROI', name=\"box_roi\", box=\"-0.06 -0.001 -0.06 0.06 0.001 0.06   -0.052 -0.001 -0.06 -0.048 0.011 0.06    0.048 -0.001 -0.06 0.052 0.011 0.06\")\n    sutureSoftCubes.addObject('FixedProjectiveConstraint', indices=\"@box_roi.indices\")\n\n    subCube1 = sutureSoftCubes.addChild('subCube1')\n    subCube1.addObject('MechanicalObject', template=\"Vec3\")\n    subCube1.addObject('RegularGridTopology', name=\"grid\", nx=\"5\", ny=\"2\", nz=\"10\", xmin=\"-0.05\", xmax=\"-0.00555555555555555555555\", ymin=\"0.02\", ymax=\"0.03\", zmin=\"-0.05\", zmax=\"0.05\")\n    subCube1.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"3e5\", poissonRatio=\"0.4\", method=\"large\")\n    subCube1.addObject('SubsetMapping')\n\n    Tetra1 = subCube1.addChild('Tetra1')\n    Tetra1.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    Tetra1.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Tetra1.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Tetra1.addObject('Hexa2TetraTopologicalMapping', input=\"@../grid\", output=\"@Container\")\n\n    Visu1 = Tetra1.addChild('Visu1')\n    Visu1.addObject('TriangleSetTopologyContainer', name=\"Container\")\n    Visu1.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Visu1.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Visu1.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\", flipNormals=\"1\")\n    Visu1.addObject('OglModel', name=\"Visual1\", color=\"0.3 1 0.3 1\")\n    Visu1.addObject('IdentityMapping', input=\"@../..\", output=\"@Visual1\")\n    Visu1.addObject('TriangleCollisionModel', group=\"2\", name=\"cube1_collis_tri\")\n    Visu1.addObject('LineCollisionModel', group=\"2\", name=\"cube1_collis_line\")\n    Visu1.addObject('PointCollisionModel', group=\"2\", name=\"cube2_collis_point\")\n\n    subCube2 = sutureSoftCubes.addChild('subCube2')\n    subCube2.addObject('MechanicalObject', template=\"Vec3\")\n    subCube2.addObject('RegularGridTopology', name=\"grid\", nx=\"5\", ny=\"2\", nz=\"10\", xmin=\"0.00555555555555555555555\", xmax=\"0.05\", ymin=\"0.02\", ymax=\"0.03\", zmin=\"-0.05\", zmax=\"0.05\")\n    subCube2.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"3e5\", poissonRatio=\"0.4\", method=\"large\")\n    subCube2.addObject('SubsetMapping')\n\n    Tetra2 = subCube2.addChild('Tetra2')\n    Tetra2.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    Tetra2.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Tetra2.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Tetra2.addObject('Hexa2TetraTopologicalMapping', input=\"@../grid\", output=\"@Container\")\n\n    Visu2 = Tetra2.addChild('Visu2')\n    Visu2.addObject('TriangleSetTopologyContainer', name=\"Container\")\n    Visu2.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Visu2.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Visu2.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\", flipNormals=\"1\")\n    Visu2.addObject('OglModel', name=\"Visual2\", color=\"0.3 0.3 1 1\")\n    Visu2.addObject('IdentityMapping', input=\"@../..\", output=\"@Visual2\")\n    Visu2.addObject('TriangleCollisionModel', group=\"3\", name=\"cube2_collis_tri\")\n    Visu2.addObject('LineCollisionModel', group=\"3\", name=\"cube2_collis_line\")\n    Visu2.addObject('PointCollisionModel', group=\"3\", name=\"cube2_collis_point\")\n\n    subCube3 = sutureSoftCubes.addChild('subCube3')\n    subCube3.addObject('MechanicalObject', template=\"Vec3\")\n    subCube3.addObject('RegularGridTopology', name=\"grid\", nx=\"10\", ny=\"3\", nz=\"10\", xmin=\"-0.05\", xmax=\"0.05\", ymin=\"0.0\", ymax=\"0.02\", zmin=\"-0.05\", zmax=\"0.05\")\n    subCube3.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"2e3\", poissonRatio=\"0.4\", method=\"large\")\n    subCube3.addObject('SubsetMapping')\n\n    Tetra3 = subCube3.addChild('Tetra3')\n    Tetra3.addObject('TetrahedronSetTopologyContainer', name=\"Container\")\n    Tetra3.addObject('TetrahedronSetTopologyModifier', name=\"Modifier\")\n    Tetra3.addObject('TetrahedronSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Tetra3.addObject('Hexa2TetraTopologicalMapping', input=\"@../grid\", output=\"@Container\")\n\n    Visu3 = Tetra3.addChild('Visu3')\n    Visu3.addObject('TriangleSetTopologyContainer', name=\"Container\")\n    Visu3.addObject('TriangleSetTopologyModifier', name=\"Modifier\")\n    Visu3.addObject('TriangleSetGeometryAlgorithms', template=\"Vec3\", name=\"GeomAlgo\")\n    Visu3.addObject('Tetra2TriangleTopologicalMapping', input=\"@../Container\", output=\"@Container\", flipNormals=\"1\")\n    Visu3.addObject('OglModel', name=\"Visual3\", color=\"1 0.3 0.1 1\")\n    Visu3.addObject('IdentityMapping', input=\"@../..\", output=\"@Visual3\")\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/SubsetMultiMapping/","title":"SubsetMultiMapping","text":"<p>Compute a subset of the input MechanicalObjects according to a dof index list Compute a subset of the input MechanicalObjects according to a dof index list</p> <p>Templates:</p> <ul> <li><code>CudaRigid3d,CudaRigid3d</code></li> <li><code>CudaRigid3d,CudaVec3d</code></li> <li><code>CudaRigid3f,CudaRigid3f</code></li> <li><code>CudaRigid3f,CudaVec3f</code></li> <li><code>CudaVec1d,CudaVec1d</code></li> <li><code>CudaVec1f,CudaVec1f</code></li> <li><code>CudaVec3d,CudaVec3d</code></li> <li><code>CudaVec3f,CudaVec3f</code></li> </ul> <p>Target: <code>SofaCUDA</code></p> <p>namespace: <code>sofa::component::mapping::linear</code></p> <p>parents: </p> <ul> <li><code>CRTPLinearMapping</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 indexPairs  list of couples (parent index + index in the parent)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input Object(s) output Output Object(s)"},{"location":"35_Plugins/50_Usual_plugins/SofaCUDA/SubsetMultiMapping/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/SubsetMultiMapping.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\" gravity=\"0 0 0\"&gt;\n\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [DiscreteIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [GridMeshCreator] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [SubsetMultiMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.MechanicalLoad\"/&gt; &lt;!-- Needed to use components [ConstantForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Constant\"/&gt; &lt;!-- Needed to use components [MeshTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showCollisionModels showForceFields\" /&gt;\n\n    &lt;CollisionPipeline/&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse response=\"PenalityContactForceField\" /&gt;\n    &lt;DiscreteIntersection/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n\n    &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n    &lt;CGLinearSolver iterations=\"25\" tolerance=\"1e-5\" threshold=\"1e-5\"/&gt;\n\n\n    &lt;Node name=\"object1\"&gt;        \n        &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\" /&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject template=\"Vec3\" src=\"@loader\" name=\"dof1\" /&gt;\n\n        &lt;Node name=\"object2\"&gt;        \n            &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\" translation=\"2 0 0\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject template=\"Vec3\" src=\"@loader\"  name=\"dof2\"/&gt;\n\n            &lt;Node name=\"concatenation\"&gt;\n                &lt;MechanicalObject template=\"Vec3\" name=\"dofall\" showObject=\"1\"/&gt;\n                &lt;SubsetMultiMapping template=\"Vec3,Vec3\" input=\"@../../dof1 @../dof2\" output=\"@./dofall\" indexPairs=\"0 0 0 1 1 0 1 1\"/&gt;\n                &lt;SphereCollisionModel radius=\"0.3\" selfCollision=\"1\"/&gt;\n                &lt;UniformMass vertexMass=\"1\" /&gt;\n                &lt;ConstantForceField indices=\"0\" forces=\"1 0 0\"/&gt;\n            &lt;/Node&gt;\n\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n\n    &lt;!--    converting  Rigid -&gt; Vec in SubsetMultiMapping  --&gt;\n    &lt;Node name=\"rigid1\" activated=\"1\"&gt;\n        &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\"  translation=\"0 2 0\"/&gt;\n        &lt;MeshTopology src=\"@loader\" /&gt;\n        &lt;MechanicalObject template=\"Rigid3\" src=\"@loader\" name=\"dof1\" /&gt;\n\n        &lt;Node name=\"origid2\"&gt;\n            &lt;GridMeshCreator name=\"loader\" filename=\"nofile\" resolution=\"2 2\" translation=\"2 2 0\" /&gt;\n            &lt;MeshTopology src=\"@loader\" /&gt;\n            &lt;MechanicalObject template=\"Rigid3\" src=\"@loader\"  name=\"dof2\"/&gt;\n\n            &lt;Node name=\"concatenation\"&gt;\n                &lt;MechanicalObject template=\"Vec3\" name=\"dofall\" showObject=\"1\"/&gt;\n                &lt;SubsetMultiMapping template=\"Rigid3,Vec3\" input=\"@../../dof1 @../dof2\" output=\"@./dofall\" indexPairs=\"0 0 0 1 1 0 1 1\"/&gt;\n                &lt;SphereCollisionModel radius=\"0.3\" selfCollision=\"1\"/&gt;\n                &lt;UniformMass vertexMass=\"1\" /&gt;\n                &lt;ConstantForceField indices=\"0\" forces=\"1 0 0\"/&gt;\n            &lt;/Node&gt;\n\n        &lt;/Node&gt;\n\n    &lt;/Node&gt;\n\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\", gravity=\"0 0 0\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.MechanicalLoad\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Constant\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\n    root.addObject('VisualStyle', displayFlags=\"showBehaviorModels showCollisionModels showForceFields\")\n    root.addObject('CollisionPipeline')\n    root.addObject('BruteForceBroadPhase')\n    root.addObject('BVHNarrowPhase')\n    root.addObject('CollisionResponse', response=\"PenalityContactForceField\")\n    root.addObject('DiscreteIntersection')\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    root.addObject('CGLinearSolver', iterations=\"25\", tolerance=\"1e-5\", threshold=\"1e-5\")\n\n    object1 = root.addChild('object1')\n    object1.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\")\n    object1.addObject('MeshTopology', src=\"@loader\")\n    object1.addObject('MechanicalObject', template=\"Vec3\", src=\"@loader\", name=\"dof1\")\n\n    object2 = object1.addChild('object2')\n    object2.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\", translation=\"2 0 0\")\n    object2.addObject('MeshTopology', src=\"@loader\")\n    object2.addObject('MechanicalObject', template=\"Vec3\", src=\"@loader\", name=\"dof2\")\n\n    concatenation = object2.addChild('concatenation')\n    concatenation.addObject('MechanicalObject', template=\"Vec3\", name=\"dofall\", showObject=\"1\")\n    concatenation.addObject('SubsetMultiMapping', template=\"Vec3,Vec3\", input=\"@../../dof1 @../dof2\", output=\"@./dofall\", indexPairs=\"0 0 0 1 1 0 1 1\")\n    concatenation.addObject('SphereCollisionModel', radius=\"0.3\", selfCollision=\"1\")\n    concatenation.addObject('UniformMass', vertexMass=\"1\")\n    concatenation.addObject('ConstantForceField', indices=\"0\", forces=\"1 0 0\")\n\n    rigid1 = root.addChild('rigid1', activated=\"1\")\n    rigid1.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\", translation=\"0 2 0\")\n    rigid1.addObject('MeshTopology', src=\"@loader\")\n    rigid1.addObject('MechanicalObject', template=\"Rigid3\", src=\"@loader\", name=\"dof1\")\n\n    origid2 = rigid1.addChild('origid2')\n    origid2.addObject('GridMeshCreator', name=\"loader\", filename=\"nofile\", resolution=\"2 2\", translation=\"2 2 0\")\n    origid2.addObject('MeshTopology', src=\"@loader\")\n    origid2.addObject('MechanicalObject', template=\"Rigid3\", src=\"@loader\", name=\"dof2\")\n\n    concatenation = origid2.addChild('concatenation')\n    concatenation.addObject('MechanicalObject', template=\"Vec3\", name=\"dofall\", showObject=\"1\")\n    concatenation.addObject('SubsetMultiMapping', template=\"Rigid3,Vec3\", input=\"@../../dof1 @../dof2\", output=\"@./dofall\", indexPairs=\"0 0 0 1 1 0 1 1\")\n    concatenation.addObject('SphereCollisionModel', radius=\"0.3\", selfCollision=\"1\")\n    concatenation.addObject('UniformMass', vertexMass=\"1\")\n    concatenation.addObject('ConstantForceField', indices=\"0\", forces=\"1 0 0\")\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/SofaCarving/CarvingManager/","title":"CarvingManager","text":"<p>Manager handling carving operations between a tool and an object.</p> <p>Target: <code>SofaCarving</code></p> <p>namespace: <code>sofa::component::collision</code></p> <p>parents: </p> <ul> <li><code>BaseController</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 surfaceModelPath  TriangleSetModel or SphereCollisionModel&lt;sofa::defaulttype::Vec3Types&gt; path  carvingDistance  Collision distance at which cavring will start. Equal to contactDistance by default.  0 active  Activate this object. Note that this can be dynamically controlled by using a key  0 key  key to press to activate this object until the key is released  1 keySwitch  key to activate this object until the key is pressed again  4 mouseEvent  Activate carving with middle mouse button  1 omniEvent  Activate carving with omni button  1 button1  activatorName  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects toolModel link to the carving collision model, if not set, manager will search for a collision model with tag: CarvingTool. narrowPhaseDetection link to the narrow Phase Detection component, if not set, manager will search for it in root Node."},{"location":"35_Plugins/50_Usual_plugins/SofaDistanceGrid/DistanceGridForceField/","title":"DistanceGridForceField","text":"<p>Force applied by a distancegrid toward the exterior, the interior, or the surface</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SofaDistanceGrid</code></p> <p>namespace: <code>sofa::component::forcefield</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 filename  load distance grid from specified file  scale  scaling factor for input file  1 box  Field bounding box defined by xmin,ymin,zmin, xmax,ymax,zmax  nx  number of values on X axis  64 ny  number of values on Y axis  64 nz  number of values on Z axis  64 stiffnessIn  force stiffness when inside of the object  500 stiffnessOut  force stiffness when outside of the object  0 damping  force damping coefficient  0.01 maxdist  max distance of the surface after which no more force is applied  1 minArea  minimal area for each triangle, as seen from the direction of the local surface (i.e. a flipped triangle will have a negative area)  0 stiffnessArea  force stiffness if a triangle have an area less than minArea  100 minVolume  minimal volume for each tetrahedron (a flipped triangle will have a negative volume)  0 stiffnessVolume  force stiffness if a tetrahedron have an volume less than minVolume  0 color  display color.(default=[0.0,0.5,0.2,1.0])  0 0.5 0.2 1 localRange  optional range of local DOF indices. Any computation involving only indices outside of this range are discarded (useful for parallelization using mesh partitionning)  -1 -1 Visualization draw  enable/disable drawing of distancegrid  0 drawPoints  enable/disable drawing of distancegrid  0 drawSize  display size if draw is enabled  10 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/SofaDistanceGrid/FFDDistanceGridCollisionModel/","title":"FFDDistanceGridCollisionModel","text":"<p>Grid-based deformable distance field</p> <p>Target: <code>SofaDistanceGrid</code></p> <p>namespace: <code>sofa::component::collision</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 filename  Load distance grid from specified file  scale  scaling factor for input file  1 sampling  if not zero: sample the surface with points approximately separated by the given sampling distance (expressed in voxels if the value is negative)  0 box  Field bounding box defined by xmin,ymin,zmin, xmax,ymax,zmax  nx  number of values on X axis  64 ny  number of values on Y axis  64 nz  number of values on Z axis  64 dumpfilename  write distance grid to specified file  usePoints  use mesh vertices for collision detection  1 singleContact  keep only the deepest contact in each cell  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution"},{"location":"35_Plugins/50_Usual_plugins/SofaDistanceGrid/RigidDistanceGridCollisionModel/","title":"RigidDistanceGridCollisionModel","text":"<p>Grid-based distance field</p> <p>Target: <code>SofaDistanceGrid</code></p> <p>namespace: <code>sofa::component::collision</code></p> <p>parents: </p> <ul> <li><code>CollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 filename  Load distance grid from specified file  scale  scaling factor for input file  1 translation  translation to apply to input file  rotation  rotation to apply to input file  sampling  if not zero: sample the surface with points approximately separated by the given sampling distance (expressed in voxels if the value is negative)  0 box  Field bounding box defined by xmin,ymin,zmin, xmax,ymax,zmax  nx  number of values on X axis  64 ny  number of values on Y axis  64 nz  number of values on Z axis  64 dumpfilename  write distance grid to specified file  usePoints  use mesh vertices for collision detection  1 flipNormals  reverse surface direction, i.e. points are considered in collision if they move outside of the object instead of inside  0 Visualization showMeshPoints  Enable rendering of mesh points  1 showGridPoints  Enable rendering of grid points  0 showMinDist  Min distance to render gradients  0 showMaxDist  Max distance to render gradients  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution"},{"location":"35_Plugins/50_Usual_plugins/SofaEulerianFluid/Fluid2D/","title":"Fluid2D","text":"<p>Eulerian 2D fluid</p> <p>Target: <code>SofaEulerianFluid</code></p> <p>namespace: <code>sofa::component::behaviormodel::eulerianfluid</code></p> <p>parents: </p> <ul> <li><code>BehaviorModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 nx  grid size along x axis  16 ny  grid size along y axis  16 cellwidth  width of each cell  1 height  initial fluid height  5 dir  initial fluid surface normal  0 1 tstart  starting time for fluid source  0 tstop  stopping time for fluid source  60 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaEulerianFluid/Fluid3D/","title":"Fluid3D","text":"<p>Eulerian 3D fluid</p> <p>Target: <code>SofaEulerianFluid</code></p> <p>namespace: <code>sofa::component::behaviormodel::eulerianfluid</code></p> <p>parents: </p> <ul> <li><code>BehaviorModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 nx  grid size along x axis  16 ny  grid size along y axis  16 nz  grid size along z axis  16 cellwidth  width of each cell  1 center  position of grid center  0 0 0 height  initial fluid height  5 dir  initial fluid surface normal  0 1 0 tstart  starting time for fluid source  0 tstop  stopping time for fluid source  60 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaImplicitField/BottleField/","title":"BottleField","text":"<p>A spherical implicit field.</p> <p>Target: <code>SofaImplicitField</code></p> <p>namespace: <code>sofa::component::geometry::_BottleField_</code></p> <p>parents: </p> <ul> <li><code>ScalarField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 epsilon  Tolerance when evaluating the gradient and/or the hessian of the implicit surface numerically  1e-05 inside  If true the field is oriented inside (resp. outside) the bottle-shaped object. (default = false)  0 radius  Radius of Sphere emitting the field. (default = 1)  1 center  Position of the Sphere Surface. (default=0 0 0)  0 0 0 shift  How much the top ellipsoid is shifted from the bottom sphere. (default=1)  1 ellipsoidRadius  Radius of the ellipsoid whose intersection with the sphere is taken off  1 excentricity  excentricity of ellipsoid  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaImplicitField/DiscreteGridField/","title":"DiscreteGridField","text":"<p>A discrete scalar field from a regular grid storing field value with interpolation.</p> <p>Target: <code>SofaImplicitField</code></p> <p>namespace: <code>sofa::component::geometry::_discretegrid_</code></p> <p>parents: </p> <ul> <li><code>ScalarField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 epsilon  Tolerance when evaluating the gradient and/or the hessian of the implicit surface numerically  1e-05 file  MHD file for the distance map  maxDomains  Number of domains available for caching  1 dx  x translation  0 dy  y translation  0 dz  z translation  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaImplicitField/ImplicitSurfaceMapping/","title":"ImplicitSurfaceMapping","text":"<p>Compute an iso-surface from a set of particles</p> <p>Templates:</p> <ul> <li><code>Vec3d,Vec3d</code></li> </ul> <p>Target: <code>SofaImplicitField</code></p> <p>namespace: <code>sofa::component::mapping</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> <li><code>MeshTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  step  Step  0.5 radius  Radius  2 isoValue  Iso Value  0.5 min  Grid Min  -100 -100 -100 max  Grid Max  100 100 100 Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"35_Plugins/50_Usual_plugins/SofaImplicitField/InterpolatedImplicitSurface/","title":"InterpolatedImplicitSurface","text":"<p>Deprecated. This class is forwarding DiscreteGridField.</p> <p>Target: <code>SofaImplicitField</code></p> <p>namespace: <code>sofa::component::container</code></p> <p>parents: </p> <ul> <li><code>DiscreteGridField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 epsilon  Tolerance when evaluating the gradient and/or the hessian of the implicit surface numerically  1e-05 file  MHD file for the distance map  maxDomains  Number of domains available for caching  1 dx  x translation  0 dy  y translation  0 dz  z translation  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaImplicitField/SphericalField/","title":"SphericalField","text":"<p>A spherical implicit field.</p> <p>Target: <code>SofaImplicitField</code></p> <p>namespace: <code>sofa::component::geometry::_sphericalfield_</code></p> <p>parents: </p> <ul> <li><code>ScalarField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 epsilon  Tolerance when evaluating the gradient and/or the hessian of the implicit surface numerically  1e-05 inside  If true the field is oriented inside (resp. outside) the sphere. (default = false)  0 radius  Radius of Sphere emitting the field. (default = 1)  1 center  Position of the Sphere Surface. (default=0 0 0)  0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaImplicitField/StarShapedField/","title":"StarShapedField","text":"<p>A spherical implicit field.</p> <p>Target: <code>SofaImplicitField</code></p> <p>namespace: <code>sofa::component::geometry::_StarShapedField_</code></p> <p>parents: </p> <ul> <li><code>ScalarField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 epsilon  Tolerance when evaluating the gradient and/or the hessian of the implicit surface numerically  1e-05 inside  If true the field is oriented inside (resp. outside) the sphere. (default = false)  0 radius  Radius of Sphere emitting the field. (default = 1)  1 center  Position of the Sphere Surface. (default=0 0 0)  0 0 0 branches  Number of branches of the star. (default=1)  1 branchesRadius  Size of the branches of the star. (default=1)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaMatrix/ComplianceMatrixExporter/","title":"ComplianceMatrixExporter","text":"<p>Export the compliance matrix from a constraint solver.</p> <p>Target: <code>SofaMatrix</code></p> <p>namespace: <code>sofa::component::constraintset</code></p> <p>parents: </p> <ul> <li><code>BaseSimulationExporter</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Path or filename where to export the data.  If missing the name of the component is used.  exportEveryNumberOfSteps  export file only at specified number of steps (0=disable, default=0)  0 exportAtBegin  export file before the simulation starts, once the simulation is initialized (default=false)  0 exportAtEnd  export file when the simulation is over and cleanup is called, i.e. just before deleting the simulation (default=false)  0 enable  Enable or disable the component. (default=true)  1 format  File format  txt precision  Number of digits used to write an entry of the matrix, default is 6  6 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects constraintSolver Constraint solver used to export its compliance matrix"},{"location":"35_Plugins/50_Usual_plugins/SofaMatrix/ComplianceMatrixImage/","title":"ComplianceMatrixImage","text":"<p>View the compliance matrix as an binary image.</p> <p>Target: <code>SofaMatrix</code></p> <p>namespace: <code>sofa::component::constraintset</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Image bitmap  Visualization of the representation of the matrix as a binary image. White pixels are zeros, black pixels are non-zeros.  invalid matrix <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects constraintSolver Link to the constraint solver containing a compliance matrix"},{"location":"35_Plugins/50_Usual_plugins/SofaMatrix/FillReducingOrdering/","title":"FillReducingOrdering","text":"<p>Reorder the degrees of freedom to reduce fill-in</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SofaMatrix</code></p> <p>namespace: <code>sofa::component::linearsolver</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 orderingMethod  Ordering method. nestedDissection is the multilevel nested dissection algorithm implemented in the METIS library. approximateMinimumDegree is the approximate minimum degree algorithm implemented in the Eigen library.  nestedDissection Outputs permutation  Output vector of indices mapping the reordered vertices to the initial list  invPermutation  Output vector of indices mapping the initial vertices to the reordered list  position  Reordered position vector  hexahedra  Reordered hexahedra  tetrahedra  Reordered tetrahedra  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mstate Mechanical state to reorder topology Topology to reorder"},{"location":"35_Plugins/50_Usual_plugins/SofaMatrix/GlobalSystemMatrixExporter/","title":"GlobalSystemMatrixExporter","text":"<p>Export the global system matrix from a linear solver.</p> <p>Target: <code>SofaMatrix</code></p> <p>namespace: <code>sofa::component::linearsystem</code></p> <p>parents: </p> <ul> <li><code>BaseSimulationExporter</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filename  Path or filename where to export the data.  If missing the name of the component is used.  exportEveryNumberOfSteps  export file only at specified number of steps (0=disable, default=0)  0 exportAtBegin  export file before the simulation starts, once the simulation is initialized (default=false)  0 exportAtEnd  export file when the simulation is over and cleanup is called, i.e. just before deleting the simulation (default=false)  0 enable  Enable or disable the component. (default=true)  1 format  File format  txt precision  Number of digits used to write an entry of the matrix, default is 6  6 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem Linear system used to export its matrix"},{"location":"35_Plugins/50_Usual_plugins/SofaMatrix/GlobalSystemMatrixImage/","title":"GlobalSystemMatrixImage","text":"<p>View the global linear system matrix as a binary image.</p> <p>Target: <code>SofaMatrix</code></p> <p>namespace: <code>sofa::component::linearsolver</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 Image bitmap  Visualization of the representation of the matrix as a binary image. White pixels are zeros, black pixels are non-zeros.  invalid matrix <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects linearSystem Link to the linear system containing a matrix"},{"location":"35_Plugins/50_Usual_plugins/SofaSphFluid/OglFluidModel/","title":"OglFluidModel","text":"<p>Particle model for OpenGL display, using glsl</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SofaSphFluid</code></p> <p>namespace: <code>sofa::component::visualmodel</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 position  Vertices coordinates  debugFBO  DEBUG FBO  9 spriteRadius  Radius of sprites  1 spriteThickness  Thickness of sprites  0.01 spriteBlurRadius  Blur radius (in pixels)  10 spriteBlurScale  Blur scale  0.1 spriteBlurDepthFalloff  Blur Depth Falloff  1 spriteDiffuseColor  Diffuse Color  0 0 1 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaSphFluid/ParticleSink/","title":"ParticleSink","text":"<p>Parametrable particle generator</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SofaSphFluid</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 normal  plane normal  d0  plane d coef at which particles acceleration is constrained to 0  0 d1  plane d coef at which particles are removed  0 fixed  indices of fixed particles  Visualization showPlane  enable/disable drawing of plane  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/SofaSphFluid/ParticleSource/","title":"ParticleSource","text":"<p>Parametrable particle generator Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SofaSphFluid</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 translation  translation applied to center(s)  0 0 0 scale  scale applied to center(s)  1 center  Source center(s)  radius  Source radius  0 0 0 velocity  Particle initial velocity  0 0 0 delay  Delay between particles creation  0.01 start  Source starting time  0 stop  Source stopping time  1e+10 addNoise  Will add random value to the radius of new created particles  1 lastparticles  lastparticles indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component <p>Templates:</p> <ul> <li><code>Vec2d</code></li> </ul> <p>Target: <code>SofaSphFluid</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>ProjectiveConstraintSet</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 translation  translation applied to center(s)  0 0 scale  scale applied to center(s)  1 center  Source center(s)  radius  Source radius  0 0 velocity  Particle initial velocity  0 0 delay  Delay between particles creation  0.01 start  Source starting time  0 stop  Source stopping time  1e+10 addNoise  Will add random value to the radius of new created particles  1 lastparticles  lastparticles indices  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/SofaSphFluid/ParticlesRepulsionForceField/","title":"ParticlesRepulsionForceField","text":"<p>ForceField using SpatialGridContainer to compute repulsion forces in a set of spheres Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec2d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SofaSphFluid</code></p> <p>namespace: <code>sofa::component::forcefield</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 distance  Distance to maintain between particles  1 stiffness  Stiffness  100 damping  Damping  0.1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/SofaSphFluid/SPHFluidForceField/","title":"SPHFluidForceField","text":"<p>Smooth Particle Hydrodynamics Supports GPU-side computations using CUDA</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SofaSphFluid</code></p> <p>namespace: <code>sofa::component::forcefield</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 radius  Radius of a Particle  1 mass  Mass of a Particle  1 pressure  Pressure  100 density  Density  1 viscosity  Viscosity  0.001 surfaceTension  Surface Tension  0 kernelType  0 = default kernels, 1 = cubic spline  0 pressureType  0 = none, 1 = default pressure  1 viscosityType  0 = none, 1 = default d_viscosity using kernel Laplacian, 2 = artificial d_viscosity  1 surfaceTensionType  0 = none, 1 = default surface tension using kernel Laplacian, 2 = cohesion forces surface tension from Becker et al. 2007  1 debugGrid  If true will store additionnal information on the grid to check neighbors and draw them  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/SofaSphFluid/SPHFluidSurfaceMapping/","title":"SPHFluidSurfaceMapping","text":"<p>SPHFluidSurfaceMappingClass</p> <p>Templates:</p> <ul> <li><code>Vec3d,Vec3d</code></li> </ul> <p>Target: <code>SofaSphFluid</code></p> <p>namespace: <code>sofa::component::mapping</code></p> <p>parents: </p> <ul> <li><code>Mapping</code></li> <li><code>MeshTopology</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 mapForces  Are forces mapped ?  1 mapConstraints  Are constraints mapped ?  1 mapMasses  Are masses mapped ?  1 mapMatrices  Are matrix explicit mapped?  0 applyRestPosition  set to true to apply this mapping to restPosition at init  0 filename  Filename of the mesh  position  List of point positions  edges  List of edge indices  triangles  List of triangle indices  quads  List of quad indices  tetrahedra  List of tetrahedron indices  hexahedra  List of hexahedron indices  uv  List of uv coordinates  step  Step  0.5 radius  Radius  2 isoValue  Iso Value  0.5 Visualization drawEdges  if true, draw the topology Edges  0 drawTriangles  if true, draw the topology Triangles  0 drawQuads  if true, draw the topology Quads  0 drawTetrahedra  if true, draw the topology Tetrahedra  0 drawHexahedra  if true, draw the topology hexahedra  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects input Input object to map output Output object to map"},{"location":"35_Plugins/50_Usual_plugins/SofaSphFluid/SpatialGridContainer/","title":"SpatialGridContainer","text":"<p>Hashing spatial grid container, used for SPH fluids for instance. GPU support using CUDA.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SofaSphFluid</code></p> <p>namespace: <code>sofa::component::container</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 cellWidth  Width each cell in the grid. If it is used to compute neighboors, it should be greater than the max radius considered.  1 autoUpdate  Automatically update the grid at each iteration.  0 sortPoints  Sort points depending on which cell they are in the grid. This is required for efficient collision detection.  0 Visualization showGrid  activate rendering of the grid  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaSphFluid/SpatialGridPointModel/","title":"SpatialGridPointModel","text":"<p>Collision model which represents a set of points, spatially grouped using a SpatialGridContainer</p> <p>Target: <code>SofaSphFluid</code></p> <p>namespace: <code>sofa::component::collision</code></p> <p>parents: </p> <ul> <li><code>PointCollisionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 active  flag indicating if this collision model is active and should be included in default collision detections  1 moving  flag indicating if this object is changing position between iterations  1 simulated  flag indicating if this object is controlled by a simulation  1 selfCollision  flag indication if the object can self collide  0 proximity  Distance to the actual (visual) surface  0 contactStiffness  Contact stiffness  10 contactFriction  Contact friction coefficient (dry or viscous or unused depending on the contact method)  0 contactRestitution  Contact coefficient of restitution  0 contactResponse  if set, indicate to the ContactManager that this model should use the given class of contacts. Note that this is only indicative, and in particular if both collision models specify a different class it is up to the manager to choose.  color  color used to display the collision model if requested  1 0 0 1 group  IDs of the groups containing this model. No collision can occur between collision models included in a common group (e.g. allowing the same object to have multiple collision models)  numberOfContacts  Number of collision models this collision model is currently attached to  0 bothSide  activate collision on both side of the point model (when surface normals are defined on these points)  0 computeNormals  activate computation of normal vectors (required for some collision detection algorithms)  0 displayFreePosition  Display Collision Model Points free position(in green)  0 leafScale  at which level should the first cube layer be constructed. Note that this must not be greater than GRIDDIM_LOG2  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects previous Previous (coarser / upper / parent level) CollisionModel in the hierarchy. next Next (finer / lower / child level) CollisionModel in the hierarchy. collisionElementActiver CollisionElementActiver component that activates or deactivates collision element(s) during execution topology link to the topology container"},{"location":"35_Plugins/50_Usual_plugins/SofaValidation/DataController/","title":"DataController","text":"<p>DataController</p> <p>Target: <code>SofaValidation</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 data  Controlled data  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaValidation/DataMonitor/","title":"DataMonitor","text":"<p>DataMonitor</p> <p>Target: <code>SofaValidation</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 data  Monitored data  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaValidation/DevAngleCollisionMonitor/","title":"DevAngleCollisionMonitor","text":"<p>Angle collision monitoring</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>SofaValidation</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>DevMonitor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 period  period between outputs  1 indices  Indices of the points which will be monitored  maxDist  alarm distance for proximity detection  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaValidation/DevMonitorManager/","title":"DevMonitorManager","text":"<p>DevMonitorManager</p> <p>Target: <code>SofaValidation</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>DevMonitor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 period  period between outputs  1 indices  Indices of the points which will be monitored  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaValidation/DevTensionMonitor/","title":"DevTensionMonitor","text":"<p>Tension monitoring</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>SofaValidation</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>DevMonitor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 period  period between outputs  1 indices  Indices of the points which will be monitored  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaValidation/EvalPointsDistance/","title":"EvalPointsDistance","text":"<p>Periodically compute the distance between 2 set of points</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SofaValidation</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isToPrint  suppress somes data before using save as function  0 filename  output file name  period  period between outputs  0 distance  distances (OUTPUT)  distMean  mean distance (OUTPUT)  1 distMin  min distance (OUTPUT)  1 distMax  max distance (OUTPUT)  1 distDev  distance standard deviation (OUTPUT)  1 rdistMean  mean relative distance (OUTPUT)  1 rdistMin  min relative distance (OUTPUT)  1 rdistMax  max relative distance (OUTPUT)  1 rdistDev  relative distance standard deviation (OUTPUT)  1 Visualization draw  activate rendering of lines between associated points  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects object1 Mechanical state 1 object2 Mechanical state 2"},{"location":"35_Plugins/50_Usual_plugins/SofaValidation/EvalSurfaceDistance/","title":"EvalSurfaceDistance","text":"<p>Periodically compute the distance between 2 set of points</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SofaValidation</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>EvalPointsDistance</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isToPrint  suppress somes data before using save as function  0 filename  output file name  period  period between outputs  0 distance  distances (OUTPUT)  distMean  mean distance (OUTPUT)  1 distMin  min distance (OUTPUT)  1 distMax  max distance (OUTPUT)  1 distDev  distance standard deviation (OUTPUT)  1 rdistMean  mean relative distance (OUTPUT)  1 rdistMin  min relative distance (OUTPUT)  1 rdistMax  max relative distance (OUTPUT)  1 rdistDev  relative distance standard deviation (OUTPUT)  1 maxDist  alarm distance for proximity detection  1 Visualization draw  activate rendering of lines between associated points  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects object1 Mechanical state 1 object2 Mechanical state 2"},{"location":"35_Plugins/50_Usual_plugins/SofaValidation/ExtraMonitor/","title":"ExtraMonitor","text":"<p>Monitoring of particles Supports GPU-side computation using CUDA</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>SofaValidation</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>Monitor</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 indices  MechanicalObject points indices to monitor  ExportPositions  export Monitored positions as gnuplot file  0 ExportVelocities  export Monitored velocities as gnuplot file  0 ExportForces  export Monitored forces as gnuplot file  0 PositionsColor  define the color of positions  VelocitiesColor  define the color of velocities  ForcesColor  define the color of forces  TrajectoriesPrecision  set the dt between to save of positions  0.1 TrajectoriesColor  define the color of the trajectories  sizeFactor  factor to multiply to arrows  1 fileName  name of the plot files to be generated  ExportWcin  export Wcin of the monitored dofs as gnuplot file  0 ExportWext  export Wext of the monitored dofs as gnuplot file  0 resultantF  export force resultant of the monitored dofs as gnuplot file instead of all dofs  1 minCoord  export minimum displacement on the given coordinate as gnuplot file instead of positions of all dofs  -1 maxCoord  export minimum displacement on the given coordinate as gnuplot file instead of positions of all dofs  -1 dispCoord  export displacement on the given coordinate as gnuplot file  -1 Visualization showPositions  see the Monitored positions  0 showVelocities  see the Monitored velocities  0 showForces  see the Monitored forces  0 showMinThreshold  under this value, vectors are not represented  0.01 showTrajectories  print the trajectory of Monitored particles  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaValidation/Monitor/","title":"Monitor","text":"<p>Monitoring of particles</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> <li><code>Vec6d</code></li> </ul> <p>Target: <code>SofaValidation</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 indices  MechanicalObject points indices to monitor  ExportPositions  export Monitored positions as gnuplot file  0 ExportVelocities  export Monitored velocities as gnuplot file  0 ExportForces  export Monitored forces as gnuplot file  0 PositionsColor  define the color of positions  VelocitiesColor  define the color of velocities  ForcesColor  define the color of forces  TrajectoriesPrecision  set the dt between to save of positions  0.1 TrajectoriesColor  define the color of the trajectories  sizeFactor  factor to multiply to arrows  1 fileName  name of the plot files to be generated  Visualization showPositions  see the Monitored positions  0 showVelocities  see the Monitored velocities  0 showForces  see the Monitored forces  0 showMinThreshold  under this value, vectors are not represented  0.01 showTrajectories  print the trajectory of Monitored particles  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SofaValidation/Monitor/#examples","title":"Examples","text":"<p>Component/SceneUtility/Monitor.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.0005\"&gt;\n    &lt;VisualStyle displayFlags=\"showBehaviorModels showForceFields showCollisionModels showMappings\" /&gt;\n    &lt;DefaultAnimationLoop/&gt;    \n\n    &lt;Node name=\"Poutre1\" gravity=\"0 -9.81 0\"&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Forward\"/&gt; &lt;!-- Needed to use components [EulerExplicitSolver] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [StiffSpringForceField] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n        &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n        &lt;RequiredPlugin name=\"SofaValidation\"/&gt; &lt;!-- Needed to use components [Monitor] --&gt;\n        &lt;EulerExplicitSolver name=\"Explicit\" printLog=\"0\" /&gt;\n\n        &lt;Node name=\"M1\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/smCube27.msh\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"default1\" restScale=\"1\" showObject=\"1\" /&gt;\n            &lt;UniformMass name=\"default2\" vertexMass=\"0.1\" /&gt;\n            &lt;FixedProjectiveConstraint template=\"Vec3\" name=\"default3\" indices=\"0 3 6 9 12 15 18 21 24\" /&gt;\n            &lt;Monitor template=\"Vec3\" name=\"velocities_2-11-20\" listening=\"1\" indices=\"2 11 20\" showPositions=\"0\" PositionsColor=\"1 1 0 1\" showVelocities=\"1\" VelocitiesColor=\"1 1 0 1\" ForcesColor=\"1 1 0 1\" showMinThreshold=\"0.01\" TrajectoriesPrecision=\"0.1\" TrajectoriesColor=\"1 1 0 1\" /&gt;\n            &lt;Monitor template=\"Vec3\" name=\"positions_8-16-24\" listening=\"1\" indices=\"8 16 24\" showPositions=\"1\" PositionsColor=\"1 1 0 1\" VelocitiesColor=\"1 1 0 1\" ForcesColor=\"1 1 0 1\" showMinThreshold=\"0.01\" TrajectoriesPrecision=\"0.1\" TrajectoriesColor=\"1 1 0 1\" /&gt;\n            &lt;StiffSpringForceField template=\"Vec3\" name=\"InternalSprings1\" spring=\"0 9 100 5 3.5&amp;#x0A; 1 10 500 5 3.5&amp;#x0A; 2 11 500 5 3.5&amp;#x0A; 3 12 500 5 3.5&amp;#x0A; 4 13 500 5 3.5&amp;#x0A; 5 14 500 5 3.5&amp;#x0A; 6 15 500 5 3.5&amp;#x0A; 7 16 500 5 3.5&amp;#x0A; 8 17 500 5 3.5&amp;#x0A; 9 18 500 5 3.5&amp;#x0A; 10 19 500 5 3.5&amp;#x0A; 11 20 500 5 3.5&amp;#x0A; 12 21 500 5 3.5&amp;#x0A; 13 22 500 5 3.5&amp;#x0A; 14 23 500 5 3.5&amp;#x0A; 15 24 500 5 3.5&amp;#x0A; 16 25 500 5 3.5&amp;#x0A; 17 26 500 5 3.5&amp;#x0A; 0 3 500 5 3.5&amp;#x0A; 1 4 500 5 3.5&amp;#x0A; 2 5 500 5 3.5&amp;#x0A; 3 6 500 5 3.5&amp;#x0A; 4 7 500 5 3.5&amp;#x0A; 5 8 500 5 3.5&amp;#x0A; 9 12 500 5 3.5&amp;#x0A; 10 13 500 5 3.5&amp;#x0A; 11 14 500 5 3.5&amp;#x0A; 12 15 500 5 3.5&amp;#x0A; 13 16 500 5 3.5&amp;#x0A; 14 17 500 5 3.5&amp;#x0A; 18 21 500 5 3.5&amp;#x0A; 19 22 500 5 3.5&amp;#x0A; 20 23 500 5 3.5&amp;#x0A; 21 24 500 5 3.5&amp;#x0A; 22 25 500 5 3.5&amp;#x0A; 23 26 500 5 3.5&amp;#x0A; 0 1 500 5 3.5&amp;#x0A; 1 2 500 5 3.5&amp;#x0A; 3 4 500 5 3.5&amp;#x0A; 4 5 500 5 3.5&amp;#x0A; 6 7 500 5 3.5&amp;#x0A; 7 8 500 5 3.5&amp;#x0A; 9 10 500 5 3.5&amp;#x0A; 10 11 500 5 3.5&amp;#x0A; 12 13 500 5 3.5&amp;#x0A; 13 14 500 5 3.5&amp;#x0A; 15 16 500 5 3.5&amp;#x0A; 16 17 500 5 3.5&amp;#x0A; 18 19 500 5 3.5&amp;#x0A; 19 20 500 5 3.5&amp;#x0A; 21 22 500 5 3.5&amp;#x0A; 22 23 500 5 3.5&amp;#x0A; 24 25 500 5 3.5&amp;#x0A; 25 26 100 5 3.5&amp;#x0A; 0 13 500 5 6.06218&amp;#x0A; 1 14 500 5 6.06218&amp;#x0A; 3 16 500 5 6.06218&amp;#x0A; 4 17 500 5 6.06218&amp;#x0A; 9 22 500 5 6.06218&amp;#x0A; 10 23 500 5 6.06218&amp;#x0A; 12 25 500 5 6.06218&amp;#x0A; 13 26 500 5 6.06218&amp;#x0A; 9 4 500 5 6.06218&amp;#x0A; 10 5 500 5 6.06218&amp;#x0A; 12 7 500 5 6.06218&amp;#x0A; 13 8 500 5 6.06218&amp;#x0A; 18 13 500 5 6.06218&amp;#x0A; 19 14 500 5 6.06218&amp;#x0A; 21 16 500 5 6.06218&amp;#x0A; 22 17 500 5 6.06218&amp;#x0A; 3 10 500 5 6.06218&amp;#x0A; 4 11 500 5 6.06218&amp;#x0A; 6 13 500 5 6.06218&amp;#x0A; 7 14 500 5 6.06218&amp;#x0A; 12 19 500 5 6.06218&amp;#x0A; 13 20 500 5 6.06218&amp;#x0A; 15 22 500 5 6.06218&amp;#x0A; 16 23 500 5 6.06218&amp;#x0A; 12 1 500 5 6.06218&amp;#x0A; 13 2 500 5 6.06218&amp;#x0A; 15 4 500 5 6.06218&amp;#x0A; 16 5 500 5 6.06218&amp;#x0A; 21 10 500 5 6.06218&amp;#x0A; 22 11 500 5 6.06218&amp;#x0A; 24 13 500 5 6.06218&amp;#x0A; 25 14 500 5 6.06218&amp;#x0A; 0 12 500 5 4.94975&amp;#x0A; 1 13 500 5 4.94975&amp;#x0A; 2 14 500 5 4.94975&amp;#x0A; 3 15 500 5 4.94975&amp;#x0A; 4 16 500 5 4.94975&amp;#x0A; 5 17 500 5 4.94975&amp;#x0A; 9 21 500 5 4.94975&amp;#x0A; 10 22 500 5 4.94975&amp;#x0A; 11 23 500 5 4.94975&amp;#x0A; 12 24 500 5 4.94975&amp;#x0A; 13 25 500 5 4.94975&amp;#x0A; 14 26 500 5 4.94975&amp;#x0A; 3 9 500 5 4.94975&amp;#x0A; 4 10 500 5 4.94975&amp;#x0A; 5 11 500 5 4.94975&amp;#x0A; 6 12 500 5 4.94975&amp;#x0A; 7 13 500 5 4.94975&amp;#x0A; 8 14 500 5 4.94975&amp;#x0A; 12 18 500 5 4.94975&amp;#x0A; 13 19 500 5 4.94975&amp;#x0A; 14 20 500 5 4.94975&amp;#x0A; 15 21 500 5 4.94975&amp;#x0A; 16 22 500 5 4.94975&amp;#x0A; 17 23 500 5 4.94975&amp;#x0A; 0 10 500 5 4.94975&amp;#x0A; 1 11 500 5 4.94975&amp;#x0A; 3 13 500 5 4.94975&amp;#x0A; 4 14 500 5 4.94975&amp;#x0A; 6 16 500 5 4.94975&amp;#x0A; 7 17 500 5 4.94975&amp;#x0A; 9 19 500 5 4.94975&amp;#x0A; 10 20 500 5 4.94975&amp;#x0A; 12 22 500 5 4.94975&amp;#x0A; 13 23 500 5 4.94975&amp;#x0A; 15 25 500 5 4.94975&amp;#x0A; 16 26 500 5 4.94975&amp;#x0A; 9 1 500 5 4.94975&amp;#x0A; 10 2 500 5 4.94975&amp;#x0A; 12 4 500 5 4.94975&amp;#x0A; 13 5 500 5 4.94975&amp;#x0A; 15 7 500 5 4.94975&amp;#x0A; 16 8 500 5 4.94975&amp;#x0A; 18 10 500 5 4.94975&amp;#x0A; 19 11 500 5 4.94975&amp;#x0A; 21 13 500 5 4.94975&amp;#x0A; 22 14 500 5 4.94975&amp;#x0A; 24 16 500 5 4.94975&amp;#x0A; 25 17 500 5 4.94975&amp;#x0A; 0 4 500 5 4.94975&amp;#x0A; 1 5 500 5 4.94975&amp;#x0A; 3 7 500 5 4.94975&amp;#x0A; 4 8 500 5 4.94975&amp;#x0A; 9 13 500 5 4.94975&amp;#x0A; 10 14 500 5 4.94975&amp;#x0A; 12 16 500 5 4.94975&amp;#x0A; 13 17 500 5 4.94975&amp;#x0A; 18 22 500 5 4.94975&amp;#x0A; 19 23 500 5 4.94975&amp;#x0A; 21 25 500 5 4.94975&amp;#x0A; 22 26 500 5 4.94975&amp;#x0A; 3 1 500 5 4.94975&amp;#x0A; 4 2 500 5 4.94975&amp;#x0A; 6 4 500 5 4.94975&amp;#x0A; 7 5 500 5 4.94975&amp;#x0A; 12 10 500 5 4.94975&amp;#x0A; 13 11 500 5 4.94975&amp;#x0A; 15 13 500 5 4.94975&amp;#x0A; 16 14 500 5 4.94975&amp;#x0A; 21 19 500 5 4.94975&amp;#x0A; 22 20 500 5 4.94975&amp;#x0A; 24 22 500 5 4.94975&amp;#x0A; 25 23 500 5 4.94975&amp;#x0A;\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"M2\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/smCube27.msh\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"default5\" translation=\"0 0 10.5\" restScale=\"1\" /&gt;\n            &lt;Monitor template=\"Vec3\" name=\"positions_8-16-24\" listening=\"1\" indices=\"8 16 24\" showPositions=\"1\" PositionsColor=\"1 1 0 1\" VelocitiesColor=\"1 1 0 1\" ForcesColor=\"1 1 0 1\" showMinThreshold=\"0.01\" TrajectoriesPrecision=\"0.1\" TrajectoriesColor=\"1 1 0 1\" /&gt;\n            &lt;UniformMass name=\"default6\" vertexMass=\"0.1\" /&gt;\n            &lt;StiffSpringForceField template=\"Vec3\" name=\"InternalSprings2\" spring=\"0 9 100 5 3.5&amp;#x0A; 1 10 500 5 3.5&amp;#x0A; 2 11 500 5 3.5&amp;#x0A; 3 12 500 5 3.5&amp;#x0A; 4 13 500 5 3.5&amp;#x0A; 5 14 500 5 3.5&amp;#x0A; 6 15 500 5 3.5&amp;#x0A; 7 16 500 5 3.5&amp;#x0A; 8 17 500 5 3.5&amp;#x0A; 9 18 500 5 3.5&amp;#x0A; 10 19 500 5 3.5&amp;#x0A; 11 20 500 5 3.5&amp;#x0A; 12 21 500 5 3.5&amp;#x0A; 13 22 500 5 3.5&amp;#x0A; 14 23 500 5 3.5&amp;#x0A; 15 24 500 5 3.5&amp;#x0A; 16 25 500 5 3.5&amp;#x0A; 17 26 500 5 3.5&amp;#x0A; 0 3 500 5 3.5&amp;#x0A; 1 4 500 5 3.5&amp;#x0A; 2 5 500 5 3.5&amp;#x0A; 3 6 500 5 3.5&amp;#x0A; 4 7 500 5 3.5&amp;#x0A; 5 8 500 5 3.5&amp;#x0A; 9 12 500 5 3.5&amp;#x0A; 10 13 500 5 3.5&amp;#x0A; 11 14 500 5 3.5&amp;#x0A; 12 15 500 5 3.5&amp;#x0A; 13 16 500 5 3.5&amp;#x0A; 14 17 500 5 3.5&amp;#x0A; 18 21 500 5 3.5&amp;#x0A; 19 22 500 5 3.5&amp;#x0A; 20 23 500 5 3.5&amp;#x0A; 21 24 500 5 3.5&amp;#x0A; 22 25 500 5 3.5&amp;#x0A; 23 26 500 5 3.5&amp;#x0A; 0 1 500 5 3.5&amp;#x0A; 1 2 500 5 3.5&amp;#x0A; 3 4 500 5 3.5&amp;#x0A; 4 5 500 5 3.5&amp;#x0A; 6 7 500 5 3.5&amp;#x0A; 7 8 500 5 3.5&amp;#x0A; 9 10 500 5 3.5&amp;#x0A; 10 11 500 5 3.5&amp;#x0A; 12 13 500 5 3.5&amp;#x0A; 13 14 500 5 3.5&amp;#x0A; 15 16 500 5 3.5&amp;#x0A; 16 17 500 5 3.5&amp;#x0A; 18 19 500 5 3.5&amp;#x0A; 19 20 500 5 3.5&amp;#x0A; 21 22 500 5 3.5&amp;#x0A; 22 23 500 5 3.5&amp;#x0A; 24 25 500 5 3.5&amp;#x0A; 25 26 100 5 3.5&amp;#x0A; 0 13 500 5 6.06218&amp;#x0A; 1 14 500 5 6.06218&amp;#x0A; 3 16 500 5 6.06218&amp;#x0A; 4 17 500 5 6.06218&amp;#x0A; 9 22 500 5 6.06218&amp;#x0A; 10 23 500 5 6.06218&amp;#x0A; 12 25 500 5 6.06218&amp;#x0A; 13 26 500 5 6.06218&amp;#x0A; 9 4 500 5 6.06218&amp;#x0A; 10 5 500 5 6.06218&amp;#x0A; 12 7 500 5 6.06218&amp;#x0A; 13 8 500 5 6.06218&amp;#x0A; 18 13 500 5 6.06218&amp;#x0A; 19 14 500 5 6.06218&amp;#x0A; 21 16 500 5 6.06218&amp;#x0A; 22 17 500 5 6.06218&amp;#x0A; 3 10 500 5 6.06218&amp;#x0A; 4 11 500 5 6.06218&amp;#x0A; 6 13 500 5 6.06218&amp;#x0A; 7 14 500 5 6.06218&amp;#x0A; 12 19 500 5 6.06218&amp;#x0A; 13 20 500 5 6.06218&amp;#x0A; 15 22 500 5 6.06218&amp;#x0A; 16 23 500 5 6.06218&amp;#x0A; 12 1 500 5 6.06218&amp;#x0A; 13 2 500 5 6.06218&amp;#x0A; 15 4 500 5 6.06218&amp;#x0A; 16 5 500 5 6.06218&amp;#x0A; 21 10 500 5 6.06218&amp;#x0A; 22 11 500 5 6.06218&amp;#x0A; 24 13 500 5 6.06218&amp;#x0A; 25 14 500 5 6.06218&amp;#x0A; 0 12 500 5 4.94975&amp;#x0A; 1 13 500 5 4.94975&amp;#x0A; 2 14 500 5 4.94975&amp;#x0A; 3 15 500 5 4.94975&amp;#x0A; 4 16 500 5 4.94975&amp;#x0A; 5 17 500 5 4.94975&amp;#x0A; 9 21 500 5 4.94975&amp;#x0A; 10 22 500 5 4.94975&amp;#x0A; 11 23 500 5 4.94975&amp;#x0A; 12 24 500 5 4.94975&amp;#x0A; 13 25 500 5 4.94975&amp;#x0A; 14 26 500 5 4.94975&amp;#x0A; 3 9 500 5 4.94975&amp;#x0A; 4 10 500 5 4.94975&amp;#x0A; 5 11 500 5 4.94975&amp;#x0A; 6 12 500 5 4.94975&amp;#x0A; 7 13 500 5 4.94975&amp;#x0A; 8 14 500 5 4.94975&amp;#x0A; 12 18 500 5 4.94975&amp;#x0A; 13 19 500 5 4.94975&amp;#x0A; 14 20 500 5 4.94975&amp;#x0A; 15 21 500 5 4.94975&amp;#x0A; 16 22 500 5 4.94975&amp;#x0A; 17 23 500 5 4.94975&amp;#x0A; 0 10 500 5 4.94975&amp;#x0A; 1 11 500 5 4.94975&amp;#x0A; 3 13 500 5 4.94975&amp;#x0A; 4 14 500 5 4.94975&amp;#x0A; 6 16 500 5 4.94975&amp;#x0A; 7 17 500 5 4.94975&amp;#x0A; 9 19 500 5 4.94975&amp;#x0A; 10 20 500 5 4.94975&amp;#x0A; 12 22 500 5 4.94975&amp;#x0A; 13 23 500 5 4.94975&amp;#x0A; 15 25 500 5 4.94975&amp;#x0A; 16 26 500 5 4.94975&amp;#x0A; 9 1 500 5 4.94975&amp;#x0A; 10 2 500 5 4.94975&amp;#x0A; 12 4 500 5 4.94975&amp;#x0A; 13 5 500 5 4.94975&amp;#x0A; 15 7 500 5 4.94975&amp;#x0A; 16 8 500 5 4.94975&amp;#x0A; 18 10 500 5 4.94975&amp;#x0A; 19 11 500 5 4.94975&amp;#x0A; 21 13 500 5 4.94975&amp;#x0A; 22 14 500 5 4.94975&amp;#x0A; 24 16 500 5 4.94975&amp;#x0A; 25 17 500 5 4.94975&amp;#x0A; 0 4 500 5 4.94975&amp;#x0A; 1 5 500 5 4.94975&amp;#x0A; 3 7 500 5 4.94975&amp;#x0A; 4 8 500 5 4.94975&amp;#x0A; 9 13 500 5 4.94975&amp;#x0A; 10 14 500 5 4.94975&amp;#x0A; 12 16 500 5 4.94975&amp;#x0A; 13 17 500 5 4.94975&amp;#x0A; 18 22 500 5 4.94975&amp;#x0A; 19 23 500 5 4.94975&amp;#x0A; 21 25 500 5 4.94975&amp;#x0A; 22 26 500 5 4.94975&amp;#x0A; 3 1 500 5 4.94975&amp;#x0A; 4 2 500 5 4.94975&amp;#x0A; 6 4 500 5 4.94975&amp;#x0A; 7 5 500 5 4.94975&amp;#x0A; 12 10 500 5 4.94975&amp;#x0A; 13 11 500 5 4.94975&amp;#x0A; 15 13 500 5 4.94975&amp;#x0A; 16 14 500 5 4.94975&amp;#x0A; 21 19 500 5 4.94975&amp;#x0A; 22 20 500 5 4.94975&amp;#x0A; 24 22 500 5 4.94975&amp;#x0A; 25 23 500 5 4.94975&amp;#x0A;\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"M3\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/smCube27.msh\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"default8\" translation=\"0 0 21\" restScale=\"1\" /&gt;\n            &lt;Monitor template=\"Vec3\" name=\"velocities_8-16-24\" listening=\"1\" indices=\"8 16 24\" showPositions=\"0\" PositionsColor=\"1 1 0 1\" showVelocities=\"1\" VelocitiesColor=\"1 1 0 1\" ForcesColor=\"1 1 0 1\" showMinThreshold=\"0.01\" TrajectoriesPrecision=\"0.1\" TrajectoriesColor=\"1 1 0 1\" sizeFactor=\"1\" /&gt;\n            &lt;UniformMass name=\"default9\" vertexMass=\"0.1\" /&gt;\n            &lt;StiffSpringForceField template=\"Vec3\" name=\"InternalSprings3\" spring=\"0 9 100 5 3.5&amp;#x0A; 1 10 500 5 3.5&amp;#x0A; 2 11 500 5 3.5&amp;#x0A; 3 12 500 5 3.5&amp;#x0A; 4 13 500 5 3.5&amp;#x0A; 5 14 500 5 3.5&amp;#x0A; 6 15 500 5 3.5&amp;#x0A; 7 16 500 5 3.5&amp;#x0A; 8 17 500 5 3.5&amp;#x0A; 9 18 500 5 3.5&amp;#x0A; 10 19 500 5 3.5&amp;#x0A; 11 20 500 5 3.5&amp;#x0A; 12 21 500 5 3.5&amp;#x0A; 13 22 500 5 3.5&amp;#x0A; 14 23 500 5 3.5&amp;#x0A; 15 24 500 5 3.5&amp;#x0A; 16 25 500 5 3.5&amp;#x0A; 17 26 500 5 3.5&amp;#x0A; 0 3 500 5 3.5&amp;#x0A; 1 4 500 5 3.5&amp;#x0A; 2 5 500 5 3.5&amp;#x0A; 3 6 500 5 3.5&amp;#x0A; 4 7 500 5 3.5&amp;#x0A; 5 8 500 5 3.5&amp;#x0A; 9 12 500 5 3.5&amp;#x0A; 10 13 500 5 3.5&amp;#x0A; 11 14 500 5 3.5&amp;#x0A; 12 15 500 5 3.5&amp;#x0A; 13 16 500 5 3.5&amp;#x0A; 14 17 500 5 3.5&amp;#x0A; 18 21 500 5 3.5&amp;#x0A; 19 22 500 5 3.5&amp;#x0A; 20 23 500 5 3.5&amp;#x0A; 21 24 500 5 3.5&amp;#x0A; 22 25 500 5 3.5&amp;#x0A; 23 26 500 5 3.5&amp;#x0A; 0 1 500 5 3.5&amp;#x0A; 1 2 500 5 3.5&amp;#x0A; 3 4 500 5 3.5&amp;#x0A; 4 5 500 5 3.5&amp;#x0A; 6 7 500 5 3.5&amp;#x0A; 7 8 500 5 3.5&amp;#x0A; 9 10 500 5 3.5&amp;#x0A; 10 11 500 5 3.5&amp;#x0A; 12 13 500 5 3.5&amp;#x0A; 13 14 500 5 3.5&amp;#x0A; 15 16 500 5 3.5&amp;#x0A; 16 17 500 5 3.5&amp;#x0A; 18 19 500 5 3.5&amp;#x0A; 19 20 500 5 3.5&amp;#x0A; 21 22 500 5 3.5&amp;#x0A; 22 23 500 5 3.5&amp;#x0A; 24 25 500 5 3.5&amp;#x0A; 25 26 100 5 3.5&amp;#x0A; 0 13 500 5 6.06218&amp;#x0A; 1 14 500 5 6.06218&amp;#x0A; 3 16 500 5 6.06218&amp;#x0A; 4 17 500 5 6.06218&amp;#x0A; 9 22 500 5 6.06218&amp;#x0A; 10 23 500 5 6.06218&amp;#x0A; 12 25 500 5 6.06218&amp;#x0A; 13 26 500 5 6.06218&amp;#x0A; 9 4 500 5 6.06218&amp;#x0A; 10 5 500 5 6.06218&amp;#x0A; 12 7 500 5 6.06218&amp;#x0A; 13 8 500 5 6.06218&amp;#x0A; 18 13 500 5 6.06218&amp;#x0A; 19 14 500 5 6.06218&amp;#x0A; 21 16 500 5 6.06218&amp;#x0A; 22 17 500 5 6.06218&amp;#x0A; 3 10 500 5 6.06218&amp;#x0A; 4 11 500 5 6.06218&amp;#x0A; 6 13 500 5 6.06218&amp;#x0A; 7 14 500 5 6.06218&amp;#x0A; 12 19 500 5 6.06218&amp;#x0A; 13 20 500 5 6.06218&amp;#x0A; 15 22 500 5 6.06218&amp;#x0A; 16 23 500 5 6.06218&amp;#x0A; 12 1 500 5 6.06218&amp;#x0A; 13 2 500 5 6.06218&amp;#x0A; 15 4 500 5 6.06218&amp;#x0A; 16 5 500 5 6.06218&amp;#x0A; 21 10 500 5 6.06218&amp;#x0A; 22 11 500 5 6.06218&amp;#x0A; 24 13 500 5 6.06218&amp;#x0A; 25 14 500 5 6.06218&amp;#x0A; 0 12 500 5 4.94975&amp;#x0A; 1 13 500 5 4.94975&amp;#x0A; 2 14 500 5 4.94975&amp;#x0A; 3 15 500 5 4.94975&amp;#x0A; 4 16 500 5 4.94975&amp;#x0A; 5 17 500 5 4.94975&amp;#x0A; 9 21 500 5 4.94975&amp;#x0A; 10 22 500 5 4.94975&amp;#x0A; 11 23 500 5 4.94975&amp;#x0A; 12 24 500 5 4.94975&amp;#x0A; 13 25 500 5 4.94975&amp;#x0A; 14 26 500 5 4.94975&amp;#x0A; 3 9 500 5 4.94975&amp;#x0A; 4 10 500 5 4.94975&amp;#x0A; 5 11 500 5 4.94975&amp;#x0A; 6 12 500 5 4.94975&amp;#x0A; 7 13 500 5 4.94975&amp;#x0A; 8 14 500 5 4.94975&amp;#x0A; 12 18 500 5 4.94975&amp;#x0A; 13 19 500 5 4.94975&amp;#x0A; 14 20 500 5 4.94975&amp;#x0A; 15 21 500 5 4.94975&amp;#x0A; 16 22 500 5 4.94975&amp;#x0A; 17 23 500 5 4.94975&amp;#x0A; 0 10 500 5 4.94975&amp;#x0A; 1 11 500 5 4.94975&amp;#x0A; 3 13 500 5 4.94975&amp;#x0A; 4 14 500 5 4.94975&amp;#x0A; 6 16 500 5 4.94975&amp;#x0A; 7 17 500 5 4.94975&amp;#x0A; 9 19 500 5 4.94975&amp;#x0A; 10 20 500 5 4.94975&amp;#x0A; 12 22 500 5 4.94975&amp;#x0A; 13 23 500 5 4.94975&amp;#x0A; 15 25 500 5 4.94975&amp;#x0A; 16 26 500 5 4.94975&amp;#x0A; 9 1 500 5 4.94975&amp;#x0A; 10 2 500 5 4.94975&amp;#x0A; 12 4 500 5 4.94975&amp;#x0A; 13 5 500 5 4.94975&amp;#x0A; 15 7 500 5 4.94975&amp;#x0A; 16 8 500 5 4.94975&amp;#x0A; 18 10 500 5 4.94975&amp;#x0A; 19 11 500 5 4.94975&amp;#x0A; 21 13 500 5 4.94975&amp;#x0A; 22 14 500 5 4.94975&amp;#x0A; 24 16 500 5 4.94975&amp;#x0A; 25 17 500 5 4.94975&amp;#x0A; 0 4 500 5 4.94975&amp;#x0A; 1 5 500 5 4.94975&amp;#x0A; 3 7 500 5 4.94975&amp;#x0A; 4 8 500 5 4.94975&amp;#x0A; 9 13 500 5 4.94975&amp;#x0A; 10 14 500 5 4.94975&amp;#x0A; 12 16 500 5 4.94975&amp;#x0A; 13 17 500 5 4.94975&amp;#x0A; 18 22 500 5 4.94975&amp;#x0A; 19 23 500 5 4.94975&amp;#x0A; 21 25 500 5 4.94975&amp;#x0A; 22 26 500 5 4.94975&amp;#x0A; 3 1 500 5 4.94975&amp;#x0A; 4 2 500 5 4.94975&amp;#x0A; 6 4 500 5 4.94975&amp;#x0A; 7 5 500 5 4.94975&amp;#x0A; 12 10 500 5 4.94975&amp;#x0A; 13 11 500 5 4.94975&amp;#x0A; 15 13 500 5 4.94975&amp;#x0A; 16 14 500 5 4.94975&amp;#x0A; 21 19 500 5 4.94975&amp;#x0A; 22 20 500 5 4.94975&amp;#x0A; 24 22 500 5 4.94975&amp;#x0A; 25 23 500 5 4.94975&amp;#x0A;\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"M4\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/smCube27.msh\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"default11\" translation=\"0 0 31.5\" restScale=\"1\" /&gt;\n            &lt;UniformMass name=\"default12\" vertexMass=\"0.1\" /&gt;\n            &lt;Monitor template=\"Vec3\" name=\"forces_2-11-20\" listening=\"1\" indices=\"2 11 20\" showPositions=\"0\" PositionsColor=\"1 1 0 1\" showVelocities=\"0\" VelocitiesColor=\"1 1 0 1\" showForces=\"1\" ForcesColor=\"0 1 1 1\" showMinThreshold=\"0.01\" TrajectoriesPrecision=\"0.1\" TrajectoriesColor=\"1 1 0 1\" sizeFactor=\"1\" /&gt;\n            &lt;StiffSpringForceField template=\"Vec3\" name=\"InternalSprings4\" spring=\"0 9 100 5 3.5&amp;#x0A; 1 10 500 5 3.5&amp;#x0A; 2 11 500 5 3.5&amp;#x0A; 3 12 500 5 3.5&amp;#x0A; 4 13 500 5 3.5&amp;#x0A; 5 14 500 5 3.5&amp;#x0A; 6 15 500 5 3.5&amp;#x0A; 7 16 500 5 3.5&amp;#x0A; 8 17 500 5 3.5&amp;#x0A; 9 18 500 5 3.5&amp;#x0A; 10 19 500 5 3.5&amp;#x0A; 11 20 500 5 3.5&amp;#x0A; 12 21 500 5 3.5&amp;#x0A; 13 22 500 5 3.5&amp;#x0A; 14 23 500 5 3.5&amp;#x0A; 15 24 500 5 3.5&amp;#x0A; 16 25 500 5 3.5&amp;#x0A; 17 26 500 5 3.5&amp;#x0A; 0 3 500 5 3.5&amp;#x0A; 1 4 500 5 3.5&amp;#x0A; 2 5 500 5 3.5&amp;#x0A; 3 6 500 5 3.5&amp;#x0A; 4 7 500 5 3.5&amp;#x0A; 5 8 500 5 3.5&amp;#x0A; 9 12 500 5 3.5&amp;#x0A; 10 13 500 5 3.5&amp;#x0A; 11 14 500 5 3.5&amp;#x0A; 12 15 500 5 3.5&amp;#x0A; 13 16 500 5 3.5&amp;#x0A; 14 17 500 5 3.5&amp;#x0A; 18 21 500 5 3.5&amp;#x0A; 19 22 500 5 3.5&amp;#x0A; 20 23 500 5 3.5&amp;#x0A; 21 24 500 5 3.5&amp;#x0A; 22 25 500 5 3.5&amp;#x0A; 23 26 500 5 3.5&amp;#x0A; 0 1 500 5 3.5&amp;#x0A; 1 2 500 5 3.5&amp;#x0A; 3 4 500 5 3.5&amp;#x0A; 4 5 500 5 3.5&amp;#x0A; 6 7 500 5 3.5&amp;#x0A; 7 8 500 5 3.5&amp;#x0A; 9 10 500 5 3.5&amp;#x0A; 10 11 500 5 3.5&amp;#x0A; 12 13 500 5 3.5&amp;#x0A; 13 14 500 5 3.5&amp;#x0A; 15 16 500 5 3.5&amp;#x0A; 16 17 500 5 3.5&amp;#x0A; 18 19 500 5 3.5&amp;#x0A; 19 20 500 5 3.5&amp;#x0A; 21 22 500 5 3.5&amp;#x0A; 22 23 500 5 3.5&amp;#x0A; 24 25 500 5 3.5&amp;#x0A; 25 26 100 5 3.5&amp;#x0A; 0 13 500 5 6.06218&amp;#x0A; 1 14 500 5 6.06218&amp;#x0A; 3 16 500 5 6.06218&amp;#x0A; 4 17 500 5 6.06218&amp;#x0A; 9 22 500 5 6.06218&amp;#x0A; 10 23 500 5 6.06218&amp;#x0A; 12 25 500 5 6.06218&amp;#x0A; 13 26 500 5 6.06218&amp;#x0A; 9 4 500 5 6.06218&amp;#x0A; 10 5 500 5 6.06218&amp;#x0A; 12 7 500 5 6.06218&amp;#x0A; 13 8 500 5 6.06218&amp;#x0A; 18 13 500 5 6.06218&amp;#x0A; 19 14 500 5 6.06218&amp;#x0A; 21 16 500 5 6.06218&amp;#x0A; 22 17 500 5 6.06218&amp;#x0A; 3 10 500 5 6.06218&amp;#x0A; 4 11 500 5 6.06218&amp;#x0A; 6 13 500 5 6.06218&amp;#x0A; 7 14 500 5 6.06218&amp;#x0A; 12 19 500 5 6.06218&amp;#x0A; 13 20 500 5 6.06218&amp;#x0A; 15 22 500 5 6.06218&amp;#x0A; 16 23 500 5 6.06218&amp;#x0A; 12 1 500 5 6.06218&amp;#x0A; 13 2 500 5 6.06218&amp;#x0A; 15 4 500 5 6.06218&amp;#x0A; 16 5 500 5 6.06218&amp;#x0A; 21 10 500 5 6.06218&amp;#x0A; 22 11 500 5 6.06218&amp;#x0A; 24 13 500 5 6.06218&amp;#x0A; 25 14 500 5 6.06218&amp;#x0A; 0 12 500 5 4.94975&amp;#x0A; 1 13 500 5 4.94975&amp;#x0A; 2 14 500 5 4.94975&amp;#x0A; 3 15 500 5 4.94975&amp;#x0A; 4 16 500 5 4.94975&amp;#x0A; 5 17 500 5 4.94975&amp;#x0A; 9 21 500 5 4.94975&amp;#x0A; 10 22 500 5 4.94975&amp;#x0A; 11 23 500 5 4.94975&amp;#x0A; 12 24 500 5 4.94975&amp;#x0A; 13 25 500 5 4.94975&amp;#x0A; 14 26 500 5 4.94975&amp;#x0A; 3 9 500 5 4.94975&amp;#x0A; 4 10 500 5 4.94975&amp;#x0A; 5 11 500 5 4.94975&amp;#x0A; 6 12 500 5 4.94975&amp;#x0A; 7 13 500 5 4.94975&amp;#x0A; 8 14 500 5 4.94975&amp;#x0A; 12 18 500 5 4.94975&amp;#x0A; 13 19 500 5 4.94975&amp;#x0A; 14 20 500 5 4.94975&amp;#x0A; 15 21 500 5 4.94975&amp;#x0A; 16 22 500 5 4.94975&amp;#x0A; 17 23 500 5 4.94975&amp;#x0A; 0 10 500 5 4.94975&amp;#x0A; 1 11 500 5 4.94975&amp;#x0A; 3 13 500 5 4.94975&amp;#x0A; 4 14 500 5 4.94975&amp;#x0A; 6 16 500 5 4.94975&amp;#x0A; 7 17 500 5 4.94975&amp;#x0A; 9 19 500 5 4.94975&amp;#x0A; 10 20 500 5 4.94975&amp;#x0A; 12 22 500 5 4.94975&amp;#x0A; 13 23 500 5 4.94975&amp;#x0A; 15 25 500 5 4.94975&amp;#x0A; 16 26 500 5 4.94975&amp;#x0A; 9 1 500 5 4.94975&amp;#x0A; 10 2 500 5 4.94975&amp;#x0A; 12 4 500 5 4.94975&amp;#x0A; 13 5 500 5 4.94975&amp;#x0A; 15 7 500 5 4.94975&amp;#x0A; 16 8 500 5 4.94975&amp;#x0A; 18 10 500 5 4.94975&amp;#x0A; 19 11 500 5 4.94975&amp;#x0A; 21 13 500 5 4.94975&amp;#x0A; 22 14 500 5 4.94975&amp;#x0A; 24 16 500 5 4.94975&amp;#x0A; 25 17 500 5 4.94975&amp;#x0A; 0 4 500 5 4.94975&amp;#x0A; 1 5 500 5 4.94975&amp;#x0A; 3 7 500 5 4.94975&amp;#x0A; 4 8 500 5 4.94975&amp;#x0A; 9 13 500 5 4.94975&amp;#x0A; 10 14 500 5 4.94975&amp;#x0A; 12 16 500 5 4.94975&amp;#x0A; 13 17 500 5 4.94975&amp;#x0A; 18 22 500 5 4.94975&amp;#x0A; 19 23 500 5 4.94975&amp;#x0A; 21 25 500 5 4.94975&amp;#x0A; 22 26 500 5 4.94975&amp;#x0A; 3 1 500 5 4.94975&amp;#x0A; 4 2 500 5 4.94975&amp;#x0A; 6 4 500 5 4.94975&amp;#x0A; 7 5 500 5 4.94975&amp;#x0A; 12 10 500 5 4.94975&amp;#x0A; 13 11 500 5 4.94975&amp;#x0A; 15 13 500 5 4.94975&amp;#x0A; 16 14 500 5 4.94975&amp;#x0A; 21 19 500 5 4.94975&amp;#x0A; 22 20 500 5 4.94975&amp;#x0A; 24 22 500 5 4.94975&amp;#x0A; 25 23 500 5 4.94975&amp;#x0A;\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"M5\" gravity=\"0 -9.81 0\"&gt;\n            &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/smCube27.msh\" /&gt;\n            &lt;MechanicalObject src=\"@loader\" template=\"Vec3\" name=\"default14\" translation=\"0 0 42\" restScale=\"1\" showObject=\"1\" /&gt;\n            &lt;UniformMass name=\"default15\" vertexMass=\"0.1\" /&gt;\n            &lt;Monitor template=\"Vec3\" name=\"trajectories_8-16-24\" listening=\"1\" indices=\"8 16 24\" showPositions=\"0\" PositionsColor=\"1 1 0 1\" VelocitiesColor=\"1 1 0 1\" showForces=\"0\" ForcesColor=\"0 1 1 1\" showMinThreshold=\"0.01\" showTrajectories=\"1\" TrajectoriesPrecision=\"0.1\" TrajectoriesColor=\"1 0 1 1\" sizeFactor=\"1\" /&gt;\n            &lt;StiffSpringForceField template=\"Vec3\" name=\"InternalSprings5\" spring=\"0 9 100 5 3.5&amp;#x0A; 1 10 500 5 3.5&amp;#x0A; 2 11 500 5 3.5&amp;#x0A; 3 12 500 5 3.5&amp;#x0A; 4 13 500 5 3.5&amp;#x0A; 5 14 500 5 3.5&amp;#x0A; 6 15 500 5 3.5&amp;#x0A; 7 16 500 5 3.5&amp;#x0A; 8 17 500 5 3.5&amp;#x0A; 9 18 500 5 3.5&amp;#x0A; 10 19 500 5 3.5&amp;#x0A; 11 20 500 5 3.5&amp;#x0A; 12 21 500 5 3.5&amp;#x0A; 13 22 500 5 3.5&amp;#x0A; 14 23 500 5 3.5&amp;#x0A; 15 24 500 5 3.5&amp;#x0A; 16 25 500 5 3.5&amp;#x0A; 17 26 500 5 3.5&amp;#x0A; 0 3 500 5 3.5&amp;#x0A; 1 4 500 5 3.5&amp;#x0A; 2 5 500 5 3.5&amp;#x0A; 3 6 500 5 3.5&amp;#x0A; 4 7 500 5 3.5&amp;#x0A; 5 8 500 5 3.5&amp;#x0A; 9 12 500 5 3.5&amp;#x0A; 10 13 500 5 3.5&amp;#x0A; 11 14 500 5 3.5&amp;#x0A; 12 15 500 5 3.5&amp;#x0A; 13 16 500 5 3.5&amp;#x0A; 14 17 500 5 3.5&amp;#x0A; 18 21 500 5 3.5&amp;#x0A; 19 22 500 5 3.5&amp;#x0A; 20 23 500 5 3.5&amp;#x0A; 21 24 500 5 3.5&amp;#x0A; 22 25 500 5 3.5&amp;#x0A; 23 26 500 5 3.5&amp;#x0A; 0 1 500 5 3.5&amp;#x0A; 1 2 500 5 3.5&amp;#x0A; 3 4 500 5 3.5&amp;#x0A; 4 5 500 5 3.5&amp;#x0A; 6 7 500 5 3.5&amp;#x0A; 7 8 500 5 3.5&amp;#x0A; 9 10 500 5 3.5&amp;#x0A; 10 11 500 5 3.5&amp;#x0A; 12 13 500 5 3.5&amp;#x0A; 13 14 500 5 3.5&amp;#x0A; 15 16 500 5 3.5&amp;#x0A; 16 17 500 5 3.5&amp;#x0A; 18 19 500 5 3.5&amp;#x0A; 19 20 500 5 3.5&amp;#x0A; 21 22 500 5 3.5&amp;#x0A; 22 23 500 5 3.5&amp;#x0A; 24 25 500 5 3.5&amp;#x0A; 25 26 100 5 3.5&amp;#x0A; 0 13 500 5 6.06218&amp;#x0A; 1 14 500 5 6.06218&amp;#x0A; 3 16 500 5 6.06218&amp;#x0A; 4 17 500 5 6.06218&amp;#x0A; 9 22 500 5 6.06218&amp;#x0A; 10 23 500 5 6.06218&amp;#x0A; 12 25 500 5 6.06218&amp;#x0A; 13 26 500 5 6.06218&amp;#x0A; 9 4 500 5 6.06218&amp;#x0A; 10 5 500 5 6.06218&amp;#x0A; 12 7 500 5 6.06218&amp;#x0A; 13 8 500 5 6.06218&amp;#x0A; 18 13 500 5 6.06218&amp;#x0A; 19 14 500 5 6.06218&amp;#x0A; 21 16 500 5 6.06218&amp;#x0A; 22 17 500 5 6.06218&amp;#x0A; 3 10 500 5 6.06218&amp;#x0A; 4 11 500 5 6.06218&amp;#x0A; 6 13 500 5 6.06218&amp;#x0A; 7 14 500 5 6.06218&amp;#x0A; 12 19 500 5 6.06218&amp;#x0A; 13 20 500 5 6.06218&amp;#x0A; 15 22 500 5 6.06218&amp;#x0A; 16 23 500 5 6.06218&amp;#x0A; 12 1 500 5 6.06218&amp;#x0A; 13 2 500 5 6.06218&amp;#x0A; 15 4 500 5 6.06218&amp;#x0A; 16 5 500 5 6.06218&amp;#x0A; 21 10 500 5 6.06218&amp;#x0A; 22 11 500 5 6.06218&amp;#x0A; 24 13 500 5 6.06218&amp;#x0A; 25 14 500 5 6.06218&amp;#x0A; 0 12 500 5 4.94975&amp;#x0A; 1 13 500 5 4.94975&amp;#x0A; 2 14 500 5 4.94975&amp;#x0A; 3 15 500 5 4.94975&amp;#x0A; 4 16 500 5 4.94975&amp;#x0A; 5 17 500 5 4.94975&amp;#x0A; 9 21 500 5 4.94975&amp;#x0A; 10 22 500 5 4.94975&amp;#x0A; 11 23 500 5 4.94975&amp;#x0A; 12 24 500 5 4.94975&amp;#x0A; 13 25 500 5 4.94975&amp;#x0A; 14 26 500 5 4.94975&amp;#x0A; 3 9 500 5 4.94975&amp;#x0A; 4 10 500 5 4.94975&amp;#x0A; 5 11 500 5 4.94975&amp;#x0A; 6 12 500 5 4.94975&amp;#x0A; 7 13 500 5 4.94975&amp;#x0A; 8 14 500 5 4.94975&amp;#x0A; 12 18 500 5 4.94975&amp;#x0A; 13 19 500 5 4.94975&amp;#x0A; 14 20 500 5 4.94975&amp;#x0A; 15 21 500 5 4.94975&amp;#x0A; 16 22 500 5 4.94975&amp;#x0A; 17 23 500 5 4.94975&amp;#x0A; 0 10 500 5 4.94975&amp;#x0A; 1 11 500 5 4.94975&amp;#x0A; 3 13 500 5 4.94975&amp;#x0A; 4 14 500 5 4.94975&amp;#x0A; 6 16 500 5 4.94975&amp;#x0A; 7 17 500 5 4.94975&amp;#x0A; 9 19 500 5 4.94975&amp;#x0A; 10 20 500 5 4.94975&amp;#x0A; 12 22 500 5 4.94975&amp;#x0A; 13 23 500 5 4.94975&amp;#x0A; 15 25 500 5 4.94975&amp;#x0A; 16 26 500 5 4.94975&amp;#x0A; 9 1 500 5 4.94975&amp;#x0A; 10 2 500 5 4.94975&amp;#x0A; 12 4 500 5 4.94975&amp;#x0A; 13 5 500 5 4.94975&amp;#x0A; 15 7 500 5 4.94975&amp;#x0A; 16 8 500 5 4.94975&amp;#x0A; 18 10 500 5 4.94975&amp;#x0A; 19 11 500 5 4.94975&amp;#x0A; 21 13 500 5 4.94975&amp;#x0A; 22 14 500 5 4.94975&amp;#x0A; 24 16 500 5 4.94975&amp;#x0A; 25 17 500 5 4.94975&amp;#x0A; 0 4 500 5 4.94975&amp;#x0A; 1 5 500 5 4.94975&amp;#x0A; 3 7 500 5 4.94975&amp;#x0A; 4 8 500 5 4.94975&amp;#x0A; 9 13 500 5 4.94975&amp;#x0A; 10 14 500 5 4.94975&amp;#x0A; 12 16 500 5 4.94975&amp;#x0A; 13 17 500 5 4.94975&amp;#x0A; 18 22 500 5 4.94975&amp;#x0A; 19 23 500 5 4.94975&amp;#x0A; 21 25 500 5 4.94975&amp;#x0A; 22 26 500 5 4.94975&amp;#x0A; 3 1 500 5 4.94975&amp;#x0A; 4 2 500 5 4.94975&amp;#x0A; 6 4 500 5 4.94975&amp;#x0A; 7 5 500 5 4.94975&amp;#x0A; 12 10 500 5 4.94975&amp;#x0A; 13 11 500 5 4.94975&amp;#x0A; 15 13 500 5 4.94975&amp;#x0A; 16 14 500 5 4.94975&amp;#x0A; 21 19 500 5 4.94975&amp;#x0A; 22 20 500 5 4.94975&amp;#x0A; 24 22 500 5 4.94975&amp;#x0A; 25 23 500 5 4.94975&amp;#x0A;\" /&gt;\n        &lt;/Node&gt;\n        &lt;StiffSpringForceField template=\"Vec3\" name=\"ExternalSprings1\" object1=\"@M1\" object2=\"@M2\" spring=\"2 0 500 5 3.5&amp;#x0A; 5 3 500 5 3.5&amp;#x0A; 8 6 500 5 3.5&amp;#x0A; 11 9 500 5 3.5&amp;#x0A; 14 12 500 5 3.5&amp;#x0A; 17 15 500 5 3.5&amp;#x0A; 20 18 500 5 3.5&amp;#x0A; 23 21 500 5 3.5&amp;#x0A; 26 24 500 5 3.5&amp;#x0A; 14 0 500 5 6.06218&amp;#x0A; 17 3 500 5 6.06218&amp;#x0A; 23 9 500 5 6.06218&amp;#x0A; 26 12 500 5 6.06218&amp;#x0A; 5 9 500 5 6.06218&amp;#x0A; 8 12 500 5 6.06218&amp;#x0A; 14 18 500 5 6.06218&amp;#x0A; 17 21 500 5 6.06218&amp;#x0A; 11 3 500 5 6.06218&amp;#x0A; 14 6 500 5 6.06218&amp;#x0A; 20 12 500 5 6.06218&amp;#x0A; 23 15 500 5 6.06218&amp;#x0A; 2 12 500 5 6.06218&amp;#x0A; 5 15 500 5 6.06218&amp;#x0A; 11 21 500 5 6.06218&amp;#x0A; 14 24 500 5 6.06218&amp;#x0A; 11 0 500 5 4.94975&amp;#x0A; 14 3 500 5 4.94975&amp;#x0A; 17 6 500 5 4.94975&amp;#x0A; 20 9 500 5 4.94975&amp;#x0A; 23 12 500 5 4.94975&amp;#x0A; 26 15 500 5 4.94975&amp;#x0A; 2 9 500 5 4.94975&amp;#x0A; 5 12 500 5 4.94975&amp;#x0A; 8 15 500 5 4.94975&amp;#x0A; 11 18 500 5 4.94975&amp;#x0A; 14 21 500 5 4.94975&amp;#x0A; 17 24 500 5 4.94975&amp;#x0A; 5 0 500 5 4.94975&amp;#x0A; 8 3 500 5 4.94975&amp;#x0A; 14 9 500 5 4.94975&amp;#x0A; 17 12 500 5 4.94975&amp;#x0A; 23 18 500 5 4.94975&amp;#x0A; 26 21 500 5 4.94975&amp;#x0A; 2 3 500 5 4.94975&amp;#x0A; 5 6 500 5 4.94975&amp;#x0A; 11 12 500 5 4.94975&amp;#x0A; 14 15 500 5 4.94975&amp;#x0A; 20 21 500 5 4.94975&amp;#x0A; 23 24 500 5 4.94975&amp;#x0A;\" /&gt;\n        &lt;StiffSpringForceField template=\"Vec3\" name=\"ExternalSprings2\" object1=\"@M2\" object2=\"@M3\" spring=\"2 0 500 5 3.5&amp;#x0A; 5 3 500 5 3.5&amp;#x0A; 8 6 500 5 3.5&amp;#x0A; 11 9 500 5 3.5&amp;#x0A; 14 12 500 5 3.5&amp;#x0A; 17 15 500 5 3.5&amp;#x0A; 20 18 500 5 3.5&amp;#x0A; 23 21 500 5 3.5&amp;#x0A; 26 24 500 5 3.5&amp;#x0A; 14 0 500 5 6.06218&amp;#x0A; 17 3 500 5 6.06218&amp;#x0A; 23 9 500 5 6.06218&amp;#x0A; 26 12 500 5 6.06218&amp;#x0A; 5 9 500 5 6.06218&amp;#x0A; 8 12 500 5 6.06218&amp;#x0A; 14 18 500 5 6.06218&amp;#x0A; 17 21 500 5 6.06218&amp;#x0A; 11 3 500 5 6.06218&amp;#x0A; 14 6 500 5 6.06218&amp;#x0A; 20 12 500 5 6.06218&amp;#x0A; 23 15 500 5 6.06218&amp;#x0A; 2 12 500 5 6.06218&amp;#x0A; 5 15 500 5 6.06218&amp;#x0A; 11 21 500 5 6.06218&amp;#x0A; 14 24 500 5 6.06218&amp;#x0A; 11 0 500 5 4.94975&amp;#x0A; 14 3 500 5 4.94975&amp;#x0A; 17 6 500 5 4.94975&amp;#x0A; 20 9 500 5 4.94975&amp;#x0A; 23 12 500 5 4.94975&amp;#x0A; 26 15 500 5 4.94975&amp;#x0A; 2 9 500 5 4.94975&amp;#x0A; 5 12 500 5 4.94975&amp;#x0A; 8 15 500 5 4.94975&amp;#x0A; 11 18 500 5 4.94975&amp;#x0A; 14 21 500 5 4.94975&amp;#x0A; 17 24 500 5 4.94975&amp;#x0A; 5 0 500 5 4.94975&amp;#x0A; 8 3 500 5 4.94975&amp;#x0A; 14 9 500 5 4.94975&amp;#x0A; 17 12 500 5 4.94975&amp;#x0A; 23 18 500 5 4.94975&amp;#x0A; 26 21 500 5 4.94975&amp;#x0A; 2 3 500 5 4.94975&amp;#x0A; 5 6 500 5 4.94975&amp;#x0A; 11 12 500 5 4.94975&amp;#x0A; 14 15 500 5 4.94975&amp;#x0A; 20 21 500 5 4.94975&amp;#x0A; 23 24 500 5 4.94975&amp;#x0A;\" /&gt;\n        &lt;StiffSpringForceField template=\"Vec3\" name=\"ExternalSprings3\" object1=\"@M3\" object2=\"@M4\" spring=\"2 0 500 5 3.5&amp;#x0A; 5 3 500 5 3.5&amp;#x0A; 8 6 500 5 3.5&amp;#x0A; 11 9 500 5 3.5&amp;#x0A; 14 12 500 5 3.5&amp;#x0A; 17 15 500 5 3.5&amp;#x0A; 20 18 500 5 3.5&amp;#x0A; 23 21 500 5 3.5&amp;#x0A; 26 24 500 5 3.5&amp;#x0A; 14 0 500 5 6.06218&amp;#x0A; 17 3 500 5 6.06218&amp;#x0A; 23 9 500 5 6.06218&amp;#x0A; 26 12 500 5 6.06218&amp;#x0A; 5 9 500 5 6.06218&amp;#x0A; 8 12 500 5 6.06218&amp;#x0A; 14 18 500 5 6.06218&amp;#x0A; 17 21 500 5 6.06218&amp;#x0A; 11 3 500 5 6.06218&amp;#x0A; 14 6 500 5 6.06218&amp;#x0A; 20 12 500 5 6.06218&amp;#x0A; 23 15 500 5 6.06218&amp;#x0A; 2 12 500 5 6.06218&amp;#x0A; 5 15 500 5 6.06218&amp;#x0A; 11 21 500 5 6.06218&amp;#x0A; 14 24 500 5 6.06218&amp;#x0A; 11 0 500 5 4.94975&amp;#x0A; 14 3 500 5 4.94975&amp;#x0A; 17 6 500 5 4.94975&amp;#x0A; 20 9 500 5 4.94975&amp;#x0A; 23 12 500 5 4.94975&amp;#x0A; 26 15 500 5 4.94975&amp;#x0A; 2 9 500 5 4.94975&amp;#x0A; 5 12 500 5 4.94975&amp;#x0A; 8 15 500 5 4.94975&amp;#x0A; 11 18 500 5 4.94975&amp;#x0A; 14 21 500 5 4.94975&amp;#x0A; 17 24 500 5 4.94975&amp;#x0A; 5 0 500 5 4.94975&amp;#x0A; 8 3 500 5 4.94975&amp;#x0A; 14 9 500 5 4.94975&amp;#x0A; 17 12 500 5 4.94975&amp;#x0A; 23 18 500 5 4.94975&amp;#x0A; 26 21 500 5 4.94975&amp;#x0A; 2 3 500 5 4.94975&amp;#x0A; 5 6 500 5 4.94975&amp;#x0A; 11 12 500 5 4.94975&amp;#x0A; 14 15 500 5 4.94975&amp;#x0A; 20 21 500 5 4.94975&amp;#x0A; 23 24 500 5 4.94975&amp;#x0A;\" /&gt;\n        &lt;StiffSpringForceField template=\"Vec3\" name=\"ExternalSprings4\" object1=\"@M4\" object2=\"@M5\" spring=\"2 0 500 5 3.5&amp;#x0A; 5 3 500 5 3.5&amp;#x0A; 8 6 500 5 3.5&amp;#x0A; 11 9 500 5 3.5&amp;#x0A; 14 12 500 5 3.5&amp;#x0A; 17 15 500 5 3.5&amp;#x0A; 20 18 500 5 3.5&amp;#x0A; 23 21 500 5 3.5&amp;#x0A; 26 24 500 5 3.5&amp;#x0A; 14 0 500 5 6.06218&amp;#x0A; 17 3 500 5 6.06218&amp;#x0A; 23 9 500 5 6.06218&amp;#x0A; 26 12 500 5 6.06218&amp;#x0A; 5 9 500 5 6.06218&amp;#x0A; 8 12 500 5 6.06218&amp;#x0A; 14 18 500 5 6.06218&amp;#x0A; 17 21 500 5 6.06218&amp;#x0A; 11 3 500 5 6.06218&amp;#x0A; 14 6 500 5 6.06218&amp;#x0A; 20 12 500 5 6.06218&amp;#x0A; 23 15 500 5 6.06218&amp;#x0A; 2 12 500 5 6.06218&amp;#x0A; 5 15 500 5 6.06218&amp;#x0A; 11 21 500 5 6.06218&amp;#x0A; 14 24 500 5 6.06218&amp;#x0A; 11 0 500 5 4.94975&amp;#x0A; 14 3 500 5 4.94975&amp;#x0A; 17 6 500 5 4.94975&amp;#x0A; 20 9 500 5 4.94975&amp;#x0A; 23 12 500 5 4.94975&amp;#x0A; 26 15 500 5 4.94975&amp;#x0A; 2 9 500 5 4.94975&amp;#x0A; 5 12 500 5 4.94975&amp;#x0A; 8 15 500 5 4.94975&amp;#x0A; 11 18 500 5 4.94975&amp;#x0A; 14 21 500 5 4.94975&amp;#x0A; 17 24 500 5 4.94975&amp;#x0A; 5 0 500 5 4.94975&amp;#x0A; 8 3 500 5 4.94975&amp;#x0A; 14 9 500 5 4.94975&amp;#x0A; 17 12 500 5 4.94975&amp;#x0A; 23 18 500 5 4.94975&amp;#x0A; 26 21 500 5 4.94975&amp;#x0A; 2 3 500 5 4.94975&amp;#x0A; 5 6 500 5 4.94975&amp;#x0A; 11 12 500 5 4.94975&amp;#x0A; 14 15 500 5 4.94975&amp;#x0A; 20 21 500 5 4.94975&amp;#x0A; 23 24 500 5 4.94975&amp;#x0A;\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>```python def createScene(rootNode):</p> <pre><code>root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.0005\")\nroot.addObject('VisualStyle', displayFlags=\"showBehaviorModels showForceFields showCollisionModels showMappings\")\nroot.addObject('DefaultAnimationLoop')\n\nPoutre1 = root.addChild('Poutre1', gravity=\"0 -9.81 0\")\nPoutre1.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\nPoutre1.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\nPoutre1.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\nPoutre1.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Forward\")\nPoutre1.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\nPoutre1.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\nPoutre1.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\nPoutre1.addObject('RequiredPlugin', name=\"SofaValidation\")\nPoutre1.addObject('EulerExplicitSolver', name=\"Explicit\", printLog=\"0\")\n\nM1 = Poutre1.addChild('M1', gravity=\"0 -9.81 0\")\nM1.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\")\nM1.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"default1\", restScale=\"1\", showObject=\"1\")\nM1.addObject('UniformMass', name=\"default2\", vertexMass=\"0.1\")\nM1.addObject('FixedProjectiveConstraint', template=\"Vec3\", name=\"default3\", indices=\"0 3 6 9 12 15 18 21 24\")\nM1.addObject('Monitor', template=\"Vec3\", name=\"velocities_2-11-20\", listening=\"1\", indices=\"2 11 20\", showPositions=\"0\", PositionsColor=\"1 1 0 1\", showVelocities=\"1\", VelocitiesColor=\"1 1 0 1\", ForcesColor=\"1 1 0 1\", showMinThreshold=\"0.01\", TrajectoriesPrecision=\"0.1\", TrajectoriesColor=\"1 1 0 1\")\nM1.addObject('Monitor', template=\"Vec3\", name=\"positions_8-16-24\", listening=\"1\", indices=\"8 16 24\", showPositions=\"1\", PositionsColor=\"1 1 0 1\", VelocitiesColor=\"1 1 0 1\", ForcesColor=\"1 1 0 1\", showMinThreshold=\"0.01\", TrajectoriesPrecision=\"0.1\", TrajectoriesColor=\"1 1 0 1\")\nM1.addObject('StiffSpringForceField', template=\"Vec3\", name=\"InternalSprings1\", spring=\"0 9 100 5 3.5\n</code></pre> <p>1 10 500 5 3.5  2 11 500 5 3.5  3 12 500 5 3.5  4 13 500 5 3.5  5 14 500 5 3.5  6 15 500 5 3.5  7 16 500 5 3.5  8 17 500 5 3.5  9 18 500 5 3.5  10 19 500 5 3.5  11 20 500 5 3.5  12 21 500 5 3.5  13 22 500 5 3.5  14 23 500 5 3.5  15 24 500 5 3.5  16 25 500 5 3.5  17 26 500 5 3.5  0 3 500 5 3.5  1 4 500 5 3.5  2 5 500 5 3.5  3 6 500 5 3.5  4 7 500 5 3.5  5 8 500 5 3.5  9 12 500 5 3.5  10 13 500 5 3.5  11 14 500 5 3.5  12 15 500 5 3.5  13 16 500 5 3.5  14 17 500 5 3.5  18 21 500 5 3.5  19 22 500 5 3.5  20 23 500 5 3.5  21 24 500 5 3.5  22 25 500 5 3.5  23 26 500 5 3.5  0 1 500 5 3.5  1 2 500 5 3.5  3 4 500 5 3.5  4 5 500 5 3.5  6 7 500 5 3.5  7 8 500 5 3.5  9 10 500 5 3.5  10 11 500 5 3.5  12 13 500 5 3.5  13 14 500 5 3.5  15 16 500 5 3.5  16 17 500 5 3.5  18 19 500 5 3.5  19 20 500 5 3.5  21 22 500 5 3.5  22 23 500 5 3.5  24 25 500 5 3.5  25 26 100 5 3.5  0 13 500 5 6.06218  1 14 500 5 6.06218  3 16 500 5 6.06218  4 17 500 5 6.06218  9 22 500 5 6.06218  10 23 500 5 6.06218  12 25 500 5 6.06218  13 26 500 5 6.06218  9 4 500 5 6.06218  10 5 500 5 6.06218  12 7 500 5 6.06218  13 8 500 5 6.06218  18 13 500 5 6.06218  19 14 500 5 6.06218  21 16 500 5 6.06218  22 17 500 5 6.06218  3 10 500 5 6.06218  4 11 500 5 6.06218  6 13 500 5 6.06218  7 14 500 5 6.06218  12 19 500 5 6.06218  13 20 500 5 6.06218  15 22 500 5 6.06218  16 23 500 5 6.06218  12 1 500 5 6.06218  13 2 500 5 6.06218  15 4 500 5 6.06218  16 5 500 5 6.06218  21 10 500 5 6.06218  22 11 500 5 6.06218  24 13 500 5 6.06218  25 14 500 5 6.06218  0 12 500 5 4.94975  1 13 500 5 4.94975  2 14 500 5 4.94975  3 15 500 5 4.94975  4 16 500 5 4.94975  5 17 500 5 4.94975  9 21 500 5 4.94975  10 22 500 5 4.94975  11 23 500 5 4.94975  12 24 500 5 4.94975  13 25 500 5 4.94975  14 26 500 5 4.94975  3 9 500 5 4.94975  4 10 500 5 4.94975  5 11 500 5 4.94975  6 12 500 5 4.94975  7 13 500 5 4.94975  8 14 500 5 4.94975  12 18 500 5 4.94975  13 19 500 5 4.94975  14 20 500 5 4.94975  15 21 500 5 4.94975  16 22 500 5 4.94975  17 23 500 5 4.94975  0 10 500 5 4.94975  1 11 500 5 4.94975  3 13 500 5 4.94975  4 14 500 5 4.94975  6 16 500 5 4.94975  7 17 500 5 4.94975  9 19 500 5 4.94975  10 20 500 5 4.94975  12 22 500 5 4.94975  13 23 500 5 4.94975  15 25 500 5 4.94975  16 26 500 5 4.94975  9 1 500 5 4.94975  10 2 500 5 4.94975  12 4 500 5 4.94975  13 5 500 5 4.94975  15 7 500 5 4.94975  16 8 500 5 4.94975  18 10 500 5 4.94975  19 11 500 5 4.94975  21 13 500 5 4.94975  22 14 500 5 4.94975  24 16 500 5 4.94975  25 17 500 5 4.94975  0 4 500 5 4.94975  1 5 500 5 4.94975  3 7 500 5 4.94975  4 8 500 5 4.94975  9 13 500 5 4.94975  10 14 500 5 4.94975  12 16 500 5 4.94975  13 17 500 5 4.94975  18 22 500 5 4.94975  19 23 500 5 4.94975  21 25 500 5 4.94975  22 26 500 5 4.94975  3 1 500 5 4.94975  4 2 500 5 4.94975  6 4 500 5 4.94975  7 5 500 5 4.94975  12 10 500 5 4.94975  13 11 500 5 4.94975  15 13 500 5 4.94975  16 14 500 5 4.94975  21 19 500 5 4.94975  22 20 500 5 4.94975  24 22 500 5 4.94975  25 23 500 5 4.94975 \")</p> <pre><code>    M2 = Poutre1.addChild('M2', gravity=\"0 -9.81 0\")\n    M2.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\")\n    M2.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"default5\", translation=\"0 0 10.5\", restScale=\"1\")\n    M2.addObject('Monitor', template=\"Vec3\", name=\"positions_8-16-24\", listening=\"1\", indices=\"8 16 24\", showPositions=\"1\", PositionsColor=\"1 1 0 1\", VelocitiesColor=\"1 1 0 1\", ForcesColor=\"1 1 0 1\", showMinThreshold=\"0.01\", TrajectoriesPrecision=\"0.1\", TrajectoriesColor=\"1 1 0 1\")\n    M2.addObject('UniformMass', name=\"default6\", vertexMass=\"0.1\")\n    M2.addObject('StiffSpringForceField', template=\"Vec3\", name=\"InternalSprings2\", spring=\"0 9 100 5 3.5\n</code></pre> <p>1 10 500 5 3.5  2 11 500 5 3.5  3 12 500 5 3.5  4 13 500 5 3.5  5 14 500 5 3.5  6 15 500 5 3.5  7 16 500 5 3.5  8 17 500 5 3.5  9 18 500 5 3.5  10 19 500 5 3.5  11 20 500 5 3.5  12 21 500 5 3.5  13 22 500 5 3.5  14 23 500 5 3.5  15 24 500 5 3.5  16 25 500 5 3.5  17 26 500 5 3.5  0 3 500 5 3.5  1 4 500 5 3.5  2 5 500 5 3.5  3 6 500 5 3.5  4 7 500 5 3.5  5 8 500 5 3.5  9 12 500 5 3.5  10 13 500 5 3.5  11 14 500 5 3.5  12 15 500 5 3.5  13 16 500 5 3.5  14 17 500 5 3.5  18 21 500 5 3.5  19 22 500 5 3.5  20 23 500 5 3.5  21 24 500 5 3.5  22 25 500 5 3.5  23 26 500 5 3.5  0 1 500 5 3.5  1 2 500 5 3.5  3 4 500 5 3.5  4 5 500 5 3.5  6 7 500 5 3.5  7 8 500 5 3.5  9 10 500 5 3.5  10 11 500 5 3.5  12 13 500 5 3.5  13 14 500 5 3.5  15 16 500 5 3.5  16 17 500 5 3.5  18 19 500 5 3.5  19 20 500 5 3.5  21 22 500 5 3.5  22 23 500 5 3.5  24 25 500 5 3.5  25 26 100 5 3.5  0 13 500 5 6.06218  1 14 500 5 6.06218  3 16 500 5 6.06218  4 17 500 5 6.06218  9 22 500 5 6.06218  10 23 500 5 6.06218  12 25 500 5 6.06218  13 26 500 5 6.06218  9 4 500 5 6.06218  10 5 500 5 6.06218  12 7 500 5 6.06218  13 8 500 5 6.06218  18 13 500 5 6.06218  19 14 500 5 6.06218  21 16 500 5 6.06218  22 17 500 5 6.06218  3 10 500 5 6.06218  4 11 500 5 6.06218  6 13 500 5 6.06218  7 14 500 5 6.06218  12 19 500 5 6.06218  13 20 500 5 6.06218  15 22 500 5 6.06218  16 23 500 5 6.06218  12 1 500 5 6.06218  13 2 500 5 6.06218  15 4 500 5 6.06218  16 5 500 5 6.06218  21 10 500 5 6.06218  22 11 500 5 6.06218  24 13 500 5 6.06218  25 14 500 5 6.06218  0 12 500 5 4.94975  1 13 500 5 4.94975  2 14 500 5 4.94975  3 15 500 5 4.94975  4 16 500 5 4.94975  5 17 500 5 4.94975  9 21 500 5 4.94975  10 22 500 5 4.94975  11 23 500 5 4.94975  12 24 500 5 4.94975  13 25 500 5 4.94975  14 26 500 5 4.94975  3 9 500 5 4.94975  4 10 500 5 4.94975  5 11 500 5 4.94975  6 12 500 5 4.94975  7 13 500 5 4.94975  8 14 500 5 4.94975  12 18 500 5 4.94975  13 19 500 5 4.94975  14 20 500 5 4.94975  15 21 500 5 4.94975  16 22 500 5 4.94975  17 23 500 5 4.94975  0 10 500 5 4.94975  1 11 500 5 4.94975  3 13 500 5 4.94975  4 14 500 5 4.94975  6 16 500 5 4.94975  7 17 500 5 4.94975  9 19 500 5 4.94975  10 20 500 5 4.94975  12 22 500 5 4.94975  13 23 500 5 4.94975  15 25 500 5 4.94975  16 26 500 5 4.94975  9 1 500 5 4.94975  10 2 500 5 4.94975  12 4 500 5 4.94975  13 5 500 5 4.94975  15 7 500 5 4.94975  16 8 500 5 4.94975  18 10 500 5 4.94975  19 11 500 5 4.94975  21 13 500 5 4.94975  22 14 500 5 4.94975  24 16 500 5 4.94975  25 17 500 5 4.94975  0 4 500 5 4.94975  1 5 500 5 4.94975  3 7 500 5 4.94975  4 8 500 5 4.94975  9 13 500 5 4.94975  10 14 500 5 4.94975  12 16 500 5 4.94975  13 17 500 5 4.94975  18 22 500 5 4.94975  19 23 500 5 4.94975  21 25 500 5 4.94975  22 26 500 5 4.94975  3 1 500 5 4.94975  4 2 500 5 4.94975  6 4 500 5 4.94975  7 5 500 5 4.94975  12 10 500 5 4.94975  13 11 500 5 4.94975  15 13 500 5 4.94975  16 14 500 5 4.94975  21 19 500 5 4.94975  22 20 500 5 4.94975  24 22 500 5 4.94975  25 23 500 5 4.94975 \")</p> <pre><code>    M3 = Poutre1.addChild('M3', gravity=\"0 -9.81 0\")\n    M3.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\")\n    M3.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"default8\", translation=\"0 0 21\", restScale=\"1\")\n    M3.addObject('Monitor', template=\"Vec3\", name=\"velocities_8-16-24\", listening=\"1\", indices=\"8 16 24\", showPositions=\"0\", PositionsColor=\"1 1 0 1\", showVelocities=\"1\", VelocitiesColor=\"1 1 0 1\", ForcesColor=\"1 1 0 1\", showMinThreshold=\"0.01\", TrajectoriesPrecision=\"0.1\", TrajectoriesColor=\"1 1 0 1\", sizeFactor=\"1\")\n    M3.addObject('UniformMass', name=\"default9\", vertexMass=\"0.1\")\n    M3.addObject('StiffSpringForceField', template=\"Vec3\", name=\"InternalSprings3\", spring=\"0 9 100 5 3.5\n</code></pre> <p>1 10 500 5 3.5  2 11 500 5 3.5  3 12 500 5 3.5  4 13 500 5 3.5  5 14 500 5 3.5  6 15 500 5 3.5  7 16 500 5 3.5  8 17 500 5 3.5  9 18 500 5 3.5  10 19 500 5 3.5  11 20 500 5 3.5  12 21 500 5 3.5  13 22 500 5 3.5  14 23 500 5 3.5  15 24 500 5 3.5  16 25 500 5 3.5  17 26 500 5 3.5  0 3 500 5 3.5  1 4 500 5 3.5  2 5 500 5 3.5  3 6 500 5 3.5  4 7 500 5 3.5  5 8 500 5 3.5  9 12 500 5 3.5  10 13 500 5 3.5  11 14 500 5 3.5  12 15 500 5 3.5  13 16 500 5 3.5  14 17 500 5 3.5  18 21 500 5 3.5  19 22 500 5 3.5  20 23 500 5 3.5  21 24 500 5 3.5  22 25 500 5 3.5  23 26 500 5 3.5  0 1 500 5 3.5  1 2 500 5 3.5  3 4 500 5 3.5  4 5 500 5 3.5  6 7 500 5 3.5  7 8 500 5 3.5  9 10 500 5 3.5  10 11 500 5 3.5  12 13 500 5 3.5  13 14 500 5 3.5  15 16 500 5 3.5  16 17 500 5 3.5  18 19 500 5 3.5  19 20 500 5 3.5  21 22 500 5 3.5  22 23 500 5 3.5  24 25 500 5 3.5  25 26 100 5 3.5  0 13 500 5 6.06218  1 14 500 5 6.06218  3 16 500 5 6.06218  4 17 500 5 6.06218  9 22 500 5 6.06218  10 23 500 5 6.06218  12 25 500 5 6.06218  13 26 500 5 6.06218  9 4 500 5 6.06218  10 5 500 5 6.06218  12 7 500 5 6.06218  13 8 500 5 6.06218  18 13 500 5 6.06218  19 14 500 5 6.06218  21 16 500 5 6.06218  22 17 500 5 6.06218  3 10 500 5 6.06218  4 11 500 5 6.06218  6 13 500 5 6.06218  7 14 500 5 6.06218  12 19 500 5 6.06218  13 20 500 5 6.06218  15 22 500 5 6.06218  16 23 500 5 6.06218  12 1 500 5 6.06218  13 2 500 5 6.06218  15 4 500 5 6.06218  16 5 500 5 6.06218  21 10 500 5 6.06218  22 11 500 5 6.06218  24 13 500 5 6.06218  25 14 500 5 6.06218  0 12 500 5 4.94975  1 13 500 5 4.94975  2 14 500 5 4.94975  3 15 500 5 4.94975  4 16 500 5 4.94975  5 17 500 5 4.94975  9 21 500 5 4.94975  10 22 500 5 4.94975  11 23 500 5 4.94975  12 24 500 5 4.94975  13 25 500 5 4.94975  14 26 500 5 4.94975  3 9 500 5 4.94975  4 10 500 5 4.94975  5 11 500 5 4.94975  6 12 500 5 4.94975  7 13 500 5 4.94975  8 14 500 5 4.94975  12 18 500 5 4.94975  13 19 500 5 4.94975  14 20 500 5 4.94975  15 21 500 5 4.94975  16 22 500 5 4.94975  17 23 500 5 4.94975  0 10 500 5 4.94975  1 11 500 5 4.94975  3 13 500 5 4.94975  4 14 500 5 4.94975  6 16 500 5 4.94975  7 17 500 5 4.94975  9 19 500 5 4.94975  10 20 500 5 4.94975  12 22 500 5 4.94975  13 23 500 5 4.94975  15 25 500 5 4.94975  16 26 500 5 4.94975  9 1 500 5 4.94975  10 2 500 5 4.94975  12 4 500 5 4.94975  13 5 500 5 4.94975  15 7 500 5 4.94975  16 8 500 5 4.94975  18 10 500 5 4.94975  19 11 500 5 4.94975  21 13 500 5 4.94975  22 14 500 5 4.94975  24 16 500 5 4.94975  25 17 500 5 4.94975  0 4 500 5 4.94975  1 5 500 5 4.94975  3 7 500 5 4.94975  4 8 500 5 4.94975  9 13 500 5 4.94975  10 14 500 5 4.94975  12 16 500 5 4.94975  13 17 500 5 4.94975  18 22 500 5 4.94975  19 23 500 5 4.94975  21 25 500 5 4.94975  22 26 500 5 4.94975  3 1 500 5 4.94975  4 2 500 5 4.94975  6 4 500 5 4.94975  7 5 500 5 4.94975  12 10 500 5 4.94975  13 11 500 5 4.94975  15 13 500 5 4.94975  16 14 500 5 4.94975  21 19 500 5 4.94975  22 20 500 5 4.94975  24 22 500 5 4.94975  25 23 500 5 4.94975 \")</p> <pre><code>    M4 = Poutre1.addChild('M4', gravity=\"0 -9.81 0\")\n    M4.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\")\n    M4.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"default11\", translation=\"0 0 31.5\", restScale=\"1\")\n    M4.addObject('UniformMass', name=\"default12\", vertexMass=\"0.1\")\n    M4.addObject('Monitor', template=\"Vec3\", name=\"forces_2-11-20\", listening=\"1\", indices=\"2 11 20\", showPositions=\"0\", PositionsColor=\"1 1 0 1\", showVelocities=\"0\", VelocitiesColor=\"1 1 0 1\", showForces=\"1\", ForcesColor=\"0 1 1 1\", showMinThreshold=\"0.01\", TrajectoriesPrecision=\"0.1\", TrajectoriesColor=\"1 1 0 1\", sizeFactor=\"1\")\n    M4.addObject('StiffSpringForceField', template=\"Vec3\", name=\"InternalSprings4\", spring=\"0 9 100 5 3.5\n</code></pre> <p>1 10 500 5 3.5  2 11 500 5 3.5  3 12 500 5 3.5  4 13 500 5 3.5  5 14 500 5 3.5  6 15 500 5 3.5  7 16 500 5 3.5  8 17 500 5 3.5  9 18 500 5 3.5  10 19 500 5 3.5  11 20 500 5 3.5  12 21 500 5 3.5  13 22 500 5 3.5  14 23 500 5 3.5  15 24 500 5 3.5  16 25 500 5 3.5  17 26 500 5 3.5  0 3 500 5 3.5  1 4 500 5 3.5  2 5 500 5 3.5  3 6 500 5 3.5  4 7 500 5 3.5  5 8 500 5 3.5  9 12 500 5 3.5  10 13 500 5 3.5  11 14 500 5 3.5  12 15 500 5 3.5  13 16 500 5 3.5  14 17 500 5 3.5  18 21 500 5 3.5  19 22 500 5 3.5  20 23 500 5 3.5  21 24 500 5 3.5  22 25 500 5 3.5  23 26 500 5 3.5  0 1 500 5 3.5  1 2 500 5 3.5  3 4 500 5 3.5  4 5 500 5 3.5  6 7 500 5 3.5  7 8 500 5 3.5  9 10 500 5 3.5  10 11 500 5 3.5  12 13 500 5 3.5  13 14 500 5 3.5  15 16 500 5 3.5  16 17 500 5 3.5  18 19 500 5 3.5  19 20 500 5 3.5  21 22 500 5 3.5  22 23 500 5 3.5  24 25 500 5 3.5  25 26 100 5 3.5  0 13 500 5 6.06218  1 14 500 5 6.06218  3 16 500 5 6.06218  4 17 500 5 6.06218  9 22 500 5 6.06218  10 23 500 5 6.06218  12 25 500 5 6.06218  13 26 500 5 6.06218  9 4 500 5 6.06218  10 5 500 5 6.06218  12 7 500 5 6.06218  13 8 500 5 6.06218  18 13 500 5 6.06218  19 14 500 5 6.06218  21 16 500 5 6.06218  22 17 500 5 6.06218  3 10 500 5 6.06218  4 11 500 5 6.06218  6 13 500 5 6.06218  7 14 500 5 6.06218  12 19 500 5 6.06218  13 20 500 5 6.06218  15 22 500 5 6.06218  16 23 500 5 6.06218  12 1 500 5 6.06218  13 2 500 5 6.06218  15 4 500 5 6.06218  16 5 500 5 6.06218  21 10 500 5 6.06218  22 11 500 5 6.06218  24 13 500 5 6.06218  25 14 500 5 6.06218  0 12 500 5 4.94975  1 13 500 5 4.94975  2 14 500 5 4.94975  3 15 500 5 4.94975  4 16 500 5 4.94975  5 17 500 5 4.94975  9 21 500 5 4.94975  10 22 500 5 4.94975  11 23 500 5 4.94975  12 24 500 5 4.94975  13 25 500 5 4.94975  14 26 500 5 4.94975  3 9 500 5 4.94975  4 10 500 5 4.94975  5 11 500 5 4.94975  6 12 500 5 4.94975  7 13 500 5 4.94975  8 14 500 5 4.94975  12 18 500 5 4.94975  13 19 500 5 4.94975  14 20 500 5 4.94975  15 21 500 5 4.94975  16 22 500 5 4.94975  17 23 500 5 4.94975  0 10 500 5 4.94975  1 11 500 5 4.94975  3 13 500 5 4.94975  4 14 500 5 4.94975  6 16 500 5 4.94975  7 17 500 5 4.94975  9 19 500 5 4.94975  10 20 500 5 4.94975  12 22 500 5 4.94975  13 23 500 5 4.94975  15 25 500 5 4.94975  16 26 500 5 4.94975  9 1 500 5 4.94975  10 2 500 5 4.94975  12 4 500 5 4.94975  13 5 500 5 4.94975  15 7 500 5 4.94975  16 8 500 5 4.94975  18 10 500 5 4.94975  19 11 500 5 4.94975  21 13 500 5 4.94975  22 14 500 5 4.94975  24 16 500 5 4.94975  25 17 500 5 4.94975  0 4 500 5 4.94975  1 5 500 5 4.94975  3 7 500 5 4.94975  4 8 500 5 4.94975  9 13 500 5 4.94975  10 14 500 5 4.94975  12 16 500 5 4.94975  13 17 500 5 4.94975  18 22 500 5 4.94975  19 23 500 5 4.94975  21 25 500 5 4.94975  22 26 500 5 4.94975  3 1 500 5 4.94975  4 2 500 5 4.94975  6 4 500 5 4.94975  7 5 500 5 4.94975  12 10 500 5 4.94975  13 11 500 5 4.94975  15 13 500 5 4.94975  16 14 500 5 4.94975  21 19 500 5 4.94975  22 20 500 5 4.94975  24 22 500 5 4.94975  25 23 500 5 4.94975 \")</p> <pre><code>    M5 = Poutre1.addChild('M5', gravity=\"0 -9.81 0\")\n    M5.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\")\n    M5.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3\", name=\"default14\", translation=\"0 0 42\", restScale=\"1\", showObject=\"1\")\n    M5.addObject('UniformMass', name=\"default15\", vertexMass=\"0.1\")\n    M5.addObject('Monitor', template=\"Vec3\", name=\"trajectories_8-16-24\", listening=\"1\", indices=\"8 16 24\", showPositions=\"0\", PositionsColor=\"1 1 0 1\", VelocitiesColor=\"1 1 0 1\", showForces=\"0\", ForcesColor=\"0 1 1 1\", showMinThreshold=\"0.01\", showTrajectories=\"1\", TrajectoriesPrecision=\"0.1\", TrajectoriesColor=\"1 0 1 1\", sizeFactor=\"1\")\n    M5.addObject('StiffSpringForceField', template=\"Vec3\", name=\"InternalSprings5\", spring=\"0 9 100 5 3.5\n</code></pre> <p>1 10 500 5 3.5  2 11 500 5 3.5  3 12 500 5 3.5  4 13 500 5 3.5  5 14 500 5 3.5  6 15 500 5 3.5  7 16 500 5 3.5  8 17 500 5 3.5  9 18 500 5 3.5  10 19 500 5 3.5  11 20 500 5 3.5  12 21 500 5 3.5  13 22 500 5 3.5  14 23 500 5 3.5  15 24 500 5 3.5  16 25 500 5 3.5  17 26 500 5 3.5  0 3 500 5 3.5  1 4 500 5 3.5  2 5 500 5 3.5  3 6 500 5 3.5  4 7 500 5 3.5  5 8 500 5 3.5  9 12 500 5 3.5  10 13 500 5 3.5  11 14 500 5 3.5  12 15 500 5 3.5  13 16 500 5 3.5  14 17 500 5 3.5  18 21 500 5 3.5  19 22 500 5 3.5  20 23 500 5 3.5  21 24 500 5 3.5  22 25 500 5 3.5  23 26 500 5 3.5  0 1 500 5 3.5  1 2 500 5 3.5  3 4 500 5 3.5  4 5 500 5 3.5  6 7 500 5 3.5  7 8 500 5 3.5  9 10 500 5 3.5  10 11 500 5 3.5  12 13 500 5 3.5  13 14 500 5 3.5  15 16 500 5 3.5  16 17 500 5 3.5  18 19 500 5 3.5  19 20 500 5 3.5  21 22 500 5 3.5  22 23 500 5 3.5  24 25 500 5 3.5  25 26 100 5 3.5  0 13 500 5 6.06218  1 14 500 5 6.06218  3 16 500 5 6.06218  4 17 500 5 6.06218  9 22 500 5 6.06218  10 23 500 5 6.06218  12 25 500 5 6.06218  13 26 500 5 6.06218  9 4 500 5 6.06218  10 5 500 5 6.06218  12 7 500 5 6.06218  13 8 500 5 6.06218  18 13 500 5 6.06218  19 14 500 5 6.06218  21 16 500 5 6.06218  22 17 500 5 6.06218  3 10 500 5 6.06218  4 11 500 5 6.06218  6 13 500 5 6.06218  7 14 500 5 6.06218  12 19 500 5 6.06218  13 20 500 5 6.06218  15 22 500 5 6.06218  16 23 500 5 6.06218  12 1 500 5 6.06218  13 2 500 5 6.06218  15 4 500 5 6.06218  16 5 500 5 6.06218  21 10 500 5 6.06218  22 11 500 5 6.06218  24 13 500 5 6.06218  25 14 500 5 6.06218  0 12 500 5 4.94975  1 13 500 5 4.94975  2 14 500 5 4.94975  3 15 500 5 4.94975  4 16 500 5 4.94975  5 17 500 5 4.94975  9 21 500 5 4.94975  10 22 500 5 4.94975  11 23 500 5 4.94975  12 24 500 5 4.94975  13 25 500 5 4.94975  14 26 500 5 4.94975  3 9 500 5 4.94975  4 10 500 5 4.94975  5 11 500 5 4.94975  6 12 500 5 4.94975  7 13 500 5 4.94975  8 14 500 5 4.94975  12 18 500 5 4.94975  13 19 500 5 4.94975  14 20 500 5 4.94975  15 21 500 5 4.94975  16 22 500 5 4.94975  17 23 500 5 4.94975  0 10 500 5 4.94975  1 11 500 5 4.94975  3 13 500 5 4.94975  4 14 500 5 4.94975  6 16 500 5 4.94975  7 17 500 5 4.94975  9 19 500 5 4.94975  10 20 500 5 4.94975  12 22 500 5 4.94975  13 23 500 5 4.94975  15 25 500 5 4.94975  16 26 500 5 4.94975  9 1 500 5 4.94975  10 2 500 5 4.94975  12 4 500 5 4.94975  13 5 500 5 4.94975  15 7 500 5 4.94975  16 8 500 5 4.94975  18 10 500 5 4.94975  19 11 500 5 4.94975  21 13 500 5 4.94975  22 14 500 5 4.94975  24 16 500 5 4.94975  25 17 500 5 4.94975  0 4 500 5 4.94975  1 5 500 5 4.94975  3 7 500 5 4.94975  4 8 500 5 4.94975  9 13 500 5 4.94975  10 14 500 5 4.94975  12 16 500 5 4.94975  13 17 500 5 4.94975  18 22 500 5 4.94975  19 23 500 5 4.94975  21 25 500 5 4.94975  22 26 500 5 4.94975  3 1 500 5 4.94975  4 2 500 5 4.94975  6 4 500 5 4.94975  7 5 500 5 4.94975  12 10 500 5 4.94975  13 11 500 5 4.94975  15 13 500 5 4.94975  16 14 500 5 4.94975  21 19 500 5 4.94975  22 20 500 5 4.94975  24 22 500 5 4.94975  25 23 500 5 4.94975 \")         Poutre1.addObject('StiffSpringForceField', template=\"Vec3\", name=\"ExternalSprings1\", object1=\"@M1\", object2=\"@M2\", spring=\"2 0 500 5 3.5  5 3 500 5 3.5  8 6 500 5 3.5  11 9 500 5 3.5  14 12 500 5 3.5  17 15 500 5 3.5  20 18 500 5 3.5  23 21 500 5 3.5  26 24 500 5 3.5  14 0 500 5 6.06218  17 3 500 5 6.06218  23 9 500 5 6.06218  26 12 500 5 6.06218  5 9 500 5 6.06218  8 12 500 5 6.06218  14 18 500 5 6.06218  17 21 500 5 6.06218  11 3 500 5 6.06218  14 6 500 5 6.06218  20 12 500 5 6.06218  23 15 500 5 6.06218  2 12 500 5 6.06218  5 15 500 5 6.06218  11 21 500 5 6.06218  14 24 500 5 6.06218  11 0 500 5 4.94975  14 3 500 5 4.94975  17 6 500 5 4.94975  20 9 500 5 4.94975  23 12 500 5 4.94975  26 15 500 5 4.94975  2 9 500 5 4.94975  5 12 500 5 4.94975  8 15 500 5 4.94975  11 18 500 5 4.94975  14 21 500 5 4.94975  17 24 500 5 4.94975  5 0 500 5 4.94975  8 3 500 5 4.94975  14 9 500 5 4.94975  17 12 500 5 4.94975  23 18 500 5 4.94975  26 21 500 5 4.94975  2 3 500 5 4.94975  5 6 500 5 4.94975  11 12 500 5 4.94975  14 15 500 5 4.94975  20 21 500 5 4.94975  23 24 500 5 4.94975 \")         Poutre1.addObject('StiffSpringForceField', template=\"Vec3\", name=\"ExternalSprings2\", object1=\"@M2\", object2=\"@M3\", spring=\"2 0 500 5 3.5  5 3 500 5 3.5  8 6 500 5 3.5  11 9 500 5 3.5  14 12 500 5 3.5  17 15 500 5 3.5  20 18 500 5 3.5  23 21 500 5 3.5  26 24 500 5 3.5  14 0 500 5 6.06218  17 3 500 5 6.06218  23 9 500 5 6.06218  26 12 500 5 6.06218  5 9 500 5 6.06218  8 12 500 5 6.06218  14 18 500 5 6.06218  17 21 500 5 6.06218  11 3 500 5 6.06218  14 6 500 5 6.06218  20 12 500 5 6.06218  23 15 500 5 6.06218  2 12 500 5 6.06218  5 15 500 5 6.06218  11 21 500 5 6.06218  14 24 500 5 6.06218  11 0 500 5 4.94975  14 3 500 5 4.94975  17 6 500 5 4.94975  20 9 500 5 4.94975  23 12 500 5 4.94975  26 15 500 5 4.94975  2 9 500 5 4.94975  5 12 500 5 4.94975  8 15 500 5 4.94975  11 18 500 5 4.94975  14 21 500 5 4.94975  17 24 500 5 4.94975  5 0 500 5 4.94975  8 3 500 5 4.94975  14 9 500 5 4.94975  17 12 500 5 4.94975  23 18 500 5 4.94975  26 21 500 5 4.94975  2 3 500 5 4.94975  5 6 500 5 4.94975  11 12 500 5 4.94975  14 15 500 5 4.94975  20 21 500 5 4.94975  23 24 500 5 4.94975 \")         Poutre1.addObject('StiffSpringForceField', template=\"Vec3\", name=\"ExternalSprings3\", object1=\"@M3\", object2=\"@M4\", spring=\"2 0 500 5 3.5  5 3 500 5 3.5  8 6 500 5 3.5  11 9 500 5 3.5  14 12 500 5 3.5  17 15 500 5 3.5  20 18 500 5 3.5  23 21 500 5 3.5  26 24 500 5 3.5  14 0 500 5 6.06218  17 3 500 5 6.06218  23 9 500 5 6.06218  26 12 500 5 6.06218  5 9 500 5 6.06218  8 12 500 5 6.06218  14 18 500 5 6.06218  17 21 500 5 6.06218  11 3 500 5 6.06218  14 6 500 5 6.06218  20 12 500 5 6.06218  23 15 500 5 6.06218  2 12 500 5 6.06218  5 15 500 5 6.06218  11 21 500 5 6.06218  14 24 500 5 6.06218  11 0 500 5 4.94975  14 3 500 5 4.94975  17 6 500 5 4.94975  20 9 500 5 4.94975  23 12 500 5 4.94975  26 15 500 5 4.94975  2 9 500 5 4.94975  5 12 500 5 4.94975  8 15 500 5 4.94975  11 18 500 5 4.94975  14 21 500 5 4.94975  17 24 500 5 4.94975  5 0 500 5 4.94975  8 3 500 5 4.94975  14 9 500 5 4.94975  17 12 500 5 4.94975  23 18 500 5 4.94975  26 21 500 5 4.94975  2 3 500 5 4.94975  5 6 500 5 4.94975  11 12 500 5 4.94975  14 15 500 5 4.94975  20 21 500 5 4.94975  23 24 500 5 4.94975 \")         Poutre1.addObject('StiffSpringForceField', template=\"Vec3\", name=\"ExternalSprings4\", object1=\"@M4\", object2=\"@M5\", spring=\"2 0 500 5 3.5  5 3 500 5 3.5  8 6 500 5 3.5  11 9 500 5 3.5  14 12 500 5 3.5  17 15 500 5 3.5  20 18 500 5 3.5  23 21 500 5 3.5  26 24 500 5 3.5  14 0 500 5 6.06218  17 3 500 5 6.06218  23 9 500 5 6.06218  26 12 500 5 6.06218  5 9 500 5 6.06218  8 12 500 5 6.06218  14 18 500 5 6.06218  17 21 500 5 6.06218  11 3 500 5 6.06218  14 6 500 5 6.06218  20 12 500 5 6.06218  23 15 500 5 6.06218  2 12 500 5 6.06218  5 15 500 5 6.06218  11 21 500 5 6.06218  14 24 500 5 6.06218  11 0 500 5 4.94975  14 3 500 5 4.94975  17 6 500 5 4.94975  20 9 500 5 4.94975  23 12 500 5 4.94975  26 15 500 5 4.94975  2 9 500 5 4.94975  5 12 500 5 4.94975  8 15 500 5 4.94975  11 18 500 5 4.94975  14 21 500 5 4.94975  17 24 500 5 4.94975  5 0 500 5 4.94975  8 3 500 5 4.94975  14 9 500 5 4.94975  17 12 500 5 4.94975  23 18 500 5 4.94975  26 21 500 5 4.94975  2 3 500 5 4.94975  5 6 500 5 4.94975  11 12 500 5 4.94975  14 15 500 5 4.94975  20 21 500 5 4.94975  23 24 500 5 4.94975 \")     ```</p> <p>Component/SceneUtility/MonitorTest.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 -9.81 0\"&gt;\n&lt;DefaultAnimationLoop/&gt;    \n    &lt;Node name=\"node\"&gt;\n      &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshGmshLoader] --&gt;\n      &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n      &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n      &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n      &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n      &lt;RequiredPlugin name=\"SofaValidation\"/&gt; &lt;!-- Needed to use components [Monitor] --&gt;\n      &lt;EulerImplicitSolver rayleighStiffness=\"0\" printLog=\"false\" /&gt;\n      &lt;CGLinearSolver iterations=\"100\" threshold=\"0.00000001\" tolerance=\"1e-5\"/&gt;\n      &lt;MeshGmshLoader name=\"loader\" filename=\"mesh/smCube27.msh\" createSubelements=\"true\" /&gt;\n      &lt;MechanicalObject template=\"Rigid3\" src=\"@loader\" name=\"MO\" showObject=\"1\"/&gt;\n      &lt;Monitor template=\"Rigid3\" name=\"monitor\" listening=\"1\" indices=\"0\" ExportPositions=\"true\" ExportVelocities=\"true\" ExportForces=\"true\" /&gt;\n      &lt;UniformMass totalMass=\"1\" /&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', gravity=\"0 -9.81 0\")\n    root.addObject('DefaultAnimationLoop')\n\n    node = root.addChild('node')\n    node.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    node.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\n    node.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\n    node.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\n    node.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    node.addObject('RequiredPlugin', name=\"SofaValidation\")\n    node.addObject('EulerImplicitSolver', rayleighStiffness=\"0\", printLog=\"false\")\n    node.addObject('CGLinearSolver', iterations=\"100\", threshold=\"0.00000001\", tolerance=\"1e-5\")\n    node.addObject('MeshGmshLoader', name=\"loader\", filename=\"mesh/smCube27.msh\", createSubelements=\"true\")\n    node.addObject('MechanicalObject', template=\"Rigid3\", src=\"@loader\", name=\"MO\", showObject=\"1\")\n    node.addObject('Monitor', template=\"Rigid3\", name=\"monitor\", listening=\"1\", indices=\"0\", ExportPositions=\"true\", ExportVelocities=\"true\", ExportForces=\"true\")\n    node.addObject('UniformMass', totalMass=\"1\")\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/AnimationEditor/","title":"AnimationEditor","text":"<p>Build an animation from key points motion:  ctrl+a: add keyframe  ctrl+d: delete keyframe  ctrl+c: copy keyframe  ctrl+v: paste keyframe  ctrl+x: cut keyframe  ctrl+w: write animation  ctrl+m: play/pause animation  ctrl+(left/right)arrow: move the cursor along the timeline  ctrl+(pgDn/pgUp): move the cursor to the next/previous keyframe</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::controller</code></p> <p>parents: </p> <ul> <li><code>Controller</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 maxKeyFrame  Max &gt;= 1, default 150  150 filename  If no filename given, set default to animation.txt  animation.txt loop  If true, will loop on the animation (only in play mode).  0 load  If true, will load the animation at init.  1 dx  Variation of displacement. You can control the animation on displacement instead of time. If dx is set, at each time step, the animation will progress in term of displacement/distance. A positive dx means move forward and a negative dx means backward (on the timeline).  0 frameTime  Frame time.  0.01 cursor  Current frame of the cursor along the timeline  0 Visualization drawTimeline 1 drawSize 0.1 drawTrajectory 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/CableConstraint/","title":"CableConstraint","text":"<p>Simulate a cable.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::constraint</code></p> <p>parents: </p> <ul> <li><code>CableModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The SoftRobotsConstraint stops acting after the given value. Use a negative value for infinite SoftRobotsConstraints  -1 indices  List of points connected by the cable (from extremity to actuated point).  If no indices are given, default value is 0.  In case of multiple indices, one point will be actuated  and the others will represent sliding points for the cable.  pullPoint  Fixed point from which the cable is pulled.  If unspecified, the default value is {0.0,0.0,0.0}  0 0 0 hasPullPoint  If false, the pull point is not considered and the cable is entirely mapped   In that case, needs at least 2 different point in indices.  1 cableInitialLength  This value can be defined by the user.  If not defined, it will correspond to the length of the cable at the start of the simulation  0 cableLength  Computation done at the end of the time step  0 method  Default is point method.  In point method, cable force is applied on a single point.  Both methods sphere and geodesic are compatible with passing point on a surface only.   In sphere method, cable force is dispatched in the intersection between a 3D sphere and a surface.  In geodesic method, cable force is dispatched in a circle projected on a surface.    point centers  List of positions describing attachment of cables on the surface, used only with sphere and geodesic methods.  Points are centers of cable pulling application areas.  If not defined, centers are computed from provided indices instead.  radii  List of radius used to compute pulling application areas from centers.  Used only with sphere and geodesic methods.  maxForce  Maximum force of the actuator.  If unspecified no maximum value will be considered.  minForce  Minimum force of the actuator.  If unspecified no minimum value will be considered  and the cable will then be seen as a stiff rod able to push.  eqForce  Equality force of the actuator.  Solver will try to maintain the cable force at this value If unspecified, no value will be considered    0 maxPositiveDisp  Maximum displacement of the actuator in the positive direction.  If unspecified no maximum value will be considered.  maxNegativeDisp  Maximum displacement of the actuator in the negative direction.  If unspecified no maximum value will be considered.  eqDisp  Equality displacement of the actuator.  Solver will try to maintain the cable displacement at this value If unspecified, no value will be considered    0 maxDispVariation  Maximum variation of the displacement allowed. If not set, no max variation will be concidered.  value  Displacement or force to impose.   valueIndex  Index of the value (in InputValue vector) that we want to impose  If unspecified the default value is {0}  0 valueType  displacement = the contstraint will impose the displacement provided in data value[valueIndex]  force = the contstraint will impose the force provided in data value[valueIndex]  If unspecified, the default value is displacement  displacement Vector force  Output force. Warning: to get the actual force you should divide this value by dt.  0 displacement  Output displacement compared to the initial cable length.  0 Visualization drawPullPoint 1 drawPoints 1 drawPulledAreas  Whether to draw pulled area points or not.  0 color  Color of the string.  0.4 0.4 0.4 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects surfaceTopology Link to the topology container of the surface on which the cable is attached. Used only with sphere and geodesic methods. <p>Templates:</p> <ul> <li><code>Vec2d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::constraint</code></p> <p>parents: </p> <ul> <li><code>CableModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The SoftRobotsConstraint stops acting after the given value. Use a negative value for infinite SoftRobotsConstraints  -1 indices  List of points connected by the cable (from extremity to actuated point).  If no indices are given, default value is 0.  In case of multiple indices, one point will be actuated  and the others will represent sliding points for the cable.  pullPoint  Fixed point from which the cable is pulled.  If unspecified, the default value is {0.0,0.0,0.0}  0 0 hasPullPoint  If false, the pull point is not considered and the cable is entirely mapped   In that case, needs at least 2 different point in indices.  1 cableInitialLength  This value can be defined by the user.  If not defined, it will correspond to the length of the cable at the start of the simulation  0 cableLength  Computation done at the end of the time step  0 method  Default is point method.  In point method, cable force is applied on a single point.  Both methods sphere and geodesic are compatible with passing point on a surface only.   In sphere method, cable force is dispatched in the intersection between a 3D sphere and a surface.  In geodesic method, cable force is dispatched in a circle projected on a surface.    point centers  List of positions describing attachment of cables on the surface, used only with sphere and geodesic methods.  Points are centers of cable pulling application areas.  If not defined, centers are computed from provided indices instead.  radii  List of radius used to compute pulling application areas from centers.  Used only with sphere and geodesic methods.  maxForce  Maximum force of the actuator.  If unspecified no maximum value will be considered.  minForce  Minimum force of the actuator.  If unspecified no minimum value will be considered  and the cable will then be seen as a stiff rod able to push.  eqForce  Equality force of the actuator.  Solver will try to maintain the cable force at this value If unspecified, no value will be considered    0 maxPositiveDisp  Maximum displacement of the actuator in the positive direction.  If unspecified no maximum value will be considered.  maxNegativeDisp  Maximum displacement of the actuator in the negative direction.  If unspecified no maximum value will be considered.  eqDisp  Equality displacement of the actuator.  Solver will try to maintain the cable displacement at this value If unspecified, no value will be considered    0 maxDispVariation  Maximum variation of the displacement allowed. If not set, no max variation will be concidered.  value  Displacement or force to impose.   valueIndex  Index of the value (in InputValue vector) that we want to impose  If unspecified the default value is {0}  0 valueType  displacement = the contstraint will impose the displacement provided in data value[valueIndex]  force = the contstraint will impose the force provided in data value[valueIndex]  If unspecified, the default value is displacement  displacement Vector force  Output force. Warning: to get the actual force you should divide this value by dt.  0 displacement  Output displacement compared to the initial cable length.  0 Visualization drawPullPoint 1 drawPoints 1 drawPulledAreas  Whether to draw pulled area points or not.  0 color  Color of the string.  0.4 0.4 0.4 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects surfaceTopology Link to the topology container of the surface on which the cable is attached. Used only with sphere and geodesic methods."},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/CenterOfMass/","title":"CenterOfMass","text":"<p>This class computes the center of mass of the object in its context.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 position  If not set by user, find the context mechanical.  centerOfMass visualization  If set to true, will draw the center of mass  visuSize 1 visuColor 1 0 0 1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/CenterOfMass/#examples","title":"Examples","text":"<p>Component/Mapping/Linear/CenterOfMassMapping.scn</p> XMLPython <pre><code>&lt;Node name=\"root\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Algorithm\"/&gt; &lt;!-- Needed to use components [BVHNarrowPhase BruteForceBroadPhase CollisionPipeline] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Detection.Intersection\"/&gt; &lt;!-- Needed to use components [MinProximityIntersection] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Geometry\"/&gt; &lt;!-- Needed to use components [SphereCollisionModel] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Collision.Response.Contact\"/&gt; &lt;!-- Needed to use components [CollisionResponse] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Constraint.Projective\"/&gt; &lt;!-- Needed to use components [FixedProjectiveConstraint] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.LinearSolver.Iterative\"/&gt; &lt;!-- Needed to use components [CGLinearSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.Linear\"/&gt; &lt;!-- Needed to use components [CenterOfMassMapping SkinningMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mapping.NonLinear\"/&gt; &lt;!-- Needed to use components [RigidMapping] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Mass\"/&gt; &lt;!-- Needed to use components [UniformMass] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.ODESolver.Backward\"/&gt; &lt;!-- Needed to use components [EulerImplicitSolver] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.SolidMechanics.Spring\"/&gt; &lt;!-- Needed to use components [JointSpringForceField] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Visual\"/&gt; &lt;!-- Needed to use components [VisualStyle] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Rendering3D\"/&gt; &lt;!-- Needed to use components [OglModel] --&gt;\n    &lt;VisualStyle displayFlags=\"showVisual showForceFields showCollisionModels showMechanicalMappings showWireframe\" /&gt;\n    &lt;BruteForceBroadPhase/&gt;\n    &lt;BVHNarrowPhase/&gt;\n    &lt;CollisionResponse name=\"default1\" /&gt;\n    &lt;CollisionPipeline name=\"default2\" /&gt;\n    &lt;MinProximityIntersection name=\"default3\" alarmDistance=\"1\" contactDistance=\"0.5\"/&gt;\n    &lt;DefaultAnimationLoop/&gt;\n\n    &lt;Node name=\"pendulum\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\" multiThreadSimulation=\"0\"&gt;\n        &lt;EulerImplicitSolver name=\"cg_odesolver\" printLog=\"false\"  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"25\" name=\"linear solver\" tolerance=\"1.0e-9\" threshold=\"1.0e-9\" /&gt;\n        &lt;MechanicalObject template=\"Rigid3\" name=\"DOFs\" position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\"\n                               velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                               force=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                               dx=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                               free_position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\"\n                               free_velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                               rest_position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\" /&gt;\n        &lt;UniformMass template=\"Rigid3\" name=\"mass\" vertexMass=\"1 1 [1 0 0,0 1 0,0 0 1]\" /&gt;\n        &lt;FixedProjectiveConstraint template=\"Rigid3\" name=\"fixOrigin\" indices=\"0\" /&gt;\n        &lt;Node name=\"segmentsNode\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\" multiThreadSimulation=\"0\"&gt;\n            &lt;MechanicalObject template=\"Rigid3\" name=\"attaches\" position=\"0 0 0 0.707914 0 0 0.707914 0 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 8 0 0 0.707914 0 0 0.707914\"\n                                   velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                                   force=\"-0.204691 0.493087 -1.55393 -15.7823 -4.91695 -0.011207 0.204691 -0.493087 1.55393 15.7823 4.91695 0.011207 -0.817747 -0.565234 -0.504438 15.6267 -1.41904 0.0182122 0.817747 0.565234 0.504438 -15.6267 1.41904 -0.0182122 -0.490036 0.948643 0.849816 10.3784 20.6947 0.014016 0.490036 -0.948643 -0.849816 -10.3784 -20.6947 -0.014016 -1.16244 -0.595626 0.268606 3.22919 22.0184 -0.0357184 1.16244 0.595626 -0.268606 -3.22919 -22.0184 0.0357184 0 0 0 0 0 0\"\n                                   dx=\"0 0 0 0 0 0 -2.04691e-005 4.93087e-005 -0.000155393 -7.89115e-005 -2.45853e-005 2.00717e-007 -2.01601e-005 4.95435e-005 -5.1433e-006 -7.89115e-005 -2.45853e-005 2.00717e-007 -0.000101935 -6.97992e-006 -5.55871e-005 -8.0336e-007 -3.15395e-005 -6.3655e-005 -3.64901e-006 -8.78868e-005 -1.67401e-005 -8.0336e-007 -3.15395e-005 -6.3655e-005 -5.26526e-005 6.9775e-006 6.82415e-005 5.10966e-005 7.20224e-005 -0.000102151 6.00157e-005 0.000177406 0.000244762 5.10966e-005 7.20224e-005 -0.000102151 -5.62283e-005 0.000117843 0.000271622 6.71189e-005 0.000181679 6.29123e-005 7.75285e-006 1.00596e-005 0.000514622 6.71189e-005 0.000181679 6.29123e-005\"\n                                   free_position=\"0 0 0 0.707914 0 0 0.707914 0 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 8 0 0 0.707914 0 0 0.707914\"\n                                   free_velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                                       rest_position=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\" /&gt;\n            &lt;RigidMapping template=\"Rigid3,Rigid3\" name=\"default55\" initialPoints=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\" rigidIndexPerPoint=\"1 2 2 2 2\" /&gt;\n            &lt;JointSpringForceField template=\"Rigid3\" name=\"joint springs\" spring=\"BEGIN_SPRING  0 1  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  2 3  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  4 5  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A; BEGIN_SPRING  6 7  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING&amp;#x0A;\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"default65\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\" multiThreadSimulation=\"0\"&gt;\n            &lt;OglModel name=\"Visual\" position=\"0 -0.5 -0.5 0 0.5 -0.5 0 0.5 0.5 0 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 8 -0.5 -0.5 8 0.5 -0.5 8 0.5 0.5 8 -0.5 0.5\"\n                    normals=\"-0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248\"\n                    triangles=\"3 1 0  3 2 1  3 6 2  3 7 6  7 5 6  7 4 5  4 1 5  4 0 1  5 1 2  2 6 5  4 7 3  4 3 0  11 9 8  11 10 9  11 14 10  11 15 14  15 13 14  15 12 13  12 9 13  12 8 9  13 9 10  10 14 13  12 15 11  12 11 8  19 17 16  19 18 17  19 22 18  19 23 22  23 21 22  23 20 21  20 17 21  20 16 17  21 17 18  18 22 21  20 23 19  20 19 16  27 25 24  27 26 25  27 30 26  27 31 30  31 29 30  31 28 29  28 25 29  28 24 25  29 25 26  26 30 29  28 31 27  28 27 24\" /&gt;\n            &lt;SkinningMapping template=\"Rigid3,Vec3\" name=\"map\" input=\"@..\" output=\"@Visual\" /&gt;\n        &lt;/Node&gt;\n        &lt;Node name=\"CenterOfMass\" gravity=\"0 -9.81 0\" dt=\"0.01\" time=\"0\" animate=\"0\" multiThreadSimulation=\"0\"&gt;\n            &lt;MechanicalObject template=\"Vec3\" name=\"default88\" listening=\"0\" printLog=\"0\" restScale=\"1\" position=\"3.2 0 0\" velocity=\"0 0 0\" force=\"0 0 0\" dx=\"-1.87325e-005 3.16272e-005 8.66385e-005\" free_position=\"3.2 0 0\" free_velocity=\"0 0 0\" rest_position=\"0 0 0\"/&gt;\n            &lt;SphereCollisionModel name=\"default88Sphere\" active=\"1\" moving=\"1\" simulated=\"1\" selfCollision=\"0\" proximity=\"0\" contactStiffness=\"10\" contactFriction=\"0.01\" color=\"1 0.5 0 1\" radius=\"0.2\"/&gt;\n            &lt;CenterOfMassMapping template=\"Rigid3,Vec3\" name=\"default105\" /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n&lt;/Node&gt;\n</code></pre> <p>```python def createScene(rootNode):</p> <pre><code>root = rootNode.addChild('root', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Algorithm\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Detection.Intersection\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Geometry\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Collision.Response.Contact\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Constraint.Projective\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.LinearSolver.Iterative\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.Linear\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mapping.NonLinear\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Mass\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.ODESolver.Backward\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.SolidMechanics.Spring\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\nroot.addObject('RequiredPlugin', name=\"Sofa.Component.Visual\")\nroot.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Rendering3D\")\nroot.addObject('VisualStyle', displayFlags=\"showVisual showForceFields showCollisionModels showMechanicalMappings showWireframe\")\nroot.addObject('BruteForceBroadPhase')\nroot.addObject('BVHNarrowPhase')\nroot.addObject('CollisionResponse', name=\"default1\")\nroot.addObject('CollisionPipeline', name=\"default2\")\nroot.addObject('MinProximityIntersection', name=\"default3\", alarmDistance=\"1\", contactDistance=\"0.5\")\nroot.addObject('DefaultAnimationLoop')\n\npendulum = root.addChild('pendulum', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\", multiThreadSimulation=\"0\")\npendulum.addObject('EulerImplicitSolver', name=\"cg_odesolver\", printLog=\"false\", rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\npendulum.addObject('CGLinearSolver', iterations=\"25\", name=\"linear solver\", tolerance=\"1.0e-9\", threshold=\"1.0e-9\")\npendulum.addObject('MechanicalObject', template=\"Rigid3\", name=\"DOFs\", position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\", velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", force=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", dx=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", free_position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\", free_velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", rest_position=\"0 0 0 0 0 0 1 1 0 0 0 0 0 1 3 0 0 0 0 0 1 5 0 0 0 0 0 1 7 0 0 0 0 0 1\")\npendulum.addObject('UniformMass', template=\"Rigid3\", name=\"mass\", vertexMass=\"1 1 [1 0 0,0 1 0,0 0 1]\")\npendulum.addObject('FixedProjectiveConstraint', template=\"Rigid3\", name=\"fixOrigin\", indices=\"0\")\n\nsegmentsNode = pendulum.addChild('segmentsNode', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\", multiThreadSimulation=\"0\")\nsegmentsNode.addObject('MechanicalObject', template=\"Rigid3\", name=\"attaches\", position=\"0 0 0 0.707914 0 0 0.707914 0 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 8 0 0 0.707914 0 0 0.707914\", velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", force=\"-0.204691 0.493087 -1.55393 -15.7823 -4.91695 -0.011207 0.204691 -0.493087 1.55393 15.7823 4.91695 0.011207 -0.817747 -0.565234 -0.504438 15.6267 -1.41904 0.0182122 0.817747 0.565234 0.504438 -15.6267 1.41904 -0.0182122 -0.490036 0.948643 0.849816 10.3784 20.6947 0.014016 0.490036 -0.948643 -0.849816 -10.3784 -20.6947 -0.014016 -1.16244 -0.595626 0.268606 3.22919 22.0184 -0.0357184 1.16244 0.595626 -0.268606 -3.22919 -22.0184 0.0357184 0 0 0 0 0 0\", dx=\"0 0 0 0 0 0 -2.04691e-005 4.93087e-005 -0.000155393 -7.89115e-005 -2.45853e-005 2.00717e-007 -2.01601e-005 4.95435e-005 -5.1433e-006 -7.89115e-005 -2.45853e-005 2.00717e-007 -0.000101935 -6.97992e-006 -5.55871e-005 -8.0336e-007 -3.15395e-005 -6.3655e-005 -3.64901e-006 -8.78868e-005 -1.67401e-005 -8.0336e-007 -3.15395e-005 -6.3655e-005 -5.26526e-005 6.9775e-006 6.82415e-005 5.10966e-005 7.20224e-005 -0.000102151 6.00157e-005 0.000177406 0.000244762 5.10966e-005 7.20224e-005 -0.000102151 -5.62283e-005 0.000117843 0.000271622 6.71189e-005 0.000181679 6.29123e-005 7.75285e-006 1.00596e-005 0.000514622 6.71189e-005 0.000181679 6.29123e-005\", free_position=\"0 0 0 0.707914 0 0 0.707914 0 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 2 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 4 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 6 0 0 0.707914 0 0 0.707914 8 0 0 0.707914 0 0 0.707914\", free_velocity=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\", rest_position=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\")\nsegmentsNode.addObject('RigidMapping', template=\"Rigid3,Rigid3\", name=\"default55\", initialPoints=\"0 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914 -1 0 0 0.707914 0 0 0.707914 1 0 0 0.707914 0 0 0.707914\", rigidIndexPerPoint=\"1 2 2 2 2\")\nsegmentsNode.addObject('JointSpringForceField', template=\"Rigid3\", name=\"joint springs\", spring=\"BEGIN_SPRING  0 1  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING\n</code></pre> <p>BEGIN_SPRING  2 3  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING  BEGIN_SPRING  4 5  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING  BEGIN_SPRING  6 7  FREE_AXIS 0 0 0 0 1 0  KS_R 0 200000  KD 1  R_LIM_X 0 0  R_LIM_Y -1.57 1.57  R_LIM_Z 0 0  END_SPRING \")</p> <pre><code>    default65 = pendulum.addChild('default65', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\", multiThreadSimulation=\"0\")\n    default65.addObject('OglModel', name=\"Visual\", position=\"0 -0.5 -0.5 0 0.5 -0.5 0 0.5 0.5 0 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 2 -0.5 -0.5 2 0.5 -0.5 2 0.5 0.5 2 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 4 -0.5 -0.5 4 0.5 -0.5 4 0.5 0.5 4 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 6 -0.5 -0.5 6 0.5 -0.5 6 0.5 0.5 6 -0.5 0.5 8 -0.5 -0.5 8 0.5 -0.5 8 0.5 0.5 8 -0.5 0.5\", normals=\"-0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248 -0.57735 -0.57735 -0.57735 -0.666667 0.333333 -0.666667 -0.408248 0.816497 0.408248 -0.57735 -0.57735 0.57735 0.333333 -0.666667 -0.666667 0.666667 0.666667 -0.333333 0.408248 0.408248 0.816497 0.816497 -0.408248 0.408248\", triangles=\"3 1 0  3 2 1  3 6 2  3 7 6  7 5 6  7 4 5  4 1 5  4 0 1  5 1 2  2 6 5  4 7 3  4 3 0  11 9 8  11 10 9  11 14 10  11 15 14  15 13 14  15 12 13  12 9 13  12 8 9  13 9 10  10 14 13  12 15 11  12 11 8  19 17 16  19 18 17  19 22 18  19 23 22  23 21 22  23 20 21  20 17 21  20 16 17  21 17 18  18 22 21  20 23 19  20 19 16  27 25 24  27 26 25  27 30 26  27 31 30  31 29 30  31 28 29  28 25 29  28 24 25  29 25 26  26 30 29  28 31 27  28 27 24\")\n    default65.addObject('SkinningMapping', template=\"Rigid3,Vec3\", name=\"map\", input=\"@..\", output=\"@Visual\")\n\n    CenterOfMass = pendulum.addChild('CenterOfMass', gravity=\"0 -9.81 0\", dt=\"0.01\", time=\"0\", animate=\"0\", multiThreadSimulation=\"0\")\n    CenterOfMass.addObject('MechanicalObject', template=\"Vec3\", name=\"default88\", listening=\"0\", printLog=\"0\", restScale=\"1\", position=\"3.2 0 0\", velocity=\"0 0 0\", force=\"0 0 0\", dx=\"-1.87325e-005 3.16272e-005 8.66385e-005\", free_position=\"3.2 0 0\", free_velocity=\"0 0 0\", rest_position=\"0 0 0\")\n    CenterOfMass.addObject('SphereCollisionModel', name=\"default88Sphere\", active=\"1\", moving=\"1\", simulated=\"1\", selfCollision=\"0\", proximity=\"0\", contactStiffness=\"10\", contactFriction=\"0.01\", color=\"1 0.5 0 1\", radius=\"0.2\")\n    CenterOfMass.addObject('CenterOfMassMapping', template=\"Rigid3,Vec3\", name=\"default105\")\n```\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/DataVariationLimiter/","title":"DataVariationLimiter","text":"<p>This component interpolates between two consecutive inputs when a jump is detected.</p> <p>Templates:</p> <ul> <li><code>Vec1d</code></li> <li><code>Vec1i</code></li> <li><code>Vec2d</code></li> <li><code>Vec2i</code></li> <li><code>Vec3d</code></li> <li><code>Vec3i</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::controller</code></p> <p>parents: </p> <ul> <li><code>Controller</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 input output size  Input size.  0 maxJump  Maximal jump allowed. Default 10% is equivalent to jump = 0.1.  0.1 nbStep  Number of interpolation steps. Default is 50.  50 initOutput  If true, will initialize the output with the input.  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/PREquivalentStiffnessForceField/","title":"PREquivalentStiffnessForceField","text":"<p>Partial Rigidification equivalent stiffness forcefield</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::forcefield</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 complianceFile  Name of the file where the compliance matrix is stored .  coefForce  Coefficient  1 startIndex  Nodes below this indices won't be computed.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/PartialRigidificationConstraint/","title":"PartialRigidificationConstraint","text":"<p>PartialRigidificationConstraint</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::constraint</code></p> <p>parents: </p> <ul> <li><code>Constraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The constraint stops acting after the given value. Use a negative value for infinite constraints  -1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/PartialRigidificationForceField/","title":"PartialRigidificationForceField","text":"<p>Partially rigidify a mechanical object using a rigid mapping.</p> <p>Templates:</p> <ul> <li><code>Vec3d,Rigid3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::forcefield</code></p> <p>parents: </p> <ul> <li><code>MixedInteractionForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated object1 First object associated to this component object2 Second object associated to this component rigidMapping link to the rigidMapping that does the rigidification subsetMultiMapping link to the subsetMultiMapping that unifies rigid and deformable parts mappedForceField link to the forcefield that is mapped under the subsetMultiMapping"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/PipeForceField/","title":"PipeForceField","text":"<p>This component is used to pull up mapped string forces (from a child node)</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::forcefield</code></p> <p>parents: </p> <ul> <li><code>ForceField</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isCompliance  Consider the component as a compliance, else as a stiffness  0 rayleighStiffness  Rayleigh damping - stiffness matrix coefficient  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects mechanicalStates List of mechanical states to which this component is associated mstate MechanicalState used by this component barycentricMapping link to the BarycentricMapping mappedForceField link to the MeshSpringForceField"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/PositionConstraint/","title":"PositionConstraint","text":"<p>Simulate a Position.</p> <p>Templates:</p> <ul> <li><code>Rigid3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::constraint</code></p> <p>parents: </p> <ul> <li><code>PositionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The SoftRobotsConstraint stops acting after the given value. Use a negative value for infinite SoftRobotsConstraints  -1 indices  If indices size is lower than target size,  some target will not be considered  weight  The parameter sets a weight to the minimization.  1 1 1 1 1 1 directions  The parameter directions allows to specify the directions in  which you want to solve the position.  useDirections  The parameter useDirections allows to select the directions in  which you want to solve the position. If unspecified, the default  values are all true.  delta  Distance to target  maxForce  Maximum force allowed.  If unspecified no maximum value will be considered.  minForce  Minimum force allowed.  If unspecified no minimum value will be considered.  maxPositiveDisp  Maximum displacement in the positive direction.  If unspecified no maximum value will be considered.  maxNegativeDisp  Maximum displacement in the negative direction.  If unspecified no maximum value will be considered.  value  Displacement or force to impose.   valueIndex  Index of the value (in InputValue vector) that we want to impose  If unspecified the default value is {0}  0 valueType  displacement = the constraint will impose the displacement provided in data value[valueIndex]  force = the constraint will impose the force provided in data value[valueIndex]  If unspecified, the default value is displacement  displacement Vector force  Output force. Warning: to get the actual force you should divide this value by dt.  0 displacement  Output displacement compared to the initial position.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::constraint</code></p> <p>parents: </p> <ul> <li><code>PositionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The SoftRobotsConstraint stops acting after the given value. Use a negative value for infinite SoftRobotsConstraints  -1 indices  If indices size is lower than target size,  some target will not be considered  weight  The parameter sets a weight to the minimization.  1 1 1 directions  The parameter directions allows to specify the directions in  which you want to solve the position.  useDirections  The parameter useDirections allows to select the directions in  which you want to solve the position. If unspecified, the default  values are all true.  delta  Distance to target  maxForce  Maximum force allowed.  If unspecified no maximum value will be considered.  minForce  Minimum force allowed.  If unspecified no minimum value will be considered.  maxPositiveDisp  Maximum displacement in the positive direction.  If unspecified no maximum value will be considered.  maxNegativeDisp  Maximum displacement in the negative direction.  If unspecified no maximum value will be considered.  value  Displacement or force to impose.   valueIndex  Index of the value (in InputValue vector) that we want to impose  If unspecified the default value is {0}  0 valueType  displacement = the constraint will impose the displacement provided in data value[valueIndex]  force = the constraint will impose the force provided in data value[valueIndex]  If unspecified, the default value is displacement  displacement Vector force  Output force. Warning: to get the actual force you should divide this value by dt.  0 displacement  Output displacement compared to the initial position.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects <p>Templates:</p> <ul> <li><code>Vec2d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::constraint</code></p> <p>parents: </p> <ul> <li><code>PositionModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The SoftRobotsConstraint stops acting after the given value. Use a negative value for infinite SoftRobotsConstraints  -1 indices  If indices size is lower than target size,  some target will not be considered  weight  The parameter sets a weight to the minimization.  1 1 directions  The parameter directions allows to specify the directions in  which you want to solve the position.  useDirections  The parameter useDirections allows to select the directions in  which you want to solve the position. If unspecified, the default  values are all true.  delta  Distance to target  maxForce  Maximum force allowed.  If unspecified no maximum value will be considered.  minForce  Minimum force allowed.  If unspecified no minimum value will be considered.  maxPositiveDisp  Maximum displacement in the positive direction.  If unspecified no maximum value will be considered.  maxNegativeDisp  Maximum displacement in the negative direction.  If unspecified no maximum value will be considered.  value  Displacement or force to impose.   valueIndex  Index of the value (in InputValue vector) that we want to impose  If unspecified the default value is {0}  0 valueType  displacement = the constraint will impose the displacement provided in data value[valueIndex]  force = the constraint will impose the force provided in data value[valueIndex]  If unspecified, the default value is displacement  displacement Vector force  Output force. Warning: to get the actual force you should divide this value by dt.  0 displacement  Output displacement compared to the initial position.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/SerialPortBridgeGeneric/","title":"SerialPortBridgeGeneric","text":"<p>Send data (ex: force, displacement, pressure\u2026) through the usb port.  Usually used to send data to an Arduino card to control the real robot.</p> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::controller</code></p> <p>parents: </p> <ul> <li><code>Controller</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 handleEventTriggersUpdate  Event handling frequency controls the controller update frequency  0 port  Serial port name  baudRate  Transmission speed  packetOut  Data to send: vector of unsigned char, each entry should be an integer between 0 and header-1 &lt;= 255. The value of 'header' will be sent at the beginning of the sent data, enabling to implement a header research in the 'receiving' code, for synchronization purposes.   packetIn  Data received: vector of unsigned char, each entry should be an integer between 0 and header-1 &lt;= 255.  header  Vector of unsigned char. Only one value is espected, two values if splitPacket = 1.  255 254 size  Size of the arrow to send. Use to check sentData size.  Will return a warning if sentData size does not match this value.  0 precise  If true, will send the data in the format [header[0],[MSB,LSB]*2*size]  0 splitPacket  If true, will split the packet in two for lower error rate (only in precise mode), data will have the format [header[0],[MSB,LSB]*size],[header[1],[MSB,LSB]*size]  0 redundancy  Each packet will be send that number of times (1=default)  1 receive  If true, will read from serial port (timeOut = 10ms)  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/SurfacePressureConstraint/","title":"SurfacePressureConstraint","text":"<p>This component constrains a model by applying pressure on surfaces (for exemple cavities)</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::constraint</code></p> <p>parents: </p> <ul> <li><code>SurfacePressureModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The SoftRobotsConstraint stops acting after the given value. Use a negative value for infinite SoftRobotsConstraints  -1 triangles  List of triangles on which the surface pressure is applied. If no list is given, the component will  fill the two lists with the context topology.  quads  List of quads on which the surface pressure is applied.  If no list is given, the component will  fill the two lists with the context topology.  initialCavityVolume  Output volume of the cavity at init (only relevant in case of closed mesh)  cavityVolume  Output volume of the cavity (only relevant in case of closed mesh)  1 flipNormal  Allows to invert cavity faces orientation.  If a positive pressure acts like a depressurization, try to set  flipNormal to true.  0 maxPressure  Maximum pressure allowed for actuation. If no value is set by user, no  maximum pressure constraint will be considered.  minPressure  Minimum pressure allowed for actuation. If no value is set by user, no  minimum pressure constraint will be considered. A negative pressure will empty/drain the cavity.  eqPressure  Equality constraint for the pressure.  Solver will try to maintain the pressure at this value. If unspecified, no equality constraint will be considered.  0 maxPressureVariation  Maximum pressure variation allowed for actuation. If no value is set by user, no  maximum will be considered.  maxVolumeGrowth  Maximum volume growth allowed for actuation. If no value is set by user, no  maximum will be considered. NB: this value has a dependancy with the time step  (volume/dt) in the dynamic case.  minVolumeGrowth  Minimum volume growth allowed for actuation. If no value is set by user, no  minimum will be considered. NB: this value has a dependancy with the time step  (volume/dt) in the dynamic case.  eqVolumeGrowth  Equality constraint for the volume growth.  Solver will try to maintain the volume growth at this value. If unspecified, no equality constraint will be considered.  0 maxVolumeGrowthVariation  Maximum volume growth variation allowed for actuation. If no value is set by user, no  maximum will be considered. NB: this value has a dependancy with the time step  (volume/dt) in the dynamic case.  value  List of choices for volume growth or pressure to impose.   valueIndex  Index of the value (in InputValue vector) that we want to impose  If unspecified the default value is {0}  0 valueType  volumeGrowth = the constraint will impose the volume growth provided in data value[valueIndex]  pressure = the constraint will impose the pressure provided in data value[valueIndex]  If unspecified, the default value is pressure  pressure Vector pressure  Output pressure. Warning: to get the actual pressure you should divide this value by dt.  0 volumeGrowth  Output volume growth.  0 Visualization drawPressure  Visualization of the value of pressure.  If unspecified, the default value is {false}  0 drawScale  Scale for visualization. If unspecified the default value is {0.1}  0.1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/UnilateralPlaneConstraint/","title":"UnilateralPlaneConstraint","text":"<p>This component is a simple point plane collision model.  By providing 4 points to the component, the first point will  be constrained to stay in one side of the plane described  by the three other points (in the direction of the plane normal).  All the four points, the triangle and the normal can be  seen by allowing the 'Collision Model' in the 'View' tab.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::constraint</code></p> <p>parents: </p> <ul> <li><code>SoftRobotsConstraint</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 group  ID of the group containing this constraint. This ID is used to specify which constraints are solved by which solver, by specifying in each solver which groups of constraints it should handle.  0 constraintIndex  Constraint index (first index in the right hand term resolution vector)  0 endTime  The SoftRobotsConstraint stops acting after the given value. Use a negative value for infinite SoftRobotsConstraints  -1 indices  Four indices:  -First one for the constrained point  -The others to describe the plane  flipNormal  The normal must be to the direction of the point  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/VolumeFromTetrahedrons/","title":"VolumeFromTetrahedrons","text":"<p>This class computes the volume of a given volumetric mesh.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 positions  If not set by user, find the context mechanical.  tetras  If not set by user, find the context topology.  hexas  If not set by user, find the context topology.  volume 0 update  If true, will update the volume with the current positions.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/SoftRobots/VolumeFromTriangles/","title":"VolumeFromTriangles","text":"<p>This class computes the volume of a given closed surfacic mesh.</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>SoftRobots</code></p> <p>namespace: <code>softrobots::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 positions  If not set by user, find the context mechanical.  triangles  If not set by user, find the context topology.  quads  If not set by user, find the context topology.  volume  Relevant if closed surface.  0 update  If true, will update the volume with the current positions.  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/VolumetricRendering/OglTetrahedralModel/","title":"OglTetrahedralModel","text":"<p>Tetrahedral model for OpenGL display</p> <p>Templates:</p> <ul> <li><code>Vec3d</code></li> </ul> <p>Target: <code>VolumetricRendering</code></p> <p>namespace: <code>sofa::component::visualmodel</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 position  Vertices coordinates  depthTest  Set Depth Test  0 blending  Set Blending  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/VolumetricRendering/OglTetrahedralModel/#examples","title":"Examples","text":"<p>VolumetricRendering/OglTetrahedralModel.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n\n    &lt;RequiredPlugin name=\"Sofa.Component.IO.Mesh\"/&gt; &lt;!-- Needed to use components [MeshVTKLoader] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [TetrahedronSetGeometryAlgorithms,TetrahedronSetTopologyContainer,TetrahedronSetTopologyModifier] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [OglFloat4Variable,OglFloatVariable,OglShader] --&gt;\n    &lt;RequiredPlugin name=\"VolumetricRendering\"/&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;MeshVTKLoader name=\"loader\" filename=\"mesh/raptorTetra_8418.vtu\" /&gt;\n    &lt;MechanicalObject src=\"@loader\" template=\"Vec3d\" /&gt;\n    &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" /&gt;\n\n    &lt;Node&gt;\n        &lt;OglShader geometryVerticesOut=\"12\" geometryInputType=\"10\" geometryOutputType=\"5\" fileVertexShaders=\"['shaders/tetra.vert']\" fileGeometryShaders=\"['shaders/tetra_triangles.geo']\" fileFragmentShaders=\"['shaders/tetra.frag']\" /&gt;\n        &lt;OglFloat4Variable id=\"vertexColor\" value=\"1 1 0 1\"/&gt;\n        &lt;OglFloatVariable id=\"tetraScale\" value=\"0.8\"/&gt;\n        &lt;OglFloatVariable id=\"u_enableLight\" value=\"2\"/&gt;\n        &lt;OglTetrahedralModel template=\"Vec3d\" /&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.IO.Mesh\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('RequiredPlugin', name=\"VolumetricRendering\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('MeshVTKLoader', name=\"loader\", filename=\"mesh/raptorTetra_8418.vtu\")\n    root.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3d\")\n    root.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\")\n\n    root = root.addChild('root')\n    root.addObject('OglShader', geometryVerticesOut=\"12\", geometryInputType=\"10\", geometryOutputType=\"5\", fileVertexShaders=\"['shaders/tetra.vert']\", fileGeometryShaders=\"['shaders/tetra_triangles.geo']\", fileFragmentShaders=\"['shaders/tetra.frag']\")\n    root.addObject('OglFloat4Variable', id=\"vertexColor\", value=\"1 1 0 1\")\n    root.addObject('OglFloatVariable', id=\"tetraScale\", value=\"0.8\")\n    root.addObject('OglFloatVariable', id=\"u_enableLight\", value=\"2\")\n    root.addObject('OglTetrahedralModel', template=\"Vec3d\")\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/VolumetricRendering/OglVolumetricModel/","title":"OglVolumetricModel","text":"<p>Volumetric model for OpenGL display</p> <p>Target: <code>VolumetricRendering</code></p> <p>namespace: <code>sofa::component::visualmodel</code></p> <p>parents: </p> <ul> <li><code>VisualModel</code></li> <li><code>VisualState</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 enable  Display the object or not  1 tetrahedra  Tetrahedra to draw  hexahedra  Hexahedra to draw  volumeScale  Scale for each volumetric primitive  1 depthTest  Set Depth Test  0 blending  Set Blending  0 defaultColor  Color for each volume (if the attribute a_vertexColor is not detected)  0 0 0 0 Vector position  Vertices coordinates  restPosition  Vertices rest coordinates  normal  Normals of the model  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/VolumetricRendering/OglVolumetricModel/#examples","title":"Examples","text":"<p>VolumetricRendering/OglVolumetricModel_tetra_clipped_physics.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"VolumetricRendering\" /&gt;\n\n    &lt;Node name=\"HexaRaptor\" &gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1.0e-7\" threshold=\"1.0e-7\"/&gt;\n\n        &lt;MeshVTKLoader name=\"loader\" filename=\"mesh/raptorTetra_8418.vtu\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" template=\"Vec3d\" /&gt;\n        &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" /&gt;\n\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"500\" poissonRatio=\"0.4\" method=\"large\"\n            computeVonMisesStress=\"2\"\n         /&gt;\n\n        &lt;Node&gt;\n            &lt;ClipPlane id=\"0\" position=\"0 0 0\" normal=\"0 0 1\" /&gt;\n            &lt;OglShader geometryVerticesOut=\"12\" geometryInputType=\"10\" geometryOutputType=\"5\" \n                vertFilename=\"share/shaders/tetra.vert\" geoFilename=\"share/shaders/tetra_triangles.geo\" fragFilename=\"share/shaders/tetra.frag\" /&gt;\n            &lt;OglFloatVariable id=\"volumeScale\" value=\"0.9\"/&gt;\n            &lt;OglFloatVariable id=\"u_enableLight\" value=\"1\"/&gt;\n            &lt;OglFloat4Attribute id=\"a_vertexColor\" value=\"@../FEM.vonMisesStressColors\"/&gt;\n            &lt;OglVolumetricModel printLog=\"false\" color=\"1 0 1 1\" /&gt;\n\n            &lt;IdentityMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"VolumetricRendering\")\n\n    HexaRaptor = root.addChild('HexaRaptor')\n    HexaRaptor.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    HexaRaptor.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1.0e-7\", threshold=\"1.0e-7\")\n    HexaRaptor.addObject('MeshVTKLoader', name=\"loader\", filename=\"mesh/raptorTetra_8418.vtu\")\n    HexaRaptor.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3d\")\n    HexaRaptor.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\")\n    HexaRaptor.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"500\", poissonRatio=\"0.4\", method=\"large\", computeVonMisesStress=\"2\")\n\n    HexaRaptor = HexaRaptor.addChild('HexaRaptor')\n    HexaRaptor.addObject('ClipPlane', id=\"0\", position=\"0 0 0\", normal=\"0 0 1\")\n    HexaRaptor.addObject('OglShader', geometryVerticesOut=\"12\", geometryInputType=\"10\", geometryOutputType=\"5\", vertFilename=\"share/shaders/tetra.vert\", geoFilename=\"share/shaders/tetra_triangles.geo\", fragFilename=\"share/shaders/tetra.frag\")\n    HexaRaptor.addObject('OglFloatVariable', id=\"volumeScale\", value=\"0.9\")\n    HexaRaptor.addObject('OglFloatVariable', id=\"u_enableLight\", value=\"1\")\n    HexaRaptor.addObject('OglFloat4Attribute', id=\"a_vertexColor\", value=\"@../FEM.vonMisesStressColors\")\n    HexaRaptor.addObject('OglVolumetricModel', printLog=\"false\", color=\"1 0 1 1\")\n    HexaRaptor.addObject('IdentityMapping')\n</code></pre> <p>VolumetricRendering/OglVolumetricModel_hexa_link.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"VolumetricRendering\" /&gt;\n\n    &lt;Node name=\"Input\"&gt;\n        &lt;SparseGridTopology name=\"grid\" n=\"51 51 51\" fileTopology=\"mesh/raptor_8kp.obj\" /&gt;\n\n        &lt;MechanicalObject name=\"dofs\" template=\"Vec3d\" /&gt;\n        &lt;HexahedronSetTopologyContainer name=\"topology\" hexahedra=\"@grid.hexahedra\" /&gt;\n    &lt;/Node&gt;\n\n    &lt;Node&gt;\n        &lt;OglShader geometryVerticesOut=\"12\" geometryInputType=\"10\" geometryOutputType=\"5\"\n                   fileVertexShaders=\"['share/shaders/tetra.vert']\" fileGeometryShaders=\"['share/shaders/tetra_triangles.geo']\" fileFragmentShaders=\"['share/shaders/tetra.frag']\" /&gt;\n        &lt;OglFloatVariable id=\"volumeScale\" value=\"0.9\"/&gt;\n        &lt;OglFloatVariable id=\"u_enableLight\" value=\"1\"/&gt;\n        &lt;OglVolumetricModel position=\"@../Input/dofs.position\" hexahedra=\"@../Input/topology.hexahedra\" printLog=\"false\" color=\"1 0 1 1\" /&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"VolumetricRendering\")\n\n    Input = root.addChild('Input')\n    Input.addObject('SparseGridTopology', name=\"grid\", n=\"51 51 51\", fileTopology=\"mesh/raptor_8kp.obj\")\n    Input.addObject('MechanicalObject', name=\"dofs\", template=\"Vec3d\")\n    Input.addObject('HexahedronSetTopologyContainer', name=\"topology\", hexahedra=\"@grid.hexahedra\")\n\n    root = root.addChild('root')\n    root.addObject('OglShader', geometryVerticesOut=\"12\", geometryInputType=\"10\", geometryOutputType=\"5\", fileVertexShaders=\"['share/shaders/tetra.vert']\", fileGeometryShaders=\"['share/shaders/tetra_triangles.geo']\", fileFragmentShaders=\"['share/shaders/tetra.frag']\")\n    root.addObject('OglFloatVariable', id=\"volumeScale\", value=\"0.9\")\n    root.addObject('OglFloatVariable', id=\"u_enableLight\", value=\"1\")\n    root.addObject('OglVolumetricModel', position=\"@../Input/dofs.position\", hexahedra=\"@../Input/topology.hexahedra\", printLog=\"false\", color=\"1 0 1 1\")\n</code></pre> <p>VolumetricRendering/OglVolumetricModel_hexa.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.StateContainer\"/&gt; &lt;!-- Needed to use components [MechanicalObject] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Dynamic\"/&gt; &lt;!-- Needed to use components [HexahedronSetTopologyContainer] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.Component.Topology.Container.Grid\"/&gt; &lt;!-- Needed to use components [SparseGridTopology] --&gt;\n    &lt;RequiredPlugin name=\"Sofa.GL.Component.Shader\"/&gt; &lt;!-- Needed to use components [OglFloatVariable,OglShader] --&gt;\n    &lt;RequiredPlugin name=\"VolumetricRendering\" /&gt;\n\n    &lt;DefaultAnimationLoop/&gt;\n    &lt;SparseGridTopology name=\"grid\" n=\"51 51 51\" fileTopology=\"mesh/raptor_8kp.obj\" /&gt;\n\n    &lt;MechanicalObject template=\"Vec3d\" /&gt;\n    &lt;HexahedronSetTopologyContainer hexahedra=\"@grid.hexahedra\" /&gt;\n\n    &lt;Node&gt;\n        &lt;OglShader geometryVerticesOut=\"12\" geometryInputType=\"10\" geometryOutputType=\"5\"\n                   fileVertexShaders=\"['share/shaders/tetra.vert']\" fileGeometryShaders=\"['share/shaders/tetra_triangles.geo']\" fileFragmentShaders=\"['share/shaders/tetra.frag']\" /&gt;\n        &lt;OglFloatVariable id=\"volumeScale\" value=\"0.9\"/&gt;\n        &lt;OglFloatVariable id=\"u_enableLight\" value=\"1\"/&gt;\n        &lt;OglVolumetricModel printLog=\"false\" color=\"1 0 1 1\" /&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.StateContainer\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Dynamic\")\n    root.addObject('RequiredPlugin', name=\"Sofa.Component.Topology.Container.Grid\")\n    root.addObject('RequiredPlugin', name=\"Sofa.GL.Component.Shader\")\n    root.addObject('RequiredPlugin', name=\"VolumetricRendering\")\n    root.addObject('DefaultAnimationLoop')\n    root.addObject('SparseGridTopology', name=\"grid\", n=\"51 51 51\", fileTopology=\"mesh/raptor_8kp.obj\")\n    root.addObject('MechanicalObject', template=\"Vec3d\")\n    root.addObject('HexahedronSetTopologyContainer', hexahedra=\"@grid.hexahedra\")\n\n    root = root.addChild('root')\n    root.addObject('OglShader', geometryVerticesOut=\"12\", geometryInputType=\"10\", geometryOutputType=\"5\", fileVertexShaders=\"['share/shaders/tetra.vert']\", fileGeometryShaders=\"['share/shaders/tetra_triangles.geo']\", fileFragmentShaders=\"['share/shaders/tetra.frag']\")\n    root.addObject('OglFloatVariable', id=\"volumeScale\", value=\"0.9\")\n    root.addObject('OglFloatVariable', id=\"u_enableLight\", value=\"1\")\n    root.addObject('OglVolumetricModel', printLog=\"false\", color=\"1 0 1 1\")\n</code></pre> <p>VolumetricRendering/OglVolumetricModel_physics.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"VolumetricRendering\" /&gt;\n\n    &lt;Node name=\"HexaRaptor\" &gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1.0e-7\" threshold=\"1.0e-7\"/&gt;\n\n        &lt;SparseGridTopology name=\"grid\" n=\"21 21 21\" fileTopology=\"mesh/raptor_8kp.obj\" /&gt;\n\n        &lt;MechanicalObject name=\"dofs\" template=\"Vec3d\" /&gt;\n        &lt;HexahedronSetTopologyContainer hexahedra=\"@grid.hexahedra\" /&gt;\n        &lt;HexahedronSetGeometryAlgorithms /&gt;\n\n        &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"500\" poissonRatio=\"0.4\" method=\"large\" /&gt;\n\n        &lt;Node&gt;\n            &lt;OglShader geometryVerticesOut=\"12\" geometryInputType=\"10\" geometryOutputType=\"5\" \n                vertFilename=\"share/shaders/tetra.vert\" geoFilename=\"share/shaders/tetra_triangles.geo\" fragFilename=\"share/shaders/tetra.frag\" /&gt;\n            &lt;OglFloatVariable id=\"volumeScale\" value=\"0.9\"/&gt;\n            &lt;OglFloatVariable id=\"u_enableLight\" value=\"1\"/&gt;\n            &lt;OglFloat4Attribute id=\"a_vertexColor\" value=\"@../grid.position\"/&gt;\n            &lt;OglVolumetricModel printLog=\"false\" color=\"1 0 1 1\" /&gt;\n\n            &lt;IdentityMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"VolumetricRendering\")\n\n    HexaRaptor = root.addChild('HexaRaptor')\n    HexaRaptor.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    HexaRaptor.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1.0e-7\", threshold=\"1.0e-7\")\n    HexaRaptor.addObject('SparseGridTopology', name=\"grid\", n=\"21 21 21\", fileTopology=\"mesh/raptor_8kp.obj\")\n    HexaRaptor.addObject('MechanicalObject', name=\"dofs\", template=\"Vec3d\")\n    HexaRaptor.addObject('HexahedronSetTopologyContainer', hexahedra=\"@grid.hexahedra\")\n    HexaRaptor.addObject('HexahedronSetGeometryAlgorithms')\n    HexaRaptor.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"500\", poissonRatio=\"0.4\", method=\"large\")\n\n    HexaRaptor = HexaRaptor.addChild('HexaRaptor')\n    HexaRaptor.addObject('OglShader', geometryVerticesOut=\"12\", geometryInputType=\"10\", geometryOutputType=\"5\", vertFilename=\"share/shaders/tetra.vert\", geoFilename=\"share/shaders/tetra_triangles.geo\", fragFilename=\"share/shaders/tetra.frag\")\n    HexaRaptor.addObject('OglFloatVariable', id=\"volumeScale\", value=\"0.9\")\n    HexaRaptor.addObject('OglFloatVariable', id=\"u_enableLight\", value=\"1\")\n    HexaRaptor.addObject('OglFloat4Attribute', id=\"a_vertexColor\", value=\"@../grid.position\")\n    HexaRaptor.addObject('OglVolumetricModel', printLog=\"false\", color=\"1 0 1 1\")\n    HexaRaptor.addObject('IdentityMapping')\n</code></pre> <p>VolumetricRendering/OglVolumetricModel_tetra_physics.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"VolumetricRendering\" /&gt;\n\n    &lt;Node name=\"HexaRaptor\" &gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1.0e-7\" threshold=\"1.0e-7\"/&gt;\n\n        &lt;MeshVTKLoader name=\"loader\" filename=\"mesh/raptorTetra_8418.vtu\" /&gt;\n        &lt;MechanicalObject src=\"@loader\" template=\"Vec3d\" /&gt;\n        &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" /&gt;\n\n        &lt;TetrahedronFEMForceField name=\"FEM\" youngModulus=\"500\" poissonRatio=\"0.4\" method=\"large\"\n            computeVonMisesStress=\"2\"\n         /&gt;\n\n        &lt;Node&gt;\n            &lt;OglShader geometryVerticesOut=\"12\" geometryInputType=\"10\" geometryOutputType=\"5\" \n                vertFilename=\"share/shaders/tetra.vert\" geoFilename=\"share/shaders/tetra_triangles.geo\" fragFilename=\"share/shaders/tetra.frag\" /&gt;\n            &lt;OglFloatVariable id=\"volumeScale\" value=\"0.9\"/&gt;\n            &lt;OglFloatVariable id=\"u_enableLight\" value=\"1\"/&gt;\n            &lt;OglFloat4Attribute id=\"a_vertexColor\" value=\"@../FEM.vonMisesStressColors\"/&gt;\n            &lt;OglVolumetricModel printLog=\"false\" color=\"1 0 1 1\" /&gt;\n\n            &lt;IdentityMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"VolumetricRendering\")\n\n    HexaRaptor = root.addChild('HexaRaptor')\n    HexaRaptor.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    HexaRaptor.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1.0e-7\", threshold=\"1.0e-7\")\n    HexaRaptor.addObject('MeshVTKLoader', name=\"loader\", filename=\"mesh/raptorTetra_8418.vtu\")\n    HexaRaptor.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3d\")\n    HexaRaptor.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\")\n    HexaRaptor.addObject('TetrahedronFEMForceField', name=\"FEM\", youngModulus=\"500\", poissonRatio=\"0.4\", method=\"large\", computeVonMisesStress=\"2\")\n\n    HexaRaptor = HexaRaptor.addChild('HexaRaptor')\n    HexaRaptor.addObject('OglShader', geometryVerticesOut=\"12\", geometryInputType=\"10\", geometryOutputType=\"5\", vertFilename=\"share/shaders/tetra.vert\", geoFilename=\"share/shaders/tetra_triangles.geo\", fragFilename=\"share/shaders/tetra.frag\")\n    HexaRaptor.addObject('OglFloatVariable', id=\"volumeScale\", value=\"0.9\")\n    HexaRaptor.addObject('OglFloatVariable', id=\"u_enableLight\", value=\"1\")\n    HexaRaptor.addObject('OglFloat4Attribute', id=\"a_vertexColor\", value=\"@../FEM.vonMisesStressColors\")\n    HexaRaptor.addObject('OglVolumetricModel', printLog=\"false\", color=\"1 0 1 1\")\n    HexaRaptor.addObject('IdentityMapping')\n</code></pre> <p>VolumetricRendering/OglVolumetricModel_hexa_physics.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"VolumetricRendering\" /&gt;\n\n    &lt;Node name=\"HexaRaptor\" &gt;\n        &lt;EulerImplicitSolver  rayleighStiffness=\"0.1\" rayleighMass=\"0.1\" /&gt;\n        &lt;CGLinearSolver iterations=\"100\" tolerance=\"1.0e-7\" threshold=\"1.0e-7\"/&gt;\n\n        &lt;SparseGridTopology name=\"grid\" n=\"21 21 21\" fileTopology=\"mesh/raptor_8kp.obj\" /&gt;\n\n        &lt;MechanicalObject name=\"dofs\" template=\"Vec3d\" /&gt;\n        &lt;HexahedronSetTopologyContainer hexahedra=\"@grid.hexahedra\" /&gt;\n        &lt;HexahedronSetGeometryAlgorithms /&gt;\n\n        &lt;HexahedronFEMForceField name=\"FEM\" youngModulus=\"500\" poissonRatio=\"0.4\" method=\"large\" /&gt;\n\n        &lt;Node&gt;\n            &lt;OglShader geometryVerticesOut=\"12\" geometryInputType=\"10\" geometryOutputType=\"5\" \n                vertFilename=\"share/shaders/tetra.vert\" geoFilename=\"share/shaders/tetra_triangles.geo\" fragFilename=\"share/shaders/tetra.frag\" /&gt;\n            &lt;OglFloatVariable id=\"volumeScale\" value=\"0.9\"/&gt;\n            &lt;OglFloatVariable id=\"u_enableLight\" value=\"1\"/&gt;\n            &lt;OglFloat4Attribute id=\"a_vertexColor\" value=\"@../grid.position\"/&gt;\n            &lt;OglVolumetricModel printLog=\"false\" color=\"1 0 1 1\" /&gt;\n\n            &lt;IdentityMapping /&gt;\n        &lt;/Node&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"VolumetricRendering\")\n\n    HexaRaptor = root.addChild('HexaRaptor')\n    HexaRaptor.addObject('EulerImplicitSolver', rayleighStiffness=\"0.1\", rayleighMass=\"0.1\")\n    HexaRaptor.addObject('CGLinearSolver', iterations=\"100\", tolerance=\"1.0e-7\", threshold=\"1.0e-7\")\n    HexaRaptor.addObject('SparseGridTopology', name=\"grid\", n=\"21 21 21\", fileTopology=\"mesh/raptor_8kp.obj\")\n    HexaRaptor.addObject('MechanicalObject', name=\"dofs\", template=\"Vec3d\")\n    HexaRaptor.addObject('HexahedronSetTopologyContainer', hexahedra=\"@grid.hexahedra\")\n    HexaRaptor.addObject('HexahedronSetGeometryAlgorithms')\n    HexaRaptor.addObject('HexahedronFEMForceField', name=\"FEM\", youngModulus=\"500\", poissonRatio=\"0.4\", method=\"large\")\n\n    HexaRaptor = HexaRaptor.addChild('HexaRaptor')\n    HexaRaptor.addObject('OglShader', geometryVerticesOut=\"12\", geometryInputType=\"10\", geometryOutputType=\"5\", vertFilename=\"share/shaders/tetra.vert\", geoFilename=\"share/shaders/tetra_triangles.geo\", fragFilename=\"share/shaders/tetra.frag\")\n    HexaRaptor.addObject('OglFloatVariable', id=\"volumeScale\", value=\"0.9\")\n    HexaRaptor.addObject('OglFloatVariable', id=\"u_enableLight\", value=\"1\")\n    HexaRaptor.addObject('OglFloat4Attribute', id=\"a_vertexColor\", value=\"@../grid.position\")\n    HexaRaptor.addObject('OglVolumetricModel', printLog=\"false\", color=\"1 0 1 1\")\n    HexaRaptor.addObject('IdentityMapping')\n</code></pre> <p>VolumetricRendering/OglVolumetricModel_tetra.scn</p> XMLPython <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"root\" dt=\"0.02\"&gt;\n    &lt;RequiredPlugin name=\"VolumetricRendering\" /&gt;\n\n    &lt;MeshVTKLoader name=\"loader\" filename=\"mesh/raptorTetra_8418.vtu\" /&gt;\n    &lt;MechanicalObject src=\"@loader\" template=\"Vec3d\" /&gt;\n    &lt;include href=\"Objects/TetrahedronSetTopology.xml\" src=\"@loader\" /&gt;\n\n    &lt;Node&gt;\n        &lt;OglShader geometryVerticesOut=\"12\" geometryInputType=\"10\" geometryOutputType=\"5\" \n            vertFilename=\"share/shaders/tetra.vert\" geoFilename=\"share/shaders/tetra_triangles.geo\" fragFilename=\"share/shaders/tetra.frag\" /&gt;\n        &lt;OglFloatVariable id=\"volumeScale\" value=\"0.9\"/&gt;\n        &lt;OglFloatVariable id=\"u_enableLight\" value=\"1\"/&gt;\n        &lt;OglFloat4Attribute id=\"a_vertexColor\" value=\"@../loader.position\"/&gt;\n        &lt;OglVolumetricModel printLog=\"false\"  /&gt;\n    &lt;/Node&gt;\n\n&lt;/Node&gt;\n</code></pre> <pre><code>def createScene(rootNode):\n\n    root = rootNode.addChild('root', dt=\"0.02\")\n    root.addObject('RequiredPlugin', name=\"VolumetricRendering\")\n    root.addObject('MeshVTKLoader', name=\"loader\", filename=\"mesh/raptorTetra_8418.vtu\")\n    root.addObject('MechanicalObject', src=\"@loader\", template=\"Vec3d\")\n    root.addObject('include', href=\"Objects/TetrahedronSetTopology.xml\", src=\"@loader\")\n\n    root = root.addChild('root')\n    root.addObject('OglShader', geometryVerticesOut=\"12\", geometryInputType=\"10\", geometryOutputType=\"5\", vertFilename=\"share/shaders/tetra.vert\", geoFilename=\"share/shaders/tetra_triangles.geo\", fragFilename=\"share/shaders/tetra.frag\")\n    root.addObject('OglFloatVariable', id=\"volumeScale\", value=\"0.9\")\n    root.addObject('OglFloatVariable', id=\"u_enableLight\", value=\"1\")\n    root.addObject('OglFloat4Attribute', id=\"a_vertexColor\", value=\"@../loader.position\")\n    root.addObject('OglVolumetricModel', printLog=\"false\")\n</code></pre>"},{"location":"35_Plugins/50_Usual_plugins/image/CollisionToCarvingEngine/","title":"CollisionToCarvingEngine","text":"<p>Filter an image</p> <p>Templates:</p> <ul> <li><code>ImageD,ImageB</code></li> <li><code>ImageD,ImageD</code></li> <li><code>ImageD,ImageUC</code></li> <li><code>ImageUC,ImageD</code></li> <li><code>ImageUC,ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 inputImage 0 0 0 0 0 inputTransform 0 0 0 0 0 0 1 1 1 0 1 0 outputImage 0 0 0 0 0 outputTransform 0 0 0 0 0 0 1 1 1 0 1 0 trackedPosition  Position de test pour la collision  0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/DataExchange/","title":"DataExchange","text":"<p>DataExchange DataExchange</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageC</code></li> <li><code>ImageD</code></li> <li><code>ImageF</code></li> <li><code>ImageI</code></li> <li><code>ImageL</code></li> <li><code>ImageS</code></li> <li><code>ImageUC</code></li> <li><code>ImageUI</code></li> <li><code>ImageUL</code></li> <li><code>ImageUS</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::core</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 from  source object to copy  to  destination object to copy  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/DepthMapToMeshEngine/","title":"DepthMapToMeshEngine","text":"<p>Compute a mesh from a depth map image </p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 depthFactor  Intensity to depth factor  1 minThreshold  minimal depth for point creation  0.1 diffThreshold  maximal depth variation for triangle creation  1 image 0 0 0 0 0 transform 0 0 0 0 0 0 1 1 1 0 1 0 texImage 0 0 0 0 0 position  output positions  texCoord  output texture coordinates  texOffset  texture offsets (in [0,1])  0 0 triangles  output triangles  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/GenerateImage/","title":"GenerateImage","text":"<p>Create an image with custom dimensions</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 dim  dimensions (x,y,z,c,t)  image 0 0 0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageAccumulator/","title":"ImageAccumulator","text":"<p>Wraps images from a video stream into a single image</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 accumulate  accumulate ?  0 inputImage 0 0 0 0 0 inputTransform 0 0 0 0 0 0 1 1 1 0 1 0 outputImage 0 0 0 0 0 outputTransform 0 0 0 0 0 0 1 1 1 0 1 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageContainer/","title":"ImageContainer","text":"<p>Image Container</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::container</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 image  image  0 0 0 0 0 filename  Image file  sequence  load a sequence of images  0 numberOfFrames  The number of frames of the sequence to be loaded. Default is the entire sequence.  Transform transform  12-param vector for trans, rot, scale, ...  Visualization drawBB  draw bounding box  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageCoordValuesFromPositions/","title":"ImageCoordValuesFromPositions","text":"<p>Get interpolated coordinates at sample locations in an image with 3 channels</p> <p>Templates:</p> <ul> <li><code>ImageD</code></li> <li><code>ImageF</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 image 0 0 0 0 0 transform 0 0 0 0 0 0 1 1 1 0 1 0 position  input positions  interpolation  Interpolation method.  values  Interpolated values.  outValue  default value outside image  0 addPosition  add positions to interpolated values (to get translated positions)  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageDataDisplay/","title":"ImageDataDisplay","text":"<p>Store custom data in an image. A template input image with non zero voxels (where data will be stored) has to be provided</p> <p>Templates:</p> <ul> <li><code>ImageB,ImageD</code></li> <li><code>ImageD,ImageD</code></li> <li><code>ImageUC,ImageD</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 inputImage 0 0 0 0 0 outputImage 0 0 0 0 0 VoxelData  Data associed to each non null input voxel  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageExporter/","title":"ImageExporter","text":"<p>Save an image</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::misc</code></p> <p>parents: </p> <ul> <li><code>BaseObject</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 image  image  0 0 0 0 0 transform 0 0 0 0 0 0 1 1 1 0 1 0 filename  output file  exportEveryNumberOfSteps  export file only at specified number of steps (0=disable)  0 exportAtBegin  export file at the initialization  0 exportAtEnd  export file when the simulation is finished  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageFilter/","title":"ImageFilter","text":"<p>Filter an image</p> <p>Templates:</p> <ul> <li><code>ImageB,ImageB</code></li> <li><code>ImageB,ImageD</code></li> <li><code>ImageD,ImageB</code></li> <li><code>ImageD,ImageD</code></li> <li><code>ImageD,ImageUC</code></li> <li><code>ImageUC,ImageD</code></li> <li><code>ImageUC,ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filter  Filter  param  Parameters  inputImage 0 0 0 0 0 inputTransform 0 0 0 0 0 0 1 1 1 0 1 0 outputImage 0 0 0 0 0 outputTransform 0 0 0 0 0 0 1 1 1 0 1 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageOperation/","title":"ImageOperation","text":"<p>This class computes an image as an operation between two images</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 operation  operation  inputImage1 0 0 0 0 0 inputImage2 0 0 0 0 0 outputImage 0 0 0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageSampler/","title":"ImageSampler","text":"<p>Samples an object represented by an image</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 image 0 0 0 0 0 transform 0 0 0 0 0 0 1 1 1 0 1 0 method  method (param)  computeRecursive  if true: insert nodes recursively and build the graph  0 param  Parameters  position  output positions  fixedPosition  user defined sample positions  edges  edges connecting neighboring nodes  graphEdges  oriented graph connecting parent to child nodes  hexahedra  output hexahedra  distances 0 0 0 0 0 voronoi 0 0 0 0 0 clearData  clear distance image after computation  1 Visualization showSamplesScale  show samples  0 drawMode  0: points, 1: spheres  0 showEdges  show edges  0 showGraph  show graph  0 showFaces  show the faces of cubes  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageToRigidMassEngine/","title":"ImageToRigidMassEngine","text":"<p>Compute rigid mass from a density image</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 image 0 0 0 0 0 transform 0 0 0 0 0 0 1 1 1 0 1 0 position  position  0 0 0 0 0 0 1 mass  mass  0 inertia  axis-aligned inertia tensor  0 0 0 rigidMass  rigidMass  1 1 [1 0 0,0 1 0,0 0 1] density  density (in kg/m^3)  1000 multiply  multiply density by image intensity?  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageTransform/","title":"ImageTransform","text":"<p>Read data from ImageContainer</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 update  Type of update  Transformation translation  Translation  0 0 0 euler  Euler angles  0 0 0 scale  Voxel size  1 1 1 isPerspective  Is perspective?  0 timeOffset  Time offset  0 timeScale  Time scale  1 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageTransformEngine/","title":"ImageTransformEngine","text":"<p>Apply a transform to the data 'transform'</p> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 inputTransform 0 0 0 0 0 0 1 1 1 0 1 0 outputTransform 0 0 0 0 0 0 1 1 1 0 1 0 translation  translation vector   0 0 0 rotation  rotation vector   0 0 0 scale  scale factor  1 inverse  true to apply inverse transformation  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/ImageValuesFromPositions/","title":"ImageValuesFromPositions","text":"<p>Get image intensities at sample locations</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 image 0 0 0 0 0 transform 0 0 0 0 0 0 1 1 1 0 1 0 position  input positions  interpolation  Interpolation method.  values  Interpolated values.  outValue  default value outside image  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/MarchingCubesEngine/","title":"MarchingCubesEngine","text":"<p>Compute an isosurface from an image using marching cubes algorithm</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 isoValue  pixel value to extract isosurface  1 subdiv  number of subdividions in x,y,z directions (use image dimension if =0)  0 0 0 invertNormals  invert triangle vertex order  1 image 0 0 0 0 0 transform 0 0 0 0 0 0 1 1 1 0 1 0 position  output positions  triangles  output triangles  Visualization showMesh  show reconstructed mesh  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/MergeImages/","title":"MergeImages","text":"<p>Merge images</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 overlap  method for handling overlapping regions  interpolation  Interpolation method.  nbImages  number of images to merge  0 image  Image  0 0 0 0 0 transform  Transform  0 0 0 0 0 0 1 1 1 0 1 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/MeshToImageEngine/","title":"MeshToImageEngine","text":"<p>Compute a rasterization image from several meshes</p> <p>Templates:</p> <ul> <li><code>ImageB</code></li> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> <li><code>ImageUS</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 voxelSize  voxel Size (redondant with and not priority over nbVoxels)  1 1 1 nbVoxels  number of voxel (redondant with and priority over voxelSize)  0 0 0 rotateImage  orient the image bounding box according to the mesh (OBB)  0 padSize  size of border in number of voxels  0 subdiv  number of subdivisions for face rasterization (if needed, increase to avoid holes)  4 image 0 0 0 0 0 transform 0 0 0 0 0 0 1 1 1 0 1 0 backgroundValue  pixel value at background  0 nbMeshes  number of meshes to voxelize (Note that the last one write on the previous ones)  1 gridSnap  align voxel centers on voxelSize multiples for perfect image merging (nbVoxels and rotateImage should be off)  1 worldGridAligned  perform rasterization on a world aligned grid using nbVoxels and voxelSize  0 Inputs position1  input positions for mesh (1)  edges1  input edges for mesh (1)  triangles1  input triangles for mesh (1)  value1  pixel value on mesh surface (1)  fillInside1  fill the mesh using insideValue?(1)  insideValue1  pixel value inside the mesh(1)  roiIndices1  List of Regions Of Interest, vertex indices(1)  roiValue1  pixel value for ROIs, list of values(1)  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/TransferFunction/","title":"TransferFunction","text":"<p>Transforms pixel intensities</p> <p>Templates:</p> <ul> <li><code>ImageD,ImageD</code></li> <li><code>ImageD,ImageUC</code></li> <li><code>ImageUC,ImageB</code></li> <li><code>ImageUC,ImageD</code></li> <li><code>ImageUC,ImageF</code></li> <li><code>ImageUC,ImageUC</code></li> <li><code>ImageUC,ImageUI</code></li> <li><code>ImageUC,ImageUS</code></li> <li><code>ImageUS,ImageUC</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 filter  Filter  0 - Piecewise Linear ( i1, o1, i2, o2 ...) param  Parameters  inputImage 0 0 0 0 0 outputImage 0 0 0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image/VoronoiToMeshEngine/","title":"VoronoiToMeshEngine","text":"<p>Generate flat faces between adjacent regions of an image</p> <p>Templates:</p> <ul> <li><code>ImageUC</code></li> <li><code>ImageUI</code></li> </ul> <p>Target: <code>image</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 image  Voronoi image  0 0 0 0 0 background  Optional Voronoi image of the background to surface details  0 0 0 0 0 transform 0 0 0 0 0 0 1 1 1 0 1 0 position  output positions  edges  output edges  triangles  output triangles  minLength  minimun edge length in pixels  2 Visualization showMesh  show reconstructed mesh  0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/AverageCatchAllVector/","title":"AverageCatchAllVector","text":"<p>AverageCatchAllVector</p> <p>Templates:</p> <ul> <li><code>H</code></li> <li><code>I</code></li> <li><code>L</code></li> <li><code>Vec3d</code></li> <li><code>Vec3f</code></li> <li><code>bool</code></li> <li><code>d</code></li> <li><code>f</code></li> <li><code>h</code></li> <li><code>i</code></li> <li><code>l</code></li> </ul> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 data_out  data_out  data_in1  data_in1  data_in2  data_in2  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/CatchAllVector/","title":"CatchAllVector","text":"<p>CatchAllVector</p> <p>Templates:</p> <ul> <li><code>H</code></li> <li><code>I</code></li> <li><code>L</code></li> <li><code>Vec3d</code></li> <li><code>Vec3f</code></li> <li><code>bool</code></li> <li><code>d</code></li> <li><code>f</code></li> <li><code>h</code></li> <li><code>i</code></li> <li><code>l</code></li> </ul> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 data  data  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/ContourImageToolBox/","title":"ContourImageToolBox","text":"<p>ContourImageToolBox</p> <p>Templates:</p> <ul> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>ContourImageToolBoxNoTemplated</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 islinkedtotoolbox  true if a toobbox use this Label  0 color 1 1 1 1 imageposition 3Dposition axis 4 value out  Output list of space position of each pixel on contour  out2  Output list of image position of each pixel on contour  threshold radius image  Input image  transform  Transform  imageOut  Image containing the contour  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/DepthImageToolBox/","title":"DepthImageToolBox","text":"<p>DepthImageToolBox</p> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>LabelImageToolBox</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 islinkedtotoolbox  true if a toobbox use this Label  0 color 1 1 1 1 filename scnfilename transform  Transform  0 0 0 0 0 0 1 1 1 0 1 0 tagfilter image 0 0 0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/DistanceZoneImageToolBox/","title":"DistanceZoneImageToolBox","text":"<p>DistanceZoneImageToolBox</p> <p>Templates:</p> <ul> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DistanceZoneImageToolBoxNoTemplated</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 islinkedtotoolbox  true if a toobbox use this Label  0 color 1 1 1 1 imageIn  Input image  imageOut  OutputImage  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/LabelBoxImageToolBox/","title":"LabelBoxImageToolBox","text":"<p>LabelBoxImageToolBox</p> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>LabelImageToolBox</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 islinkedtotoolbox  true if a toobbox use this Label  0 color 1 1 1 1 imagepositions 3Dpositions imagepositionbox positionbox filename <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/LabelGridImageToolBox/","title":"LabelGridImageToolBox","text":"<p>LabelGridImageToolBox</p> <p>Templates:</p> <ul> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>LabelGridImageToolBoxNoTemplated</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 islinkedtotoolbox  true if a toobbox use this Label  0 color 1 1 1 1 resolution 10 10 filename transform  Transform  0 0 0 0 0 0 1 1 1 0 1 0 outQuads outEdges outImagePosition outNormalImagePositionBySection tagfilter image  Input image  0 0 0 0 0 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/LabelPointImageToolBox/","title":"LabelPointImageToolBox","text":"<p>LabelPointImageToolBox</p> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>LabelImageToolBox</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 islinkedtotoolbox  true if a toobbox use this Label  0 color 1 1 1 1 imageposition 3Dposition axis 4 value <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/LabelPointsBySectionImageToolBox/","title":"LabelPointsBySectionImageToolBox","text":"<p>LabelPointsBySectionImageToolBox</p> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>LabelImageToolBox</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 islinkedtotoolbox  true if a toobbox use this Label  0 color 1 1 1 1 imagepositions 3Dpositions axis 4 filename <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/MergedCatchAllVector/","title":"MergedCatchAllVector","text":"<p>MergedCatchAllVector</p> <p>Templates:</p> <ul> <li><code>H</code></li> <li><code>I</code></li> <li><code>L</code></li> <li><code>Vec3d</code></li> <li><code>Vec3f</code></li> <li><code>bool</code></li> <li><code>d</code></li> <li><code>f</code></li> <li><code>h</code></li> <li><code>i</code></li> <li><code>l</code></li> </ul> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>DataEngine</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 data_out  data_out  data_in1  data_in1  data_in2  data_in2  <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"35_Plugins/50_Usual_plugins/image_gui/ZoneGeneratorImageToolBox/","title":"ZoneGeneratorImageToolBox","text":"<p>ZoneGeneratorImageToolBox</p> <p>Templates:</p> <ul> <li><code>ImageD</code></li> <li><code>ImageUC</code></li> </ul> <p>Target: <code>image_gui</code></p> <p>namespace: <code>sofa::component::engine</code></p> <p>parents: </p> <ul> <li><code>ZoneGeneratorImageToolBoxNoTemplated</code></li> </ul> <p>Data: </p> Name Description Default value name  object name  unnamed printLog  if true, emits extra messages at runtime.  0 tags  list of the subsets the objet belongs to  bbox  this object bounding box  componentState  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).  Undefined listening  if true, handle the events, otherwise ignore the events  0 islinkedtotoolbox  true if a toobbox use this Label  0 color 1 1 1 1 imageIn  Input image  imageOut  OutputImage  size 1 1 seed 0 radius 0.1 k 100 <p>Links: </p> Name Description context Graph Node containing this object (or BaseContext::getDefault() if no graph is used) slaves Sub-objects used internally by this object master nullptr for regular objects, or master object for which this object is one sub-objects"},{"location":"40_Programming_with_SOFA/05_SOFA_packages/","title":"Intro","text":"<p>In order to allow building plugins separately from Sofa and building an external application or library which depends on sofa, we provide cmake package configurations files. Those files are what cmake looks for when you call find_package(Something), which is now how you find the dependencies for your plugins.</p> <p>The repository is divided in multiple packages: SofaFramework for framework/, SofaSimulation for sofa/simulation, five packages for modules (divided according to the SofaComponent* meta-libraries), and SofaGui for GUI-related libraries.</p> <p>Also, there is a package for each plugin that is expected to be used as a library. (E.g. SofaPython, Compliant, Flexible...)</p> <p>The following section lists the libraries is each package.</p>"},{"location":"40_Programming_with_SOFA/05_SOFA_packages/#packages","title":"Packages","text":""},{"location":"40_Programming_with_SOFA/05_SOFA_packages/#sofaframework","title":"SofaFramework","text":"<ul> <li>SofaCore</li> <li>SofaDefaultType</li> <li>SofaHelper</li> <li>SofaSimulationCore</li> </ul>"},{"location":"40_Programming_with_SOFA/05_SOFA_packages/#sofasimulation","title":"SofaSimulation","text":"<ul> <li>SofaSimulationCommon</li> <li>SofaSimulationGraph</li> <li>SofaSimulationTree</li> </ul>"},{"location":"40_Programming_with_SOFA/05_SOFA_packages/#sofabase","title":"SofaBase","text":"<ul> <li>SofaBaseCollision</li> <li>SofaBaseLinearSolver</li> <li>SofaBaseMechanics</li> <li>SofaBaseTopology</li> <li>SofaBaseVisual</li> <li>SofaBaseUtils</li> </ul>"},{"location":"40_Programming_with_SOFA/05_SOFA_packages/#sofacommon","title":"SofaCommon","text":"<ul> <li>SofaDeformable</li> <li>SofaEigen2Solver</li> <li>SofaEngine</li> <li>SofaExplicitOdeSolver</li> <li>SofaImplicitOdeSolver</li> <li>SofaLoader</li> <li>SofaMeshCollision</li> <li>SofaObjectInteraction</li> <li>SofaRigid</li> <li>SofaSimpleFem</li> </ul>"},{"location":"40_Programming_with_SOFA/05_SOFA_packages/#sofageneral","title":"SofaGeneral","text":"<ul> <li>SofaGeneralAnimationLoop</li> <li>SofaGeneralDeformable</li> <li>SofaGeneralExplicitOdeSolver</li> <li>SofaGeneralImplicitOdeSolver</li> <li>SofaGeneralLinearSolver</li> <li>SofaGeneralLoader</li> <li>SofaGeneralMeshCollision</li> <li>SofaGeneralObjectInteraction</li> <li>SofaGeneralRigid</li> <li>SofaGeneralSimpleFem</li> <li>SofaGeneralTopology</li> <li>SofaGeneralVisual</li> <li>SofaBoundaryCondition</li> <li>SofaConstraint</li> <li>SofaGeneralEngine</li> <li>SofaGraphComponent</li> <li>SofaTopologyMapping</li> <li>SofaUserInteraction</li> <li>SofaValidation</li> </ul>"},{"location":"40_Programming_with_SOFA/05_SOFA_packages/#sofaadvanced","title":"SofaAdvanced","text":"<ul> <li>SofaNonUniformFem</li> </ul>"},{"location":"40_Programming_with_SOFA/05_SOFA_packages/#sofamisc","title":"SofaMisc","text":"<ul> <li>SofaMiscExtra</li> <li>SofaMiscEngine</li> <li>SofaMiscFem</li> <li>SofaMiscForceField</li> <li>SofaMiscMapping</li> <li>SofaMiscSolver</li> <li>SofaMiscTopology</li> </ul>"},{"location":"40_Programming_with_SOFA/05_SOFA_packages/#sofagui","title":"SofaGui","text":"<ul> <li>SofaGuiCommon</li> <li>SofaGuiQt</li> <li>SofaGuiMain</li> <li>SofaHeadlessRecorder</li> </ul>"},{"location":"40_Programming_with_SOFA/20_Create_your_plugin/","title":"Create your plugin","text":"<p>This page describes how to get started writing your own SOFA components in C++, and how to integrate them with SOFA by creating a plugin.</p> <p>A SOFA plugin is mainly a collection of SOFA components, that can be used in a scene. A plugin is actually a dynamic library that respects some conventions, so that SOFA-based applications can load it at runtime, and retrieve the components it provides. SOFA is based on CMake so that you can refer to the CMake Documentation for any specific need.</p> <p>The next subsection describes what a somewhat minimal plugin should contain.</p>"},{"location":"40_Programming_with_SOFA/20_Create_your_plugin/#a-minimal-plugin-myplugin","title":"A minimal plugin: MyPlugin","text":"<p>As of now, the most convenient way to write a plugin is to place it inside the source tree of SOFA, in applications/plugins/. For example, here we create a plugin called MyPlugin, which we will place in /applications/plugins/MyPlugin. It contains only the following files:</p> <ul> <li>initMyPlugin.h and initMyPlugin.cpp: the plugin interface</li> <li>the CMakeLists.txt file which describes how to build to plugin;</li> </ul>"},{"location":"40_Programming_with_SOFA/20_Create_your_plugin/#initmypluginh","title":"initMyPlugin.h","text":"<p>This file contains the DLL export / DLL import macro definitions which are used on Windows to tell which symbols should be visible outside the scope of the DLL currently built. (More about this on the MSDN website: link dllexport, dllimport). This is also not a bad place to write the main page of the doxygen documentation of your plugin.</p> <pre><code>#ifndef INITMYPLUGIN_H\n#define INITMYPLUGIN_H\n\n#include &lt;sofa/helper/system/config.h&gt;\n\n#ifdef SOFA_BUILD_MYPLUGIN\n#define SOFA_MyPlugin_API SOFA_EXPORT_DYNAMIC_LIBRARY\n#else\n#define SOFA_MyPlugin_API SOFA_IMPORT_DYNAMIC_LIBRARY\n#endif\n\n/** mainpage\nThis is the main page of the doxygen documentation for MyPlugin.\n */\n\n#endif\n</code></pre>"},{"location":"40_Programming_with_SOFA/20_Create_your_plugin/#initmyplugincpp","title":"initMyPlugin.cpp","text":"<p>This file contains the definition a bunch of functions with C linkage, that SOFA will look for when it tries to load this plugin, namely:</p> <ul> <li>initExternalModule(),</li> <li>getModuleName(),</li> <li>getModuleVersion(),</li> <li>getModuleLicense(),</li> <li>getModuleDescription()</li> <li>and getModuleComponentList().</li> </ul> <pre><code>#include \"initMyPlugin.h\"\n\nextern \"C\" {\n    void initExternalModule()\n    {\n        // Here is the place to write initialisation code, that will be executed\n        // before any component is created.\n    }\n\n    const char* getModuleName()\n    {\n        return \"MyPlugin\";\n    }\n\n    const char* getModuleVersion()\n    {\n        return \"0.1\";\n    }\n\n    const char* getModuleLicense()\n    {\n        return \"LGPL\";\n    }\n\n    const char* getModuleDescription()\n    {\n        return \"MyPlugin provides nothing for now.\";\n    }\n\n    const char* getModuleComponentList()\n    {\n        // Comma-separated list of the components in this plugin, empty for now\n        return \"\";\n    }\n}\n</code></pre>"},{"location":"40_Programming_with_SOFA/20_Create_your_plugin/#cmake-configuration","title":"CMake configuration","text":""},{"location":"40_Programming_with_SOFA/20_Create_your_plugin/#cmakeliststxt","title":"CMakeLists.txt","text":"<p>To integrate with the build system of SOFA, your CMakeLists.txt file should be structured as follows:</p> <pre><code>cmake_minimum_required(VERSION 3.1)\n\n#replace here with your project name and version number\nproject(MyPlugin VERSION X.X)\n\n#look for all packages on which your project depends\nfind_package(SofaFramework REQUIRED)\n\nset(HEADER_FILES\n    MyHeaderFile1.h\n    MyHeaderFile2.h\n    MyHeaderFile3.h\n)\n\nset(SOURCE_FILES\n    MySourceFile1.cpp\n    MySourceFile2.cpp\n    MySourceFile3.cpp\n)\n\nadd_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES})\ntarget_link_libraries(${PROJECT_NAME} SofaCore)\nset_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS \"-DSOFA_BUILD_MYPLUGIN\")\n</code></pre> <p>MyPlugin is your plugin name. The repository of your plugin should be named MyPlugin as well. Set all the source and header files implemented in your plugin so that they can be built.</p> <p>Your plugin might have some dependencies, here with SofaFramework. Then, the associated package need to be specified as REQUIRED.</p> <p>Your plugin has to be added as a new library including the source and header files to the project. To do so, use the add_library CMake command.</p> <p>Finally, the dependencies are specified using the target_link_libraries CMake command.</p> <p>Quick start - you can find a skeleton of an empty plugin in the repository of SOFA, in applications/plugins/PluginExample.</p>"},{"location":"40_Programming_with_SOFA/20_Create_your_plugin/#install-in-cmake","title":"Install in CMake","text":"<p>To install your plugin, the following command needs to be added at the end of your CMakeList.txt file:</p> <pre><code>install(TARGETS MyPlugin\n        RUNTIME DESTINATION bin\n        LIBRARY DESTINATION lib\n        ARCHIVE DESTINATION lib)\n</code></pre> <p>And the following must be added to applications/plugins/CMakeLists.txt:</p> <pre><code>sofa_add_subdirectory(plugin MyPlugin MyPlugin)\n</code></pre>"},{"location":"40_Programming_with_SOFA/20_Create_your_plugin/#plugin-architecture","title":"Plugin architecture","text":"<p>The development team recommends the following architecture (here an example for the VolumetricRendering plugin): <pre><code>(all plugins)\n&gt; SofaCUDA\n&gt; VolumetricRendering (This is the root of the plugin)\n  &gt; CMakeLists.txt\n  &gt; src\n    &gt; VolumetricRendering\n      &gt; BaseVolumetricRenderer.h\n  &gt; examples\n      &gt; python\n          &gt; all python examples\n          &gt; volumetricrendering\n            &gt; \\_\\_init\\_\\_.py\n  &gt; tests\n  &gt; extensions\n    &gt; CUDA\n      &gt; CMakeLists.txt (`find_package(VolumetricRendering)`)\n      &gt; src\n        &gt; VolumetricRendering\n          &gt; CUDA\n            &gt; CudaTetrahedralVisualModel.h\n      &gt; examples\n      &gt; tests\n    &gt; OpenCL\n      &gt; CMakeLists.txt (`find_package(VolumetricRendering)`)\n      &gt; src \n        &gt; VolumetricRendering\n          &gt; OpenCL\n            &gt; BaseCLXX.h\n      &gt; examples\n      &gt; tests\n    &gt; Python (bindings)\n      &gt; CMakeLists.txt (`find_package(VolumetricRendering)`)\n      &gt; src\n      &gt; examples\n      &gt; tests\n  &gt; libraries\n</code></pre></p>"},{"location":"40_Programming_with_SOFA/20_Create_your_plugin/#keep-us-updated","title":"Keep us updated!","text":"<p>When starting a new plugin, do not hesitate to let us know about it so that we can help and advert your work. The better we know the community, the better we can support it!</p>"},{"location":"40_Programming_with_SOFA/30_Create_your_component/","title":"Create your component","text":"<p>A SOFA component is a class or a class template that inherits, directly or not, from <code>sofa::core::objectmodel::BaseObject</code>. A component must also respect some conventions:</p> <ul> <li>the declaration must begin with the <code>SOFA_CLASS</code> macro. It will     expand to some code required by SOFA, that will enable some kind of     reflection mechanisms;</li> <li>a component must be registered in the <code>ObjectFactory</code>, using the     <code>RegisterObject</code> mechanism (see example below), otherwise SOFA won't     be aware of it.</li> </ul> <p>Here is a minimal example, for a component that does nothing:</p> <pre><code>#include &lt;sofa/core/objectmodel/BaseObject.h&gt;\n\nclass MyComponent : public sofa::core::objectmodel::BaseObject\n{\npublic:\nSOFA_CLASS(MyComponent, sofa::core::objectmodel::BaseObject);\n\n    MyComponent ();\n    virtual ~MyComponent ();\n};\n</code></pre> <pre><code>#include \"MyComponent.h\"\n#include &lt;sofa/core/ObjectFactory.h&gt;\n\nMyComponent::MyComponent()\n{\n}\n\nMyComponent::~MyComponent()\n{\n}\n\nint MyComponentClass = sofa::core::RegisterObject(\"This component does nothing.\").add&lt;MyComponent&gt;();\n</code></pre> <p>Once the plugin is compiled, this component can be used in an XML scene file. You should also add a <code>RequiredPlugin</code> element in the root node in order to load <code>MyPlugin</code> when the scene is loaded.</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"Root\"&gt;\n    &lt;RequiredPlugin pluginName=\"MyPlugin\"/&gt;\n    &lt;MyComponent&gt;\n&lt;/Node&gt;\n</code></pre> <p>This is a basic example; most components don't inherit directly from <code>BaseObject</code>, but from a subclass which represent a specific aspect of a simulation. For example, force field components inherit from <code>sofa::core::BaseForcefield</code>, or one of its subclasses.</p>"},{"location":"40_Programming_with_SOFA/30_Create_your_component/#add-data-to-your-component","title":"Add Data to your component","text":"<p>Almost every component has parameters, inputs, or outputs: they are referred to as Data; in a scene file, those are the XML attributes of the component. Each XML attribute of a component is actually a member of the class, declared in a special way: it is encapsulated in a Data. For example, in order to add a float Data named <code>myparam</code> to our component, we will add this member to <code>MyComponent</code>:</p> <pre><code>Data&lt;float&gt; m_myparam;\n</code></pre> <p>Then we must register and initialise it in each Constructor of MyComponent:</p> <pre><code>MyComponent::MyComponent(): d_myparam(initData(&amp;d_myparam, 0.42, \"myparam\", \"Here should be a short description of myparam.\"))\n{\n}\n</code></pre> <p>This allows us to use this Data in scene files; it can be assigned a value like so:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"Root\"&gt;\n    &lt;RequiredPlugin pluginName=\"MyPlugin\"/&gt;\n    &lt;MyComponent myparam=\"3.7\"&gt;\n&lt;/Node&gt;\n</code></pre>"},{"location":"40_Programming_with_SOFA/31_Create_your_engine/","title":"Create your engine","text":""},{"location":"40_Programming_with_SOFA/31_Create_your_engine/#create-dataengine-components","title":"Create DataEngine Components","text":"<p>Basic components such as the example above that inherits <code>BaseObject</code>, only allow for \u201cParameter\u201d data fields (values that can be changed but only affect the component itself, internally). Sometimes, you might want to create input / output components. Engines can be \u201cchained\u201d, by giving an engine an input data that is the output of another, previously declared engine: <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;Node name=\"Root\"&gt;\n    &lt;RequiredPlugin pluginName=\"MyPlugin\"/&gt;\n    &lt;MechanicalObject name=\u201dMO\u201d /&gt;\n    &lt;MyEngine  name=\u201dengine1\u201d myinput=\"@MO.position\" /&gt;\n    &lt;MyEngine myinput=\u201d@engine1.myoutput\u201d /&gt;\n&lt;/Node&gt;\n</code></pre></p> <p>These engine components will trigger an action when notified of a change in an input data field, and warn other engines, that take as an input the output of this engine, that the data has been modified. In order to implement such a component, your class must inherit <code>sofa::core::DataEngine</code> class.</p> <p>The interface of the DataEngine class inherits BaseObject's, and adds an additional <code>doUpdate()</code> method. Input and output fields must be added to the engine in the init() method by respectively calling <code>addInput(myInputData)</code> and <code>addOutput(myOutputData)</code>:</p> <p><pre><code>virtual void init() override\n{\n    addInput(d_input1)\n    addInput(d_input2)\n    ...\n    addOutput(d_output1)\n    addOutput(d_output2)\n    ...\n}\n</code></pre> The <code>doUpdate()</code> is a pure virtual method of DataEngine. This method will be automatically called when another component in the scene graph tries to access a data field (<code>getValue() / beginEdit() / ReadAccessor / WriteAccessor ...</code>) that is linked to one of your Engine's output field.</p> <p>In <code>doUpdate()</code> your input fields are always \"ready\", i.e already updated from their parent value, thus holding up-to-date data. Each engine holds an internal <code>DataTracker</code>, called <code>m_dataTracker</code>. DataTrackers can tell you which input field has been changed, during a call to doUpdate(). DataTrackers need to be told which data it should track. this is done by calling: <pre><code>m_dataTracker.trackData(d_myData)\n</code></pre> Every call to <code>addInput</code> automatically adds the given input to the dataTracker.</p> <p>If you have multiple input fields, and want to perform specific functions depending on which input has been modified, you can use this DataTracker to check which input has changed: <pre><code>virtual void doUpdate()\n{\n    if (m_dataTracker.hasChanged(d_input1))\n    {\n        // Do Stuff With d_input1\n        ...\n    }\n    if (m_dataTracker.hasChanged(d_input2))\n    {\n        // Do stuff with d_input2\n        ...\n    }\n    ...\n}\n</code></pre></p>"},{"location":"40_Programming_with_SOFA/31_Create_your_engine/#remarks","title":"Remarks","text":"<ul> <li>Note that you should not modify your inputs in an engine. I do not know of any use cases where this would be a good idea. If you do, it will set the engine's dirty flag, hence forcing a re-call to update(). If for some reason you would need to do so, you will need to call <code>DDGNode::cleanDirty()</code> on your engine to prevent the call loop.</li> <li><code>doUpdate</code> is actually a delegate function called by the <code>update()</code> method. This method is <code>final</code>, which means that you cannot override it. Here's its implementation:</li> </ul> <p><pre><code>void DataEngine::update()\n{\n    updateAllInputs(); ///&lt; Updates all input fields to retrieve their parent values if changed\n    DDGNode::cleanDirty(); ///&lt; Cleans the engine's \"dirty value\".\n                           ///  This dirty value is used to know whether or not the call to update is necessary\n    doUpdate(); ///&lt; Your engine's implementation is called here.\n    m_dataTracker.clean(); ///&lt; The dataTracker is cleaned, i.e its internal counters are synced with the input's counters\n}\n</code></pre> - Some engines might require performing an action when an event is triggered, not just when an input is dirty. This is still possible by calling BaseObject's handleEvent() method. If you do so though, make sure that you stay consistent with the Data dependency graph - Except in some specific / rare cases, every data field in your engine should either be inputs or outputs of the engine, and there should be no \"Parameter\" data field. - before the 18.12, a call to setDirtyValue had to be made once all the inputs and outputs were set. It is now obsolete - DataEngines are part of the Data Dependency Graph of Sofa. This mechanism is inherited from DDGNode, and can be quite challenging to understand by simply digging in the code. If you are curious about how it works, a presentation is available on Google Drive </p>"},{"location":"40_Programming_with_SOFA/40_Create_your_scene_in_Cpp/","title":"Create your scene in Cpp","text":"<p>First of all, you can really get inspiration from all Tutorials available in applications/Tutorials, that are C++ files implementing the XML tutorials available in examples/Tutorials/. In addition, you can read the Main.cpp of runSofa from applications/projects/runSofa/.</p> <p>Here is a short template about how to write a scene in C++:</p> <pre><code>#include &lt;sstream&gt;\nusing std::ostringstream ;\n#include &lt;fstream&gt;\n\n#include &lt;sofa/helper/ArgumentParser.h&gt;\n#include &lt;SofaSimulationCommon/common.h&gt;\n#include &lt;sofa/simulation/Node.h&gt;\n#include &lt;sofa/helper/system/PluginManager.h&gt;\n#include &lt;sofa/simulation/config.h&gt; // #defines SOFA_HAVE_DAG (or not)\n#include &lt;SofaSimulationCommon/init.h&gt;\n#include &lt;SofaSimulationTree/init.h&gt;\n#include &lt;SofaSimulationTree/TreeSimulation.h&gt;\n\n#include &lt;SofaComponentCommon/initComponentCommon.h&gt;\n#include &lt;SofaComponentBase/initComponentBase.h&gt;\n#include &lt;SofaComponentGeneral/initComponentGeneral.h&gt;\n#include &lt;SofaComponentAdvanced/initComponentAdvanced.h&gt;\n#include &lt;SofaComponentMisc/initComponentMisc.h&gt;\n#include &lt;sofa/helper/BackTrace.h&gt;\n\n// Add any other includes needed by your scene\n// #include&lt;path_to/myComponent.h&gt;\n// ...\n\nint main(int argc, char** argv)\n{\n    sofa::helper::BackTrace::autodump();\n    ExecParams::defaultInstance()-&gt;setAspectID(0);\n\n    // here you can init the GUI you wish\n    // as an example, see : applications/projects/runSofa/Main.cpp\n\n    sofa::simulation::tree::init();\n    sofa::component::initComponentBase();\n    sofa::component::initComponentCommon();\n    sofa::component::initComponentGeneral();\n    sofa::component::initComponentAdvanced();\n    sofa::component::initComponentMisc();\n\n    sofa::simulation::setSimulation(new sofa::simulation::tree::TreeSimulation());\n\n    std::ostringstream no_error_message;\n    sofa::helper::system::PluginManager::getInstance().loadPlugin(\"MyPlugin\",&amp;no_error_message);\n    sofa::helper::system::PluginManager::getInstance().init();\n\n    // Here start the description of your scene in C++\n\n    // you can create nodes\n    sofa::simulation::tree::GNode* groot = new sofa::simulation::tree::GNode;\n    groot-&gt;setName (\"root\");\n    sofa::defaulttype::Vec3d g = sofa::defaulttype::Vec3d (0,-9.81,0);\n    groot-&gt;setGravityInWorld(g);\n\n    // you can create components in these nodes\n    addMyComponent(groot);\n\n    // you can add new child nodes and repeat the process to build your scene\n    sofa::simulation::tree::GNode* childNode = new sofa::simulation::tree::GNode;\n    childNode-&gt;setName( \"child_of_root\" );\\r\n    groot-&gt;addChild(childNode);\n\n    addMyComponent(childNode);\n\n    sofa::simulation::getSimulation()-&gt;init(groot.get());\n\n\n    // Run the simulation\n    groot-&gt;setAnimate(true);\n\n    // close the simulation\n    if (groot!=NULL)\n        sofa::simulation::getSimulation()-&gt;unload(groot);\n\n    sofa::simulation::common::cleanup();\n    sofa::simulation::tree::cleanup();\n    return 0;\n}\n\n// this function illustrates how to add a component to a node\nmyComponent *addMyComponent(sofa::simulation::tree::GNode *node) {\n\n    myComponent* myComp = new myComponent;\n    myComp-&gt;setName (\"myComponentName\");\n    myComp-&gt;addTag ((Tag)\"myTag\");\n    myComp-&gt;d_data.setValue(0.02); // any public data of the component can thus be defined\n    node-&gt;addObject (myComp);\n\n    return (myComponent *)solver;\n}\n</code></pre> <p>In your CMakeList.txt, do not forget to find the SofaFramework package:</p> <pre><code>find_package(SofaFramework REQUIRED)\n</code></pre> <p>To define your executable:</p> <pre><code>if(APPLE AND RUNSOFA_INSTALL_AS_BUNDLE)\n    add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} Main.cpp )\nelse()\n    add_executable(${PROJECT_NAME} ${RC_FILES} Main.cpp)\nendif()\n</code></pre> <p>And then, depending on the components used in your Main.cpp, add the dependencies:</p> <pre><code>target_link_libraries(${PROJECT_NAME} SofaComponentCommon)\n</code></pre>"},{"location":"40_Programming_with_SOFA/40_Create_your_scene_in_Cpp/#note","title":"Note","text":"<p>Just to mention that an easy way to write scenes is to use Python. Running SOFA scenes using Python might also reduce the learning curve, since you\u2019ll only focus on the scene creation rather than SOFA internal book-keeping.</p> <p>In case you choose this option, you need to enable the <code>SofaPython</code> plugin during compilation. Then a minimal python scene would look like:</p> <pre><code>def createScene(node):\n    # create a node in the scene graph (i.e. 'Node' in xml scenes)\n    child_node = node.createChild('child name') \n\n    # create a component under the graph node\n    child_dofs = child_node.addObject('MechanicalObject', template = 'Vec3', name = 'dofs')\n</code></pre> <p>Please refer to the documentation for further details.</p>"},{"location":"40_Programming_with_SOFA/50_Create_your_binaries/","title":"Create your binaries","text":""},{"location":"40_Programming_with_SOFA/50_Create_your_binaries/#sofa-binaries","title":"SOFA binaries","text":""},{"location":"40_Programming_with_SOFA/50_Create_your_binaries/#prepare-the-sources","title":"Prepare the sources","text":"<ul> <li>Update SOFA version in CMakeLists.txt <pre><code># Manually define VERSION\nset(Sofa_VERSION_MAJOR &lt;new release major version&gt;)\nset(Sofa_VERSION_MINOR &lt;new release minor version&gt;)\nset(Sofa_VERSION_PATCH &lt;new release patch version&gt;)\n</code></pre></li> <li>Update External Projects versions   For each ExternalProject.cmake.in file in the sources, edit the line <code>GIT_TAG origin/&lt;branch of the new release&gt;</code></li> <li>Set the CMake variables     <pre><code>SOFA_BUILD_RELEASE_PACKAGE=ON\nCPACK_GENERATOR=ZIP\nCPACK_BINARY_ZIP=ON\n</code></pre></li> <li>If you want to generate an installer:<ul> <li>Install the latest Qt Installer Framework (Qt IFW)</li> <li>Set the CMake variables <pre><code>CPACK_IFW_ROOT=&lt;location of QtIFW (no \"bin\" at the end)&gt;\nCPACK_GENERATOR=ZIP;IFW\nCPACK_BINARY_ZIP=ON\nCPACK_BINARY_IFW=ON\n</code></pre></li> </ul> </li> <li>[MacOS] Set CMake variable for OSX compatibility version: <pre><code>CMAKE_OSX_DEPLOYMENT_TARGET=10.15\n</code></pre></li> <li>[MacOS] If you want to generate a bundle (.app), set the CMake variables: <pre><code>CPACK_GENERATOR=ZIP;DragNDrop\nCPACK_BINARY_ZIP=ON\nCPACK_BINARY_DRAGNDROP=ON\n</code></pre></li> </ul>"},{"location":"40_Programming_with_SOFA/50_Create_your_binaries/#generate-the-binaries","title":"Generate the binaries","text":"<ul> <li>Configure + Generate + Build</li> <li>Install: <code>make install</code> or <code>ninja install</code> </li> <li>Make sure that <code>linux-postinstall-fixup.sh</code> or <code>windows-postinstall-fixup.sh</code> or <code>macos-postinstall-fixup.sh</code> was triggered and its output is OK</li> <li>Your binaries should be in your build directory</li> </ul>"},{"location":"40_Programming_with_SOFA/50_Create_your_binaries/#plugin-binaries","title":"Plugin binaries","text":""},{"location":"40_Programming_with_SOFA/50_Create_your_binaries/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>To show how Qt plugins are loaded and used: <code>export QT_DEBUG_PLUGINS=1</code></li> <li>[Linux][MacOS] To fix library dependency resolution: <code>export LD_LIBRARY_PATH=/path/to/sofa/bin:/path/to/sofa/lib:$LD_LIBRARY_PATH</code></li> <li>[MacOS] To show when dylibs are loaded: <code>export DYLD_PRINT_LIBRARIES=1</code></li> </ul>"},{"location":"40_Programming_with_SOFA/50_Create_your_binaries/#publishing-a-sofa-release","title":"Publishing a SOFA release","text":"<p>Once the binaries are generated:</p> <ul> <li>Create a release on GitHub.</li> <li>Update the link on the download page for the binaries (add changes in dependencies).</li> <li>Update the doc for building SOFA:<ul> <li>on Linux</li> <li>on MacOS</li> <li>on Windows</li> </ul> </li> <li>Update the flags on the forum.</li> <li>Create a post on the forum, on Twitter, on LinkedIn.</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/","title":"Components in SOFA","text":"<p>Components implement most of the simulation methods. One can roughly distinguish two categories of components: Property components implement a facet of one object's physical properties, such as its mass, stiffness, attachments. They are associated with a given simulated object, and the C++ class is often templatized on the type of Degrees of Freedom (DOF) of the object. The most important component of an object is its MechanicalState, which contains the state vectors: positions, velocities, and auxiliary vectors. Control components implement high-level algorithms such as time integration and collision detection. Most of them are not attached to a given object. They control all the objects within their scope (their subgraph in the scenegraph) using visitors which traverse the scenegraph to apply virtual functions.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#base-functions","title":"Base functions","text":"<p>A SOFA component is a class deriving from sofa::core::objectmodel::BaseObject. This way, several virtual methods are provided, and must be known in order to configure correctly the behavior of your component:</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#init-and-bwdinit","title":"init() and bwdInit()","text":"<p>When SOFA loads a simulation, its creates in C++, or directly using XML/Python the SOFA Components (and the default constructor). At this stage, you must initialize what we call Data, a component that you can find in sofa::core::objectmodel::Data. The purpose of this utility class is to store all the parameters of your component, and handle this way the input (parametrize the component from XML/Python files for instance), and output (save at a time T the configuration of your component). Everything that needs to be saved in your component must be kept into memory inside a Data (find out more about the Data here). Basically to initialize a data, you must do the following:</p> <pre><code>//Previous declaration of the Data\nData&lt;bool&gt; d_isEnabled;\n//In Component constructor\nMyComponent():\nd_isEnabled(initData(&amp;d_isEnabled, true, \"isEnabled\", \"Boolean indicating if the component is enable\"))) //ptr to the data, default value, name used for the parameter (the same that will appear later in the XML/Python file), description of the parameter (its purpose)\n{\n};\n</code></pre> <p>Once all the SOFA components of the scenes have been created, we launch a Visitor to initialize the components. Basically a Visitor starts from a node (for the InitVisitor, we start from the root), execute several specific operations going top\u2192down, and then another set of operations going bottom\u2192up. This is translated for the InitVisitor by the call, each time we initialize a scene of two methods:</p> <pre><code>void init(); //call during Top-&gt;Down traversal\nvoid bwdInit(); //call during Bottom-&gt;Up traversal\n</code></pre> <p>init() is called in each component of the graph (top\u2192down) for initialization, bwdInit() is called once all the children of a node has been initialized (bottom\u2192up). The methods init() and bwdInit() have been called for all the component of the children nodes. Both method are virtual function from BaseObject which can be overriden in any component.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#reinit","title":"reinit()","text":"<p>The reinit() method is automatically call reinit() when you edit a component in the GUI of SOFA:</p> <pre><code>void reinit();\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#cleanup-and-reset","title":"cleanup() and reset()","text":"<p>These methods are called each time you want to reset a scene: first cleanup will be called, then reset.</p> <ul> <li>In cleanup, you have to remove all the components you might have added to the scene: if in the scene, you have some collisions, and you create contact components, or collision response components, cleanup is a good place for you to remove them.</li> <li>In reset, you must set back to default all the Datas and internal values of your component.</li> </ul> <pre><code>void cleanup();\nvoid reset();\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#draw","title":"draw()","text":"<p>All SOFA components have a method draw(), so you don't need to derive from a VisualModel base component to display debug information. It is called at the end of the simulation time, directly by the GUI. At this moment, we only have one thread running both the simulation and the visualization. Soon, we want to separate these processes into two different threads so that the frequency of the visualization doesn't depend anymore on the frequency of the simulation (generally much slower).</p> <pre><code>void draw();\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#getcontext","title":"getContext()","text":"<p>Every SOFA component has a context. By casting this context to a <code>simulation::Node*</code>, you manage to get the node containing your component. A Node is a very useful component, as you can launch visitors from them, or quickly get information about the content of the node. However, we insist on the fact that accessing other components through the context is not recommended: instead create Link/DataLink. </p> <pre><code>sofa::core::objectmodel::BaseContext* getContext();\n</code></pre> <p>Example:</p> <pre><code>simulation::Node* currentNode = static_cast&lt;simulation::Node*&gt;(myComponent-&gt;getContext());\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#handleevent-event","title":"handleEvent( Event* )","text":"<p>Every SOFA component inherits a Data f_listening from BaseObject. If f_listening is true, then each time an Event is sent to the node containing your component, this method will be called. This way, you can execute specific operations when an event is triggered.</p> <pre><code>void handleEvent( Event* );\n</code></pre> <p>Example:</p> <pre><code>void handleEvent ( core::objectmodel::Event* ev )\n{\n  if ( dynamic_cast ( ev ) )\n  {\n    // Do some operation when the collision detection ends.\n  }\n}\n</code></pre> <p>You can use the Trace of Visitor to know when and where the Events are triggered. The most common SOFA events are:</p> <ul> <li>AnimateBeginEvent</li> <li>AnimateEndEvent</li> <li>CollisionBeginEvent</li> <li>CollisionEndEvent</li> <li>TopologyChangeEvent</li> <li>UpdateMappingEndEvent</li> </ul> <p>Find out more about the Events here.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#member-variables","title":"Member variables","text":""},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#component-state","title":"Component state","text":"<p>The Data attribute <code>d_componentState</code> defined in Base.h corresponds to the state of every component. This enum defines the following states:</p> <ul> <li>Undefined: for a component that does not make use of this field have this one</li> <li>Loading: the component is loading but never passed successfully its init() function</li> <li>Valid: the component has passed successfully its init function and is operational</li> <li>Dirty: the component is ready to be used but requires a call to reinit</li> <li>Busy:  the component is doing \"something\", don't trust its values for doing your computation</li> <li>Invalid: the component reached an error and is thus unable to behave normally.</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#print-log","title":"Print log","text":"<p>The Data attribute <code>f_printLog</code> defined in Base.h is a boolean triggering the emission of log messages at runtime. If true, all messages as follows will be emitted:</p> <pre><code>msg_info() &lt;&lt; \"My log message\";\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#update-mechanism","title":"Update mechanism","text":"<p>All components (i.e. class inheriting from BaseObject) inherits from a callback mechanism to update its internal attributes and Data. In SOFA, callback functions can be added so that outputs can be updated upon changes on their input data. The callback function returns a component state (see above: Valid / Invalid / etc.) which guarantees that the component state is properly maintained. Here is the callback used in Loaders:</p> <pre><code>/// name filename =&gt; component state update + change of all data field...but not visible ?\n    addUpdateCallback(\"UpdateOnFilename\", {&amp;m_filename}, [this](const core::DataTracker&amp; t)\n    {\n        SOFA_UNUSED(t);\n        if(load()){\n            clearLoggedMessages();\n            return sofa::core::objectmodel::ComponentState::Valid;\n        }\n        return sofa::core::objectmodel::ComponentState::Invalid;\n    }, {&amp;d_positions, &amp;d_normals, &amp;d_edges, &amp;d_triangles, &amp;d_quads, &amp;d_tetrahedra, &amp;d_hexahedra, &amp;d_pentahedra, &amp;d_pyramids,\n        &amp;d_polylines, &amp;d_polygons, &amp;d_highOrderEdgePositions, &amp;d_highOrderTrianglePositions, &amp;d_highOrderQuadPositions, &amp;d_highOrderHexahedronPositions, &amp;d_highOrderTetrahedronPositions,\n        &amp;d_edgesGroups, &amp;d_quadsGroups, &amp;d_polygonsGroups, &amp;d_pyramidsGroups, &amp;d_hexahedraGroups, &amp;d_trianglesGroups, &amp;d_pentahedraGroups, &amp;d_tetrahedraGroups}\n    );\n</code></pre> <p>it is triggered whenever the Data <code>d_filename</code> has been modified (i.e. it is dirty) in order to recompute the Data <code>d_positions</code>, <code>d_normals</code>, <code>d_edges</code> etc.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#other-information-about-components","title":"Other information about components","text":""},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#objectfactory-methods","title":"ObjectFactory methods","text":"<p>To support the creation of a scene from a xml description, we rely on an ObjectFactory. Optionally a SOFA Component can define several static methods to customize its creation and its XML syntax.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#cancreate","title":"canCreate","text":"<pre><code> template\n    static bool canCreate(T*&amp; obj, core::objectmodel::BaseContext* context, core::objectmodel::BaseObjectDescription* arg);\n</code></pre> <p>This method is called before the effective creation of the object specified in the xml: this way, you have access to the current context (object that have already been created), and you can process to some basic verifications; for instance, if your component needs a specific template, or another component to work, you can test this here.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#create","title":"create","text":"<pre><code>template\n    static void create(T*&amp; obj, BaseContext* context, BaseObjectDescription* arg);\n</code></pre> <p>If, and if only, the method canCreate answered true, the component is created: By default, the implementation made in sofa::core::objectmodel::BaseObject does:</p> <pre><code>template\n    static void create(T*&amp; obj, BaseContext* context, BaseObjectDescription* arg)\n{\nobj = new T;\nif (context) context-&gt;addObject(obj);\nif (arg) obj-&gt;parse(arg);\n}\n</code></pre> <p>Three steps:</p> <ul> <li>Creation of the object passed by template (look at how works the     design pattern of an abstract factory)</li> <li>Add the object inside the current context: the side effect of this     instruction is that the new object will appear in the scene graph     inside the node corresponding to the context</li> <li>Parse method to initialize the parameters described in XML. All the     parameters stored as Data will be automatically set, YOU DON'T HAVE     TO IMPLEMENT YOUR OWN PARSE METHOD!</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#templatename","title":"templateName","text":"<p>The templateName() and getTemplateName() methods purpose is to give convenient names to the attribute template of your component when reading/writing from the XML. These methods are defined in sofa::core::objectmodel::Base which is the base class for all SOFA objects that can belong to the scene graph, ie Nodes and Components.</p> <pre><code>std::string getTemplateName() const\n\nstatic std::string templateName(const MyTemplateClass* = NULL)\n</code></pre> <p>The two methods inherently do the same thing but</p> <ul> <li>the static method is used in the parts of the code where compile     time generecity over SOFA objects is used ( meaning when we treat     SOFA objects through some template parameter)</li> <li>the class method is more convenient in the parts of the where we     treat SOFA objects through a base class pointer.     (runtime polymorphism)</li> </ul> <p>The important thing to remember is that if you want to give a special behavior for the template attribute, you need to override both these method otherwise there will be some mismatches about what is expected. The template attribute is used at the component creation to select the appropriate constructor registered in the ObjectFactory.</p> <pre><code>&lt;MechanicalObject template=\"Rigid\"/&gt;\n</code></pre> <p>As a rule of thumb, you should override these methods in your component class if these conditions are met :</p> <ul> <li>your component class depends on template parameters</li> <li>your component class does not inherit from a class of sofa::core     which uses the exact same template parameters.</li> </ul> <p>Examples:</p> <ul> <li>sofa::component::engine::BoxROI depends on a template parameter, and     derives from sofa::core::DataEngine which does not, so the     templateName methods are overriden.</li> <li>sofa::component::mapping::IdentityMapping depends on template     parameters, and derives from sofa::core::Mapping which uses the     exact same template parameters, so the templateName methods need not     to be overriden.</li> </ul> <p>For most common template parameters like VecTypes and RigidTypes, we provide convenient aliases using the compile time expected method Name() of the template parameter. For example by providing</p> <pre><code>template&lt;&gt; inline const char* Vec3dTypes::Name() { return \"Vec3d\"; }\n</code></pre> <p>As a result we can write</p> <pre><code>&lt;MechanicalObject template=\"Vec3d\"/&gt;\n</code></pre> <p>instead of :</p> <pre><code>&lt;MechanicalObject template=\"StdVectorTypes&lt;Vec&lt;3,double&gt;,Vec&lt;3,double&gt;,double&gt; &gt;\" /&gt;\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#common-operations","title":"Common operations","text":"<p>When you use a Component in SOFA, you generally make it interact with the rest of the scene, and more specifically the node containing your component and the hierarchy above and below it.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#search-components-in-the-graph","title":"Search components in the graph","text":"<p>One basic need you will have will be to get pointers to some components: Get the Mechanical State, or the Mapping... In the following examples, methods of class BaseObject are used to get smart pointers to the components:</p> <pre><code>// Search one component of a given type; return when the first is found.\nMapping::SPtr m;                      // using smart pointers is safer than plain pointers\nm = searchLocal();           // search in the same node as this\nm = BaseObject::searchLocal();           // from a template class, you may have to help the compiler\nm = searchUp();              // search in the same node as this, then upward in the node hierarchy\nm = searchDown();            // search in the same node as this, then downward in the node hierarchy\nm = searchFromRoot();        // search starting from the root\nm = searchInParents();       // search in the parents of the local node\n\n// Search all the component of a given type\nvector v;\nv = searchAllLocal();\nv = searchAllUp();\nv = searchAllDown();\nv = searchAllFromRoot();\nv = searchAllInParents();\n\n// Search all the component of a given type with a given Tag\ncore::objectmodel::Tag t(\"Fluid\");\nv = searchAllLocal( t );\nv = searchAllUp( t );\nv = searchAllDown( t );\nv = searchAllFromRoot( t );\nv = searchAllInParents( t );\n\n// Search all the component of a given type with a given TagSet\ncore::objectmodel::TagSet ts= this-&gt;getTags();\nv = searchAllLocal( ts );\nv = searchAllUp( ts );\nv = searchAllDown( ts );\nv = searchAllFromRoot( ts );\nv = searchAllInParents( ts );\n</code></pre> <p>In the following examples, the same is done using the lower-level method BaseObject::get</p> <pre><code>core::componentmodel::behavior::BaseMapping* mapping;\nthis-&gt;getContext()-&gt;get(mapping);\nif (mapping)\n{  //Mapping found\n}\nelse\n{  //Mapping NOT found\n}\n\n//Same call as this-&gt;getContext()-&gt;get(mapping);\nthis-&gt;getContext()-&gt;get(mapping, sofa::core::objectmodel::BaseContext::SearchUp);\n//Starts from local node, then if nothing is found, goes down in the hierarchy of node\nthis-&gt;getContext()-&gt;get(mapping, sofa::core::objectmodel::BaseContext::SearchDown);\n//Search only inside the local node\nthis-&gt;getContext()-&gt;get(mapping, sofa::core::objectmodel::BaseContext::Local);\n//Search from the Root node, then goes down to all the nodes\nthis-&gt;getContext()-&gt;get(mapping, sofa::core::objectmodel::BaseContext::SearchRoot);\n\n\nsofa::helper::vector&lt; sofa::core::CollisionModel* &gt; list_collisionModels; //container for the component you want to find\n//Default call: search from current node, then goes up\nstatic_cast(this-&gt;getContext())-&gt;get&lt; sofa::core::CollisionModel &gt;( &amp;list_collisionModels );\n//Same behavior as previous call, only it explicits the method called\nstatic_cast(this-&gt;getContext())-&gt;get&lt; sofa::core::CollisionModel &gt;( &amp;list_collisionModels, BaseContext::SearchUp);\n//Starts from the current node, and goes down\nstatic_cast(this-&gt;getContext())-&gt;get&lt; sofa::core::CollisionModel &gt;( &amp;list_collisionModels, BaseContext::SearchDown);\n//Search only in the current node\nstatic_cast(this-&gt;getContext())-&gt;get&lt; sofa::core::CollisionModel &gt;( &amp;list_collisionModels, BaseContext::Local);\n//Search from the root\nstatic_cast(this-&gt;getContext())-&gt;get&lt; sofa::core::CollisionModel &gt;( &amp;list_collisionModels, BaseContext::SearchRoot);\n\n\n//Find a mapping (previously declared), containing the same set of tags as your component\nthis-&gt;getContext()-&gt;get(mapping, this-&gt;getTags(), sofa::core::objectmodel::BaseContext::SearchDown);\n\n//Find a mapping (previously declared), containing the set of tags \"Fluid\" and \"Mecha\"\nsofa::core::objectmodel::TagSet tagsToFind;\ntagsToFind.insert(sofa::core::objectmodel::Tag(\"Fluid\"));\ntagsToFind.insert(sofa::core::objectmodel::Tag(\"Mecha\"));\nthis-&gt;getContext()-&gt;get(mapping, tagsToFind, sofa::core::objectmodel::BaseContext::SearchDown);\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#launch-visitor","title":"Launch Visitor","text":"<p>The genericity of SOFA is achieved mainly by the use of Visitors. It is good to know how to launch them.</p> <pre><code>simulation::Node *currentNode=static_cast(this-&gt;getContext());\ncurrentNode-&gt;execute(); //Launch the visitor VisualUpdateVisitor from the currentNode\n\n//If you need to configure your Visitor before launching it\nsofa::simulation::MechanicalWriteLMConstraint  LMConstraintVisitor;\nLMConstraintVisitor.setOrder(orderState); //configuring the Visitor\n//...\n//Launch the Visitor\nLMConstraintVisitor.execute(this-&gt;getContext());\n</code></pre> <p>As mentioned previously, you can use Tags in order to execute your Visitor only on the components containing a set of Tags</p> <pre><code>LMConstraintVisitor.setTags(this-&gt;getTags()).execute(this-&gt;getContext());\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#bounding-box","title":"Bounding Box","text":"<p>There is a BoundingBox class declared in sofa/defaulttype/BoundingBox.h This class defines most common operations regarding bounding boxes, such as intersection and inclusion. All the components and contexts/nodes in SOFA have a data with public access to express its bounding box.</p> <pre><code>// in sofa/core/Base.h\nData&lt; sofa::defaulttype::BoundingBox &gt; f_bbox;\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#components","title":"components","text":"<p>The default value for the bounding box is a the neutral element for the inclusion operation. A component can describe how its bounding box is computed by redefining the virtual method.</p> <pre><code>// in sofa/core/BaseObject.h\nvirtual void computeBBox(sofa::core::ExecParams* params);\n</code></pre> <p>There is an example of such an override in the sofa::core::State class.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#contexts-and-nodes","title":"contexts and nodes","text":"<p>Contexts, also have a notion of Bounding Box. A Context bounding box is the inclusion of:</p> <ul> <li>the bounding boxes of all its components.</li> <li>the bounding boxes of all its child contexts</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#accessing-the-bounding-box-value-from-a-component","title":"accessing the bounding box value from a component","text":"<p>You can access the value of your component bounding box using :</p> <pre><code>//somewhere in yourcomponent.cpp\nconst sofa::defaulttype::BoundingBox&amp; bbox = this-&gt;f_bbox.getValue();\n</code></pre> <p>If your component does not define any bounding box, you can still access its context bounding box</p> <pre><code>//somewhere in yourcomponent.cpp\nconst sofa::defaulttype::BoundingBox&amp; bbox = this-&gt;getContext()-&gt;f_bbox.getValue();\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/10_Components_in_SOFA/#update-of-the-bounding-boxes","title":"update of the bounding boxes","text":"<p>Bounding boxes values are set the first time during the InitVisitor traversal. There are kept up to date using the UpdateBoundingBoxVisitor.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/","title":"Data in components","text":"<p>Each SOFA component can define Data. These data correspond to properties of the Components, i.e. member variable of the corresponding C++ class, which are made available and visible to the rest of the simulation. Numerical values can thus be stored in components using <code>core::objectmodel::Data</code>.</p> <p>Wrapping values in this template class provides the following features:</p> <ul> <li>automatic read/write in scene files</li> <li>connections with other Data or to/from Engines using Links, for     automatic updates</li> <li>thread-safe access (work in progress)</li> </ul> <p>Naming convention in SOFA specifies that Data name must be preceeded from <code>d_</code>.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#create-and-use-a-data","title":"Create and use a Data","text":"<ol> <li>A Data called <code>d_isEnabled</code> is usually declared as follows:</li> </ol> <pre><code>//Previous declaration of the Data\nData&lt;bool&gt; d_isEnabled;\n</code></pre> <ol> <li>in the constructor of you class MyClass, initialize the Data</li> </ol> <pre><code>//In Component constructor\nMyComponent():\nd_isEnabled(initData(&amp;d_isEnabled, (bool)true, \"isEnabled\", \"Boolean indicating if the component is enabled\"))) //ptr to the data, default value, name used for the parameter (the same that will appear later in the XML/Python file), description of the parameter (its purpose)\n{\n};\n</code></pre> <ol> <li>and it eventually can be defined in an XML scene file:</li> </ol> <pre><code>&lt;Node name=\"Root\"&gt;\n   &lt;MyClass isEnabled=\"true\"/&gt;\n&lt;/Node&gt;\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#data-for-standard-containers","title":"Data for standard containers","text":"<p>To ease the use of Data, we already serialized some of the most common data containers: map, vector, set, list. Instead of using a <code>std::vector</code>, use a <code>helper::vector</code>:</p> <pre><code>Data&lt; helper::vector &gt; d_values;\n</code></pre> <p>WARNING: to use a <code>vector&lt;vector&lt;int&gt;&gt;</code>, you must use a <code>SVector</code> instead:</p> <pre><code>Data&lt; helper::SVector&lt; helper::vector&lt; int&gt; &gt; &gt; d_vecValues;\n</code></pre> <p>The <code>SVector</code> class is basically <code>helper::vector</code> with a different serialization: it defines brackets for the beginning and the end of the whole string, plus a comma to separate values.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#data-for-custom-types","title":"Data for custom types","text":"<p>A Data is template with the type of your option: a boolean, an integer, ... But it is not restricted to the default types; you can put inside a Data your own class/struct. Your class/struct must implement the operator <code>&lt;&lt;</code> and <code>&gt;&gt;</code> in order to be used through an input and output stream:</p> <pre><code>struct MyStruct\n{\n    bool active;\n    int  value;\n\n    inline friend std::istream&amp; operator &gt;&gt; ( std::istream&amp; in, MyStruct&amp; s ){\n        in &gt;&gt; s.active &gt;&gt; s.value;\n        return in;\n    }\n\n    inline friend std::ostream&amp; operator &lt;&lt; ( std::ostream&amp; out, const MyStruct&amp; s ){\n        out &lt;&lt; s.active &lt;&lt; \" \" &lt;&lt; s.value;\n        return out;\n    }\n};\n\nData&lt;MyStruct&gt; d_configureStruct;\n</code></pre> <p>While Data are passed to other components by copy, the stream operators are used to display a data field's content, e.g in the console, in a GUI or simply into a file. This data serialization may also also have other uses, such as sending data over the network, through the Communication plugin for instance.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#data-flags","title":"Data flags","text":"<p>In your C++ code, you can define several features for each Data:</p> <ul> <li><code>d_isEnabled.setRequired(bool b)</code> whether the Data has to be set by the user for the owner component to be valid</li> <li><code>d_isEnabled.setDisplayed(bool b)</code> whether this Data should be displayed in GUIs</li> <li><code>d_isEnabled.setReadOnly(bool b)</code> whether this Data is read-only (applicable in the GUI only, no effect in the code itself)</li> <li><code>d_isEnabled.setPersistent(bool b)</code> whether this Data contains persistent information (i.e should it be exported when saving the scene)</li> <li><code>d_isEnabled.setAutoLink(bool b)</code> whether this data should be autolinked when using the src=\"\" syntax</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#links-between-data","title":"Links between Data","text":"<p>It is possible to create a link from a source Data to a target Data of compatible type, to automatically duplicate the value of the source in the target. For instance, the indices Data output of a BoxROI engine can be linked to the indices Data of a FixedConstraint, to constrain the particles in the box. A source can be connected to several targets. Each time a source value changes, it sends a dirty message to all its targets, which recursively propagate the dirty signal if they are the sources of further links. When a target data value is accessed (see How to Access Data below), it first checks its dirty state and if necessary, it updates its value based on the source, recursively.</p> <p>In XML, links are set using the <code>@</code> symbol as in the following example:</p> <pre><code>&lt;FixedConstraint  indices=\"@box_roi.indices\"/&gt;\n</code></pre> <p>In C++, links are set using method <code>BaseData::setParent( BaseData* )</code>, as in the following example:</p> <pre><code>myFixedConstraint-&gt;f_indices.setParent(&amp;myBoxRoi-&gt;f_indices);\n</code></pre> <p>Note that for some of the non-simple types (mainly containers), the value of the data is COW (Copy-On-Write), i.e if you link from a (potentially huge) <code>Data</code>, this will simply access the data in the same memory location as the original <code>Data</code>, and will avoid doing a (potentially costly) copy. But if the linked <code>Data</code> is modified, the underlying data will be copied, and the contents will be in two different independent locations.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#how-to-access-data-in-the-c-api","title":"How to access Data in the C++ API","text":"<p>The disadvantage of storing values in a Data container, rather than directly, is to make the value less easily accessible. Different ways of accessing it are presented in the following.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#setvaluegetvalue","title":"setValue/getValue","text":"<p>To have a read only access to the data, use the method <code>getValue()</code>:</p> <pre><code>//with Data&lt;bool&gt; activeOption;\n//and  Data&lt;vector&lt;int&gt;&gt; values;\nvoid MyClass::doOperation()\n{\n  bool isActive = d_activeOption.getValue();\n  const vector&lt; int &gt; &amp;v = d_values.getValue();\n  vector&lt; int &gt; newVector;\n\n  if (isActive)\n  {\n    for( size_t i=0; i&lt;v.size(); i++ )\n    {\n       newVector.push_back(v[i]);\n    }\n  }\n}\n</code></pre> <p>To write the value of the data, use the method <code>setValue(...)</code>. Such a write access, triggers the propagation of a dirty flag to all Data connected to this one (see Engine and Data dependency). This is appropriate for a \u00abone shot\u00bb value setting.</p> <pre><code>//with Data&lt;bool&gt; activeOption;\n//and  Data&lt;vector&lt;int&gt;&gt; values;\nvoid MyClass::changeParameters(bool b)\n{\n  d_activeOption.setValue(b);\n  vector&lt; int &gt; newVector(10);\n  d_values.setValue(newVector);\n  //...\n}\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#readaccessorwriteaccessor","title":"ReadAccessor/WriteAccessor","text":"<p>These objects encapsulate <code>beginEdit()</code> and <code>endEdit()</code> (described below) in their constructor or destructor, respectively. These ensures that you do not forget to <code>endEdit()</code> since the WriteAccessor manages it for you (through RAII). This also allows to distinguish read-only and write access. This is the preferred method for accessing arrays in write-access.</p> <pre><code>//with Data &lt;vector&lt;int&gt;&gt; values;\nvoid MyClass::doOperation()\n{\n  helper::WriteAccessor&lt;Data&lt; vector&lt; int &gt; &gt; &gt; valuesWriteAccess(d_values);\n  //or a more modern version:\n  //auto valuesWriteAccess = helper::getWriteAccessor(d_values);\n\n  for( size_t i=0; i&lt;valuesWriteAccess.size(); i++ )\n  {\n    valuesWriteAccess[i] = 0.0;\n  }\n}\n</code></pre> <p>For read access, replace WriteAccessor with ReadAccessor. Here is another example:</p> <pre><code>//with Data&lt;bool&gt; activeOption;\n//and  Data&lt;vector&lt;int&gt;&gt; values;\nvoid MyClass::doOperation()\n{\n  bool isActive = d_activeOption.getValue();\n  helper::ReadAccessor&lt;Data&lt; vector&lt; int &gt; &gt; &gt; valuesReadAccess = d_values;\n  //or a more modern version:\n  //auto valuesReadAccess = helper::getReadAccessor(d_values);\n  vector&lt; int &gt; newVector;\n\n  if (isActive)\n  {\n    for( size_t i=0; i&lt;v.size(); i++ )\n    {\n       newVector.push_back(valuesReadAccess[i]);\n    }\n  }\n}\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#begineditendedit","title":"beginEdit/endEdit","text":"<p>NB: this methods are not recommended to use, use ReadAccessor/WriteAccessor instead.</p> <p>This method is useful when you need to change multiple values (such as array cells) before to notify the change to other Data, and to prevent concurrent writing in the same time.</p> <ul> <li><code>beginEdit()</code> returns a pointer to the internal data, and records that     the Data is currently being modified. This allows to implement a     \u00ablock\u00bb against concurrent writing.</li> <li><code>endEdit()</code> unlocks the data and propagate the dirty flag.</li> </ul> <p>The direct use of this method is deprecated, please use the ReadAccessor/WriteAccessor presented below. This is commonly used while manipulating vectors of data.</p> <pre><code>//with Data&lt;vector&lt;int&gt;&gt; values;\nvoid MyClass::manipulatingParameters()\n{\n  vector&lt;int&gt;&amp; myValues = *values.beginEdit();\n  for( size_t i=0; i&lt;myValues.size(); i++ )\n  {\n     myValues[i] = 0;\n  }\n  values.endEdit(); // do not forget this !\n</code></pre> <p>Needlessly to say that, as you are getting a raw pointer to the data, you should proceed with the uttermost attention, especially in a multithreaded code!</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#using-state-member-types-and-methods","title":"Using State member types and methods","text":"<p>Class core::State has types and methods to ease the use of accessors. For example, the second line of the previous example could be written as:</p> <pre><code>typename core::behavior::MechanicalState::ReadVecCoord coord1 = mstate1-&gt;readPositions();\n//or:\n//auto coord1 = mstate1-&gt;readPositions();\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/11_Data_in_components/#using-mechanicalparams","title":"Using MechanicalParams","text":"<p>In the following example, all the state vectors are obtained from the local MechanicalState as Data and Data using a MechanicalParam, such as the current position and velocity of the local object. The force vector ID is passed explicitly to remind that the result should be stored in this vector, and an alternative instruction is used, but the force vector can also be obtained in the same way as the positions and the velocities. The vectors are then passed to a more concrete (though virtual) function which processes actual vectors rather than IDs.</p> <pre><code>template\nvoid ForceField::addForce(const MechanicalParams* mparams, MultiVecDerivId fId )\n{\n    addForce(mparams, *fId[mstate.get(mparams)].write() , *mparams-&gt;readX(mstate), *mparams-&gt;readV(mstate));\n}\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/13_DataTypes/","title":"DataTypes","text":"<p>As you may know, many SOFA C++ classes are templated, mostly on the type of DOF you want to simulate. Examples of templates can be found in the MechanicalObject page, in the templates section. In the code, the use of templates can be confusing, especially when the type used in place of the template has itself many types. This page provides a short introduction to all these DOF types.</p> <p>All DOF Types must implement (or define) all the following types:</p> <ul> <li> <p>Real: corresponds to a double or float value, depending on the DataTypes used: a class templated in Vec3d will return a double, whereas a a class templated in Vec3f will return a float</p> </li> <li> <p>Coord: standing for \"coordinate\", corresponds to a vector of Real with a size given by the number of degrees of freedom: a class templated in Vec6d will return a vector of 6 doubles. This vector is homogeneous to your degrees of freedom.</p> </li> <li> <p>Deriv standing for \"derivative\", corresponds to a vector of Real with a size given by the number of degrees of freedom: a class templated in Vec6d will return a vector of 6 doubles</p> </li> <li> <p>VecCoord or VecDeriv: correspond to a vector of respectively Coord or Deriv</p> </li> <li> <p>DataVecCoord or DataVecDeriv: correspond to a Data containing a vector of respectively Coord or Deriv. As noted in the associated article, the Data are variable of the class exposed to the user and other components in the scene</p> </li> <li> <p>MatrixCoord or MatrixDeriv: correspond to a matrix of respectively Coord or Deriv, this is more especially used by solvers and constraint algorithms</p> </li> <li> <p>VecCoordId, VecDerivId, MatrixCoordId or MatrixDerivId: correspond to an identifiant value (int) pointing to a vector or matrix of respectively Coord or Deriv. This is very useful to access specific vectors or matrix in the simulation. State vectors for instance are managed with specific protected Ids by the solvers.</p> </li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/15_Forward_declaration/","title":"Forward declaration","text":"<p>To reduce the amount of file inclusion in Sofa and thus compilation time it is possible to use forward declaration.  A forward declaration is a an incomplete type ta complete definition is not provided.  <pre><code>class AClass; ///&lt; this is a forward declaration of a type\n\n/// This is the full declaration + definition of a type\nclass AClass   \n{\n    public:\n}\n</code></pre></p> <p>Forward declaration can be used in place of the complete type (declaration+definition) when the \"inner\" details of the type are not needed. A classical scenario is the following <pre><code>#include &lt;sofa/core/objectmodel/BaseObject&gt;\nbool myFunction1(BaseObject* a)\n{\n    return doSomethingWith(a);\n}\n</code></pre></p> <p>As we are manipulating the 'a' object via a pointer and passing it to the doSomethingWith function there is no need to know any details of the BaseObject to compile that properly. Using a forward declaration for BaseObject would save us from the inclusion of the file <code>#include &lt;sofa/core/objectmodel/BaseObject&gt;</code></p>"},{"location":"40_Programming_with_SOFA/60_API_overview/15_Forward_declaration/#where-to-put-forward-declaration","title":"Where to put forward declaration","text":"<p>Forward declaration must be in a file called <code>fwd.h</code>. The fwd.h can be located at the module root directory. Eg: <pre><code>sofa/core/fwd.h\n</code></pre></p> <p>If there is a lot of forward declaration it is allowed to have a per sub-module <code>fwd.h</code> file.  Eg: <pre><code>sofa/core/objectmodel/fwd.h\nsofa/core/behavior/fwd.h\n</code></pre></p> <p>In that case it is mandatory that the module file contains them all. In our example  <pre><code>sofa/core/fwd.h\n    #include&lt;sofa/core/objectmodel/fwd.h&gt;\n    #include&lt;sofa/core/behavior/fwd.h&gt;\n</code></pre></p>"},{"location":"40_Programming_with_SOFA/60_API_overview/15_Forward_declaration/#opaque-api","title":"Opaque API","text":"<p>When it is not desirable to have access the full type definition it is possible to make or use what is called an opaque API. The Opaque API mimmics the methods provided by a class but relying only on forward declaration.  Example of the \"transparent\" API:  <pre><code>#include &lt;Context&gt;\n#include &lt;BaseNode&gt;\nnamespace sofa::simulation\n{\nclass Node : public Context, public BaseNode \n{\n    public:\n         double getDt(); \n         ///....\n};\n}\n</code></pre></p> <p>Example of the corresponding \"opaque\" API:  <pre><code>namespace sofa::simulation::node\n{\n     double getDt(Node*);  \n}\n</code></pre></p> <p>Opaque API for a given type can be located at the same location where the type is forward declared or if very long in their own dedicated file close to the one where the type definition is.  <pre><code>sofa/simulation/node.h\nsofa/simulation/node.cpp\nsofa/simulation/node-fwd.h \n</code></pre></p> <p>If the second solution is chosen, the <code>`node-fwd.h</code> file must be included by the per-module fwd.h. </p>"},{"location":"40_Programming_with_SOFA/60_API_overview/20_Create_links/","title":"Create links","text":"<p>A 'Link' allow you to access a sofa component from another one anywhere in the simulation graph. In your scene creation file, it usually appear as : input=@../component. In this page we explain how to use it. In your .h, declare your link :</p> <pre><code>//Where it comes from (usually you do not need to include it, it is already included)\n#include &lt;sofa/core/objectmodel/Link.h&gt;\n//Use a typedef to make it readable\ntypedef sofa::core::objectmodel::SingleLink&lt; FROM_CLASS, TO_CLASS, LINK_FLAG&gt; MyLink;\nMyLink mylink;\n</code></pre> <p>In your constructor use :</p> <pre><code>MyConstructor::MyConstructor():mylink(initLink('name', 'help')){}\n</code></pre> <p>The list of flags you can use is available in the Sofa API in the LinkFlags enumeration \"SofaAPIBaseLink. Here is a link to the BaseLink API. Here is an example from mapping.h. See the Mapping.inl for implementation also.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/30_The_ObjectFactory/","title":"The ObjectFactory","text":""},{"location":"40_Programming_with_SOFA/60_API_overview/30_The_ObjectFactory/#the-objectfactory","title":"The ObjectFactory","text":"<p>The ObjectFactory is mostly a register which gives a correspondancy between a component name and a function pointer to a method able to construct that object. It is located in the sofacore library.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/30_The_ObjectFactory/#registering-a-component","title":"Registering a component","text":"<p>In SOFA a component is a class which has sofa::core::objectmodel::BaseObject in its class inheritance hierarchy. In order to make your component available in SOFA you have to call the registration method of the ObjectFactory, and use two macros SOFA_DECL_CLASS and SOFA_LINK_CLASS whose purpose is to make sure that the code which actually registers the component in the factory is called in the output binary. The summary of the steps to follow is here :</p> <ul> <li>Add a : SOFA_DECL_CLASS(NewComponent) in your .cpp file,     NewComponent being the class name of your component.</li> <li> <p>Register the component: it is generally done in the .cpp of your new     component class. If your component is not templated:</p> <pre><code>#include &lt;sofa/core/ObjectFactory.h&gt;\n int NewComponentClass = sofa::core::RegisterObject(\"Description of your component\")\n.add&lt; NewComponent &gt;();\n</code></pre> <p>if your component is templated with Vec3dTypes and Vec3fTypes (for instance)</p> <pre><code> int NewComponentClass = sofa::core::RegisterObject(\"Description of your component\")\n.add&lt; NewComponent&lt;Vec3dTypes&gt; &gt;()\n.add&lt; NewComponent&lt;Vec3fTypes&gt; &gt;()\n;\n</code></pre> </li> <li> <p>Add a : SOFA_LINK_CLASS(NewComponent) in the init file.</p> <ul> <li>If you chose to put your components directly inside SOFA modules     directories you will find a file called     initNameCategoryComponent.cpp with NameCategoryComponent being     the category of your component: ForceField, Constraint,     Mapping ... This is were you put the SOFA_LINK_CLASS macro</li> <li>If you are writing a plugin, you have to call in the     SOFA_LINK_CLASS macro from your initMyPlugin.cpp.</li> </ul> </li> </ul> <p>The documentation about the methods regarding the registration component can be found in the doxygen documentation of the sofa::core::RegisterObject class.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/30_The_ObjectFactory/#the-objectfactory-and-the-xml-mechanicalobject-example","title":"The ObjectFactory and the XML (MechanicalObject example)","text":"<p>For a given instance of SOFA we can know what are the available components by looking at the ObjectFactory entries. An entry in the ObjectFactory can point to multiple constructors, which happens to be useful when you write components which depend on a template parameter.</p> <pre><code>int MechanicalObjectClass = core::RegisterObject(\"mechanical state vectors\")\n#ifdef SOFA_FLOAT\n.add&lt; MechanicalObject &gt;(true) // default template\n#else\n.add&lt; MechanicalObject &gt;(true) // default template\n#ifndef SOFA_DOUBLE\n.add&lt; MechanicalObject &gt;()\n#endif\n#endif\n#ifndef SOFA_FLOAT\n.add&lt; MechanicalObject &gt;()\n.add&lt; MechanicalObject &gt;()\n.add&lt; MechanicalObject &gt;()\n.add&lt; MechanicalObject &gt;()\n.add&lt; MechanicalObject &gt;()\n#endif\n#ifndef SOFA_DOUBLE\n.add&lt; MechanicalObject &gt;()\n.add&lt; MechanicalObject &gt;()\n.add&lt; MechanicalObject &gt;()\n.add&lt; MechanicalObject &gt;()\n.add&lt; MechanicalObject &gt;()\n#endif\n.add&lt; MechanicalObject &gt;()\n;\n</code></pre> <p>We can see that the same entry \"MechanicalObject\" has multiple flavor depending on the template parameter, and that the default entry points to a</p> <ul> <li>sofa::component::container::MechanicalObject if SOFA is compiled in     float mode</li> <li>sofa::component::container::MechanicalObject if SOFA is compiled in     double mode</li> </ul> <p>When you write a SOFA scene in XML this means that such a line</p> <pre><code>&lt;MechanicalObject /&gt;\n</code></pre> <p>will be translated by the default instance of MechanicalObject registered in the ObjectFactory. If you want a specific flavor of MechanicalObject, you have to specify it by using the template attribute in the XML.</p> <pre><code>&lt;MechanicalObject template=\"Vec3d\"/&gt;\n</code></pre> <p>This will produce a MechanicalObject templated on Vec3d, i.e. with 3 degrees of freedom per node. For a RigidType in 3D (ie Rigid3dTypes) this points to :</p> <pre><code>/// We now use template aliases so we do not break backward compatibility\ntemplate&lt;&gt; inline const char* Rigid3dTypes::Name() { return \"Rigid3d\"; }\ntemplate&lt;&gt; inline const char* Rigid3fTypes::Name() { return \"Rigid3f\"; }\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/30_The_ObjectFactory/#the-createobject-method","title":"The createObject method","text":"<pre><code>sofa::core::objectmodel::BaseObject::SPtr obj = ObjectFactory::createObject( /* objectmodel::BaseContext* */ context, /* objectmodel::BaseObjectDescription* */arg);\nMyComponent::SPtr my_obj = sofa::core::objectmodel::SPtr_dynamic_cast(obj);\n</code></pre> <p>The method needs two parameters :</p> <ul> <li>core::objectmodel::BaseContext , ie the graph node where your     component will reside</li> <li>core::objectmodel::BaseObjectDescription, which is stores specific     parameters of the component you are trying to create.</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/30_The_ObjectFactory/#example-of-the-tetrahedronfemforcefield","title":"Example of the TetrahedronFEMForceField","text":"<pre><code>sofa::core::objectmodel::BaseObjectDescription options(\"myFF1\",\"TetrahedronFEMForceField\");\n    options.setAttribute(\"youngModulus\", \"10000\");\n    BaseForceField::SPtr ff = sofa::core::objectmodel::SPtr_dynamic_cast(sofa::core::ObjectFactory::CreateObject(node, &amp;options));\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/","title":"Matrix Assembly API","text":"<p>To overcome several limitations of SOFA, it has been decided to refactor the linear system assembly in SOFA. This document describes the former limitations as well as the new API and the associated refactoring.</p> <p>This work is now available in SOFA since SOFA v23.06.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#limitations-in-sofa-v2212","title":"Limitations in SOFA v22.12","text":"<ul> <li>No direct access to system matrices (MBK) for users. Some users may want to extract the matrix of a specific force field (local to an object) for analyzing it, or even to modify it with an external tool (python, matlab etc).</li> <li>Steep learning curve for newcomers. It is quite complex to understand how to implement a new component, such as a force field. It is not obvious how the matrices are created and computed, or if the matrix system is not built. In that later case, how does it work?</li> <li>It is difficult to understand the difference between addDForce and addKtoMatrix. They both are related to the derivative of the force which indicates that they could probably be reunited. A reunification would be less error-prone.</li> <li>Currently, constraints are solved in an indirect fashion: a free motion step followed by a correction. A direct solver would require to build a matrix system embedding the constraints. This is not considered with the current implementation, but could be in the future.</li> <li>Mapping of non-constant forces does not work for solvers assembling their matrices. A workaround is to use the famous component MechanicalMatrixMapper. This component is required for simulations where the matrix is assembled, but not for matrix-free.</li> <li>Geometric stiffness of non-linear mappings are not considered. A workaround is to use the component MappingGeometricStiffnessForceField, but not for matrix-free.</li> <li>The type of the global system matrix is chosen by the template type of the linear solver. It is not clear for the user that this template has an effect till the force field.</li> <li>The type of matrix is imposed to the force field \u2192 difficult to optimize. Currently, some force fields perform different operations based on the type of the passed matrix, which is checked with a dynamic cast. Optimizing the matrix assembly should not be up to the force fields.</li> <li>Difficult to integrate matrix solvers libraries (e.g. eigen, pardiso etc).</li> <li>Unnecessary copies in constraint solving</li> <li>A force field or a mass can have access to the entire global matrix: dangerous</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#sofamatrix-plugin","title":"SofaMatrix Plugin","text":"<p>A plugin has been introduced to answer some limitations through additional SOFA components, without any change in SOFA.</p> <p>See the readme file for a detailed introduction of SofaMatrix.</p> <p>To summarize,<code>GlobalSystemMatrixExporter</code> is useful to analyze the global system matrix, and <code>GlobalSystemMatrixImage</code> is a user-friendly way to visualize the system matrix directly into the Qt-based GUI of runSofa.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#python-bindings","title":"Python Bindings","text":"<p>Python bindings have been introduced to be able to extract some matrices and vectors during a simulation:</p> <ul> <li>Global system matrix</li> <li>Global system right-hand side</li> <li>Global system solution</li> <li>Mass matrix</li> <li>Stiffness matrix</li> <li>Compliance matrix projected in the constraint space</li> </ul> <p>```python=</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#get-the-global-system-matrix-from-the-linear-solver","title":"Get the global system matrix from the linear solver","text":"<p>system_matrix = root.linear_solver.A()</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#get-the-rhs-vector-from-the-linear-solver","title":"Get the RHS vector from the linear solver","text":"<p>rhs = root.linear_solver.b()</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#get-the-solution-vector-from-the-linear-solver","title":"Get the solution vector from the linear solver","text":"<p>solution = root.linear_solver.x()</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#assemble-the-mass-matrix-from-the-mass-component","title":"Assemble the mass matrix from the mass component","text":"<p>mass_matrix = root.mass.assembleMMatrix()</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#assemble-the-stiffness-matrix-from-the-force-field-component","title":"Assemble the stiffness matrix from the force field component","text":"<p>stiffness_matrix = root.force_field.assembleKMatrix()</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#get-the-constraint-matrix-from-the-constraint-solver","title":"Get the constraint matrix from the constraint solver","text":"<p>compliance_matrix = root.constraint_solver.W() <pre><code>## Reminders\n\n### Global Matrix Contributors\n\nThe following components contributes to the global matrix:\n\n- Force fields\n- Masses\n- Projective constraints\n- Non-linear mappings\n\n### addKToMatrix\n\n`BaseForceField::addKToMatrix` and `BaseForceField::addBToMatrix` are the functions where the contributions from a force field to the global system matrix are added.\nThey corresponds respectively to the derivative of the force with respect to the position (stiffness), and the derivative of the force with respect to the velocity (damping).\nThere is an equivalent function for masses: `BaseMass::addMToMatrix`.\n\nSignature of the `BaseForceField::addKToMatrix` function:\n\n```cpp\nvoid addKToMatrix(const MechanicalParams* mparams, const sofa::core::behavior::MultiMatrixAccessor* matrix );\n</code></pre></p> <p>Signature of the <code>BaseForceField::addBToMatrix</code> function:</p> <pre><code>void addBToMatrix(const MechanicalParams* mparams, const sofa::core::behavior::MultiMatrixAccessor* matrix );\n</code></pre> <p>Signature of the <code>BaseMass::addMToMatrix</code> function:</p> <pre><code>void addMToMatrix(const MechanicalParams* mparams, const sofa::core::behavior::MultiMatrixAccessor* matrix)\n</code></pre> <p>A challenge for the user is to understand both parameters.</p> <p>In <code>ForceField</code>, an overload of the function <code>addKToMatrix</code> is introduced with the following parameters</p> <pre><code>void addKToMatrix(sofa::linearalgebra::BaseMatrix * matrix, SReal kFact, unsigned int &amp;offset)\n</code></pre> <p>The overload of the function <code>addBToMatrix</code> is: <pre><code>void addBToMatrix(sofa::linearalgebra::BaseMatrix * matrix, SReal bFact, unsigned int &amp;offset)\n</code></pre></p> <p>While in <code>Mass</code>, the overload is:</p> <pre><code>void addMToMatrix(sofa::linearalgebra::BaseMatrix * matrix, SReal mFact, unsigned int &amp;offset)\n</code></pre> <p>The following questions rise:</p> <ul> <li>What is <code>kFact</code>, <code>bFact</code> and <code>mFact</code>? What should the developer do with it?</li> <li>What is <code>offset</code>? What should the developer do with it?</li> </ul> <p>As a reminder:</p> <ul> <li><code>kFact</code>, <code>bFact</code> and <code>mFact</code> are coefficients to multiply to, respectively, the stiffness matrix, the damping matrix and the mass matrix. Those coefficients come from the ODE solver. They are crucial for a simulation to work. In other words, it is required that the developper multiply each matrix coefficient by one of those factors.</li> <li><code>offset</code> is an index to where the force field or mass must start adding its contribution into the global matrix. Its value depends on the mechanical state the component is associated to.</li> </ul> <p>Now that we have answered the questions, we can observe that it is very easy for a developer to:</p> <ul> <li>Forget to use the <code>kFact</code>, <code>mFact</code> and <code>offset</code></li> <li>Introduce errors by a wrong usage of the <code>kFact</code>, <code>mFact</code> and <code>offset</code></li> <li>Introduce errors by adding contributions at the wrong location in the matrix</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#compressed-sparse-row","title":"Compressed Sparse Row","text":"<p>Compressed sparse row is a data structure representing a sparse matrix. In SOFA, the type is <code>CompressedRowSparseMatrix</code> and derives from <code>BaseMatrix</code>. Its main template parameter is the type of blocks stored in the data structure. In SOFA, <code>CompressedRowSparseMatrix</code> is often templated with a scalar or with a 3x3 block <code>sofa::type::Mat&lt;3,3,Real&gt;</code>.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#block-based-optimizations","title":"Block-based Optimizations","text":"<p>In <code>BaseForceField::addKToMatrix</code>, the force field can have access to a <code>sofa::linearalgebra::BaseMatrix</code>, which is a pointer to the global matrix system. The type of the matrix is not known (<code>BaseMatrix</code> is an interface, a base class for matrix types).</p> <p>The matrix assembly can be made faster for types <code>CompressedRowSparseMatrix&lt;sofa::type::Mat&lt;3,3,Real&gt;</code>, compared to <code>CompressedRowSparseMatrix&lt;Real&gt;</code>. This is due to the reduction of searches in the structure when a contribution is added.</p> <p>However, the speed up was not transparent. The function to call for this optimization was in the class <code>CompressedRowSparseMatrix</code> and not in its base class <code>BaseMatrix</code>. Therefore, force fields, which have access to a <code>BaseMatrix</code> could not benefits from this optimization. A workaround was to test the type of <code>BaseMatrix</code> with a <code>dynamic_cast</code> in the force field. Therefore, it was the responsability of the force field to test the type of matrix. This responsability was taken by only a few force fields. This test also made the <code>addKToMatrix</code> function more complex, introducing branches depending on the type of matrix. See an example in <code>TetrahedronFEMForceField</code> from SOFA v20.12: https://github.com/sofa-framework/sofa/blob/v20.12/SofaKernel/modules/SofaSimpleFem/src/SofaSimpleFem/TetrahedronFEMForceField.inl#L1996</p> <pre><code>if (sofa::component::linearsolver::CompressedRowSparseMatrix&lt;defaulttype::Mat&lt;3,3,double&gt; &gt; * crsmat = dynamic_cast&lt;sofa::component::linearsolver::CompressedRowSparseMatrix&lt;defaulttype::Mat&lt;3,3,double&gt; &gt; * &gt;(mat))\n{\n    for(it = _indexedElements-&gt;begin(), IT=0 ; it != _indexedElements-&gt;end() ; ++it,++IT)\n    {...}\n}\nelse if (sofa::component::linearsolver::CompressedRowSparseMatrix&lt;defaulttype::Mat&lt;3,3,float&gt; &gt; * crsmat = dynamic_cast&lt;sofa::component::linearsolver::CompressedRowSparseMatrix&lt;defaulttype::Mat&lt;3,3,float&gt; &gt; * &gt;(mat))\n{\n    for(it = _indexedElements-&gt;begin(), IT=0 ; it != _indexedElements-&gt;end() ; ++it,++IT)\n    {...}\n}\nelse\n{...}\n</code></pre> <p>In the pull request #2281, a template specialization of the <code>add</code> function for blocks of 3x3 is introduced. Instead to call 9 times the <code>add</code> function on scalars, it directly insert the blocks of 3x3. This is exactly what was missing to transparently making the insertion of 3x3 blocks efficient.</p> <p>Since this introduction, it is not required to test the type of matrix in the force field. The content of <code>addKToMatrix</code> should be simplified by removing the branches. It is also homogenous through all the force fields.</p> <p>This optimization was a step toward the simplification the API of matrix assembly.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#refactoring","title":"Refactoring","text":"<p>This section is a detailed description of the main changes in SOFA in order to address the current limitations. Those changes are not additions, such as in SofaMatrix plugin, but really changes that will affect both the developers and the users. Most of those changes are introduced in the pull request #2777.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#specifications","title":"Specifications","text":"<p>Minimal impact on the current simulation scenes:</p> <ul> <li>Current simulation scenes should be able to be loaded and run properly</li> <li>If any change in the scene is required but yet supported by the new design, a message warns the user</li> <li>It is possible to assemble more than one global matrix: for example, it should be possible to assemble the usual global matrix (weighted sum of mass matrix, damping matrix and stiffness matrix), but also other matrices, such as the mass matrix or the stiffness matrix stored independently from the global matrix.</li> <li>Scenes with more than one linear solver in the same Node must be supported. It is the case when a preconditioned conjugate gradient is used.</li> <li>SofaCUDA plugin must be supported.</li> <li>Impacts on the developpers (API changes) must be detailed to ease the transition.</li> </ul> <p>New features:</p> <ul> <li>Matrix mapping is possible</li> <li>All components that can have a contribution to the global matrix must be supported. In particular non-linear mappings which was not the case before.</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#uncoupling-of-linear-system-and-linear-solver","title":"Uncoupling of Linear System and Linear Solver","text":"<p>In SOFA, linear solvers are components that have several responsabilities:</p> <ul> <li>Storing the linear system</li> <li>Assembling the linear system (when the system is assembled)</li> <li>Inverting and solving the linear system</li> <li>Using the factorization for other purposes: multiplication of the inverse of the global matrix with the transpose of the compliance matrix.</li> </ul> <p>To comply with the Single-responsibility principle, a new type of component is introduced: Linear System. The responsabilities of storing and assembling the linear system are transfered from the LinearSolver to the LinearSystem. Actually, storing and managing memory for the linear system is also done in another class but it is encapsulated in the Linear System component.</p> <p>Previously, SOFA did not automatically support the assembly of mapped components. This issue needed to be addressed, but it dramatically increased the complexity of the matrix assembly method. It is another reason to separate assembly and solving.</p> <p>To summarize, the old LinearSolver is now a combination of a LinearSystem with a new lighter LinearSolver.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#scene-design","title":"Scene Design","text":"<p>Due to the previous reason, the Nodes containing a LinearSolver in the SOFA scenes should now have 2 components: a LinearSystem and a LinearSolver.</p> <p>For example,</p> <pre><code>&lt;EulerImplicitSolver/&gt;\n&lt;SparseLDLSolver/&gt;\n</code></pre> <p>should now be written:</p> <pre><code>&lt;EulerImplicitSolver/&gt;\n&lt;MatrixLinearSystem name=\"system\"/&gt;\n&lt;SparseLDLSolver linearSystem=\"@system\"/&gt;\n</code></pre> <p>Note that the component <code>MatrixLinearSystem</code> is a component LinearSystem and will be introduced in details later.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#backward-compatibility","title":"Backward compatibility","text":"<p>In order not to break scenes which were written with only a linear solver and without a linear system, SOFA will automatically create a linear system if none is found in the current context of the linear solver. Therefore, the changes introduced with the addition of a new component should not break the old scenes. Nevertheless, a message will warn the user to add a linear system component in the scene.</p> <p>The SOFA scenes shipped with the source code will be updated according to the new design.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#architecture","title":"Architecture","text":"<p>The linear system components all derive from a base abstract class <code>sofa::core::behavior::BaseMatrixLinearSystem</code>. An intermediate templated class <code>sofa::component::linearsolver::linearsystem::MatrixLinearSystem</code> deriving from <code>BaseMatrixLinearSystem</code> is in charge of storing the linear system as a matrix and two vectors (the right hand side of the system and the solution).</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#interaction-between-linear-system-and-linear-solver","title":"Interaction between Linear System and Linear Solver","text":"<p>In the simple cases, only one linear system and one linear solver are defined:</p> <pre><code>&lt;EulerImplicitSolver/&gt;\n&lt;MatrixLinearSystem name=\"system\"/&gt;\n&lt;SparseLDLSolver linearSystem=\"@system\"/&gt;\n</code></pre> <p>However, more complex scenarios must be supported:</p> <ul> <li>Multiple assembled matrices: </li> </ul> <pre><code>&lt;EulerImplicitSolver/&gt;\n\n&lt;Node name=\"matrices\"&gt;\n    &lt;MatrixLinearSystem name=\"system\"/&gt;\n    &lt;MatrixLinearSystem name=\"K\" assembleMass=\"false\" assembleMappings=\"false\" applyProjectiveConstraints=\"false\"/&gt;\n    &lt;MatrixLinearSystem name=\"M\" assembleStiffness=\"false\" assembleMappings=\"false\" applyProjectiveConstraints=\"false\"/&gt;\n&lt;/Node&gt;\n&lt;CompositeLinearSystem name=\"solverSystem\" linearSystems=\"@matrices/system @matrices/K @matrices/M\" solverLinearSystem=\"@system\"/&gt;\n\n&lt;SparseLDLSolver linearSystem=\"@solverSystem\"/&gt;\n</code></pre> <p>In this scenario, the user wants to assemble the stiffness matrix and the mass matrix independently from the global matrix, and access it in a component.</p> <ul> <li>Preconditioners:</li> </ul> <p>If preconditioners are used along with a <code>ShewchukPCGLinearSolver</code>, the scene may look like:</p> <pre><code>&lt;ShewchukPCGLinearSolver name=\"PCG\" iterations=\"1000\" preconditioners=\"preconditioner\"/&gt;\n&lt;WarpPreconditioner name=\"preconditioner\" solverName=\"initSolver\" printLog=\"true\"/&gt;\n&lt;SparseLDLSolver name=\"initSolver\" template=\"CompressedRowSparseMatrixMat3x3d\" /&gt;\n</code></pre> <p>In this example, three linear solvers can be found inside the same context. </p> <p>Due to the uncoupling of the linear system from the linear solver, a linear system must be associated to each one of the solver. Which means 6 components instead of 3. It would look like:</p> <pre><code>&lt;MatrixFreeSystem name=\"mainSystem\"/&gt;\n&lt;ShewchukPCGLinearSolver name=\"PCG\" iterations=\"1000\" preconditioners=\"preconditioner\" linearSystem=\"@mainSystem\"/&gt;\n\n&lt;RotationMatrixSystem name=\"rotation\"/&gt;\n&lt;WarpPreconditioner name=\"preconditioner\" solverName=\"initSolver\" printLog=\"true\" linearSystem=\"@rotation\"/&gt;\n\n&lt;MatrixLinearSystem name=\"initSystem\" template=\"CompressedRowSparseMatrixMat3x3d\"/&gt;\n&lt;SparseLDLSolver name=\"initSolver\" template=\"CompressedRowSparseMatrixMat3x3d\" linearSystem=\"@initSystem\"/&gt;\n</code></pre> <p>There are three linear systems in the same context. The situation is similar to the previous example, where the user wants to assemble matrices independently. However, the nature of the matrices are different, and they should not be assembled with the same method. For example, the linear system <code>initSystem</code> must be assembled only at the initialization stage, not at each time step.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#multiple-assembled-matrices","title":"Multiple Assembled Matrices","text":"<p>The extraction of the linear system from the linear solver allows to formulate the matrix assembly with different algorithms through different components. In the proposed changes, a linear system component is introduced: <code>MatrixLinearSystem</code>, a default component able to store and assembly any linear system type.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#api-changes","title":"API Changes","text":""},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#simplifications-through-an-interface","title":"Simplifications through an Interface","text":"<p>One of the difficulties related to the previous implementation was the use of the class <code>sofa::core::behavior::MultiMatrixAccessor</code>. Its type name was not explicit on its functionalities, and it lacked documentation. And yet, it is crucial to use it properly when implementing <code>addKToMatrix</code>, <code>addBToMatrix</code> or <code>addMToMatrix</code>.</p> <p>Usually, a <code>sofa::linearalgebra::BaseMatrix</code> is accessed in order to add contributions into it through the <code>BaseMatrix::add</code> functions.</p> <p>The new design keeps the same principle of calling <code>add</code> functions, but using an interface instead, not through a <code>BaseMatrix</code>. That is why, the class <code>sofa::core::MatrixAccumulator</code> is introduced. It is a simple interface, designed to customize the matrix assembly in derived classes.</p> <p>Here is the implementation of the <code>MatrixAccumulator</code> class:</p> <p>```cpp= class SOFA_CORE_API MatrixAccumulatorInterface { public:     virtual ~MatrixAccumulatorInterface() = default;</p> <pre><code>virtual void add(sofa::SignedIndex /*row*/, sofa::SignedIndex /*col*/, float /*value*/) {}\nvirtual void add(sofa::SignedIndex /*row*/, sofa::SignedIndex /*col*/, double /*value*/) {}\n\nvirtual void add(sofa::SignedIndex row, sofa::SignedIndex col, const sofa::type::Mat&lt;1, 1, float&gt; &amp; value);\nvirtual void add(sofa::SignedIndex row, sofa::SignedIndex col, const sofa::type::Mat&lt;1, 1, double&gt;&amp; value);\nvirtual void add(sofa::SignedIndex row, sofa::SignedIndex col, const sofa::type::Mat&lt;2, 2, float&gt; &amp; value);\nvirtual void add(sofa::SignedIndex row, sofa::SignedIndex col, const sofa::type::Mat&lt;2, 2, double&gt;&amp; value);\nvirtual void add(sofa::SignedIndex row, sofa::SignedIndex col, const sofa::type::Mat&lt;3, 3, float&gt; &amp; value);\nvirtual void add(sofa::SignedIndex row, sofa::SignedIndex col, const sofa::type::Mat&lt;3, 3, double&gt;&amp; value);\n\nvirtual void clear() {}\n</code></pre> <p>}; <code>``  This class is essential in the new design. It replaces all the parameters provided to</code>addKToMatrix<code>:</code>MultiMatrixAccessor<code>,</code>BaseMatrix`, offset, factor.  </p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#index-checking","title":"Index Checking","text":"<p>When a component will use the interface, through the <code>add</code> method, it can pass any value for <code>row</code> and <code>col</code>. In particular, if the code is buggy, the values for <code>row</code> and <code>col</code> can be out of the matrix bounds, or not in the submatrix associated to the component.  Therefore, an index checking strategy has been implemented. The idea is to inherit from <code>MatrixAccumulatorInterface</code> and check indices in the <code>add</code> methods. To do that, a helper class is available: <code>MatrixAccumulatorIndexChecker</code>. Its two template parameters are:  1. <code>TBaseMatrixAccumulator</code>: a type derived from <code>MatrixAccumulatorInterface</code> 2. <code>TStrategy</code>: the type of strategy to check indices. The strategy can be <code>NoIndexVerification</code> or <code>RangeVerification</code>. More strategies can be added in the future.  The matrix accumulators used in <code>MatrixLinearSystem</code> use this class. A boolean <code>Data</code> in <code>MatrixLinearSystem</code> defines if the strategy to instantiate is <code>NoIndexVerification</code> or <code>RangeVerification</code>. By default, index checking is disabled for performances reasons. Nevertheless, note that index checking has only a small consequence on the performances. </p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#mass","title":"Mass","text":"<p>In masses, the new design replaces the <code>addMToMatrix</code> function by the following function:  <code>cpp void buildMassMatrix(MassMatrixAccumulator* matrices);</code></p> <p>This function is introduced in <code>sofa::core::behavior::BaseMass</code>. No overload is available to reduce the complexity.</p> <p><code>MassMatrixAccumulator</code> is a direct derived class of <code>sofa::core::MatrixAccumulatorInterface</code>, but still an interface. It is a strong type to make the interface clearer: this <code>MatrixAccumulatorInterface</code> is dedicated to masses, and cannot be passed to any other function taking strong-typed <code>MatrixAccumulatorInterface</code>.</p> <p>In the previous design, a factor needed to be introduced to multiply it by the matrix contribution prior to add the contribution into the global matrix. It is no longer necessary: the matrix assembly method implemented in a LinearSystem component is now responsible to manage the factors.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#force-fields","title":"Force Fields","text":"<p>In force fields, the new design replaces the <code>addKToMatrix</code> function by the following function:</p> <pre><code>void buildStiffnessMatrix(StiffnessMatrix* matrix);\n</code></pre> <p>This function is introduced in <code>sofa::core::behavior::BaseForceField</code>. No overload is available to reduce the complexity.</p> <p><code>StiffnessMatrix</code> is a type containing several <code>MatrixAccumulatorInterface</code>'s. Contrary to a mass, there is an additional step to access the right <code>MatrixAccumulatorInterface</code>. This is mainly to support <code>InteractionForceField</code>'s, where the component deals with more than one mechanical state.</p> <p>The <code>addBToMatrix</code> function is replaced by:</p> <pre><code>void buildDampingMatrix(DampingMatrix* matrix)\n</code></pre> <p><code>DampingMatrix</code> is a type containing several <code>MatrixAccumulatorInterface</code>'s.</p> <p>In the previous design, a factor needed to be introduced to multiply it by the matrix contribution prior to add the contribution into the global matrix. It is no longer necessary: the matrix assembly method implemented in a LinearSystem component is now responsible to manage the factors.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#example","title":"Example","text":"<p>The following code snippet is the <code>addKToMatrix</code> function from the <code>HexahedronFEMForceField</code> in SOFA v21.12 (link to the code)</p> <p>```cpp= template void HexahedronFEMForceField::addKToMatrix(const core::MechanicalParams mparams, const sofa::core::behavior::MultiMatrixAccessor matrix) {     // Build Matrix Block for this ForceField <pre><code>sofa::core::behavior::MultiMatrixAccessor::MatrixRef r = matrix-&gt;getMatrix(this-&gt;mstate);\nconst Real kFactor = (Real)sofa::core::mechanicalparams::kFactorIncludingRayleighDamping(mparams, this-&gt;rayleighStiffness.getValue());\n\nsofa::Index e { 0 }; //index of the element in the topology\n\nconst auto&amp; stiffnesses = _elementStiffnesses.getValue();\nconst auto* indexedElements = this-&gt;getIndexedElements();\n\nfor (const auto&amp; element : *indexedElements)\n{\n    const ElementStiffness &amp;Ke = stiffnesses[e];\n    const Transformation Rot = getElementRotation(e);\n    e++;\n\n    // find index of node 1\n    for (Element::size_type n1 = 0; n1 &lt; Element::size(); n1++)\n    {\n        const auto node1 = element[n1];\n        // find index of node 2\n        for (Element::size_type n2 = 0; n2 &lt; Element::size(); n2++)\n        {\n            const auto node2 = element[n2];\n\n            const Mat33 tmp = Rot.multTranspose( Mat33(\n                    Coord(Ke[3*n1+0][3*n2+0],Ke[3*n1+0][3*n2+1],Ke[3*n1+0][3*n2+2]),\n                    Coord(Ke[3*n1+1][3*n2+0],Ke[3*n1+1][3*n2+1],Ke[3*n1+1][3*n2+2]),\n                    Coord(Ke[3*n1+2][3*n2+0],Ke[3*n1+2][3*n2+1],Ke[3*n1+2][3*n2+2])) ) * Rot;\n\n            r.matrix-&gt;add( r.offset + 3 * node1, r.offset + 3 * node2, tmp * (-kFactor));\n        }\n    }\n}\n</code></pre> <p>} <code>Due to the API changes, the new function `buildStiffnessMatrix` looks like:</code>cpp= template void HexahedronFEMForceField::buildStiffnessMatrix(core::behavior::StiffnessMatrix matrix) {     sofa::Index e { 0 }; //index of the element in the topology      const auto&amp; stiffnesses = _elementStiffnesses.getValue();     const auto indexedElements = this-&gt;getIndexedElements();      auto dfdx = matrix-&gt;getForceDerivativeIn(this-&gt;mstate.get())                        .withRespectToPositionsIn(this-&gt;mstate.get());      for (const auto&amp; element : indexedElements)     {         const ElementStiffness &amp;Ke = stiffnesses[e];         const Transformation&amp; Rot = getElementRotation(e);         e++;          for (Element::size_type n1 = 0; n1 &lt; Element::size(); n1++)         {             const auto node1 = element[n1];             for (Element::size_type n2 = 0; n2 &lt; Element::size(); n2++)             {                 const auto node2 = element[n2];                  const Mat33 tmp = Rot.multTranspose( Mat33(                         Coord(Ke[3n1+0][3n2+0],Ke[3n1+0][3n2+1],Ke[3n1+0][3n2+2]),                         Coord(Ke[3n1+1][3n2+0],Ke[3n1+1][3n2+1],Ke[3n1+1][3n2+2]),                         Coord(Ke[3n1+2][3n2+0],Ke[3n1+2][3n2+1],Ke[3n1+2][3*n2+2])) ) * Rot;                  dfdx(3 * node1, 3 * node2) += - tmp;             }         }     } } ``` <p>It can be observed that the function content is very similar at the exception that:</p> <ul> <li><code>offset</code> and <code>kFactor</code> variables disappeared</li> <li>the API clearly states that the function deals with the derivative of the force with respect to the position. It also states clearly to which mechanical states the force is computed. It is particularly useful for <code>InteractionForceField</code>'s.</li> <li>the API looks more to a mathematical formulation: <code>dfdx(3 * node1, 3 * node2) += - tmp</code></li> </ul> <p>The approach is similar for damping, except that the derivative is with respect to the velocity:</p> <pre><code>template &lt;class DataTypes&gt;\nvoid UniformVelocityDampingForceField&lt;DataTypes&gt;::buildDampingMatrix(core::behavior::DampingMatrix* matrix)\n{\n    if( !d_implicit.getValue() ) return;\n\n    auto dfdv = matrix-&gt;getForceDerivativeIn(this-&gt;mstate)\n                       .withRespectToVelocityIn(this-&gt;mstate);\n\n    const sofa::Size size = this-&gt;mstate-&gt;getMatrixSize();\n    const auto damping = sofa::helper::ReadAccessor(dampingCoefficient);\n    for( sofa::Size i = 0; i &lt; size; ++i)\n    {\n        dfdv(i, i) += -damping.ref();\n    }\n}\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#interactionforcefield","title":"InteractionForceField","text":"<p><code>InteractionForceField</code> is very similar to <code>ForceField</code> except is can deal with multiple mechanical states. Here is an example from <code>StiffSpringForceField</code>:</p> <pre><code>auto df1_dx1 = matrix-&gt;getForceDerivativeIn(m1).withRespectToPositionsIn(m1);\nauto df1_dx2 = matrix-&gt;getForceDerivativeIn(m1).withRespectToPositionsIn(m2);\nauto df2_dx1 = matrix-&gt;getForceDerivativeIn(m2).withRespectToPositionsIn(m1);\nauto df2_dx2 = matrix-&gt;getForceDerivativeIn(m2).withRespectToPositionsIn(m2);\n\nfor (sofa::Index e = 0; e &lt; n; ++e)\n{\n    const Spring&amp; s = ss[e];\n    const Mat&amp; m = this-&gt;dfdx[e];\n\n    const unsigned p1 = Deriv::total_size * s.m1;\n    const unsigned p2 = Deriv::total_size * s.m2;\n\n    df1_dx1(p1, p1) += -m;\n    df1_dx2(p1, p2) +=  m;\n    df2_dx1(p2, p1) +=  m;\n    df2_dx2(p2, p2) += -m;\n}\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#projective-constraints","title":"Projective Constraints","text":"<p>Similarly to force fields and masses, an interface is introduced: <code>sofa::core::behavior::ZeroDirichletCondition</code>. </p> <p>```cpp= /  * Interface to apply a zero Dirichlet boundary condition on a matrix  *  * If K is a matrix to apply a zero Dirichlet boundary condition:  *  K_ii = 1  *  K_ij = 0 for i != j  *  K_ji = 0 for i != j  */ struct ZeroDirichletCondition {     virtual ~ZeroDirichletCondition() = default;     /      * Zero out a row and a column of a matrix. The element at the      * intersection of the row and the column is set to 1.      /     virtual void discardRowCol(sofa::Index /row/, sofa::Index /col*/) {} }; <pre><code>The following function is introduced in projective constraints:\n\n```cpp\nvoid applyConstraint(sofa::core::behavior::ZeroDirichletCondition* /*matrix*/) {}\n</code></pre></p> <p>Projective constraints have to implement this function and specify where in the matrix the constraints apply.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#non-linear-mappings","title":"Non-linear Mappings","text":"<p>Similarly to force fields and masses, an interface is introduced: <code>MappingMatrixAccumulator</code>.</p> <p>A function is introduced to call the matrix accumulation:</p> <pre><code>void buildGeometricStiffnessMatrix(sofa::core::MappingMatrixAccumulator* matrices);\n</code></pre> <p>Mappings (linear and non-linear) already have a function <code>getK</code> to compute their contribution to the global matrix. This function is used to add its contributions into the global matrix. Direct accumulation, without the function <code>getK</code>, can be considered in the future.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#multiple-methods-of-matrix-assembly","title":"Multiple Methods of Matrix Assembly","text":"<p>Uncoupling the linear system and the linear solver allows to implement multiple methods for matrix assembly, and still using the same desired solver. The scene designer can select which method is best suited for the problem to solve. Any solver can then be associated to the selected linear system.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#matrixlinearsystem","title":"MatrixLinearSystem","text":"<p><code>MatrixLinearSystem</code> can be considered as the default matrix assembly method. It supports contributions from force fields, masses, non-linear mappings and projective constraints. It also supports matrix mapping.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#compositelinearsystem","title":"CompositeLinearSystem","text":"<p><code>CompositeLinearSystem</code> is a component to use if the user wants to assemble more than one matrix. For example, the user may want to assemble the global matrix and solve it with the linear solver, but also the stiffness matrix to analyze it.</p> <pre><code>&lt;Node name=\"matrices\"&gt;\n    &lt;MatrixLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"system\"/&gt;\n    &lt;MatrixLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"K\" assembleMass=\"false\" assembleMappings=\"false\" applyProjectiveConstraints=\"false\"/&gt;\n    &lt;MatrixLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"M\" assembleStiffness=\"false\" assembleMappings=\"false\" applyProjectiveConstraints=\"false\"/&gt;\n&lt;/Node&gt;\n&lt;CompositeLinearSystem template=\"CompressedRowSparseMatrixd\" name=\"solverSystem\" linearSystems=\"@matrices/system @matrices/K @matrices/M\" solverLinearSystem=\"@matrices/system\"/&gt;\n&lt;SparseLDLSolver template=\"CompressedRowSparseMatrixd\" linearSystem=\"@solverSystem\"/&gt;\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#matrix-mapping","title":"Matrix Mapping","text":"<p>Matrix mapping is one of the feature that was missing in SOFA, despite its crucial importance. It led to the development of the component MechanicalMatrixMapper, which must be added in the scene to map matrices. However, it is not obvious for the user why this component must be added. Moreover, matrix-free solvers do not need this component leading to an inconsistency between matrix-free methods and assembled methods. Matrix mapping must be managed automatically, without any intervention from the user.</p> <p>Previously, mapped components could not contribute to the global matrix. In this refactoring, similarly to non-mapped components, mapped components contribute to a matrix, but not the global one. They have their own mapped matrix. Once the mapped matrix is assembled, the matrix is then projected onto the global matrix.</p> <p>To make this process automatic, the local matrices of mapped and non-mapped components have a different behavior. A mapped component will not have the same local matrix than a non-mapped component. Therefore, it is crucial to know if a component is mapped or not. To this end, the mapping graph is introduced.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#mapping-graph","title":"Mapping Graph","text":"<p>Traditionally in SOFA, methods rely on the scene graph. Here, the matrix assembly relies on the mapping graph. Before assembling the matrices, the mapping graph is built. It builts relationships between components based on their relationships with a mechanical object and a mapping.</p> <p>The mapping graph finds all the mappings, and their associated mechanical object. It is then known which mechanical objects are considered \"main\", and which ones are mapped. Then, the mapping graph finds all components associated to a mechanical object, so it is known which components are mapped or non-mapped.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#deprecation","title":"Deprecation","text":"<p>MappingGeometricStiffnessForceField and MechanicalMatrixMapper are deprecated, because their purpose is now included natively in the matrix assembly component.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#local-matrices","title":"Local Matrices","text":"<p>Once the LinearSystem has analyzed the mapping graph, it will associate a local matrix to all contributors of the global matrix. Local matrices are BaseObject deriving from <code>MatrixAccumulatorInterface</code>. They are added as slave to objects they are associated to.</p> <p>To be more precise, the local matrices associated to force fields derive from <code>StiffnessMatrixAccumulator</code>. Similarly, the local matrices assocaited to masses derive from <code>MassMatrixAccumulator</code>, so they are compatible with <code>void BaseMass::buildMassMatrix(sofa::core::behavior::MassMatrixAccumulator* matrices)</code>. Mappings also have local matrices: they derive from <code>MappingMatrixAccumulator</code> and are compatible with <code>void BaseMapping::buildGeometricStiffnessMatrix(sofa::core::MappingMatrixAccumulator* matrices)</code>.</p> <p>Local matrices have the responsability to receive the contributions from the components (force fields, masses and mappings) and add them in the global matrix. As mentionned earlier, mapped components don't add their contributions directly in the global matrix. An intermediate matrix is assembled, then projected into the global matrix. This difference of behavior between mapped and non-mapped components is solved by different local matrix components. The local matrices associated to main (non-mapped) components add the contributions directly into the global matrix. The local matrices associated to mapped component add the contributions to the intermediate matrix.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#backward-compatibility_1","title":"Backward compatibility","text":"<p>A new API has been introduced. It is important that all components are updated according to this new API. Nevertheless, a compatibility layer has been introduced to make the bridge between the new API and the old one. Therefore, components written with the old API should work as expected.</p> <p>If your version of SOFA has been compiled using the CMake option <code>-DSOFA_WITH_DEVTOOLS=ON</code>, you will then receive in your simulation a warning from components which are not yet using the new API. The warning would look like:</p> <pre><code>[WARNING] [YourForceField(YourForceField)] buildStiffnessMatrix not implemented: for compatibility reason, the deprecated API (addKToMatrix) will be used. This compatibility will disapear in the future, and will cause issues in simulations. Please update the code of YourForceField to ensure right behavior: the function addKToMatrix has been replaced by buildStiffnessMatrix\n[WARNING] [YourForceField(YourForceField)] buildDampingMatrix not implemented: for compatibility reason, the deprecated API (addBToMatrix) will be used. This compatibility will disapear in the future, and will cause issues in simulations. Please update the code of YourForceField to ensure right behavior: the function addBToMatrix has been replaced by buildDampingMatrix\n[WARNING] [YourMass(YourMass)] buildMassMatrix not implemented: for compatibility reason, the deprecated API (addMToMatrix) will be used. This compatibility will disapear in the future, and will cause issues in simulations. Please update the code of YourMass to ensure right behavior: the function addMToMatrix has been replaced by buildMassMatrix\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/33_Matrix_assembly_API/#conclusion-and-future-work","title":"Conclusion and future work","text":"<p>Features that are mentioned in this document are not yet available:</p> <ul> <li>The SOFA scenes shipped with the source code will be updated according to the new design.</li> <li><code>ConstantSparsityPatternSystem</code> has been experimented but is not shipped in #2777. It needs to be introduced again in a later pull request.</li> <li>Is it possible to merge the two cases in <code>InteractionForceField</code> (mstate1 == mstate2)?</li> </ul> <p>With the refactoring, there are opportunities to use multithreading to speed up matrix assembly: - Mapped components and non-mapped components add their contributions in different matrices (the global matrix for non-mapped component and an intermediate matrix for mapped components). Since they are independant data structures, they can be assembled concurrently. - Asynchronous add: assembling the data structure of the matrix takes some time. We propose to deport this time in another thread.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/35_Message_API/","title":"SOFA Logging","text":""},{"location":"40_Programming_with_SOFA/60_API_overview/35_Message_API/#main-classes","title":"Main classes","text":"<p>All the following classes are in the namespace sofa::core::objectmodel::helper::logging.</p> <p>Source files are located in SofaKernel/framework/sofa/helper/logging/ </p>"},{"location":"40_Programming_with_SOFA/60_API_overview/35_Message_API/#message","title":"Message","text":"<p>A Message object encapsulates everything about an output message:</p> <ul> <li>source file and line number from where the message was emitted</li> <li>message type (info, deprecated, warning, error, fatal)</li> <li>message class (dev, runtime)</li> <li>sender name (std::string) </li> <li>sender extra information </li> <li>text (std::string) with the actual content of the message</li> </ul> <p>Messages text description can also contain markdown syntax to improve their rendering when used in a graphical application. Supported syntax include emphasizing with <code>''</code>, <code>url's []()</code>, <code>double space</code> for new line.  </p>"},{"location":"40_Programming_with_SOFA/60_API_overview/35_Message_API/#messagehandler-abstract-class","title":"MessageHandler (abstract class)","text":"<p>A MessageHandler object is in charge of processing and actually 'doing something' of the emitted messages. This can be displaying the message in the console, logging them into file, logging them into a GUI, ...., whatever you can imagine. For example: some unit tests use a specific MessageHandler to catch error messages.</p> <p>Available MessageHandler classes:</p> <ul> <li>FileMessageHandler writes textual representation of the messages in a file. </li> <li>ClangMessageHandler writes a clang-syntax textual representation of the message in the console (for integration with IDE). </li> <li>ConsoleMessageHandler writes a formatted representation of the message in the console. </li> <li>ExceptionMessageHandler throws an exception for each message. </li> <li>SilentMessageHandler  does nothing. </li> <li>CountingMessageHandler counts the number of messages per message type (advice, info, deprecated, warning, error, fatal)</li> <li>LoggingMessageHandler logs all the messages in a single message queue. </li> <li>PerComponentLoggingMessageHandler logs the messages in the component that emits them. </li> <li>RoutingMessageHandler routes the messages to different handlers according to a user-provided function.</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/35_Message_API/#messageformatter-abstract-class","title":"MessageFormatter (abstract class)","text":"<p>A MessageFormatter object has only one purpose, which is to translate a Message object to a std::ostream.</p> <p>Available MessageFormatter classes:</p> <ul> <li>DefaultStyleMessageFormatter</li> <li>ClangStyleMessageFormatter</li> <li>RichConsoleStyleMessageFormatter that convert messages into a good looking rendering for the console.</li> </ul>"},{"location":"40_Programming_with_SOFA/60_API_overview/35_Message_API/#messagedispatcher-static-class","title":"MessageDispatcher (static class)","text":"<p>The MessageDispatcher is in charge of sending messages to every MessageHandler registered.</p> <p>By default, only a ConsoleMessageHandler is registered.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/35_Message_API/#macros-and-typical-use","title":"Macros and typical use","text":"<p>The macros are not in a namespace, for ease of use. </p> <p>There are 2 macros categories:</p> <ul> <li>runtime macros to emit messages in every context.</li> <li>developer macros to emit messages only targeted to developers (people willing to dive into the sofa source code)</li> </ul> <p>Typically, to output a message you can use one of these macros, depending of the criticality level:</p> <ul> <li>msg_info</li> <li>msg_deprecated</li> <li>msg_warning</li> <li>msg_error</li> <li>msg_fatal</li> </ul> <p>Note that for <code>msg_info</code> messages to appear in the console, the component from which it is called must have its <code>printLog</code> attribute set to <code>true</code>.</p> <p>Just include Messaging.h and you can use these macros like any output stream:</p> <pre><code>#include &lt;sofa/helper/logging/Messaging.h&gt;\n</code></pre> <p>If you are in a component (an object inheriting from 'Base') you should use <pre><code>msg_warning() &lt;&lt; \"Previously used GUI not registered. Using default GUI.\";\nor\nmsg_warning(this) &lt;&lt; \"Previously used GUI not registered. Using default GUI.\";\n</code></pre></p> <p>You can also send a message bound to a different component as in: <pre><code>msg_warning(otherComponent) &lt;&lt; \"Previously used GUI not registered. Using default GUI.\";\n</code></pre></p> <p>Finally if you are not in a sofa component you can specify the emitter's name with a string.  <pre><code>msg_warning(\"GUIManager\") &lt;&lt; \"Previously used GUI not registered. Using default GUI.\";\n</code></pre></p> <p>If your message is for developers, you can use the dmsg_info, dmsg_deprecated, dmsg_warning,... functions.  These messages are removed on end-user application (see SOFA_WITH_DEVTOOLS build option) and can be more specific and less well written than those that target users. A very simple way to guide the use of the dmsg_* API is to ask yourself if fixing the message needs to have the source code to understand the message. </p> <p>NB Please note that for classes that are not inheriting from BaseObject, an additional macro must be defined to register your class to the messaging system. In the header file, just add: <pre><code>MSG_REGISTER_CLASS(sofa::...::myClass, \"myClassName\")\n</code></pre></p>"},{"location":"40_Programming_with_SOFA/60_API_overview/35_Message_API/#how-are-handled-the-messages-in-sofa-component","title":"How are handled the messages in Sofa Component","text":"<p>Component have a 'printLog' data field that controls whether or not the msg_info() are emitted on the component side. An user that don't want the component to emit info messages have to set the 'printLog' to false. There is no equivalent way to prevent warning/error/fatal message to be emitted. The reason is that they are important in indicating the state of the sofa component and other componant may use them to validate that the componant is in a valid state. </p> <p>The fact that the warning/error and fatal message are always emitted by the component does not means they have to be shown to the user. If needed, a third party application can implement its own message handler that discards (on demand) these message instead of printing them</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/35_Message_API/#message-and-unit-testing","title":"Message and unit-testing","text":"<p>Messages play an important role in Sofa as they are the principal way to convey information about the  component state. Messages are part of the behavior of a component and should be tested accordingly. </p> <p>For that there are two dedicated classes in the file applications/plugins/SofaTest/TestMessageHandler.h</p> <p>Using these classes, you can test whether a component has emitted a message (as it should in the tested condition) or the contrary,  that a component emitted a message while it was not supposed to. </p> <pre><code>TEST_F(MyComponent, testAValidUsageThatShouldnotSendMessage)\n{\n    MessageAsTestFailure warning(Message::Warning);\n    MessageAsTestFailure error(Message::Error);\n\n    this-&gt;doSomething(\"validFile.obj\") ;\n}\n</code></pre> <p>Or <pre><code>TEST_F(MyComponent, testAnInvalidUsageThatShouldnotSendMessage)\n{\n    MessageAsTestFailure warning(Message::Warning);\n    ExpectMessage error(Message::Error);\n\n    this-&gt;doSomething(\"invalidFile.obj\") ; \n}\n</code></pre></p> <p>When the condition is not respected this produces a test failure. </p>"},{"location":"40_Programming_with_SOFA/60_API_overview/35_Message_API/#customization","title":"Customization","text":"<p>If you implement a specific MessageHandler and regiter it in the MessageDispatcher, you will be able to receive every single message from the whole SOFA executable. </p> <p>Since you will receive Message objects, every useful information will be available: source code location, type, class, sender, and obviously the message itself.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/40_Events_in_SOFA/","title":"Events in SOFA","text":"<p>Recovering the events from the keyboard or the mouse can be very useful for interactive simulation (ex: controlling surgical instruments) There is already implemented in SOFA a very easy way to access these so-called events during the simulation. To access the event within a SOFA component, you need:</p> <ul> <li>handleEvent() function: you need to define the inherited     function handleEvent. A nice example is available in the component:     BaseController.cpp (see at line 71).</li> <li>f_listening parameter: activate the boolean f_listening by the     function handleEvent in order to listen to the events. This boolean     is not activated by default.The best way to activate it is to     specify it in the scene file that while writing \"listening=1\". You     can otherwise \"hard\" code it in your C++ component as     follow \"myComponent.f_listening.setValue(true)\".</li> </ul> <p>Now, you will be able to recover the events and therefore to interact with your simulation. Have fun !</p> <p>If you still don't receive events, it may be possible than you will need to press Ctrl key.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/40_Events_in_SOFA/#mouse-or-keyboard-events","title":"Mouse or Keyboard Events","text":"<pre><code>template&lt; class DataTypes&gt;\nvoid myComponent&lt; datatypes &gt;::handleEvent(core::objectmodel::Event *event)\n{\n    // Key pressed event\n    if(KeypressedEvent* ev = dynamic_cast&lt; keypressedevent *&gt;(event))\n    {\n        switch(ev-&gt;getKey())\n        {\n            // The key M is pressed\n            case 'M':\n            case 'm':\n            {\n            ....\n            }\n        }\n    }\n\n\n    // Mouse Events\n    if(MouseEvent* ev = dynamic_cast&lt; mouseevent *&gt;(event))\n    {\n        switch(ev-&gt;getState())\n        {\n            // The left key of the mouse is pressed\n            case MouseEvent::LeftPressed:\n            {\n            ....\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/40_Events_in_SOFA/#specific-integration-events","title":"Specific integration events","text":"<p>In the same way than for Mouse or Keyboard events, you can detect specific events during the time integration. These events are managed and sent by the AnimationLoop you are using.</p> <p>Events related to the mechanics/solving are:</p> <ul> <li>BeginAnimationStep: start of a time step</li> <li>EndAnimationStep: end of a time step</li> <li>IntegrationBeginEvent: start of the integration phase</li> <li>IntegrationEndEvent: end of the integration phase</li> <li>CollisionBeginEvent: start of the collision phase</li> <li>CollisionEndEvent: end of the collision phase</li> </ul> <p>Interaction-related events are:</p> <ul> <li>KeypressedEvent</li> <li>KeyreleasedEvent</li> <li>MouseEvent</li> <li>HapticDeviceEvent</li> <li>PauseEvent</li> <li>IdleEvent</li> </ul> <pre><code>template&lt; class DataTypes&gt;\nvoid myComponent&lt; datatypes &gt;::handleEvent(core::objectmodel::Event *event)\n{\n    // Begin of the animation step\n    if (dynamic_cast&lt; sofa::simulation::AnimateBeginEvent *&gt;(event))\n    {\n            ...\n    }\n\n\n    // End of the animation step\n    if (dynamic_cast&lt; sofa::simulation::AnimateEndEvent *&gt;(event))\n    {\n            ...\n    }\n}\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/45_Pause_the_animation/","title":"Pause the animation","text":""},{"location":"40_Programming_with_SOFA/60_API_overview/45_Pause_the_animation/#pause-the-animation","title":"Pause the Animation","text":"<p>Sometimes, you would like the animation to be paused without pressing any button but from the Simulation itself. For example if solver does not converge, you might want to stop the animation so you can look at it carefully, or because the interesting part is over. This is now possible, using a PauseAnimation component. This component has a method pause() that tells the Simulation it should paused using setPaused() a write accessor on the Simulation field paused. The RealGUI step() we check the state of the Simulation to know if we should stop the Animation, pressing back the Animate button.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/45_Pause_the_animation/#pauseanimationonevent","title":"PauseAnimationOnEvent","text":"<p>PauseAnimationOnEvent is derived from PauseAnimation and handles PauseEvent event. When it receives this event, it calls the pause() method. Add the following component on your scene description:</p> <pre><code>listening=\"true\"\n</code></pre> <p>Then launch the PauseEvent where you want to in your code. For example, when your solver does not succeed to converge, or when the simulated end time has been reached... (To learn how to launch a visitor).</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/45_Pause_the_animation/#quick-component-hierarchy-overview","title":"Quick component hierarchy overview","text":"<p>[caption id=\"attachment_1551\" align=\"aligncenter\" width=\"350\"]{.size-full .wp-image-1551 width=\"350\" height=\"239\"} PauseAnimation architecture[/caption]</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/50_Advanced_Timer/","title":"Advanced Timer: How to log computation time","text":"<p>This is the most precise and flexible way of monitoring the computation time in SOFA. It prints results on the standard text output. There is an option in runSofa to activate the display every N time steps from the command line :</p> <p><pre><code>runSofa --computationTimeSampling N myAmazingScene.pyscn\n</code></pre> (use --help for a list of command line options). The parameter update the variable computationTimeSampling which specifies the intervals (counted in animation steps) between successive statistics displays. 0 means deactivated. To monitor the time spent in a specific part of the code, bracket it as shown below:</p> <pre><code>sofa::helper::AdvancedTimer::stepBegin(\"Build\u00a0linear\u00a0equation\");\n//\u00a0your\u00a0code\u00a0here\nsofa::helper::AdvancedTimer::stepEnd(\"Build\u00a0linear\u00a0equation\");\n</code></pre> <p>That is all. Then the corresponding computation time can be displayed at regular intervals. Be careful to use the same string in the two instructions. The begin/end calls can be nested, to monitor hierarchically. An example of statistics is shown below. The number of dots before the name of the piece of code denote the nesting level.</p> <pre><code>====\u00a0Animate\u00a0====\nTrace\u00a0of\u00a0last\u00a0iteration\u00a0:\n\u00a0*\u00a0\u00a0\u00a0\u00a00.06\u00a0ms\u00a0&gt;\u00a0begin\u00a0Mechanical\u00a0on\u00a0Cube\u00a0grid\n\u00a0*\u00a0\u00a0\u00a0\u00a00.10\u00a0ms\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0Build\u00a0linear\u00a0equation\n\u00a0*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0forces\u00a0in\u00a0the\u00a0right-hand\u00a0term\n\u00a0*\u00a0\u00a0\u00a0\u00a01.27\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0forces\u00a0in\u00a0the\u00a0right-hand\u00a0term\n\u00a0*\u00a0\u00a0\u00a0\u00a01.37\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0shift\u00a0and\u00a0project\u00a0independent\u00a0states\n\u00a0*\u00a0\u00a0\u00a0\u00a01.49\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0shift\u00a0and\u00a0project\u00a0independent\u00a0states\n\u00a0*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0local\u00a0M\n\u00a0*\u00a0\u00a0\u00a0\u00a02.11\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0local\u00a0M\n\u00a0*\u00a0\u00a0\u00a0\u00a02.38\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0J\u00a0products\n\u00a0*\u00a0\u00a0\u00a012.89\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0J\u00a0products\n\u00a0*\u00a0\u00a0\u00a012.91\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0J\u00a0products\n\u00a0*\u00a0\u00a0\u00a028.06\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0J\u00a0products\n\u00a0*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0local\u00a0K\n\u00a0*\u00a0\u00a0\u00a028.51\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0local\u00a0K\n\u00a0*\u00a0\u00a0\u00a028.53\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0JMJt,\u00a0JKJt,\u00a0JCJt\n\u00a0*\u00a0\u00a0\u00a086.86\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0JMJt,\u00a0JKJt,\u00a0JCJt\n\u00a0*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0implicit\u00a0equation:\u00a0scaling\u00a0and\u00a0sum\u00a0of\u00a0matrices,\u00a0update\u00a0right-hand\u00a0term\n\u00a0*\u00a0\u00a0\u00a087.75\u00a0ms\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0implicit\u00a0equation:\u00a0scaling\u00a0and\u00a0sum\u00a0of\u00a0matrices,\u00a0update\u00a0right-hand\u00a0term\n\u00a0*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0Build\u00a0linear\u00a0equation\n\u00a0*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0Solve\u00a0linear\u00a0equation\n\u00a0*\u00a0\u00a0\u00a090.78\u00a0ms\u00a0\u00a0\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0Solve\u00a0linear\u00a0equation\n\u00a0*\u00a0\u00a0\u00a094.81\u00a0ms\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0Mechanical\u00a0on\u00a0Cube\u00a0grid\n\u00a0*\u00a0\u00a0\u00a094.83\u00a0ms\u00a0&gt;\u00a0begin\u00a0UpdateMapping\n\u00a0*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0-\u00a0step\u00a0\u00a0UpdateMappingEndEvent\n\u00a0*\u00a0\u00a0\u00a094.84\u00a0ms\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0UpdateMapping\n\u00a0*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&gt;\u00a0begin\u00a0UpdateBBox\n\u00a0*\u00a0\u00a0\u00a094.93\u00a0ms\u00a0&lt;\u00a0end\u00a0\u00a0\u00a0UpdateBBox\n\u00a0*\u00a0\u00a0\u00a094.94\u00a0ms\u00a0END\n\nSteps\u00a0Duration\u00a0Statistics\u00a0(in\u00a0ms)\u00a0:\nLEVEL\u00a0\u00a0\u00a0START\u00a0\u00a0\u00a0\u00a0NUM\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0MIN\u00a0\u00a0\u00a0\u00a0\u00a0MAX\u00a0\u00a0\u00a0MEAN\u00a0\u00a0\u00a0\u00a0\u00a0DEV\u00a0\u00a0\u00a0\u00a0TOTAL\u00a0\u00a0PERCENT\u00a0ID\n\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0100\u00a0\u00a0\u00a0\u00a0\u00a0\u00a086.57\u00a0\u00a0127.50\u00a0\u00a0109.99\u00a0\u00a0\u00a0\u00a07.77\u00a010999.1\u00a0\u00a0100\u00a0\u00a0\u00a0\u00a0TOTAL\n\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.06\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a086.32\u00a0\u00a0127.25\u00a0\u00a0109.75\u00a0\u00a0\u00a0\u00a07.75\u00a0\u00a0109.75\u00a0\u00a0\u00a099.78\u00a0.Mechanical\n\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.09\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a079.42\u00a0\u00a0112.21\u00a0\u00a0\u00a099.97\u00a0\u00a0\u00a0\u00a07.02\u00a0\u00a0\u00a099.97\u00a0\u00a0\u00a090.89\u00a0..Build\u00a0linear\u00a0equation\n\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.09\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.84\u00a0\u00a0\u00a0\u00a01.36\u00a0\u00a0\u00a0\u00a01.14\u00a0\u00a0\u00a0\u00a00.14\u00a0\u00a0\u00a0\u00a01.14\u00a0\u00a0\u00a0\u00a01.04\u00a0...forces\u00a0in\u00a0the\u00a0right-hand\u00a0term\n\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01.34\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.07\u00a0\u00a0\u00a0\u00a00.14\u00a0\u00a0\u00a0\u00a00.10\u00a0\u00a0\u00a0\u00a00.02\u00a0\u00a0\u00a0\u00a00.10\u00a0\u00a0\u00a0\u00a00.09\u00a0...shift\u00a0and\u00a0project\u00a0independent\u00a0states\n\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01.44\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.39\u00a0\u00a0\u00a0\u00a00.68\u00a0\u00a0\u00a0\u00a00.55\u00a0\u00a0\u00a0\u00a00.08\u00a0\u00a0\u00a0\u00a00.55\u00a0\u00a0\u00a0\u00a00.50\u00a0...local\u00a0M\n\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02.23\u00a0\u00a0\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a07.52\u00a0\u00a0\u00a017.67\u00a0\u00a0\u00a012.72\u00a0\u00a0\u00a0\u00a02.34\u00a0\u00a0\u00a025.44\u00a0\u00a0\u00a023.13\u00a0...J\u00a0products\n\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0\u00a027.70\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.28\u00a0\u00a0\u00a0\u00a00.54\u00a0\u00a0\u00a0\u00a00.41\u00a0\u00a0\u00a0\u00a00.06\u00a0\u00a0\u00a0\u00a00.41\u00a0\u00a0\u00a0\u00a00.37\u00a0...local\u00a0K\n\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0\u00a028.13\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a054.07\u00a0\u00a0\u00a079.54\u00a0\u00a0\u00a070.61\u00a0\u00a0\u00a0\u00a05.53\u00a0\u00a0\u00a070.61\u00a0\u00a0\u00a064.20\u00a0...JMJt,\u00a0JKJt,\u00a0JCJt\n\u00a0\u00a03\u00a0\u00a0\u00a0\u00a0\u00a0\u00a098.75\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.88\u00a0\u00a0\u00a0\u00a02.29\u00a0\u00a0\u00a0\u00a01.31\u00a0\u00a0\u00a0\u00a00.24\u00a0\u00a0\u00a0\u00a01.32\u00a0\u00a0\u00a0\u00a01.20\u00a0...implicit\u00a0equation:\u00a0scaling\u00a0and\u00a0sum\u00a0of\u00a0matrices,\u00a0update\u00a0right-hand\u00a0term\u00a0\n\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0\u00a0100.06\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02.71\u00a0\u00a0\u00a0\u00a04.79\u00a0\u00a0\u00a0\u00a03.75\u00a0\u00a0\u00a0\u00a00.51\u00a0\u00a0\u00a0\u00a03.75\u00a0\u00a0\u00a0\u00a03.41\u00a0..Solve\u00a0linear\u00a0equation\n\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0109.84\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.01\u00a0\u00a0\u00a0\u00a00.02\u00a0\u00a0\u00a0\u00a00.02\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.02\u00a0\u00a0\u00a0\u00a00.01\u00a0.UpdateMapping\n\u00a0\u00a02\u00a0\u00a0\u00a0\u00a0\u00a0109.84\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0..UpdateMappingEndEvent\n\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0109.85\u00a0\u00a0\u00a0\u00a01\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00.09\u00a0\u00a0\u00a0\u00a00.28\u00a0\u00a0\u00a0\u00a00.14\u00a0\u00a0\u00a0\u00a00.03\u00a0\u00a0\u00a0\u00a00.14\u00a0\u00a0\u00a0\u00a00.12\u00a0.UpdateBBox\n\n====\u00a0END\u00a0====\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/70_Macro_for_DLL_import_export/","title":"Macro for DLL import export","text":"<p>Sofa is a very modular framework and thus it extensively uses shared libraries.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/70_Macro_for_DLL_import_export/#differences-between-windows-and-linuxmac-when-creating-a-shared-library","title":"Differences between Windows and Linux/Mac when creating a shared library","text":"<p>On Linux, every classes and every functions are automatically exported in the shared library, you don't have to do anything. On Windows, the default behaviour is to not export anything implicitly. You must use the __declspec(dllexport) symbol to export classes and functions you need. And you must use __declspec(dllimport) to import classes and functions from a shared library. On Sofa, we use a specific macro for each library to silently import / export. This macro is define this way : SOFA_mylib_API and is automatically set as __declspec(dllexport) if we are inside the library \"mylib\" because we want to expose its class and function definitions. On the other side, if we are outside the library, for instance in an other lib or in an application, the same macro is automatically defined as __declspec(dllimport) because we want to import class and function definitions that we don't know yet but we notify the compiler it will find them in one of its linker dependencies. In common Sofa libraries, the macros are all defined in the component.h file and for plugins, you will find a initMyPlugin.h setting this macro. In each file you want to use it you must include the corresponding file. Thus \"component.h\" if you are adding a component in the common Sofa libraries or the \"initMyPlugin.h\" if you are implementing a new component in a plugin.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/70_Macro_for_DLL_import_export/#how-to-use-the-macro-to-import-export-definitions","title":"How to use the macro to import / export definitions","text":"<p>For instance if we want to import / export definitions from our plugin \"MyPlugin\" :</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/70_Macro_for_DLL_import_export/#example-with-a-class","title":"Example with a class","text":"<p>MyClass.h:</p> <pre><code>#include \"initMyPlugin.h\" // contains the definition of SOFA_MyPlugin_API\n\nclass SOFA_MyPlugin_API MyClass // export the class if we are currently building MyPlugin, else if we are outside MyClass will be imported\n{\n    ...\n};\n</code></pre>"},{"location":"40_Programming_with_SOFA/60_API_overview/70_Macro_for_DLL_import_export/#example-with-a-generic-class","title":"Example with a generic class","text":"<p>MyGenericClass.h:</p> <pre><code>#include \"initMyPlugin.h\"\n\ntemplate\nclass MyGenericClass // we do not set the macro here since we are not defining a class but a generic class (a pattern) and definitions really exist only with a template instantiation\n{\n    ...\n};\n\n// here we notify the compiler it will find the template instantiation elsewhere\n#if defined(SOFA_EXTERN_TEMPLATE) &amp;&amp; !defined(SOFA_MYGENERICCLASS_CPP)\n#ifndef SOFA_FLOAT\nextern template class SOFA_MyPlugin_API MyGenericClass &lt; MyDoubleType &gt;;\n#endif\n#ifndef SOFA_DOUBLE\nextern template class SOFA_MyPlugin_API MyGenericClass &lt; MyFloatType &gt;;\n#endif\n#endif\n</code></pre> <p>MyGenericClass.cpp:</p> <pre><code>#define SOFA_MYGENERICCLASS_CPP\n\n#include \"MyGenericClass.h\"\n\n// and here we explicitly instantiate the templated class\n#ifndef SOFA_FLOAT\ntemplate class SOFA_MyPlugin_API MyGenericClass &lt; MyDoubleType &gt;;\n#endif\n#ifndef SOFA_DOUBLE\ntemplate class SOFA_MyPlugin_API MyGenericClass &lt; MyFloatType &gt;;\n#endif\n</code></pre> <p>For generic class where we cannot predict the kind of template instantiation the user will need, we do not use the import / export macro because we cannot instantiate the template class. The user will directly use the definitions from a .inl file that you have to provide.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/70_Macro_for_DLL_import_export/#example-with-a-function","title":"Example with a function","text":"<pre><code>#include \"initMyPlugin.h\"\n\nvoid SOFA_MyPlugin_API MyFunc()\n{\n    ...\n};\n</code></pre> <p>You should not use the SOFA_MyPlugin_API macro for member functions, you just have to set the macro for the class owning the member functions and they will all be exported.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/70_Macro_for_DLL_import_export/#common-mistakes","title":"Common mistakes","text":"<p>If you are experiencing linking issues about dllimport the problem may come from an omission or a bad use of the macro SOFA_*_API. For instance if you copied a class from a library to another without editing its macro, its definitions will not be exported and worse the linker will expect to find them in a dependency although they are in the currently compiled library.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/80_Macro_for_deprecation/","title":"Deprecation macros","text":""},{"location":"40_Programming_with_SOFA/60_API_overview/80_Macro_for_deprecation/#the-2-base-macros","title":"The 2 base macros","text":""},{"location":"40_Programming_with_SOFA/60_API_overview/80_Macro_for_deprecation/#sofa_attribute_deprecateddeprecatedate-disabledate-tofixmsg","title":"SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, disableDate, toFixMsg)","text":"<p>To be used to trigger a deprecation warning. It is a simple <code>[[deprecated]]</code> interface.</p> <p>This macro warns that something</p> <ul> <li>is DEPRECATED (still usable) since <code>deprecateDate</code></li> <li>will be disabled on <code>disableDate</code></li> </ul> <p>and gives the <code>toFixMsg</code> instructions to fix the deprecation warning.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/80_Macro_for_deprecation/#sofa_attribute_disableddeprecatedate-disabledate-tofixmsg","title":"SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)","text":"<p>To be used jointly with <code>= delete</code> to trigger an error. It is a flavored <code>[[deprecated]]</code> interface.</p> <p>This macro warns that something  </p> <ul> <li>is DISABLED (not usable anymore) since <code>disabledDate</code></li> <li>was firstly deprecated on <code>deprecateDate</code></li> </ul> <p>and gives the <code>toFixMsg</code> instructions to fix the compilation error.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/80_Macro_for_deprecation/#how-to-use-them","title":"How to use them","text":"<p>Create a new deprecation macro specifying the deprecation topic you are tackling. This way, you won't have dates everywhere in your code.</p>"},{"location":"40_Programming_with_SOFA/60_API_overview/80_Macro_for_deprecation/#example","title":"Example","text":""},{"location":"40_Programming_with_SOFA/60_API_overview/80_Macro_for_deprecation/#deprecate","title":"Deprecate","text":"<p>I want to rename something that will break my API.  To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro. Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06.</p> <p>In my config.h.in <pre><code>#define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \\\n    SOFA_ATTRIBUTE_DEPRECATED( \\\n        \"v20.12 (PR#12345)\", \"v21.06\", \\\n        \"XXX must be renamed into YYY.\")\n</code></pre></p> <p>In my code <pre><code>SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC()\nvoid myDeprecatedMethod();\n</code></pre></p> <p>Anyone using myDeprecatedMethod will get this warning:  <pre><code>warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.\n</code></pre></p>"},{"location":"40_Programming_with_SOFA/60_API_overview/80_Macro_for_deprecation/#disable","title":"Disable","text":"<p>Now forward in time ... Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12. It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with <code>= delete</code> and use a deprecation macro.</p> <p>In my config.h.in <pre><code>#define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \\\n    SOFA_ATTRIBUTE_DISABLED( \\\n        \"v20.12 (PR#12345)\", \"v21.06 (PR#45678)\", \\\n        \"XXX must be renamed into YYY.\")\n</code></pre></p> <p>In my code <pre><code>SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC()\nvoid myDeprecatedMethod() = delete;\n</code></pre></p> <p>Anyone using myDeprecatedMethod will get an error right after this warning:  <pre><code>warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.\n</code></pre></p>"},{"location":"50_Contributing_to_SOFA/20_Writing_tests/","title":"Writing tests","text":""},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#motivation","title":"Motivation","text":"<p>A test suite for SOFA is being developed using the googletest framework. Tests serve two purposes:</p> <ul> <li>Automatically detect regressions. They are automatically run after     each commit and their results are displayed on the dashboard. This     way, changes which break existing features are detected as soon     as possible.</li> <li>Help developing. Creating the specific test at the same time as your     new feature (test-oriented development) has significant advantages:<ul> <li>it helps you specifying your code: what it does is what is     tested</li> <li>focusing on your contribution, without being distracted by other     stuff</li> <li>being sure that your contribution will not be accidentally     broken by anyone.</li> </ul> </li> </ul> <p>In summary, test-oriented development generates better code and is easier. Therefore, we strongly urge you to apply it. Feel free to ask us for advice.</p>"},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#structure-of-a-test-in-sofa","title":"Structure of a test in SOFA","text":"<p>Any test structure should have a similar structure as:</p> <pre><code> // Constructor or the Test object\nTest();\n\n// Sets up the test fixture\nvirtual void SetUp();\n\n// Tears down the test fixture\nvirtual void TearDown();\n</code></pre> <p>Many examples are available in the SOFA sources. Many gtest macros are at your disposal to indicate success/failure in test code, such as EXPECT (if fails, returns a non-fatal error):</p> <pre><code>EXPECT_THROW(statement, expected_exception) // statement should return a specific exception\nEXPECT_ANY_THROW(statement)                 // statement should return anyb exception\nEXPECT_NO_THROW(statement)                  // statement should not generate an exception\n\nEXPECT_TRUE(condition)                      // condition == true\nEXPECT_FALSE(condition)                     // condition == false\n\nEXPECT_EQ(val1, val2)                       // val1 == val2\nEXPECT_NE(val1, val2)                       // val1 != val2\nEXPECT_LE(val1, val2)                       // val1 &lt;= val2\nEXPECT_LT(val1, val2)                       // val1 &lt;  val2\nEXPECT_GE(val1, val2)                       // val1 &gt;= val2\nEXPECT_GT(val1, val2)                       // val1 &gt;  val2\n</code></pre> <p>or ASSERT (if fails, returns a FATAL error):</p> <pre><code>ASSERT_THROW(statement, expected_exception)\nASSERT_NO_THROW(statement)\nASSERT_ANY_THROW(statement)\n\nASSERT_TRUE(condition)\nASSERT_FALSE(condition)\n</code></pre> <p>If the statement/condition is not respected, the test fails. More can be found in gtest.h (extlibs/gtest/include/gtest/gtest.h)</p>"},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#examples","title":"Examples","text":"<p>Classical structure of the test in SOFA is: <pre><code>/******************************************************************************\n*       SOFA, Simulation Open-Framework Architecture, development version     *\n*                (c) 2006-2017 INRIA, USTL, UJF, CNRS, MGH                    *\n*                                                                             *\n* This program is free software; you can redistribute it and/or modify it     *\n* under the terms of the GNU Lesser General Public License as published by    *\n* the Free Software Foundation; either version 2.1 of the License, or (at     *\n* your option) any later version.                                             *\n*                                                                             *\n* This program is distributed in the hope that it will be useful, but WITHOUT *\n* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or       *\n* FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License *\n* for more details.                                                           *\n*                                                                             *\n* You should have received a copy of the GNU Lesser General Public License    *\n* along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.        *\n*******************************************************************************\n* Authors: The SOFA Team and external contributors (see Authors.txt)          *\n*                                                                             *\n* Contact information: contact@sofa-framework.org                             *\n******************************************************************************/\n\n#include &lt;SofaTest/Sofa_test.h&gt;\n#include &lt;SofaTest/TestMessageHandler.h&gt;\n#include &lt;sofa/simulation/graph/DAGSimulation.h&gt;\n\nnamespace sofa {\n\n    using namespace component;\n    using namespace defaulttype;\n\n\n    template &lt;typename _DataTypes&gt;\n    struct EmptyPlugin_test : public Sofa_test&lt;typename _DataTypes::Real&gt;\n    {\n        typedef _DataTypes DataTypes;\n        typedef typename DataTypes::CPos CPos;\n        typedef typename DataTypes::VecCoord VecCoord;\n        typedef typename DataTypes::VecDeriv VecDeriv;\n        typedef container::MechanicalObject&lt;DataTypes&gt; MechanicalObject;\n\n        /// Root of the scene graph\n        simulation::Node::SPtr root;\n        /// Simulation\n        simulation::Simulation* simulation;\n\n\n\n        /// Create the context for the scene\n        void SetUp()\n        {\n            // Init simulation\n            sofa::simulation::setSimulation(simulation = new sofa::simulation::graph::DAGSimulation());\n            root = simulation::getSimulation()-&gt;createNewGraph(\"root\");\n        }\n\n\n\n\n        // Load an existing XML scene containing the \n        void sceneLoad()\n        {\n            std::string sceneFilename = SOFAMISCFEM_TEST_SCENES_DIR + \"/\" + \"mySceneForTesting.scn\")\n            root = sofa::simulation::getSimulation()-&gt;load(sceneFilename.c_str());\n\n            // Find a node in the existing scene\n            myNode = root-&gt;getChild(\"nyNode\");\n            EXPECT_TRUE(myNode)\n        }\n\n        // OR : (instead of loading an existing scene) you can create you test scene in the code\n        void createSceneXML()\n        {\n            std::string scene =\n                    \"&lt;?xml version='1.0'?&gt;\"\n                    \"&lt;Node  name='Root' gravity='0 0 0' time='0' animate='0'   &gt; \"\n                    \"   &lt;MyComponent parameter='0'/&gt;                             \"\n                    \"&lt;/Node&gt;                                                     \" ;\n\n            Node::SPtr root = SceneLoaderXML::loadFromMemory (\"loadWithNoParam\",\n                                                              scene.c_str(),\n                                                              scene.size()) ;\n\n            ASSERT_NE(root.get(), nullptr) ;\n        }\n\n        // OR : (instead of loading an existing scene) you can create you test scene in C++\n        void createSceneCPP()\n        {\n            my_Component = New&lt;MyComponent &gt;() ;\n            root-&gt;addObject(my_Component) ; // add nodes, components to build your scene (see doc \"Write your scene in Cpp\")\n            // and so on\n        }\n\n\n\n\n        // Initialization of the scene\n        void initScene()\n        {\n            sofa::simulation::getSimulation()-&gt;init(this-&gt;root.get()); \n        }\n\n\n\n\n        /// Function where you can implement the test you want to do\n        bool testSomething()\n        {\n            // Write the test you like in it\n            return true;\n        }\n\n\n\n\n        /// Unload the scene\n        void TearDown()\n        {\n            if (root!=NULL)\n                sofa::simulation::getSimulation()-&gt;unload(root);\n        }\n\n    };\n\n    // Define the list of DataTypes to instantiate\n    using testing::Types;\n    typedef Types&lt; Vec3Types &gt; DataTypes;\n\n    // Test suite for all the instantiations\n    TYPED_TEST_CASE(EmptyPlugin_test, DataTypes);\n\n\n\n\n    // test case: smallTest_1\n    // this is the key part\n    TYPED_TEST( EmptyPlugin_test , smallTest_1)\n    {\n        this-&gt;SetUp();\n        this-&gt;sceneLoad();   /* or call this-&gt;createSceneXML() if you load an XML scene\n                            *  or call this-&gt;createSceneCPP() if you want to define your own C++ scene in the test */\n        this-&gt;initScene();\n\n        ASSERT_TRUE( this-&gt;testSomething() );\n    }\n}\n</code></pre></p> <p>For unit tests, replace the function testSomething() with: <pre><code>bool testSomething()\n{\n    double value = 2.0;\n    my_Component.setMyData(value);\n    double checkValue = my_Component.getMyData();\n\n    // Do the unit test\n    EXPECT_EQ(value, checkValue)\n    return true;\n}\n</code></pre></p> <p>For simulation tests, replace the function testSomething() with: <pre><code>bool testSomething()\n{\n    double initial_value = 2.0;\n    double final_value_expected = 4.0;\n    my_Component.setMyData(initial_value);\n\n    // Run the simulation \n    this-&gt;runSimulationSteps();\n\n    // Do the test after running the simulation\n    double checkValue = my_Component.getMyData();\n\n    EXPECT_EQ(final_value_expected, checkValue)\n    return true;\n}\n\n\n\n// Run the simulation, setting yourself the number of steps desired: nbSteps\nvoid runSimulationSteps()\n{\n    //Animate simulation\n    unsigned int nbSteps = timeEvaluation/timeStep;\n    unsigned int stepId;\n    for (stepId = 0; stepId &lt; nbSteps; ++stepId)\n        sofa::simulation::getSimulation()-&gt;animate(root.get(),timeStep);\n}\n</code></pre></p> <p>For regression tests, an example is available in applications/plugins/SofaTest/SofaTest_test/Regression_test.h</p>"},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#activation","title":"Activation","text":"<p>When the SOFA-MISC_TESTS option is checked in CMake, all the modules/SofaModuleName/SofaModuleName_test and applications/plugins/PluginName/PluginName_test projects are automatically included by Cmake in the Sofa project/solution. Each test project generates an executable, which outputs its results on the standard output. The final output is the number of successful tests (PASSED) and the number of fails (FAILED) if any.</p> <p>Plugin SofaTest is the basis of all tests. It includes base classes for creating tests in Sofa. As such, the other tests include it in their cmake LinkerDependencies.</p> <p>Several components of the sofa/modules directory are tested. It is far from complete. Feel free to add some tests.</p> <p>Other plugins provide tests, such as Compliant, Flexible and Image. Note that the tests are generally not extensive, so they do not guaranty that the code is bug-free.</p>"},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#running-the-tests","title":"Running the tests","text":""},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#command-line","title":"Command line","text":"<p>Once you build every tests you want, simply go in your build directory and execute the following command in order to launch the whole test suite:</p> <p><code>ctest\u00a0--verbose</code></p>"},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#visual-studio","title":"Visual Studio","text":"<p>If you use Visual Studio, the tests are integrated in the IDE, in the  Test Explorer window. See the documentation.</p> <p></p>"},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#how-to-create-tests-in-your-plugin","title":"How to create tests in your plugin","text":"<p>Say you are creating YourPlugin in applications/plugins/YourPlugin. The steps to create a test suite are:</p> <ul> <li>create directory called     applications/plugins/YourPlugin/YourPlugin_test or some other     name ending up with _test, so that it is automatically included in     the test suite.</li> <li>in this directory, create a cmake project file for an executable,     and set up dependencies on YourPlugin and on SofaTest. See e.g.     applications/plugins/Compliant/Compliant_test/CMakeLists.txt</li> <li>create a number of .cpp files to test your classes. Each test or     test suite typically derives from class Sofa_test or one of the     generic test classes derived from it: Solver_test,     Mapping_test, ForceField_test or     ProjectionConstraintSet_test. The test code typically includes     checkings, such as ASSERT_TRUE(bool). It is run by macros such as     TEST_F at the end of the file.</li> </ul> <p>See e.g. Compliant_test.</p>"},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#how-to-test-components","title":"How to test components","text":"<ul> <li>Force field: Force field tests should derive from the base class     ForceField_test.h available in plugin SofaTest.This base class     creates a minimal scene with a mechanical object and a forcefield.     Then call the function run_test with positions, velocities and the     corresponding expected forces. This function automatically checks     not only the forces (function addForce), but also the stiffness     (methods addDForce and addKToMatrix), using finite differences.</li> </ul> <p>For example, see StiffSpringForceField_test or QuadPressureForceField_test.</p> <ul> <li>Mapping: Mapping tests should derive from the base class     Mapping_test.h available in plugin SofaTest.This base class creates     a scene with two mechanical objects (parent and children nodes) and     a mapping between them. Then it compares the actual output positions     with the expected ones and automatically tests the methods related     to Jacobian (applyJ, applyJT, applyDJT and getJs).</li> </ul> <p>For example, RigidMapping_test tests the mapping from local to world coordinates.</p> <ul> <li>Solvers: To test a solver, one tests its convergence to a     static solution. For example, EulerImplicit_test tests the     convergence of euler implicit solver with a mass-spring system. This     system is composed of 2 particles in gravity with one     fixed particle. The other particle should move to a balance point.     Then one checks two criteria:<ul> <li>if it has converged</li> <li>if it has converged to the expected position</li> </ul> </li> </ul> <p>Other solver tests are available in Compliant_test: AssembledSolver_test and DampedOscillator_test.</p> <ul> <li>Projective constraint: To test projective constraint, one     creates a minimal scene with a mechanical object, a topology and the     projective constraint. One defines the constraint parameters (points     to project, normal of the projection...). Then one inits the scene     and call the projectPosition() function. Finally one checks two     criteria:<ul> <li>if constrained particle have the expected position.</li> <li>if unconstrained particle have not changed.</li> </ul> </li> </ul> <p>Some projective constraint tests are available in SofaTest_test: ProjectToLineConstraint and ProjectToPlaneConstraint.</p> <ul> <li>Engine test: To test engine you set input values and check if     the output values correspond to the expected ones. The test     Engine_test tests if the update method is called only if necessary.     To test this a minimal engine TestEngine was created with a counter     in its update method.</li> </ul>"},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#test-entirely-written-in-python","title":"Test entirely written in python","text":"<ul> <li>Testing a Sofa scene</li> </ul> <p>The SofaTest plugin has a python API giving a Controller. You can write a Sofa scene in python (with the regular SofaPython API and the createScene function), and add a SofaTest.Controller to your scene. From the SofaTest.Controller you can return the test result (functions sendSuccess / sendFailure). A message can be passed in case of failure. Warning: do not forget to call the base function SofaTest.Controller.onLoaded if your surcharge this function in your controller.</p> <ul> <li>Test a pure python function (independent from SOFA)</li> </ul> <p>You simply need to create a python script with a function \"run()\" return the test result as a boolean. Your python scripts must be added to the gtest framework with the SofaTest/Python_test.h API to be executed automatically Note that arguments can be given, so the same script can be called with several parameters (accessible as argc/argv on the python side). Have a look to SofaTest_test for an example.</p>"},{"location":"50_Contributing_to_SOFA/20_Writing_tests/#investigating-failures","title":"Investigating failures","text":"<p>Regressions typically break a couple of tests, but not all of them. To investigate, you generally want to run these tests only. Moreover, you typically need to modify these, by adding some debug prints or changing parameters. To avoid damaging the test suite, it is a good idea to clone it and work on the cloned version. Assuming that you are investigating test failures in SomePlugin/SomePlugin_test, you can apply the following steps:</p> <ol> <li>copy SomePlugin/SomePlugin_test to SomePlugin/SomePluginTMP_test     or any other name ending up with _test.</li> <li>move to this directory and edit CMakeLists.txt to remove all the     test files you do not need</li> <li>update you Sofa project/solution by running cmake as you usually do;     the new test directory will automatically be included in your     project/solution if its name ends up with _test</li> <li>modify the test as needed, and fix the problems</li> <li>update the original tests if necessary</li> <li>check that the original tests are successful</li> </ol> <p>Feel free to add new tests to the original test suite, but think twice before modifying an existing test: this might destroy its ability to detect other problems.</p>"},{"location":"50_Contributing_to_SOFA/30_Writing_doc/","title":"Writing doc","text":"<p>In order to allow anyone in the community to help us improve the documentation, this doc is open-source and available on GitHub. Feel free edit it directly on GitHub:</p> <ul> <li>Click on the \"Edit on GitHub\" button, available on each documentation page</li> <li>Make your update / suggestion</li> </ul> <p>Any feedback is always welcome!</p> <p></p>"},{"location":"50_Contributing_to_SOFA/40_Continuous_integration/","title":"Continuous integration","text":"<p>Each commit or pull-request is built and tested using Jenkins. You can find the Jenkins platform for continuous integration here:</p> <p> [**Continuous Integration Platform**](https://ci.inria.fr/sofa-ci-dev/) </p> <p>A dashboard presents all the SOFA builds. You can find this interface here:</p> <p> [**Dashboard**](http://www.sofa-framework.org/dash/) </p>"},{"location":"50_Contributing_to_SOFA/45_Lifecycle_mechanisms/","title":"Lifecycle mechanisms","text":"<p>This page aims at detailing the steps to follow when moving, renaming or removing code in SOFA. It focuses on: components and data field.</p>"},{"location":"50_Contributing_to_SOFA/45_Lifecycle_mechanisms/#components","title":"Components","text":""},{"location":"50_Contributing_to_SOFA/45_Lifecycle_mechanisms/#moving-a-component-to-another-module","title":"Moving a Component to another module","text":"Steps Dev-oriented changes Users-oriented changes Do the move Deprecation(6 months) <ul> <li>Keep a compatibility header (with same old name and path)</li> <li>in the header, include new header</li> <li>add macro <code>SOFA_DEPRECATED_HEADER</code></li> </ul> <ul><li>Add as CreatableMoved() in deprecatedComponents in ComponentChange</li></ul> Deletion(6 months) <ul><li>In the old compatibility header, change the macro for <code>SOFA_DISABLED_HEADER</code></li></ul> <ul><li>Change to Removed() and move to uncreatableComponents in ComponentChange</li></ul> Cleanup <ul> <li>Erase the class</li> <li>Erase the alias</li> </ul> <ul><li>Erase the ComponentChange entry in ComponentChange</li></ul>"},{"location":"50_Contributing_to_SOFA/45_Lifecycle_mechanisms/#renaming-a-component","title":"Renaming a Component","text":"Steps Dev-oriented changes Users-oriented changes Do the renaming Deprecation(6 months) <ul> <li>Let an empty header with old name including the new file</li> <li>Add a C++ alias for the component name</li> <li>Add a macro <code>SOFA_ATTRIBUTE_DEPRECATED</code> on this alias</li> </ul> <ul> <li>Add a SOFA alias to OldName in RegisterObject in the component's registration to the factory</li> <li>Add the SOFA alias as Deprecated() in deprecatedComponents in ComponentChange</li> </ul> Renaming(6 months) <ul> <li>Change the C++ alias to be on DeprecatedOrRemoved in the component class</li> <li>Change the macro for <code>SOFA_ATTRIBUTE_DISABLED</code></li> </ul> <ul> <li>Remove the SOFA alias in the component's registration to the factory</li> <li>change the SOFA alias to Renamed() and move to uncreatableComponents in ComponentChange</li> </ul> Cleanup <ul><li>Remove the C++ alias in the component class</li></ul>"},{"location":"50_Contributing_to_SOFA/45_Lifecycle_mechanisms/#removing-a-component","title":"Removing a Component","text":"Steps Dev-oriented changes Users-oriented changes Deprecation(6 months) <ul><li>use a macro to deprecate the class <code>SOFA_DEPRECATED_HEADER_NOT_REPLACED</code></li></ul> <ul><li>Add as Deprecated() in deprecatedComponents in ComponentChange</li></ul> Deletion(6 months) <ul><li>Empty the class and use the macro <code>SOFA_DISABLED_HEADER_NOT_REPLACED</code></li></ul> <ul><li>Change to Removed() and move to uncreatableComponents in ComponentChange</li></ul> Cleanup <ul> <li>Delete the class</li> <li>Update the associated CMakeLists</li> </ul>"},{"location":"50_Contributing_to_SOFA/45_Lifecycle_mechanisms/#datafields","title":"Datafields","text":"<p>This section relies a lot on the DeprecatedData and RemovedData mechanism, introduced in #3934.</p>"},{"location":"50_Contributing_to_SOFA/45_Lifecycle_mechanisms/#renaming-a-datafield","title":"Renaming a Datafield","text":"Steps Dev-oriented changes Users-oriented changes Do the renaming Deprecation(6 months) <ul><li>Use a fake DeprecatedData with the old datafield name in the component class</li></ul> <ul><li>Update all scenes using the data</li></ul> Renaming(6 months) <ul><li>Replace the DeprecatedData with RemovedData in the component class</li></ul> Cleanup <ul><li>Remove the RemovedData member in the component class</li></ul>"},{"location":"50_Contributing_to_SOFA/45_Lifecycle_mechanisms/#removing-a-datafield","title":"Removing a Datafield","text":"Steps Dev-oriented changes Users-oriented changes Deprecation(6 months) <ul> <li>Use a fake DeprecatedData in the component class</li> <li>Remove all references to this Data in whole codebase</li> </ul> <ul><li>Update all scenes using the data</li></ul> Deletion(6 months) <ul><li>Replace the DeprecatedData with RemovedData in the component class</li></ul> Cleanup(6 months) <ul><li>Remove the RemovedData member in the component class</li></ul>"},{"location":"50_Contributing_to_SOFA/45_Lifecycle_mechanisms/#changing-data-default-value","title":"Changing Data default value","text":"<p>As suggested in #3563, when the default value of a Data is changed the following warning should be added in the <code>init()</code> function:</p> <pre><code>msg_warning_when(!d_dataName.isSet()) &lt;&lt; \"The default value of the Data \" &lt;&lt; d_dataName.getName() &lt;&lt; \" changed in v23.06 from 0.3 to 0.45.\";\n</code></pre>"},{"location":"50_Contributing_to_SOFA/50_Add_your_paper_on_HAL/","title":"Add your paper on HAL","text":"<p>You want your papers, which rely on SOFA, to be listed on our website? Just follow the following explanations for HAL.</p> <p></p>"},{"location":"50_Contributing_to_SOFA/50_Add_your_paper_on_HAL/#case-1-add-a-new-paper-on-hal","title":"Case 1 - add a new paper on HAL","text":"<p>First, go on the HAL portal and log in. Follow carefully the following steps: The upload process starts by clicking on \"Submit\":</p> <ul> <li>choose the type of paper (poster, conference or journal ..)</li> <li>upload the compulsory documents:<ul> <li>the PDF document,</li> <li>videos, or others supplementary data, if any,</li> <li>one or several images: do not forget to define one image as primary as shown in the following image.</li> </ul> </li> </ul> <p></p> <p>Specify one image as \"Primary\"</p> <ul> <li>check the automatic formatting (title, summary of the work, keywords, information about the conference/journal, etc.),</li> <li>add \"SOFA\" in the field \"Collaboration/Project\",</li> <li>add the authors,</li> <li>check the overall information and validate it.</li> </ul> <p>It's done ! Your paper will automatically appear in our publication list!</p>"},{"location":"50_Contributing_to_SOFA/50_Add_your_paper_on_HAL/#case-2-list-a-former-paper","title":"Case 2 - list a former paper","text":"<p>If you already uploaded your paper on HAL, but you want to refer this paper in our publication list, follow the instruction:</p> <ul> <li>Log in with your HAL account,</li> <li>Edit the metadata of the paper,</li> <li>add \"SOFA\" in the field \"Collaboration/Project\".</li> </ul>"},{"location":"deprecated/15_Tutorial_application/","title":"Tutorial application","text":"<p>NOTE: Every scenes detailed in tutorial can also be launched using the runSofa application directly.</p>"},{"location":"deprecated/15_Tutorial_application/#tutorial-application","title":"Tutorial Application","text":"<p>The source file of SOFA Tutorials is found in folder <code>SOFA_DIR/examples/Tutorials</code> The Tutorial Application is embedded inside the SOFA Modeler. To launch it, first launch Modeler, and then go to the Tutorial Menu, or simply click on its icon. [caption id=\"attachment_1164\" align=\"aligncenter\" width=\"500\"] {.wp-image-1164 width=\"500\" height=\"311\"} Launch the Tutorial in Modeler [/caption] Once launched, it looks like: [caption id=\"attachment_1209\" align=\"aligncenter\" width=\"500\"] {.wp-image-1209 width=\"500\" height=\"313\"} The Tutorials [/caption] Initially, it is composed of two parts, from left to right:</p> <ul> <li>A Tutorial Selector: we can choose different categories of the     Tutorials: Step by Step, Collision, ForceFields, Mappings, ... or     the whole SOFA Tutorials \"All Sofa Tutorials\".</li> <li>A HTML based description: a brief description of the     corresponding category.</li> </ul> <p>When a category (e.g Step by Step) is chosen and if we double click on a component of that category, the third part appears:</p> <ul> <li>A SOFA Scene-Graph: the representation of SOFA components. You     can modify/delete a component by right clicking on that component.     You can also add another component to the scene graph by clicking on     \"Edit in Modeler\". In Modeler you can run the scene using SOFA (see     Modeler)</li> </ul> <p>[caption id=\"attachment_1241\" align=\"aligncenter\" width=\"500\"] {.wp-image-1241 width=\"500\" height=\"312\"} Modify/delete a component in SOFA scene-graph or add a component in Modeler [/caption]</p>"},{"location":"deprecated/Detection_Ray_tracing/","title":"Collisions Detection: Ray tracing","text":"<p>The RayTraceDetection component belongs to the category of Collision Detection. This method traces a ray for each point in one object following the opposite of the point's normal up to find a triangle in the other object. Both triangles are tested to evaluate if they are in a colliding state. </p> <p>It must be used with a TriangleOctreeModel, as an octree is used to traverse the object.</p>"},{"location":"deprecated/Detection_Ray_tracing/#preliminary-phase","title":"Preliminary phase","text":"<p>Before starting the broad phase, two steps are therefore required before the brute force detection starts:</p> <ul> <li>all present collision models in the scene must be listed. This is done in the function <code>void PipelineImpl::computeCollisionDetection()</code>  with: <pre><code>root-&gt;getTreeObjects&lt;CollisionModel&gt; (&amp;collisionModels);\n</code></pre></li> <li>RayTraceDetection does not create a BVH but an Octree. This specific collision model is using a triangular mesh and maps it to an Octree with CubeModels. This is done by each TriangleOctreeModel in the scene in the function:  <pre><code>computeBoundingTree(maxDepth=0);\n</code></pre></li> </ul>"},{"location":"deprecated/Detection_Ray_tracing/#broad-phase","title":"Broad phase","text":"<p>The hierarchy is browsed, and the intersection between pairs of CubeModels is tested (using the intersection method in the scene). If a collision is detected, the models are adding in the <code>cmPair</code> vector, containing potentially colliding pairs. This is done in the <code>addCollisionModel()</code> function. The detection between bounding volumes (CubeModel) is performed using intersection method defined in the scene.</p>"},{"location":"deprecated/Detection_Ray_tracing/#narrow-phase","title":"Narrow phase","text":"<p>The CollisionModel at the lowest level is saved, in this case it must be a TriangleOctreeModel. If the octree would not be constructed already, build it. Then, rays are traced against the TriangleOctreeModel. Distances computed with the ray indicates if a collision occurs between the pair of TriangleOctreeModels. Finally, the DetectionOutput vector containing elements of TriangleOctreeModels in collision is returned, as well as the contact points on the triangle of each model.</p>"},{"location":"deprecated/Detection_Ray_tracing/#sequence-diagram","title":"Sequence diagram","text":""},{"location":"deprecated/Python2_Data_wrapping/","title":"Python2 Data wrapping","text":""},{"location":"deprecated/Python2_Data_wrapping/#wrap-your-own-data-types-for-python","title":"Wrap your own Data types for Python","text":"<p>If you are using SofaPython to create your scenes, you are probably interested in accessing your component's data fields and reading / writing their values from python, as done in the example below:</p> <pre><code> # Modify a scalar data field from Python\n  self.myComponent.findData('integerValue').value = 1\n\n # Modify a complex data field from Python\n  self.myMecaObject.findData('position').value=str(x)+' '+str(y)+' '+str(z)+' 0 0 0 1'\n</code></pre> <p>This is possible, because the Data <code>integerValue</code> from <code>myComponent</code> is a scalar, and SofaPython provides natively the access to those Data types. In addition to Scalars, SofaPython also provides a python wrapper for more complex types such as <code>defaulttype::Vec&lt;T, real&gt;</code> or <code>defaulttype::Matrix&lt;T&gt;</code>, but also containers classes such as <code>helper::vector</code> or <code>helper::SVector</code> for instance.</p> <p>In order to get python support for your custom Data types, you will need to implement bindings for your custom type. This is done by:</p> <ol> <li>Implementing data / methods accessors and bindings in CPython</li> <li>Declaring and Registering your bindings to SOFA's Python Factory</li> </ol> <p>As an example, we will consider the native Sofa type <code>DataFileName</code>, whose bindings are implemented in the SofaPython plugin. In any case, it is very informative to look into the \"native\" binding implementations present in the SofaPython plugin.</p> <p>An overview of the complete code for this example can be found at the end of this page.</p>"},{"location":"deprecated/Python2_Data_wrapping/#implementing-data-methods-accessors-and-bindings-in-cpython","title":"Implementing data / methods accessors and bindings in CPython","text":"<p>Custom types are extended to python using the <code>SP_DECLARE_CLASS_TYPE</code> macro declared in <code>PythonMacros.h</code> All python macros are prefixed with SP_</p> <pre><code>#include \"PythonMacros.h\"\n#include &lt;sofa/core/objectmodel/DataFileName.h&gt;\nSP_DECLARE_CLASS_TYPE(DataFileName)\n</code></pre> <p>Then a CPython getter is implemented, to retrieve the data structure's instance pointer in Python:</p> <pre><code>/// getting a DataFileName* from a PyObject*\nstatic inline DataFileName* get_DataFileName(PyObject* obj) {\n    return sofa::py::unwrap&lt;DataFileName&gt;(obj);\n}\n</code></pre> <p>Getters / Setters are implemented to read attribute values from the DataFileName structure (fullPath and relativePath):</p> <pre><code>/// read accessor for fullPath\nSP_CLASS_ATTR_GET(DataFileName, fullPath)(PyObject *self, void*)\n{\n    DataFileName* dataFilename = get_DataFileName( self );;\n    return PyString_FromString(dataFilename-&gt;getFullPath().c_str());\n}\n\nSP_CLASS_ATTR_SET(DataFileName, fullPath)(PyObject */*self*/, PyObject * /*args*/, void*)\n{\n    SP_MESSAGE_ERROR(\"fullPath attribute is read only\")\n        PyErr_BadArgument();\n    return -1;\n}\n\n/// read accessor for relativePath\nSP_CLASS_ATTR_GET(DataFileName, relativePath)(PyObject *self, void*)\n{\n    DataFileName* dataFilename = get_DataFileName( self );;\n    return PyString_FromString(dataFilename-&gt;getRelativePath().c_str());\n}\n\nSP_CLASS_ATTR_SET(DataFileName, relativePath)(PyObject */*self*/, PyObject * /*args*/, void*)\n{\n    SP_MESSAGE_ERROR(\"relativePath attribute is read only\")\n        PyErr_BadArgument();\n    return -1;\n}\n</code></pre> <p>These functions will make the values fullPath and relativePath accessible from python as such:</p> <pre><code>print myComponent.myDatFileName.fullPath\nprint myComponent.myDatFileName.relativePath\n</code></pre> <p>Once implemented, these methods must be passed to cPython in a structure called <code>PyGetSetDef</code> that defines the property access. This is encapsulated inside macros in Sofa, and done using the following code:</p> <pre><code>SP_CLASS_ATTRS_BEGIN(DataFileName) // Open Attributes declaration\nSP_CLASS_ATTR(DataFileName,fullPath) // declare attribute fullPath and references both the getter and setter method for this attribute\nSP_CLASS_ATTR(DataFileName,relativePath) // declare attribute relativePath and references both the getter and setter method for this attribute\nSP_CLASS_ATTRS_END // close Attributes declaration\n\n// The same can be done for methods, if you want any to be accessed from python:\nSP_CLASS_METHODS_BEGIN(DataFileName)\nSP_CLASS_METHODS_END\n</code></pre> <p>Finally, the whole class type must be declared. Depending on the complexity of the binding of your class type (without any attributes, with attributes and methods, with inheritance, with constructor / destructor etc..)</p> <p>For our DataFileName type, we will use the following definition macro: <pre><code>SP_CLASS_TYPE_PTR_ATTR(DataFileName, BaseData, Data);\n</code></pre> All those macros are declared in PythonMacros.h</p>"},{"location":"deprecated/Python2_Data_wrapping/#declaring-and-registering-your-bindings-to-sofas-python-factory","title":"Declaring and Registering your bindings to SOFA's Python Factory","text":"<p>Now that you implemented your python bindings, you will need to register them to SOFA's python object factory, to make them available in your python scripts. This is done in the plugin's external modules initialization function (usually in a \"initplugin.cpp\" file):</p> <pre><code>#ifdef SOFA_HAVE_SOFAPYTHON\n#include &lt;SofaPython/PythonFactory.h&gt;\n#include \"Binding_DataFileName.h\"\n#endif\n\n[...]\n\nvoid initExternalModule()\n{\n  static bool first = true;\n  if (first)\n  {\n    first = false;\n#ifdef SOFA_HAVE_SOFAPYTHON\n    if (PythonFactory::s_sofaPythonModule)\n    {\n      simulation::PythonEnvironment::gil lock(__func__);\n\n      // adding new bindings for Data&lt;DataFileName&gt;\n      SP_ADD_CLASS_IN_FACTORY(DataFileName, sofa::Data&lt;DataFileName&gt;)\n    }\n#endif\n  }\n}\n</code></pre> <p>Here's the complete code for this example:</p> <p>Binding_DataFileName.h</p> <pre><code>#ifndef BINDING_DataFileName_H\n#define BINDING_DataFileName_H\n\n#include \"PythonMacros.h\"\n#include &lt;sofa/core/objectmodel/DataFileName.h&gt;\n\nSP_DECLARE_CLASS_TYPE(DataFileName)\n\n#endif\n</code></pre> <p>Binding_DataFileName.cpp</p> <pre><code>#include \"Binding_DataFileName.h\"\n#include \"Binding_Data.h\"\n#include \"PythonToSofa.inl\"\n\n\nusing namespace sofa::core::objectmodel;\n\n/// getting a DataFileName* from a PyObject*\nstatic inline DataFileName* get_DataFileName(PyObject* obj) {\n    return sofa::py::unwrap&lt;DataFileName&gt;(obj);\n}\n\n\nSP_CLASS_ATTR_GET(DataFileName, fullPath)(PyObject *self, void*)\n{\n    DataFileName* dataFilename = get_DataFileName( self );;\n    return PyString_FromString(dataFilename-&gt;getFullPath().c_str());\n}\n\n\nSP_CLASS_ATTR_SET(DataFileName, fullPath)(PyObject */*self*/, PyObject * /*args*/, void*)\n{\n    SP_MESSAGE_ERROR(\"fullPath attribute is read only\")\n        PyErr_BadArgument();\n    return -1;\n}\n\n\nSP_CLASS_ATTR_GET(DataFileName, relativePath)(PyObject *self, void*)\n{\n    DataFileName* dataFilename = get_DataFileName( self );;\n    return PyString_FromString(dataFilename-&gt;getRelativePath().c_str());\n}\n\n\nSP_CLASS_ATTR_SET(DataFileName, relativePath)(PyObject */*self*/, PyObject * /*args*/, void*)\n{\n    SP_MESSAGE_ERROR(\"relativePath attribute is read only\")\n        PyErr_BadArgument();\n    return -1;\n}\n\n\nSP_CLASS_ATTRS_BEGIN(DataFileName)\nSP_CLASS_ATTR(DataFileName,fullPath)\nSP_CLASS_ATTR(DataFileName,relativePath)\nSP_CLASS_ATTRS_END\n\n\nSP_CLASS_METHODS_BEGIN(DataFileName)\nSP_CLASS_METHODS_END\n\nSP_CLASS_TYPE_PTR_ATTR(DataFileName, BaseData, Data);\n</code></pre> <p>initplugin.cpp</p> <pre><code>/// initplugin.cpp\n#include &lt;SofaPython/PythonFactory.h&gt;\n#include \"Binding_DataFileName.h\"\n\nvoid initExternalModule()\n{\n  static bool first = true;\n  if (first)\n  {\n    first = false;\n#ifdef SOFA_HAVE_SOFAPYTHON\n    if (PythonFactory::s_sofaPythonModule)\n    {\n      simulation::PythonEnvironment::gil lock(__func__);\n\n      // adding new bindings for Data&lt;DataFileName&gt;\n      SP_ADD_CLASS_IN_FACTORY(DataFileName, sofa::Data&lt;DataFileName&gt;)\n    }\n#endif\n  }\n}\n</code></pre>"},{"location":"deprecated/Python2_scripting/","title":"Python2 scripting","text":""},{"location":"deprecated/Python2_scripting/#installation-the-sofapython-plugin","title":"Installation the SofaPython plugin","text":"<p>First, you need to have the python-2.7 library installed. After installing and compiling SOFA, you have to:</p> <ul> <li>re-run the cmake-gui</li> <li>and activate the SOFA-PLUGIN_SOFAPYTHON option, and configure,</li> <li>Finally, recompile SOFA.</li> </ul>"},{"location":"deprecated/Python2_scripting/#test-the-plugin-using-examples","title":"Test the plugin using examples","text":"<p>Once you activated the SofaPython plugin, you can test the compilation using the examples available in the folder of SofaPython/examples/. For example, start the fontain.scn scene:</p> <pre><code>runSofa applications/plugins/SofaPython/examples/fontain.scn\n</code></pre> <p>This scene creates particles from the associated Python script (fontain.py). Here is a preview of the working scene. [caption id=\"attachment_1688\" align=\"aligncenter\" width=\"600\"]{.wp-image-1688 width=\"600\" height=\"425\"} Screenshot of the scene fontain.scn[/caption] \u00a0</p>"},{"location":"deprecated/Python2_scripting/#write-your-own-python","title":"Write your own python !","text":""},{"location":"deprecated/Python2_scripting/#from-scratch","title":"From scratch","text":"<p>In your scene, if you want to use Python in one of your scene (fontain.scn), you need:</p> <ul> <li>in the first place add the plugin in the scene using the     RequiredPlugin,</li> <li>and define a PythonScriptController in the scene graph.</li> </ul> <p>Most of the time, this PythonScriptController is placed inside the root node as illustrated in the example \"fontain.scn\" below:</p> <pre><code>    ...\n</code></pre> <p>The core of this plugin is the Sofa Python module available to python scripts from within the SofaPython components (they are not available outside Sofa environment, in the command-line python binary for example). ** style=\"text-decoration: underline;\"&gt;Any python script** (fontain.py) embedded in SOFA should include the following line if it wants to interact with the SOFA framework:</p> <pre><code>import sofa\n</code></pre> <p>SofaPython provides several module methods, for general purpose (not linked to a particular node or component). For example:</p> <ul> <li>createGraph(): allows to access the time at which the graph is     created,</li> <li>reset(): when the scene is reset</li> <li>onKeyPressed(): allows to recover any user interaction, for     example with the keyboard,</li> <li>and many other functions.</li> </ul> <p>The following small example gives an idea on the various possibilities of the sofa python plugin. In any of the module methods (presented above), you can:</p> <ul> <li> <p>have access to a node (here in the function initGraph):</p> <pre><code>def initGraph(self,node):\n        print 'the name of the node is'+node.name\n        self.root = node\n</code></pre> </li> <li> <p>interactively create new components with specific parameters in the     node:</p> <pre><code>def initGraph(self,node):\n        print 'the name of the node is'+node.name\n        self.root = node\n        myLoader = self.root.createObject('CGLinearSolver',iterations=25,tolerance=1.0e-9,threshold=1.0e-9)\n</code></pre> </li> <li> <p>even access an existing component (named 'MecaObject') in the node:</p> <pre><code>def initGraph(self,node):\n        print 'the name of the node is'+node.name\n        self.root = node\n        self.myMecaObject = node.getObject('MecaObject')\n</code></pre> </li> <li> <p>and access/modify its properties:</p> <pre><code>def initGraph(self,node):\n        print 'the name of the node is'+node.name\n        self.root = node\n        self.myMecaObject = node.getObject('MecaObject')\n        # Access data\n        print 'my positions are : '+self.myMecaObject.findData('position').value\n        # Modify data\n        self.myMecaObject.findData('position').value=str(x)+' '+str(y)+' '+str(z)+' 0 0 0 1'\n</code></pre> </li> </ul> <p>You see ! Python is unlimited !! \u00a0</p>"},{"location":"deprecated/Python2_scripting/#translate-an-existing-scene-in-a-python-script","title":"Translate an existing scene in a python script","text":"<p>In the Python plugin in SOFA, you will find an executable ./scn2python.py which allows to translate an existing scene (e.g. myExample.scn) into a SOFA python scene (e.g. myExamplePython.py). This is very useful since it generates a script with ALL possible functions that you can use in SOFA such as init(), handleEvent(), onKeyPressed() an so on. Optional arguments:</p> <pre><code>-h, --help      show this help message and exit\n-n [N]          Node to replace by python script, if equals None the\n              complete scene is replaced by a python script (default:\n              None)\n-o [O [O ...]]  Filename(s) of the transformed scene(s), if equals None the script generates the output filename(s) by adding Python to the input filenames (default: None)\n-s              Output .scn and .py file (default: 0)\n</code></pre> <p>When specifying -s or by specifying the node to replace in the command line, you will generate a scene (e.g. myExamplePython.scn) which includes a PythonScriptController in the scene. This controller then uses the information of the created script (e.g. myExamplePython.py) to define the scene, its components, etc. . Thus the xml and/or the php representation of a scene can be combined with a python scene. To improve the legibility of the scene and to allow python to access all components, the usage via the xml scene should only be considered when necessary.</p>"},{"location":"deprecated/Python2_scripting/#python-scenes-with-command-line-arguments","title":"Python scenes with command line arguments","text":"<p>It might be interesting to have a scene, that only changes considering a few parameters. An example is a convergence analysis, where the scene stays in general the same, but the input mesh changes. In order to allow for such a control from the command line, our python module uses an additional command line parameter: arguments given after --argv are then one of the arguments of the init function for the class of a scene. For the access in all member functions this argument can be saved as a global variable, similar to</p> <pre><code>class caduceus (Sofa.PythonScriptController):\n    def __init__(self, node, commandLineArguments) : \n        self.commandLineArguments = commandLineArguments\n</code></pre> <p>Even if a command line argument is a number, it will be represented as a string in the commandLineArguments. In order to transform a string to a number it can be combined with ast.literal_eval.</p> <p>The scn2python.py script automatically introduces this variable. That means, for a concrete example, you can transform the standard Sofa scene to a python scene using </p> <pre><code>  ./scn2python2.py examples/Demos/caduceus.scn\n</code></pre> <p>Then, when launching the scene with </p> <pre><code>  ./runSofa examples/Demos/caduceusPython.py --argv \"VariableName\" valueNumber valueString\n</code></pre> <p>one can access the command line arguments in the python scene with</p> <pre><code>  variableName = self.commandLineArguments[0]\n  valueNumber = ast.literal_eval(self.commandLineArguments[1])\n  valueString = self.commandLineArguments[2]\n</code></pre> <p>while using ast.literal_eval needs the import ast.</p> <p>More information about the plugin itself can be found in sofa/applications/plugins/SofaPython/doc/SofaPython.pdf.</p>"}]}