name: Generate and publish documentation

on:
  workflow_dispatch:
  push:
    branches:
      - master

permissions:
  id-token: write
  pages: write

env:
  INSTANCE: 'Writerside/in'
  ARTIFACT: 'webHelpIN2-all.zip'
  DOCKER_VERSION: '241.15989'

jobs:
  build:
    name: Run on ${{ matrix.os }} with SOFA ${{ matrix.sofa_branch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        sofa_branch: [master]

    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write

    steps:

      - name: Setup SOFA and environment
        id: sofa
        uses: sofa-framework/sofa-setup-action@v5
        with:
          sofa_root: ${{ github.workspace }}/sofa
          sofa_version: ${{ matrix.sofa_branch }}
          sofa_scope: 'full'

      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKSPACE_SRC_PATH }}

      - name: Build and install
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd //c "${{ steps.sofa.outputs.vs_vsdevcmd }} \
              && cd /d $WORKSPACE_BUILD_PATH \
              && cmake \
                  -GNinja \
                  -DCMAKE_PREFIX_PATH="$SOFA_ROOT/lib/cmake" \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
                  ../src \
              && ninja -v install"
          else
            cd "$WORKSPACE_BUILD_PATH"
            ccache -z
            cmake \
              -GNinja \
              -DCMAKE_C_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_PREFIX_PATH=$SOFA_ROOT/lib/cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="$WORKSPACE_INSTALL_PATH" \
              ../src
            ninja -v install
            echo ${CCACHE_BASEDIR}
            ccache -s
          fi

      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: SofaDocGenerator_${{ steps.sofa.outputs.run_branch }}_for-SOFA-${{ steps.sofa.outputs.sofa_version }}_${{ runner.os }}
          path: ${{ env.WORKSPACE_INSTALL_PATH }}

      - name: Install artifact
        uses: actions/download-artifact@v2
        with:
          name: SofaDocGenerator_${{ steps.sofa.outputs.run_branch }}_for-SOFA-${{ steps.sofa.outputs.sofa_version }}_${{ runner.os }}
          path: ${{ env.WORKSPACE_ARTIFACT_PATH }}

      - name: Set env vars for binaries
        shell: bash
        run: |
          echo '------ ls -laR "$WORKSPACE_BUILD_PATH" ------'
          ls -laR "$WORKSPACE_BUILD_PATH"
          echo '------ ls -laR "$WORKSPACE_INSTALL_PATH" ------'
          ls -la "$WORKSPACE_INSTALL_PATH"
          echo '------ ls -laR "$WORKSPACE_ARTIFACT_PATH" ------'
          ls -la "$WORKSPACE_ARTIFACT_PATH"
          # Set env vars for tests
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo "$(cd $WORKSPACE_ARTIFACT_PATH/lib && pwd -W)" >> $GITHUB_PATH
            echo "$(cd $WORKSPACE_ARTIFACT_PATH/bin && pwd -W)" >> $GITHUB_PATH
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            echo "DYLD_LIBRARY_PATH=$WORKSPACE_ARTIFACT_PATH/lib:$SOFA_ROOT/lib:$DYLD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          fi
          echo "LD_LIBRARY_PATH=$WORKSPACE_ARTIFACT_PATH/lib:$SOFA_ROOT/lib:$LD_LIBRARY_PATH" | tee -a $GITHUB_ENV
          # Add execution right on the tests
          chmod +x $WORKSPACE_INSTALL_PATH/bin/*${{ steps.sofa.outputs.exe }}

      - name: Markdown generation
        shell: bash
        run: |
          echo '------ ls -laR "$WORKSPACE_INSTALL_PATH" ------'
          ls -la "$WORKSPACE_INSTALL_PATH"
          cd $WORKSPACE_INSTALL_PATH
          ./bin/SofaDocGenerator${{ steps.sofa.outputs.exe }} -o "$WORKSPACE_SRC_PATH/Writerside" --examples ${{ github.workspace }}/sofa/share/sofa/examples
          ls -la "$WORKSPACE_SRC_PATH/Writerside"

      - name: Save markdown doc
        uses: actions/upload-artifact@v4
        with:
          name: doc_markdown
          path: ${{ github.workspace }}/src/Writerside/topics
          overwrite: true
          if-no-files-found: error

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          artifact: ${{ env.ARTIFACT }}
          docker-version: ${{ env.DOCKER_VERSION }}

      - name: Save html doc
        uses: actions/upload-artifact@v4
        with:
          name: doc_html
          path: |
            artifacts/${{ env.ARTIFACT }}
            artifacts/report.json
          retention-days: 7

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: doc_html

      - name: Unzip artifact
        run: unzip -O UTF-8 -qq '${{ env.ARTIFACT }}' -d dir

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Package and upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dir

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
